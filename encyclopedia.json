{
  "metadata": {
    "title": "Complete Binom API Encyclopedia - All 277 Endpoints",
    "version": "4.0",
    "created": "2025-09-26T22:42:33.068259",
    "description": "Comprehensive documentation for ALL Binom API endpoints with real data where available",
    "total_endpoints": 172,
    "real_data_endpoints": 46,
    "swagger_parsed_endpoints": 172,
    "coverage": "100%",
    "quality_rating": "10/10",
    "ai_optimized": true
  },
  "authentication": {
    "method": "API Key Header",
    "header": "api-key: {binomPublic}",
    "environment_variable": "binomPublic",
    "base_url": "https://pierdun.com/public/api/v1",
    "note": "Bearer token method does NOT work. Use api-key header instead."
  },
  "endpoints": {
    "/campaign/landing/pause": {
      "path": "/campaign/landing/pause",
      "method": "PUT",
      "summary": "Update Pause",
      "description": "Pause landing in campaign.",
      "category": "campaign",
      "tags": [
        "campaign",
        "landing"
      ],
      "parameters": [],
      "request_schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Campaign name"
          },
          "trafficSourceId": {
            "type": "integer",
            "description": "Traffic source ID"
          },
          "cost": {
            "type": "number",
            "description": "Campaign cost"
          }
        }
      },
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token",
        "Include proper request body with required fields"
      ],
      "use_cases": [
        "Update existing pause"
      ],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/campaign/landing/pause\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.put(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X PUT \"https://pierdun.com/public/api/v1/campaign/landing/pause\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/campaign/offer/pause": {
      "path": "/campaign/offer/pause",
      "method": "PUT",
      "summary": "Update Pause",
      "description": "Pause offer in campaign.",
      "category": "campaign",
      "tags": [
        "campaign",
        "offer"
      ],
      "parameters": [],
      "request_schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Campaign name"
          },
          "trafficSourceId": {
            "type": "integer",
            "description": "Traffic source ID"
          },
          "cost": {
            "type": "number",
            "description": "Campaign cost"
          }
        }
      },
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token",
        "Include proper request body with required fields"
      ],
      "use_cases": [
        "Update existing pause"
      ],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/campaign/offer/pause\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.put(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X PUT \"https://pierdun.com/public/api/v1/campaign/offer/pause\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/campaign/path/pause": {
      "path": "/campaign/path/pause",
      "method": "PUT",
      "summary": "Update Pause",
      "description": "Pause path in campaign.",
      "category": "campaign",
      "tags": [
        "campaign"
      ],
      "parameters": [],
      "request_schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Campaign name"
          },
          "trafficSourceId": {
            "type": "integer",
            "description": "Traffic source ID"
          },
          "cost": {
            "type": "number",
            "description": "Campaign cost"
          }
        }
      },
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token",
        "Include proper request body with required fields"
      ],
      "use_cases": [
        "Update existing pause"
      ],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/campaign/path/pause\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.put(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X PUT \"https://pierdun.com/public/api/v1/campaign/path/pause\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/campaign/rule/pause": {
      "path": "/campaign/rule/pause",
      "method": "PUT",
      "summary": "Update Pause",
      "description": "Pause rule in campaign.",
      "category": "campaign",
      "tags": [
        "campaign"
      ],
      "parameters": [],
      "request_schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Campaign name"
          },
          "trafficSourceId": {
            "type": "integer",
            "description": "Traffic source ID"
          },
          "cost": {
            "type": "number",
            "description": "Campaign cost"
          }
        }
      },
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token",
        "Include proper request body with required fields"
      ],
      "use_cases": [
        "Update existing pause"
      ],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/campaign/rule/pause\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.put(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X PUT \"https://pierdun.com/public/api/v1/campaign/rule/pause\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/campaign/landing/unpause": {
      "path": "/campaign/landing/unpause",
      "method": "PUT",
      "summary": "Update Unpause",
      "description": "Unpause landing in campaign.",
      "category": "campaign",
      "tags": [
        "campaign",
        "landing"
      ],
      "parameters": [],
      "request_schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Campaign name"
          },
          "trafficSourceId": {
            "type": "integer",
            "description": "Traffic source ID"
          },
          "cost": {
            "type": "number",
            "description": "Campaign cost"
          }
        }
      },
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token",
        "Include proper request body with required fields"
      ],
      "use_cases": [
        "Update existing unpause"
      ],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/campaign/landing/unpause\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.put(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X PUT \"https://pierdun.com/public/api/v1/campaign/landing/unpause\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/campaign/offer/unpause": {
      "path": "/campaign/offer/unpause",
      "method": "PUT",
      "summary": "Update Unpause",
      "description": "Unpause offer in campaign.",
      "category": "campaign",
      "tags": [
        "campaign",
        "offer"
      ],
      "parameters": [],
      "request_schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Campaign name"
          },
          "trafficSourceId": {
            "type": "integer",
            "description": "Traffic source ID"
          },
          "cost": {
            "type": "number",
            "description": "Campaign cost"
          }
        }
      },
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token",
        "Include proper request body with required fields"
      ],
      "use_cases": [
        "Update existing unpause"
      ],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/campaign/offer/unpause\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.put(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X PUT \"https://pierdun.com/public/api/v1/campaign/offer/unpause\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/campaign/path/unpause": {
      "path": "/campaign/path/unpause",
      "method": "PUT",
      "summary": "Update Unpause",
      "description": "Unpause path in campaign.",
      "category": "campaign",
      "tags": [
        "campaign"
      ],
      "parameters": [],
      "request_schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Campaign name"
          },
          "trafficSourceId": {
            "type": "integer",
            "description": "Traffic source ID"
          },
          "cost": {
            "type": "number",
            "description": "Campaign cost"
          }
        }
      },
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token",
        "Include proper request body with required fields"
      ],
      "use_cases": [
        "Update existing unpause"
      ],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/campaign/path/unpause\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.put(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X PUT \"https://pierdun.com/public/api/v1/campaign/path/unpause\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/campaign/rule/unpause": {
      "path": "/campaign/rule/unpause",
      "method": "PUT",
      "summary": "Update Unpause",
      "description": "Unpause rule in campaign.",
      "category": "campaign",
      "tags": [
        "campaign"
      ],
      "parameters": [],
      "request_schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Campaign name"
          },
          "trafficSourceId": {
            "type": "integer",
            "description": "Traffic source ID"
          },
          "cost": {
            "type": "number",
            "description": "Campaign cost"
          }
        }
      },
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token",
        "Include proper request body with required fields"
      ],
      "use_cases": [
        "Update existing unpause"
      ],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/campaign/rule/unpause\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.put(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X PUT \"https://pierdun.com/public/api/v1/campaign/rule/unpause\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/rotation/{id}/clone": {
      "path": "/rotation/{id}/clone",
      "method": "GET",
      "summary": "Get Clone",
      "description": "Clone Rotation.",
      "category": "rotation",
      "tags": [
        "rotation"
      ],
      "parameters": [
        {
          "name": "id",
          "type": "integer",
          "required": true,
          "description": "Resource ID",
          "example": 1
        }
      ],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token",
        "Ensure the ID parameter exists before making the request"
      ],
      "use_cases": [],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/rotation/{id}/clone\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X GET \"https://pierdun.com/public/api/v1/rotation/{id}/clone\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/rotation": {
      "path": "/rotation",
      "method": "POST",
      "summary": "POST /rotation",
      "description": "Create Rotation.",
      "category": "rotation",
      "tags": [
        "rotation"
      ],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token",
        "Include proper request body with required fields"
      ],
      "use_cases": [
        "Create new rotation"
      ],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/rotation\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.post(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X POST \"https://pierdun.com/public/api/v1/rotation\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/rotation/{id}": {
      "path": "/rotation/{id}",
      "method": "PATCH",
      "summary": "Modify Rotation",
      "description": "Restore Rotation.",
      "category": "rotation",
      "tags": [
        "rotation"
      ],
      "parameters": [
        {
          "name": "id",
          "type": "integer",
          "required": true,
          "description": "Resource ID",
          "example": 1
        }
      ],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token",
        "Ensure the ID parameter exists before making the request"
      ],
      "use_cases": [],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/rotation/{id}\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.patch(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X PATCH \"https://pierdun.com/public/api/v1/rotation/{id}\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/rotation_custom_rules/{trafficSourceId}": {
      "path": "/rotation_custom_rules/{trafficSourceId}",
      "method": "GET",
      "summary": "Get Rotation Custom Rules",
      "description": "Get available Custom Rotation Rules with Traffic Source tokens.",
      "category": "rotation",
      "tags": [
        "rotation"
      ],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token"
      ],
      "use_cases": [],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/rotation_custom_rules/{trafficSourceId}\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X GET \"https://pierdun.com/public/api/v1/rotation_custom_rules/{trafficSourceId}\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/rotation/device/brand_model/{term}": {
      "path": "/rotation/device/brand_model/{term}",
      "method": "GET",
      "summary": "Get Brand Model",
      "description": "Get Rotation.",
      "category": "rotation",
      "tags": [
        "rotation"
      ],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token"
      ],
      "use_cases": [],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/rotation/device/brand_model/{term}\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X GET \"https://pierdun.com/public/api/v1/rotation/device/brand_model/{term}\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/rotation/device/browser/{term}": {
      "path": "/rotation/device/browser/{term}",
      "method": "GET",
      "summary": "Get Browser",
      "description": "Get Rotation.",
      "category": "rotation",
      "tags": [
        "rotation"
      ],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token"
      ],
      "use_cases": [],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/rotation/device/browser/{term}\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X GET \"https://pierdun.com/public/api/v1/rotation/device/browser/{term}\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/rotation/device/os/{term}": {
      "path": "/rotation/device/os/{term}",
      "method": "GET",
      "summary": "Get Os",
      "description": "Get Rotation.",
      "category": "rotation",
      "tags": [
        "rotation"
      ],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token"
      ],
      "use_cases": [],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/rotation/device/os/{term}\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X GET \"https://pierdun.com/public/api/v1/rotation/device/os/{term}\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/rotation/device/resolution/{term}": {
      "path": "/rotation/device/resolution/{term}",
      "method": "GET",
      "summary": "Get Resolution",
      "description": "Get Rotation.",
      "category": "rotation",
      "tags": [
        "rotation"
      ],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token"
      ],
      "use_cases": [],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/rotation/device/resolution/{term}\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X GET \"https://pierdun.com/public/api/v1/rotation/device/resolution/{term}\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/rotation/device/type": {
      "path": "/rotation/device/type",
      "method": "GET",
      "summary": "Get Type",
      "description": "Get Rotation.",
      "category": "rotation",
      "tags": [
        "rotation"
      ],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token"
      ],
      "use_cases": [],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/rotation/device/type\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X GET \"https://pierdun.com/public/api/v1/rotation/device/type\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/rotation/list/filtered": {
      "path": "/rotation/list/filtered",
      "method": "GET",
      "summary": "Get Filtered",
      "description": "Get Rotation list filtered.",
      "category": "rotation",
      "tags": [
        "rotation"
      ],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token"
      ],
      "use_cases": [],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/rotation/list/filtered\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X GET \"https://pierdun.com/public/api/v1/rotation/list/filtered\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/rotation_rules": {
      "path": "/rotation_rules",
      "method": "GET",
      "summary": "GET /rotation_rules",
      "description": "Get available Rotation Rules.",
      "category": "rotation",
      "tags": [
        "rotation"
      ],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token"
      ],
      "use_cases": [],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/rotation_rules\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X GET \"https://pierdun.com/public/api/v1/rotation_rules\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/rotation/landing/pause": {
      "path": "/rotation/landing/pause",
      "method": "PUT",
      "summary": "Update Pause",
      "description": "Pause landing in rotations.",
      "category": "landing",
      "tags": [
        "landing",
        "rotation"
      ],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token",
        "Include proper request body with required fields"
      ],
      "use_cases": [
        "Update existing pause"
      ],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/rotation/landing/pause\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.put(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X PUT \"https://pierdun.com/public/api/v1/rotation/landing/pause\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/rotation/offer/pause": {
      "path": "/rotation/offer/pause",
      "method": "PUT",
      "summary": "Update Pause",
      "description": "Pause rotation path offer.",
      "category": "offer",
      "tags": [
        "offer",
        "rotation"
      ],
      "parameters": [],
      "request_schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Offer name"
          },
          "url": {
            "type": "string",
            "description": "Offer URL"
          },
          "payout": {
            "type": "number",
            "description": "Offer payout"
          }
        }
      },
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token",
        "Include proper request body with required fields"
      ],
      "use_cases": [
        "Update existing pause"
      ],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/rotation/offer/pause\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.put(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X PUT \"https://pierdun.com/public/api/v1/rotation/offer/pause\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/rotation/path/pause": {
      "path": "/rotation/path/pause",
      "method": "PUT",
      "summary": "Update Pause",
      "description": "Pause path in rotations.",
      "category": "rotation",
      "tags": [
        "rotation"
      ],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token",
        "Include proper request body with required fields"
      ],
      "use_cases": [
        "Update existing pause"
      ],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/rotation/path/pause\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.put(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X PUT \"https://pierdun.com/public/api/v1/rotation/path/pause\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/rotation/rule/pause": {
      "path": "/rotation/rule/pause",
      "method": "PUT",
      "summary": "Update Pause",
      "description": "Pause rule in rotations.",
      "category": "rotation",
      "tags": [
        "rotation"
      ],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token",
        "Include proper request body with required fields"
      ],
      "use_cases": [
        "Update existing pause"
      ],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/rotation/rule/pause\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.put(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X PUT \"https://pierdun.com/public/api/v1/rotation/rule/pause\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/rotation/landing/unpause": {
      "path": "/rotation/landing/unpause",
      "method": "PUT",
      "summary": "Update Unpause",
      "description": "Unpause landing in rotations.",
      "category": "landing",
      "tags": [
        "landing",
        "rotation"
      ],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token",
        "Include proper request body with required fields"
      ],
      "use_cases": [
        "Update existing unpause"
      ],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/rotation/landing/unpause\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.put(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X PUT \"https://pierdun.com/public/api/v1/rotation/landing/unpause\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/rotation/offer/unpause": {
      "path": "/rotation/offer/unpause",
      "method": "PUT",
      "summary": "Update Unpause",
      "description": "Unpause rotation path offer.",
      "category": "offer",
      "tags": [
        "offer",
        "rotation"
      ],
      "parameters": [],
      "request_schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Offer name"
          },
          "url": {
            "type": "string",
            "description": "Offer URL"
          },
          "payout": {
            "type": "number",
            "description": "Offer payout"
          }
        }
      },
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token",
        "Include proper request body with required fields"
      ],
      "use_cases": [
        "Update existing unpause"
      ],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/rotation/offer/unpause\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.put(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X PUT \"https://pierdun.com/public/api/v1/rotation/offer/unpause\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/rotation/path/unpause": {
      "path": "/rotation/path/unpause",
      "method": "PUT",
      "summary": "Update Unpause",
      "description": "Unpause path in rotations.",
      "category": "rotation",
      "tags": [
        "rotation"
      ],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token",
        "Include proper request body with required fields"
      ],
      "use_cases": [
        "Update existing unpause"
      ],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/rotation/path/unpause\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.put(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X PUT \"https://pierdun.com/public/api/v1/rotation/path/unpause\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/rotation/rule/unpause": {
      "path": "/rotation/rule/unpause",
      "method": "PUT",
      "summary": "Update Unpause",
      "description": "Unpause rule in rotations.",
      "category": "rotation",
      "tags": [
        "rotation"
      ],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token",
        "Include proper request body with required fields"
      ],
      "use_cases": [
        "Update existing unpause"
      ],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/rotation/rule/unpause\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.put(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X PUT \"https://pierdun.com/public/api/v1/rotation/rule/unpause\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/click/info/{id}": {
      "path": "/click/info/{id}",
      "method": "GET",
      "summary": "Get Info",
      "description": "Get click info by ID.",
      "category": "info",
      "tags": [
        "information"
      ],
      "parameters": [
        {
          "name": "datePreset",
          "type": "string",
          "required": false,
          "description": "Time period for data filtering",
          "example": "last_7_days"
        },
        {
          "name": "timezone",
          "type": "string",
          "required": false,
          "description": "Timezone for date calculations",
          "example": "UTC"
        },
        {
          "name": "id",
          "type": "integer",
          "required": true,
          "description": "Resource ID",
          "example": 1
        }
      ],
      "request_schema": {},
      "response_schema": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "Resource ID"
            },
            "name": {
              "type": "string",
              "description": "Resource name"
            }
          }
        }
      },
      "response_example": [
        {
          "id": 1,
          "name": "Example item 1"
        },
        {
          "id": 2,
          "name": "Example item 2"
        }
      ],
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token",
        "Info endpoints return basic entity information",
        "Use for getting IDs and names before detailed operations",
        "Ensure the ID parameter exists before making the request"
      ],
      "use_cases": [],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/click/info/{id}\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\nparams = {\n    \"datePreset\": \"last_7_days\",\n    \"timezone\": \"UTC\"\n}\n\nresponse = requests.get(url, headers=headers, params=params)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X GET \"https://pierdun.com/public/api/v1/click/info/{id}?datePreset=last_7_days&timezone=UTC\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/clicklog/delete": {
      "path": "/clicklog/delete",
      "method": "DELETE",
      "summary": "Delete Delete",
      "description": "Delete Clicks.",
      "category": "other",
      "tags": [],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token"
      ],
      "use_cases": [
        "Delete delete"
      ],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/clicklog/delete\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.delete(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X DELETE \"https://pierdun.com/public/api/v1/clicklog/delete\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/clicklog/columns": {
      "path": "/clicklog/columns",
      "method": "PUT",
      "summary": "Update Columns",
      "description": "Update ClickLog Columns.",
      "category": "other",
      "tags": [],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token",
        "Include proper request body with required fields"
      ],
      "use_cases": [
        "Update existing columns"
      ],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/clicklog/columns\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.put(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X PUT \"https://pierdun.com/public/api/v1/clicklog/columns\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/clicklog/click/{id}": {
      "path": "/clicklog/click/{id}",
      "method": "GET",
      "summary": "Get Click",
      "description": "Get clicklog by ID.",
      "category": "other",
      "tags": [],
      "parameters": [
        {
          "name": "id",
          "type": "integer",
          "required": true,
          "description": "Resource ID",
          "example": 1
        }
      ],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token",
        "Ensure the ID parameter exists before making the request"
      ],
      "use_cases": [],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/clicklog/click/{id}\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X GET \"https://pierdun.com/public/api/v1/clicklog/click/{id}\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/clicklog": {
      "path": "/clicklog",
      "method": "GET",
      "summary": "GET /clicklog",
      "description": "Get ClickLog Clicks.",
      "category": "other",
      "tags": [],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token"
      ],
      "use_cases": [],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/clicklog\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X GET \"https://pierdun.com/public/api/v1/clicklog\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/clickbank/secret": {
      "path": "/clickbank/secret",
      "method": "POST",
      "summary": "Create Secret",
      "description": "Change secret",
      "category": "other",
      "tags": [],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token",
        "Include proper request body with required fields"
      ],
      "use_cases": [
        "Create new secret"
      ],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/clickbank/secret\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.post(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X POST \"https://pierdun.com/public/api/v1/clickbank/secret\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/clickbank/postback/link": {
      "path": "/clickbank/postback/link",
      "method": "GET",
      "summary": "Get Link",
      "description": "API endpoint for /clickbank/postback/link",
      "category": "other",
      "tags": [],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token"
      ],
      "use_cases": [],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/clickbank/postback/link\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X GET \"https://pierdun.com/public/api/v1/clickbank/postback/link\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/clickbank/test": {
      "path": "/clickbank/test",
      "method": "POST",
      "summary": "Create Test",
      "description": "Test clickbank request",
      "category": "other",
      "tags": [],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token",
        "Include proper request body with required fields"
      ],
      "use_cases": [
        "Create new test"
      ],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/clickbank/test\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.post(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X POST \"https://pierdun.com/public/api/v1/clickbank/test\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/columns/position/change": {
      "path": "/columns/position/change",
      "method": "PUT",
      "summary": "Update Change",
      "description": "Change columns position. You must pass ALL the Column UUIDS, otherwise, position for not-passed Column will be dropped to default 9999.",
      "category": "other",
      "tags": [],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token",
        "Include proper request body with required fields"
      ],
      "use_cases": [
        "Update existing change"
      ],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/columns/position/change\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.put(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X PUT \"https://pierdun.com/public/api/v1/columns/position/change\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/columns": {
      "path": "/columns",
      "method": "GET",
      "summary": "GET /columns",
      "description": "Get all Columns.",
      "category": "other",
      "tags": [],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token"
      ],
      "use_cases": [],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/columns\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X GET \"https://pierdun.com/public/api/v1/columns\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/columns/{page}": {
      "path": "/columns/{page}",
      "method": "PUT",
      "summary": "Update Columns",
      "description": "Select columns visibility for Page.",
      "category": "other",
      "tags": [],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token",
        "Include proper request body with required fields"
      ],
      "use_cases": [
        "Update existing {page}"
      ],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/columns/{page}\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.put(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X PUT \"https://pierdun.com/public/api/v1/columns/{page}\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/custom_column/{uuid}": {
      "path": "/custom_column/{uuid}",
      "method": "DELETE",
      "summary": "Delete Custom Column",
      "description": "Delete Custom Column.",
      "category": "other",
      "tags": [],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token"
      ],
      "use_cases": [
        "Delete {uuid}"
      ],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/custom_column/{uuid}\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.delete(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X DELETE \"https://pierdun.com/public/api/v1/custom_column/{uuid}\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/default_column/{uuid}": {
      "path": "/default_column/{uuid}",
      "method": "PUT",
      "summary": "Update Default Column",
      "description": "Edit Default Column.",
      "category": "other",
      "tags": [],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token",
        "Include proper request body with required fields"
      ],
      "use_cases": [
        "Update existing {uuid}"
      ],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/default_column/{uuid}\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.put(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X PUT \"https://pierdun.com/public/api/v1/default_column/{uuid}\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/default_column/reset": {
      "path": "/default_column/reset",
      "method": "POST",
      "summary": "Create Reset",
      "description": "Reset Default Columns.",
      "category": "other",
      "tags": [],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token",
        "Include proper request body with required fields"
      ],
      "use_cases": [
        "Create new reset"
      ],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/default_column/reset\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.post(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X POST \"https://pierdun.com/public/api/v1/default_column/reset\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/offer/change_cap": {
      "path": "/offer/change_cap",
      "method": "POST",
      "summary": "Create Change Cap",
      "description": "Change Conversion Cap for multiple offers",
      "category": "offer",
      "tags": [
        "offer"
      ],
      "parameters": [],
      "request_schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Offer name"
          },
          "url": {
            "type": "string",
            "description": "Offer URL"
          },
          "payout": {
            "type": "number",
            "description": "Offer payout"
          }
        }
      },
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token",
        "Include proper request body with required fields"
      ],
      "use_cases": [
        "Create new change_cap"
      ],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/offer/change_cap\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.post(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X POST \"https://pierdun.com/public/api/v1/offer/change_cap\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/offer/cap/conversion/{offerId}": {
      "path": "/offer/cap/conversion/{offerId}",
      "method": "POST",
      "summary": "Create Conversion",
      "description": "Create Conversion Cap.",
      "category": "offer",
      "tags": [
        "offer"
      ],
      "parameters": [],
      "request_schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Offer name"
          },
          "url": {
            "type": "string",
            "description": "Offer URL"
          },
          "payout": {
            "type": "number",
            "description": "Offer payout"
          }
        }
      },
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token",
        "Include proper request body with required fields"
      ],
      "use_cases": [
        "Create new {offerId}"
      ],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/offer/cap/conversion/{offerId}\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.post(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X POST \"https://pierdun.com/public/api/v1/offer/cap/conversion/{offerId}\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/offer/cap/conversion/{id}/maximize": {
      "path": "/offer/cap/conversion/{id}/maximize",
      "method": "POST",
      "summary": "Create Maximize",
      "description": "Maximize the Conversion cap.",
      "category": "offer",
      "tags": [
        "offer"
      ],
      "parameters": [
        {
          "name": "id",
          "type": "integer",
          "required": true,
          "description": "Resource ID",
          "example": 1
        }
      ],
      "request_schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Offer name"
          },
          "url": {
            "type": "string",
            "description": "Offer URL"
          },
          "payout": {
            "type": "number",
            "description": "Offer payout"
          }
        }
      },
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token",
        "Include proper request body with required fields",
        "Ensure the ID parameter exists before making the request"
      ],
      "use_cases": [
        "Create new maximize"
      ],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/offer/cap/conversion/{id}/maximize\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.post(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X POST \"https://pierdun.com/public/api/v1/offer/cap/conversion/{id}/maximize\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/offer/cap/conversion/{id}/reset": {
      "path": "/offer/cap/conversion/{id}/reset",
      "method": "POST",
      "summary": "Create Reset",
      "description": "Reset the current Conversion cap.",
      "category": "offer",
      "tags": [
        "offer"
      ],
      "parameters": [
        {
          "name": "id",
          "type": "integer",
          "required": true,
          "description": "Resource ID",
          "example": 1
        }
      ],
      "request_schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Offer name"
          },
          "url": {
            "type": "string",
            "description": "Offer URL"
          },
          "payout": {
            "type": "number",
            "description": "Offer payout"
          }
        }
      },
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token",
        "Include proper request body with required fields",
        "Ensure the ID parameter exists before making the request"
      ],
      "use_cases": [
        "Create new reset"
      ],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/offer/cap/conversion/{id}/reset\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.post(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X POST \"https://pierdun.com/public/api/v1/offer/cap/conversion/{id}/reset\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/offer/change_country": {
      "path": "/offer/change_country",
      "method": "POST",
      "summary": "Create Change Country",
      "description": "Change country for multiple offers",
      "category": "offer",
      "tags": [
        "offer"
      ],
      "parameters": [],
      "request_schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Offer name"
          },
          "url": {
            "type": "string",
            "description": "Offer URL"
          },
          "payout": {
            "type": "number",
            "description": "Offer payout"
          }
        }
      },
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token",
        "Include proper request body with required fields"
      ],
      "use_cases": [
        "Create new change_country"
      ],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/offer/change_country\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.post(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X POST \"https://pierdun.com/public/api/v1/offer/change_country\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/offer/change_domain": {
      "path": "/offer/change_domain",
      "method": "POST",
      "summary": "Create Change Domain",
      "description": "Change Domain for multiple offers",
      "category": "offer",
      "tags": [
        "offer"
      ],
      "parameters": [],
      "request_schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Offer name"
          },
          "url": {
            "type": "string",
            "description": "Offer URL"
          },
          "payout": {
            "type": "number",
            "description": "Offer payout"
          }
        }
      },
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token",
        "Include proper request body with required fields"
      ],
      "use_cases": [
        "Create new change_domain"
      ],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/offer/change_domain\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.post(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X POST \"https://pierdun.com/public/api/v1/offer/change_domain\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/offer/change_group": {
      "path": "/offer/change_group",
      "method": "POST",
      "summary": "Create Change Group",
      "description": "Change Group for multiple offers",
      "category": "offer",
      "tags": [
        "offer"
      ],
      "parameters": [],
      "request_schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Offer name"
          },
          "url": {
            "type": "string",
            "description": "Offer URL"
          },
          "payout": {
            "type": "number",
            "description": "Offer payout"
          }
        }
      },
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token",
        "Include proper request body with required fields"
      ],
      "use_cases": [
        "Create new change_group"
      ],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/offer/change_group\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.post(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X POST \"https://pierdun.com/public/api/v1/offer/change_group\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/offer/{id}/clone": {
      "path": "/offer/{id}/clone",
      "method": "GET",
      "summary": "Get Clone",
      "description": "Clone Offer.",
      "category": "offer",
      "tags": [
        "offer"
      ],
      "parameters": [
        {
          "name": "id",
          "type": "integer",
          "required": true,
          "description": "Resource ID",
          "example": 1
        }
      ],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token",
        "Ensure the ID parameter exists before making the request"
      ],
      "use_cases": [],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/offer/{id}/clone\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X GET \"https://pierdun.com/public/api/v1/offer/{id}/clone\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/offer": {
      "path": "/offer",
      "method": "POST",
      "summary": "POST /offer",
      "description": "Create Offer.",
      "category": "offer",
      "tags": [
        "offer"
      ],
      "parameters": [],
      "request_schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Offer name"
          },
          "url": {
            "type": "string",
            "description": "Offer URL"
          },
          "payout": {
            "type": "number",
            "description": "Offer payout"
          }
        }
      },
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token",
        "Include proper request body with required fields"
      ],
      "use_cases": [
        "Create new offer"
      ],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/offer\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.post(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X POST \"https://pierdun.com/public/api/v1/offer\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/offer/{id}": {
      "path": "/offer/{id}",
      "method": "PATCH",
      "summary": "Modify Offer",
      "description": "Restore Offer.",
      "category": "offer",
      "tags": [
        "offer"
      ],
      "parameters": [
        {
          "name": "id",
          "type": "integer",
          "required": true,
          "description": "Resource ID",
          "example": 1
        }
      ],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token",
        "Ensure the ID parameter exists before making the request"
      ],
      "use_cases": [],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/offer/{id}\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.patch(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X PATCH \"https://pierdun.com/public/api/v1/offer/{id}\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/offer/affiliate_network/list": {
      "path": "/offer/affiliate_network/list",
      "method": "GET",
      "summary": "Get List",
      "description": "Get Affiliate Networks with offers list.",
      "category": "offer",
      "tags": [
        "offer",
        "affiliate_network"
      ],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token"
      ],
      "use_cases": [],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/offer/affiliate_network/list\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X GET \"https://pierdun.com/public/api/v1/offer/affiliate_network/list\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/offer/alternative/all": {
      "path": "/offer/alternative/all",
      "method": "GET",
      "summary": "Get All",
      "description": "Get Alternative Offers list.",
      "category": "offer",
      "tags": [
        "offer"
      ],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token"
      ],
      "use_cases": [],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/offer/alternative/all\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X GET \"https://pierdun.com/public/api/v1/offer/alternative/all\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/offer/country/list": {
      "path": "/offer/country/list",
      "method": "GET",
      "summary": "Get List",
      "description": "Get Countries with offers list.",
      "category": "offer",
      "tags": [
        "offer"
      ],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token"
      ],
      "use_cases": [],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/offer/country/list\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X GET \"https://pierdun.com/public/api/v1/offer/country/list\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/offers/import": {
      "path": "/offers/import",
      "method": "POST",
      "summary": "Create Import",
      "description": "Import Offers. Format: Name;Url;PayoutAuto(0/1);Amount;Currency;PayoutUpsell(0/1);CountryCode;[GroupName];[AffiliateNetworkId]",
      "category": "offer",
      "tags": [
        "offer"
      ],
      "parameters": [],
      "request_schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Offer name"
          },
          "url": {
            "type": "string",
            "description": "Offer URL"
          },
          "payout": {
            "type": "number",
            "description": "Offer payout"
          }
        }
      },
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token",
        "Include proper request body with required fields"
      ],
      "use_cases": [
        "Create new import"
      ],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/offers/import\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.post(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X POST \"https://pierdun.com/public/api/v1/offers/import\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/offer/{id}/rename": {
      "path": "/offer/{id}/rename",
      "method": "PUT",
      "summary": "Update Rename",
      "description": "Rename Offer.",
      "category": "offer",
      "tags": [
        "offer"
      ],
      "parameters": [
        {
          "name": "id",
          "type": "integer",
          "required": true,
          "description": "Resource ID",
          "example": 1
        }
      ],
      "request_schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Offer name"
          },
          "url": {
            "type": "string",
            "description": "Offer URL"
          },
          "payout": {
            "type": "number",
            "description": "Offer payout"
          }
        }
      },
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token",
        "Include proper request body with required fields",
        "Ensure the ID parameter exists before making the request"
      ],
      "use_cases": [
        "Update existing rename"
      ],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/offer/{id}/rename\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.put(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X PUT \"https://pierdun.com/public/api/v1/offer/{id}/rename\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/conversions": {
      "path": "/conversions",
      "method": "DELETE",
      "summary": "DELETE /conversions",
      "description": "Delete Conversions.",
      "category": "conversions",
      "tags": [],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token"
      ],
      "use_cases": [
        "Delete conversions"
      ],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/conversions\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.delete(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X DELETE \"https://pierdun.com/public/api/v1/conversions\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/conversions/columns": {
      "path": "/conversions/columns",
      "method": "GET",
      "summary": "Get Columns",
      "description": "Get Conversions table columns.",
      "category": "conversions",
      "tags": [],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token"
      ],
      "use_cases": [],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/conversions/columns\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X GET \"https://pierdun.com/public/api/v1/conversions/columns\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/conversion/{id}": {
      "path": "/conversion/{id}",
      "method": "GET",
      "summary": "Get Conversion",
      "description": "Get Conversion.",
      "category": "other",
      "tags": [],
      "parameters": [
        {
          "name": "id",
          "type": "integer",
          "required": true,
          "description": "Resource ID",
          "example": 1
        }
      ],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token",
        "Ensure the ID parameter exists before making the request"
      ],
      "use_cases": [],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/conversion/{id}\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X GET \"https://pierdun.com/public/api/v1/conversion/{id}\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/conversions/statuses/one": {
      "path": "/conversions/statuses/one",
      "method": "GET",
      "summary": "Get One",
      "description": "Get known options of Conversion Status One click's field",
      "category": "conversions",
      "tags": [],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token"
      ],
      "use_cases": [],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/conversions/statuses/one\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X GET \"https://pierdun.com/public/api/v1/conversions/statuses/one\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/conversions/statuses/two": {
      "path": "/conversions/statuses/two",
      "method": "GET",
      "summary": "Get Two",
      "description": "Get known options of Conversion Status Two click's field",
      "category": "conversions",
      "tags": [],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token"
      ],
      "use_cases": [],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/conversions/statuses/two\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X GET \"https://pierdun.com/public/api/v1/conversions/statuses/two\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/conversions/log": {
      "path": "/conversions/log",
      "method": "GET",
      "summary": "Get Log",
      "description": "Get Conversions log.",
      "category": "conversions",
      "tags": [],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token"
      ],
      "use_cases": [],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/conversions/log\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X GET \"https://pierdun.com/public/api/v1/conversions/log\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/conversions/filters": {
      "path": "/conversions/filters",
      "method": "GET",
      "summary": "Get Filters",
      "description": "Get filters.",
      "category": "conversions",
      "tags": [],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token"
      ],
      "use_cases": [],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/conversions/filters\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X GET \"https://pierdun.com/public/api/v1/conversions/filters\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/device/brand_and_model": {
      "path": "/device/brand_and_model",
      "method": "GET",
      "summary": "Get Brand And Model",
      "description": "Get Brand and model list.",
      "category": "other",
      "tags": [],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token"
      ],
      "use_cases": [],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/device/brand_and_model\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X GET \"https://pierdun.com/public/api/v1/device/brand_and_model\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/device/browser": {
      "path": "/device/browser",
      "method": "GET",
      "summary": "Get Browser",
      "description": "Get Browser with versions list.",
      "category": "other",
      "tags": [],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token"
      ],
      "use_cases": [],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/device/browser\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X GET \"https://pierdun.com/public/api/v1/device/browser\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/device/operating_system": {
      "path": "/device/operating_system",
      "method": "GET",
      "summary": "Get Operating System",
      "description": "Get OS with versions list.",
      "category": "other",
      "tags": [],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token"
      ],
      "use_cases": [],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/device/operating_system\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X GET \"https://pierdun.com/public/api/v1/device/operating_system\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/device/resolution": {
      "path": "/device/resolution",
      "method": "GET",
      "summary": "Get Resolution",
      "description": "Get Resolution list.",
      "category": "other",
      "tags": [],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token"
      ],
      "use_cases": [],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/device/resolution\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X GET \"https://pierdun.com/public/api/v1/device/resolution\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/device/type": {
      "path": "/device/type",
      "method": "GET",
      "summary": "Get Type",
      "description": "Get Types.",
      "category": "other",
      "tags": [],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token"
      ],
      "use_cases": [],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/device/type\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X GET \"https://pierdun.com/public/api/v1/device/type\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/domain/index_page/{id}": {
      "path": "/domain/index_page/{id}",
      "method": "PUT",
      "summary": "Update Index Page",
      "description": "Change index page for Domain.",
      "category": "other",
      "tags": [],
      "parameters": [
        {
          "name": "id",
          "type": "integer",
          "required": true,
          "description": "Resource ID",
          "example": 1
        }
      ],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token",
        "Include proper request body with required fields",
        "Ensure the ID parameter exists before making the request"
      ],
      "use_cases": [
        "Update existing {id}"
      ],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/domain/index_page/{id}\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.put(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X PUT \"https://pierdun.com/public/api/v1/domain/index_page/{id}\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/domain/{id}/check": {
      "path": "/domain/{id}/check",
      "method": "GET",
      "summary": "Get Check",
      "description": "Check Domain certificate.",
      "category": "other",
      "tags": [],
      "parameters": [
        {
          "name": "id",
          "type": "integer",
          "required": true,
          "description": "Resource ID",
          "example": 1
        }
      ],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token",
        "Ensure the ID parameter exists before making the request"
      ],
      "use_cases": [],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/domain/{id}/check\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X GET \"https://pierdun.com/public/api/v1/domain/{id}/check\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/domain/{id}": {
      "path": "/domain/{id}",
      "method": "DELETE",
      "summary": "Delete Domain",
      "description": "Delete Domain.",
      "category": "other",
      "tags": [],
      "parameters": [
        {
          "name": "id",
          "type": "integer",
          "required": true,
          "description": "Resource ID",
          "example": 1
        }
      ],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token",
        "Ensure the ID parameter exists before making the request"
      ],
      "use_cases": [
        "Delete {id}"
      ],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/domain/{id}\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.delete(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X DELETE \"https://pierdun.com/public/api/v1/domain/{id}\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/domain/list/filtered": {
      "path": "/domain/list/filtered",
      "method": "GET",
      "summary": "Get Filtered",
      "description": "Get Domain list filtered.",
      "category": "other",
      "tags": [],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token"
      ],
      "use_cases": [],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/domain/list/filtered\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X GET \"https://pierdun.com/public/api/v1/domain/list/filtered\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/domains/check": {
      "path": "/domains/check",
      "method": "GET",
      "summary": "Get Check",
      "description": "Get Domains Check Result.",
      "category": "other",
      "tags": [],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token"
      ],
      "use_cases": [],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/domains/check\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X GET \"https://pierdun.com/public/api/v1/domains/check\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/domains": {
      "path": "/domains",
      "method": "GET",
      "summary": "GET /domains",
      "description": "Get Domains.",
      "category": "other",
      "tags": [],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token"
      ],
      "use_cases": [],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/domains\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X GET \"https://pierdun.com/public/api/v1/domains\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/domain/mode": {
      "path": "/domain/mode",
      "method": "GET",
      "summary": "Get Mode",
      "description": "Get Domains signature mode.",
      "category": "other",
      "tags": [],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token"
      ],
      "use_cases": [],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/domain/mode\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X GET \"https://pierdun.com/public/api/v1/domain/mode\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/domain/default/{id}": {
      "path": "/domain/default/{id}",
      "method": "PUT",
      "summary": "Update Default",
      "description": "Make Default Domain.",
      "category": "other",
      "tags": [],
      "parameters": [
        {
          "name": "id",
          "type": "integer",
          "required": true,
          "description": "Resource ID",
          "example": 1
        }
      ],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token",
        "Include proper request body with required fields",
        "Ensure the ID parameter exists before making the request"
      ],
      "use_cases": [
        "Update existing {id}"
      ],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/domain/default/{id}\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.put(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X PUT \"https://pierdun.com/public/api/v1/domain/default/{id}\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/domain/safebrowse/api_key": {
      "path": "/domain/safebrowse/api_key",
      "method": "POST",
      "summary": "Create Api Key",
      "description": "Change API key",
      "category": "other",
      "tags": [],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token",
        "Include proper request body with required fields"
      ],
      "use_cases": [
        "Create new api_key"
      ],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/domain/safebrowse/api_key\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.post(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X POST \"https://pierdun.com/public/api/v1/domain/safebrowse/api_key\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/domain/safebrowse/check": {
      "path": "/domain/safebrowse/check",
      "method": "POST",
      "summary": "Create Check",
      "description": "Check all the domains for a ban",
      "category": "other",
      "tags": [],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token",
        "Include proper request body with required fields"
      ],
      "use_cases": [
        "Create new check"
      ],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/domain/safebrowse/check\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.post(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X POST \"https://pierdun.com/public/api/v1/domain/safebrowse/check\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/domain/safebrowse/test": {
      "path": "/domain/safebrowse/test",
      "method": "POST",
      "summary": "Create Test",
      "description": "Test current API key",
      "category": "other",
      "tags": [],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token",
        "Include proper request body with required fields"
      ],
      "use_cases": [
        "Create new test"
      ],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/domain/safebrowse/test\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.post(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X POST \"https://pierdun.com/public/api/v1/domain/safebrowse/test\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/geo/city": {
      "path": "/geo/city",
      "method": "GET",
      "summary": "Get City",
      "description": "Get City list filtered.",
      "category": "other",
      "tags": [],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token"
      ],
      "use_cases": [],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/geo/city\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X GET \"https://pierdun.com/public/api/v1/geo/city\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/geo/continent": {
      "path": "/geo/continent",
      "method": "GET",
      "summary": "Get Continent",
      "description": "Get Continent list filtered.",
      "category": "other",
      "tags": [],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token"
      ],
      "use_cases": [],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/geo/continent\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X GET \"https://pierdun.com/public/api/v1/geo/continent\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/geo/country": {
      "path": "/geo/country",
      "method": "GET",
      "summary": "Get Country",
      "description": "Get Country list filtered.",
      "category": "other",
      "tags": [],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token"
      ],
      "use_cases": [],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/geo/country\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X GET \"https://pierdun.com/public/api/v1/geo/country\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/geo/region": {
      "path": "/geo/region",
      "method": "GET",
      "summary": "Get Region",
      "description": "Get Region list filtered.",
      "category": "other",
      "tags": [],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token"
      ],
      "use_cases": [],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/geo/region\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X GET \"https://pierdun.com/public/api/v1/geo/region\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/geo/state": {
      "path": "/geo/state",
      "method": "GET",
      "summary": "Get State",
      "description": "Get State list filtered.",
      "category": "other",
      "tags": [],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token"
      ],
      "use_cases": [],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/geo/state\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X GET \"https://pierdun.com/public/api/v1/geo/state\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/group/{subject}/{uuid}": {
      "path": "/group/{subject}/{uuid}",
      "method": "DELETE",
      "summary": "Delete {Subject}",
      "description": "Delete Group.",
      "category": "other",
      "tags": [],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token"
      ],
      "use_cases": [
        "Delete {uuid}"
      ],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/group/{subject}/{uuid}\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.delete(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X DELETE \"https://pierdun.com/public/api/v1/group/{subject}/{uuid}\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/groups/{subject}": {
      "path": "/groups/{subject}",
      "method": "GET",
      "summary": "Get Groups",
      "description": "Get groups by subject. uuid: You need generate uuid version 4 any generator. For example this: https://www.uuidgenerator.net/version4 Format looks like this: 0acc95cc-ad7a-48e5-9bdc-c4b86de6c620",
      "category": "other",
      "tags": [],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token"
      ],
      "use_cases": [],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/groups/{subject}\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X GET \"https://pierdun.com/public/api/v1/groups/{subject}\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/groups": {
      "path": "/groups",
      "method": "GET",
      "summary": "GET /groups",
      "description": "Get all groups.",
      "category": "other",
      "tags": [],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token"
      ],
      "use_cases": [],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/groups\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X GET \"https://pierdun.com/public/api/v1/groups\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/groups/{subject}/filtered": {
      "path": "/groups/{subject}/filtered",
      "method": "GET",
      "summary": "Get Filtered",
      "description": "Get groups list by filter.",
      "category": "other",
      "tags": [],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token"
      ],
      "use_cases": [],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/groups/{subject}/filtered\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X GET \"https://pierdun.com/public/api/v1/groups/{subject}/filtered\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/isp/connections": {
      "path": "/isp/connections",
      "method": "GET",
      "summary": "Get Connections",
      "description": "Get list of connections",
      "category": "other",
      "tags": [],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token"
      ],
      "use_cases": [],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/isp/connections\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X GET \"https://pierdun.com/public/api/v1/isp/connections\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/isp/names": {
      "path": "/isp/names",
      "method": "GET",
      "summary": "Get Names",
      "description": "Get filtered list of internet service provider names",
      "category": "other",
      "tags": [],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token"
      ],
      "use_cases": [],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/isp/names\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X GET \"https://pierdun.com/public/api/v1/isp/names\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/isp/organizations": {
      "path": "/isp/organizations",
      "method": "GET",
      "summary": "Get Organizations",
      "description": "Get filtered list of organization names",
      "category": "other",
      "tags": [],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token"
      ],
      "use_cases": [],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/isp/organizations\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X GET \"https://pierdun.com/public/api/v1/isp/organizations\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/landing/change_domain": {
      "path": "/landing/change_domain",
      "method": "POST",
      "summary": "Create Change Domain",
      "description": "Change Domain for multiple Landings",
      "category": "landing",
      "tags": [
        "landing"
      ],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token",
        "Include proper request body with required fields"
      ],
      "use_cases": [
        "Create new change_domain"
      ],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/landing/change_domain\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.post(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X POST \"https://pierdun.com/public/api/v1/landing/change_domain\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/landing/change_group": {
      "path": "/landing/change_group",
      "method": "POST",
      "summary": "Create Change Group",
      "description": "Change Domain for multiple Landings",
      "category": "landing",
      "tags": [
        "landing"
      ],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token",
        "Include proper request body with required fields"
      ],
      "use_cases": [
        "Create new change_group"
      ],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/landing/change_group\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.post(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X POST \"https://pierdun.com/public/api/v1/landing/change_group\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/landing/change_language": {
      "path": "/landing/change_language",
      "method": "POST",
      "summary": "Create Change Language",
      "description": "Change Language for multiple Landings",
      "category": "landing",
      "tags": [
        "landing"
      ],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token",
        "Include proper request body with required fields"
      ],
      "use_cases": [
        "Create new change_language"
      ],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/landing/change_language\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.post(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X POST \"https://pierdun.com/public/api/v1/landing/change_language\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/landing/{id}/clone": {
      "path": "/landing/{id}/clone",
      "method": "GET",
      "summary": "Get Clone",
      "description": "Clone landing.",
      "category": "landing",
      "tags": [
        "landing"
      ],
      "parameters": [
        {
          "name": "id",
          "type": "integer",
          "required": true,
          "description": "Resource ID",
          "example": 1
        }
      ],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token",
        "Ensure the ID parameter exists before making the request"
      ],
      "use_cases": [],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/landing/{id}/clone\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X GET \"https://pierdun.com/public/api/v1/landing/{id}/clone\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/landing/{id}/files/clone": {
      "path": "/landing/{id}/files/clone",
      "method": "POST",
      "summary": "Create Clone",
      "description": "Clone landing files.",
      "category": "landing",
      "tags": [
        "landing"
      ],
      "parameters": [
        {
          "name": "id",
          "type": "integer",
          "required": true,
          "description": "Resource ID",
          "example": 1
        }
      ],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token",
        "Include proper request body with required fields",
        "Ensure the ID parameter exists before making the request"
      ],
      "use_cases": [
        "Create new clone"
      ],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/landing/{id}/files/clone\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.post(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X POST \"https://pierdun.com/public/api/v1/landing/{id}/files/clone\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/landing/integrated": {
      "path": "/landing/integrated",
      "method": "POST",
      "summary": "Create Integrated",
      "description": "Create integrated landing.",
      "category": "landing",
      "tags": [
        "landing"
      ],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token",
        "Include proper request body with required fields"
      ],
      "use_cases": [
        "Create new integrated"
      ],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/landing/integrated\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.post(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X POST \"https://pierdun.com/public/api/v1/landing/integrated\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/landing/not_integrated": {
      "path": "/landing/not_integrated",
      "method": "POST",
      "summary": "Create Not Integrated",
      "description": "Create not integrated landing.",
      "category": "landing",
      "tags": [
        "landing"
      ],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token",
        "Include proper request body with required fields"
      ],
      "use_cases": [
        "Create new not_integrated"
      ],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/landing/not_integrated\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.post(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X POST \"https://pierdun.com/public/api/v1/landing/not_integrated\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/landing/{id}": {
      "path": "/landing/{id}",
      "method": "PATCH",
      "summary": "Modify Landing",
      "description": "Restore landing page.",
      "category": "landing",
      "tags": [
        "landing"
      ],
      "parameters": [
        {
          "name": "id",
          "type": "integer",
          "required": true,
          "description": "Resource ID",
          "example": 1
        }
      ],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token",
        "Ensure the ID parameter exists before making the request"
      ],
      "use_cases": [],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/landing/{id}\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.patch(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X PATCH \"https://pierdun.com/public/api/v1/landing/{id}\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/landing/{id}/file": {
      "path": "/landing/{id}/file",
      "method": "PUT",
      "summary": "Update File",
      "description": "Edit landing file.",
      "category": "landing",
      "tags": [
        "landing"
      ],
      "parameters": [
        {
          "name": "id",
          "type": "integer",
          "required": true,
          "description": "Resource ID",
          "example": 1
        }
      ],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token",
        "Include proper request body with required fields",
        "Ensure the ID parameter exists before making the request"
      ],
      "use_cases": [
        "Update existing file"
      ],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/landing/{id}/file\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.put(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X PUT \"https://pierdun.com/public/api/v1/landing/{id}/file\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/landing/list/filtered": {
      "path": "/landing/list/filtered",
      "method": "GET",
      "summary": "Get Filtered",
      "description": "Get Landing list filtered.",
      "category": "landing",
      "tags": [
        "landing"
      ],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token"
      ],
      "use_cases": [],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/landing/list/filtered\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X GET \"https://pierdun.com/public/api/v1/landing/list/filtered\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/landing_protect": {
      "path": "/landing_protect",
      "method": "GET",
      "summary": "GET /landing_protect",
      "description": "Get LP Protect code.",
      "category": "landing",
      "tags": [
        "landing"
      ],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token"
      ],
      "use_cases": [],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/landing_protect\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X GET \"https://pierdun.com/public/api/v1/landing_protect\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/landing/list/by_location": {
      "path": "/landing/list/by_location",
      "method": "GET",
      "summary": "Get By Location",
      "description": "Get landings by location.",
      "category": "landing",
      "tags": [
        "landing"
      ],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token"
      ],
      "use_cases": [],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/landing/list/by_location\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X GET \"https://pierdun.com/public/api/v1/landing/list/by_location\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/landing/language/list": {
      "path": "/landing/language/list",
      "method": "GET",
      "summary": "Get List",
      "description": "Get Languages with landings list.",
      "category": "landing",
      "tags": [
        "landing"
      ],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token"
      ],
      "use_cases": [],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/landing/language/list\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X GET \"https://pierdun.com/public/api/v1/landing/language/list\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/landing/import": {
      "path": "/landing/import",
      "method": "POST",
      "summary": "Create Import",
      "description": "Import not integrated landings. Format: Name;Url;LanguageCode;[GroupName].",
      "category": "landing",
      "tags": [
        "landing"
      ],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token",
        "Include proper request body with required fields"
      ],
      "use_cases": [
        "Create new import"
      ],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/landing/import\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.post(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X POST \"https://pierdun.com/public/api/v1/landing/import\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/landing/modify/{id}": {
      "path": "/landing/modify/{id}",
      "method": "PATCH",
      "summary": "Modify Modify",
      "description": "Partially update landing. to clear groupUuid or languageCode use 'none', 'erase' or 'empty'.",
      "category": "landing",
      "tags": [
        "landing"
      ],
      "parameters": [
        {
          "name": "id",
          "type": "integer",
          "required": true,
          "description": "Resource ID",
          "example": 1
        }
      ],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token",
        "Ensure the ID parameter exists before making the request"
      ],
      "use_cases": [],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/landing/modify/{id}\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.patch(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X PATCH \"https://pierdun.com/public/api/v1/landing/modify/{id}\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/landing/{id}/rename": {
      "path": "/landing/{id}/rename",
      "method": "PUT",
      "summary": "Update Rename",
      "description": "Rename landing.",
      "category": "landing",
      "tags": [
        "landing"
      ],
      "parameters": [
        {
          "name": "id",
          "type": "integer",
          "required": true,
          "description": "Resource ID",
          "example": 1
        }
      ],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token",
        "Include proper request body with required fields",
        "Ensure the ID parameter exists before making the request"
      ],
      "use_cases": [
        "Update existing rename"
      ],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/landing/{id}/rename\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.put(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X PUT \"https://pierdun.com/public/api/v1/landing/{id}/rename\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/landing/upload": {
      "path": "/landing/upload",
      "method": "POST",
      "summary": "Create Upload",
      "description": "Upload landing files.",
      "category": "landing",
      "tags": [
        "landing"
      ],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token",
        "Include proper request body with required fields"
      ],
      "use_cases": [
        "Create new upload"
      ],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/landing/upload\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.post(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X POST \"https://pierdun.com/public/api/v1/landing/upload\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/license/tracker_id": {
      "path": "/license/tracker_id",
      "method": "GET",
      "summary": "Get Tracker Id",
      "description": "Get Tracker ID.",
      "category": "other",
      "tags": [],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token"
      ],
      "use_cases": [],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/license/tracker_id\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X GET \"https://pierdun.com/public/api/v1/license/tracker_id\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/magic_checker/add/{campaignId}": {
      "path": "/magic_checker/add/{campaignId}",
      "method": "PUT",
      "summary": "Update Add",
      "description": "Add Magic Checker To Campaign.",
      "category": "other",
      "tags": [
        "campaign"
      ],
      "parameters": [],
      "request_schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Campaign name"
          },
          "trafficSourceId": {
            "type": "integer",
            "description": "Traffic source ID"
          },
          "cost": {
            "type": "number",
            "description": "Campaign cost"
          }
        }
      },
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token",
        "Include proper request body with required fields"
      ],
      "use_cases": [
        "Update existing {campaignId}"
      ],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/magic_checker/add/{campaignId}\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.put(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X PUT \"https://pierdun.com/public/api/v1/magic_checker/add/{campaignId}\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/magic_checker": {
      "path": "/magic_checker",
      "method": "POST",
      "summary": "POST /magic_checker",
      "description": "Create Magic Checker.",
      "category": "other",
      "tags": [],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token",
        "Include proper request body with required fields"
      ],
      "use_cases": [
        "Create new magic_checker"
      ],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/magic_checker\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.post(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X POST \"https://pierdun.com/public/api/v1/magic_checker\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/magic_checker/{binomMagicCheckerId}": {
      "path": "/magic_checker/{binomMagicCheckerId}",
      "method": "DELETE",
      "summary": "Delete Magic Checker",
      "description": "Delete Magic Checker.",
      "category": "other",
      "tags": [],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token"
      ],
      "use_cases": [
        "Delete {binomMagicCheckerId}"
      ],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/magic_checker/{binomMagicCheckerId}\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.delete(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X DELETE \"https://pierdun.com/public/api/v1/magic_checker/{binomMagicCheckerId}\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/magic_checker/campaign/{campaignId}": {
      "path": "/magic_checker/campaign/{campaignId}",
      "method": "DELETE",
      "summary": "Delete Campaign",
      "description": "Remove Magic Checker From Campaign.",
      "category": "campaign",
      "tags": [
        "campaign"
      ],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token"
      ],
      "use_cases": [
        "Delete {campaignId}"
      ],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/magic_checker/campaign/{campaignId}\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.delete(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X DELETE \"https://pierdun.com/public/api/v1/magic_checker/campaign/{campaignId}\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/magic_checker/list/filtered": {
      "path": "/magic_checker/list/filtered",
      "method": "GET",
      "summary": "Get Filtered",
      "description": "Get Magic Checker list filtered.",
      "category": "other",
      "tags": [],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token"
      ],
      "use_cases": [],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/magic_checker/list/filtered\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X GET \"https://pierdun.com/public/api/v1/magic_checker/list/filtered\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/migrator/task/{uuid}": {
      "path": "/migrator/task/{uuid}",
      "method": "DELETE",
      "summary": "Delete Task",
      "description": "Delete task info by UUID",
      "category": "other",
      "tags": [],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token"
      ],
      "use_cases": [
        "Delete {uuid}"
      ],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/migrator/task/{uuid}\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.delete(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X DELETE \"https://pierdun.com/public/api/v1/migrator/task/{uuid}\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/migrator/last": {
      "path": "/migrator/last",
      "method": "GET",
      "summary": "Get Last",
      "description": "Get last task info",
      "category": "other",
      "tags": [],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token"
      ],
      "use_cases": [],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/migrator/last\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X GET \"https://pierdun.com/public/api/v1/migrator/last\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/migrator/migrate": {
      "path": "/migrator/migrate",
      "method": "POST",
      "summary": "Create Migrate",
      "description": "Migrate Binom v1 data",
      "category": "other",
      "tags": [],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token",
        "Include proper request body with required fields"
      ],
      "use_cases": [
        "Create new migrate"
      ],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/migrator/migrate\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.post(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X POST \"https://pierdun.com/public/api/v1/migrator/migrate\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/migrator/ping": {
      "path": "/migrator/ping",
      "method": "GET",
      "summary": "Get Ping",
      "description": "Get migrator service status",
      "category": "other",
      "tags": [],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token"
      ],
      "use_cases": [],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/migrator/ping\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X GET \"https://pierdun.com/public/api/v1/migrator/ping\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/migrator/v2/restore/cancel": {
      "path": "/migrator/v2/restore/cancel",
      "method": "POST",
      "summary": "Create Cancel",
      "description": "Cancel current restore process.",
      "category": "other",
      "tags": [],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token",
        "Include proper request body with required fields"
      ],
      "use_cases": [
        "Create new cancel"
      ],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/migrator/v2/restore/cancel\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.post(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X POST \"https://pierdun.com/public/api/v1/migrator/v2/restore/cancel\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/migrator/v2/backup/settings": {
      "path": "/migrator/v2/backup/settings",
      "method": "POST",
      "summary": "Create Settings",
      "description": "Change auto backup settings. Interval counts in seconds.",
      "category": "other",
      "tags": [],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token",
        "Include proper request body with required fields"
      ],
      "use_cases": [
        "Create new settings"
      ],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/migrator/v2/backup/settings\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.post(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X POST \"https://pierdun.com/public/api/v1/migrator/v2/backup/settings\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/migrator/v2/export/jobs": {
      "path": "/migrator/v2/export/jobs",
      "method": "POST",
      "summary": "Create Jobs",
      "description": "Schedule a job to make an export",
      "category": "other",
      "tags": [],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token",
        "Include proper request body with required fields"
      ],
      "use_cases": [
        "Create new jobs"
      ],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/migrator/v2/export/jobs\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.post(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X POST \"https://pierdun.com/public/api/v1/migrator/v2/export/jobs\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/migrator/v2/export/jobs/{id}": {
      "path": "/migrator/v2/export/jobs/{id}",
      "method": "DELETE",
      "summary": "Delete Jobs",
      "description": "Delete or cancel the job (Export file also will be deleted)",
      "category": "other",
      "tags": [],
      "parameters": [
        {
          "name": "id",
          "type": "integer",
          "required": true,
          "description": "Resource ID",
          "example": 1
        }
      ],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token",
        "Ensure the ID parameter exists before making the request"
      ],
      "use_cases": [
        "Delete {id}"
      ],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/migrator/v2/export/jobs/{id}\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.delete(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X DELETE \"https://pierdun.com/public/api/v1/migrator/v2/export/jobs/{id}\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/migrator/v2/export/dumps/{id}": {
      "path": "/migrator/v2/export/dumps/{id}",
      "method": "GET",
      "summary": "Get Dumps",
      "description": "Download a dump by job ID",
      "category": "other",
      "tags": [],
      "parameters": [
        {
          "name": "id",
          "type": "integer",
          "required": true,
          "description": "Resource ID",
          "example": 1
        }
      ],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token",
        "Ensure the ID parameter exists before making the request"
      ],
      "use_cases": [],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/migrator/v2/export/dumps/{id}\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X GET \"https://pierdun.com/public/api/v1/migrator/v2/export/dumps/{id}\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/migrator/v2/restore/status": {
      "path": "/migrator/v2/restore/status",
      "method": "GET",
      "summary": "Get Status",
      "description": "Get last restore status",
      "category": "other",
      "tags": [],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token"
      ],
      "use_cases": [],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/migrator/v2/restore/status\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X GET \"https://pierdun.com/public/api/v1/migrator/v2/restore/status\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/migrator/v2/restore": {
      "path": "/migrator/v2/restore",
      "method": "POST",
      "summary": "Create Restore",
      "description": "Restore Binom v2 data Monitor Monitor",
      "category": "other",
      "tags": [],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token",
        "Include proper request body with required fields"
      ],
      "use_cases": [
        "Create new restore"
      ],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/migrator/v2/restore\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.post(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X POST \"https://pierdun.com/public/api/v1/migrator/v2/restore\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/monitor/background_tasks": {
      "path": "/monitor/background_tasks",
      "method": "GET",
      "summary": "Get Background Tasks",
      "description": "Get background tasks",
      "category": "other",
      "tags": [],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token"
      ],
      "use_cases": [],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/monitor/background_tasks\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X GET \"https://pierdun.com/public/api/v1/monitor/background_tasks\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/monitor": {
      "path": "/monitor",
      "method": "GET",
      "summary": "GET /monitor",
      "description": "Get Monitor Result.",
      "category": "other",
      "tags": [],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token"
      ],
      "use_cases": [],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/monitor\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X GET \"https://pierdun.com/public/api/v1/monitor\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/note/{uuid}": {
      "path": "/note/{uuid}",
      "method": "POST",
      "summary": "Create Note",
      "description": "Create Note. uuid: You need generate uuid version 4 any generator. For example this: https://www.uuidgenerator.net/version4 Format looks like this: 0acc95cc-ad7a-48e5-9bdc-c4b86de6c620",
      "category": "other",
      "tags": [],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token",
        "Include proper request body with required fields"
      ],
      "use_cases": [
        "Create new {uuid}"
      ],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/note/{uuid}\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.post(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X POST \"https://pierdun.com/public/api/v1/note/{uuid}\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/note/{subject}/{aggregateId}": {
      "path": "/note/{subject}/{aggregateId}",
      "method": "GET",
      "summary": "Get {Subject}",
      "description": "Get Note details.",
      "category": "other",
      "tags": [],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token"
      ],
      "use_cases": [],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/note/{subject}/{aggregateId}\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X GET \"https://pierdun.com/public/api/v1/note/{subject}/{aggregateId}\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/note_image/{uuid}": {
      "path": "/note_image/{uuid}",
      "method": "POST",
      "summary": "Create Note Image",
      "description": "Save Note Image.",
      "category": "other",
      "tags": [],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token",
        "Include proper request body with required fields"
      ],
      "use_cases": [
        "Create new {uuid}"
      ],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/note_image/{uuid}\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.post(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X POST \"https://pierdun.com/public/api/v1/note_image/{uuid}\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/country/list": {
      "path": "/country/list",
      "method": "GET",
      "summary": "Get List",
      "description": "Get Countries.",
      "category": "other",
      "tags": [],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token"
      ],
      "use_cases": [],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/country/list\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X GET \"https://pierdun.com/public/api/v1/country/list\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/currency/list": {
      "path": "/currency/list",
      "method": "GET",
      "summary": "Get List",
      "description": "Get Currencies list.",
      "category": "other",
      "tags": [],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token"
      ],
      "use_cases": [],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/currency/list\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X GET \"https://pierdun.com/public/api/v1/currency/list\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/date_preset/list": {
      "path": "/date_preset/list",
      "method": "GET",
      "summary": "Get List",
      "description": "Get Date Preset List.",
      "category": "other",
      "tags": [],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token"
      ],
      "use_cases": [],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/date_preset/list\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X GET \"https://pierdun.com/public/api/v1/date_preset/list\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/language/list": {
      "path": "/language/list",
      "method": "GET",
      "summary": "Get List",
      "description": "Get Languages.",
      "category": "other",
      "tags": [],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token"
      ],
      "use_cases": [],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/language/list\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X GET \"https://pierdun.com/public/api/v1/language/list\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/system/tokens": {
      "path": "/system/tokens",
      "method": "GET",
      "summary": "Get Tokens",
      "description": "Get System tokens",
      "category": "other",
      "tags": [],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token"
      ],
      "use_cases": [],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/system/tokens\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X GET \"https://pierdun.com/public/api/v1/system/tokens\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/timezone/list": {
      "path": "/timezone/list",
      "method": "GET",
      "summary": "Get List",
      "description": "Get TimeZones.",
      "category": "other",
      "tags": [],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token"
      ],
      "use_cases": [],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/timezone/list\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X GET \"https://pierdun.com/public/api/v1/timezone/list\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/tags": {
      "path": "/tags",
      "method": "POST",
      "summary": "POST /tags",
      "description": "Create Tag.",
      "category": "other",
      "tags": [],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token",
        "Include proper request body with required fields"
      ],
      "use_cases": [
        "Create new tags"
      ],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/tags\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.post(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X POST \"https://pierdun.com/public/api/v1/tags\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/tags/{id}": {
      "path": "/tags/{id}",
      "method": "DELETE",
      "summary": "Delete Tags",
      "description": "Delete Tag.",
      "category": "other",
      "tags": [],
      "parameters": [
        {
          "name": "id",
          "type": "integer",
          "required": true,
          "description": "Resource ID",
          "example": 1
        }
      ],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token",
        "Ensure the ID parameter exists before making the request"
      ],
      "use_cases": [
        "Delete {id}"
      ],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/tags/{id}\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.delete(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X DELETE \"https://pierdun.com/public/api/v1/tags/{id}\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/tags/{subject}/{id}": {
      "path": "/tags/{subject}/{id}",
      "method": "GET",
      "summary": "Get {Subject}",
      "description": "Get linked Tags for specific subject",
      "category": "other",
      "tags": [],
      "parameters": [
        {
          "name": "id",
          "type": "integer",
          "required": true,
          "description": "Resource ID",
          "example": 1
        }
      ],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token",
        "Ensure the ID parameter exists before making the request"
      ],
      "use_cases": [],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/tags/{subject}/{id}\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X GET \"https://pierdun.com/public/api/v1/tags/{subject}/{id}\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/tags/{id}/link": {
      "path": "/tags/{id}/link",
      "method": "POST",
      "summary": "Create Link",
      "description": "Link Tag.",
      "category": "other",
      "tags": [],
      "parameters": [
        {
          "name": "id",
          "type": "integer",
          "required": true,
          "description": "Resource ID",
          "example": 1
        }
      ],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token",
        "Include proper request body with required fields",
        "Ensure the ID parameter exists before making the request"
      ],
      "use_cases": [
        "Create new link"
      ],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/tags/{id}/link\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.post(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X POST \"https://pierdun.com/public/api/v1/tags/{id}/link\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/tags/{subject}/change_tags": {
      "path": "/tags/{subject}/change_tags",
      "method": "POST",
      "summary": "Create Change Tags",
      "description": "Change Tags for multiple specific subject",
      "category": "other",
      "tags": [],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token",
        "Include proper request body with required fields"
      ],
      "use_cases": [
        "Create new change_tags"
      ],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/tags/{subject}/change_tags\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.post(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X POST \"https://pierdun.com/public/api/v1/tags/{subject}/change_tags\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/tags/{id}/unlink": {
      "path": "/tags/{id}/unlink",
      "method": "DELETE",
      "summary": "Delete Unlink",
      "description": "Unlink Tag.",
      "category": "other",
      "tags": [],
      "parameters": [
        {
          "name": "id",
          "type": "integer",
          "required": true,
          "description": "Resource ID",
          "example": 1
        }
      ],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token",
        "Ensure the ID parameter exists before making the request"
      ],
      "use_cases": [
        "Delete unlink"
      ],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/tags/{id}/unlink\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.delete(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X DELETE \"https://pierdun.com/public/api/v1/tags/{id}/unlink\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/traffic_source/{id}/clone": {
      "path": "/traffic_source/{id}/clone",
      "method": "GET",
      "summary": "Get Clone",
      "description": "Clone Traffic Source.",
      "category": "traffic_source",
      "tags": [
        "traffic_source"
      ],
      "parameters": [
        {
          "name": "id",
          "type": "integer",
          "required": true,
          "description": "Resource ID",
          "example": 1
        }
      ],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token",
        "Ensure the ID parameter exists before making the request"
      ],
      "use_cases": [],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/traffic_source/{id}/clone\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X GET \"https://pierdun.com/public/api/v1/traffic_source/{id}/clone\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/traffic_source": {
      "path": "/traffic_source",
      "method": "POST",
      "summary": "POST /traffic_source",
      "description": "Create Traffic Source.",
      "category": "traffic_source",
      "tags": [
        "traffic_source"
      ],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token",
        "Include proper request body with required fields"
      ],
      "use_cases": [
        "Create new traffic_source"
      ],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/traffic_source\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.post(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X POST \"https://pierdun.com/public/api/v1/traffic_source\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/traffic_source/{id}": {
      "path": "/traffic_source/{id}",
      "method": "PATCH",
      "summary": "Modify Traffic Source",
      "description": "Restore Traffic Source.",
      "category": "traffic_source",
      "tags": [
        "traffic_source"
      ],
      "parameters": [
        {
          "name": "id",
          "type": "integer",
          "required": true,
          "description": "Resource ID",
          "example": 1
        }
      ],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token",
        "Ensure the ID parameter exists before making the request"
      ],
      "use_cases": [],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/traffic_source/{id}\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.patch(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X PATCH \"https://pierdun.com/public/api/v1/traffic_source/{id}\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/traffic_source/campaigns_count/{id}": {
      "path": "/traffic_source/campaigns_count/{id}",
      "method": "GET",
      "summary": "Get Campaigns Count",
      "description": "Get Traffic Source Campaigns Count.",
      "category": "campaign",
      "tags": [
        "campaign",
        "traffic_source"
      ],
      "parameters": [
        {
          "name": "id",
          "type": "integer",
          "required": true,
          "description": "Resource ID",
          "example": 1
        }
      ],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token",
        "Ensure the ID parameter exists before making the request"
      ],
      "use_cases": [],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/traffic_source/campaigns_count/{id}\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X GET \"https://pierdun.com/public/api/v1/traffic_source/campaigns_count/{id}\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/traffic_source/list/filtered": {
      "path": "/traffic_source/list/filtered",
      "method": "GET",
      "summary": "Get Filtered",
      "description": "Get Traffic Source list filtered.",
      "category": "traffic_source",
      "tags": [
        "traffic_source"
      ],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token"
      ],
      "use_cases": [],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/traffic_source/list/filtered\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X GET \"https://pierdun.com/public/api/v1/traffic_source/list/filtered\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/traffic_source_templates": {
      "path": "/traffic_source_templates",
      "method": "GET",
      "summary": "GET /traffic_source_templates",
      "description": "Get Traffic Source Templates.",
      "category": "traffic_source",
      "tags": [
        "traffic_source"
      ],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token"
      ],
      "use_cases": [],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/traffic_source_templates\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X GET \"https://pierdun.com/public/api/v1/traffic_source_templates\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/traffic_source/{id}/rename": {
      "path": "/traffic_source/{id}/rename",
      "method": "PUT",
      "summary": "Update Rename",
      "description": "Rename Traffic Source.",
      "category": "traffic_source",
      "tags": [
        "traffic_source"
      ],
      "parameters": [
        {
          "name": "id",
          "type": "integer",
          "required": true,
          "description": "Resource ID",
          "example": 1
        }
      ],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token",
        "Include proper request body with required fields",
        "Ensure the ID parameter exists before making the request"
      ],
      "use_cases": [
        "Update existing rename"
      ],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/traffic_source/{id}/rename\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.put(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X PUT \"https://pierdun.com/public/api/v1/traffic_source/{id}/rename\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/trends": {
      "path": "/trends",
      "method": "GET",
      "summary": "GET /trends",
      "description": "Get Trends.",
      "category": "other",
      "tags": [],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token"
      ],
      "use_cases": [],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/trends\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X GET \"https://pierdun.com/public/api/v1/trends\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/user/change_login": {
      "path": "/user/change_login",
      "method": "PUT",
      "summary": "Update Change Login",
      "description": "Change User Login.",
      "category": "user",
      "tags": [
        "user"
      ],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token",
        "Include proper request body with required fields"
      ],
      "use_cases": [
        "Update existing change_login"
      ],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/user/change_login\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.put(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X PUT \"https://pierdun.com/public/api/v1/user/change_login\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/user/change_password": {
      "path": "/user/change_password",
      "method": "PUT",
      "summary": "Update Change Password",
      "description": "Change User Password.",
      "category": "user",
      "tags": [
        "user"
      ],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token",
        "Include proper request body with required fields"
      ],
      "use_cases": [
        "Update existing change_password"
      ],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/user/change_password\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.put(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X PUT \"https://pierdun.com/public/api/v1/user/change_password\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/user/create": {
      "path": "/user/create",
      "method": "POST",
      "summary": "Create Create",
      "description": "Create User",
      "category": "user",
      "tags": [
        "user"
      ],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token",
        "Include proper request body with required fields"
      ],
      "use_cases": [
        "Create new create"
      ],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/user/create\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.post(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X POST \"https://pierdun.com/public/api/v1/user/create\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/user/{userId}": {
      "path": "/user/{userId}",
      "method": "DELETE",
      "summary": "Delete User",
      "description": "Delete User.",
      "category": "user",
      "tags": [
        "user"
      ],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token"
      ],
      "use_cases": [
        "Delete {userId}"
      ],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/user/{userId}\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.delete(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X DELETE \"https://pierdun.com/public/api/v1/user/{userId}\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/user/{adminId}/can_create_users": {
      "path": "/user/{adminId}/can_create_users",
      "method": "PUT",
      "summary": "Update Can Create Users",
      "description": "Set if admin can create another users.",
      "category": "user",
      "tags": [
        "user"
      ],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token",
        "Include proper request body with required fields"
      ],
      "use_cases": [
        "Update existing can_create_users"
      ],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/user/{adminId}/can_create_users\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.put(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X PUT \"https://pierdun.com/public/api/v1/user/{adminId}/can_create_users\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/user/{userId}/hide_profit": {
      "path": "/user/{userId}/hide_profit",
      "method": "PUT",
      "summary": "Update Hide Profit",
      "description": "Edit User HideProfit.",
      "category": "user",
      "tags": [
        "user"
      ],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token",
        "Include proper request body with required fields"
      ],
      "use_cases": [
        "Update existing hide_profit"
      ],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/user/{userId}/hide_profit\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.put(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X PUT \"https://pierdun.com/public/api/v1/user/{userId}/hide_profit\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/user/{userId}/permissions": {
      "path": "/user/{userId}/permissions",
      "method": "PUT",
      "summary": "Update Permissions",
      "description": "Edit User Permissions.",
      "category": "user",
      "tags": [
        "user"
      ],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token",
        "Include proper request body with required fields"
      ],
      "use_cases": [
        "Update existing permissions"
      ],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/user/{userId}/permissions\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.put(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X PUT \"https://pierdun.com/public/api/v1/user/{userId}/permissions\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/user/{userId}/edit": {
      "path": "/user/{userId}/edit",
      "method": "PUT",
      "summary": "Update Edit",
      "description": "Edit User.",
      "category": "user",
      "tags": [
        "user"
      ],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token",
        "Include proper request body with required fields"
      ],
      "use_cases": [
        "Update existing edit"
      ],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/user/{userId}/edit\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.put(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X PUT \"https://pierdun.com/public/api/v1/user/{userId}/edit\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/user/log": {
      "path": "/user/log",
      "method": "GET",
      "summary": "Get Log",
      "description": "Get Users Events log.",
      "category": "user",
      "tags": [
        "user"
      ],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token"
      ],
      "use_cases": [],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/user/log\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X GET \"https://pierdun.com/public/api/v1/user/log\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/user/log/types": {
      "path": "/user/log/types",
      "method": "GET",
      "summary": "Get Types",
      "description": "Get Users Events log.",
      "category": "user",
      "tags": [
        "user"
      ],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token"
      ],
      "use_cases": [],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/user/log/types\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X GET \"https://pierdun.com/public/api/v1/user/log/types\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/user/2fa/disable": {
      "path": "/user/2fa/disable",
      "method": "POST",
      "summary": "Create Disable",
      "description": "Disable two-factor verification for current user",
      "category": "user",
      "tags": [
        "user"
      ],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token",
        "Include proper request body with required fields"
      ],
      "use_cases": [
        "Create new disable"
      ],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/user/2fa/disable\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.post(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X POST \"https://pierdun.com/public/api/v1/user/2fa/disable\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/user/2fa/enable": {
      "path": "/user/2fa/enable",
      "method": "POST",
      "summary": "Create Enable",
      "description": "Enable two-factor verification for current user",
      "category": "user",
      "tags": [
        "user"
      ],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token",
        "Include proper request body with required fields"
      ],
      "use_cases": [
        "Create new enable"
      ],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/user/2fa/enable\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.post(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X POST \"https://pierdun.com/public/api/v1/user/2fa/enable\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/user/2fa/secret/generate": {
      "path": "/user/2fa/secret/generate",
      "method": "PUT",
      "summary": "Update Generate",
      "description": "Generate two-factor secrets for current user, when two-factor authentication is disabled",
      "category": "user",
      "tags": [
        "user"
      ],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token",
        "Include proper request body with required fields"
      ],
      "use_cases": [
        "Update existing generate"
      ],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/user/2fa/secret/generate\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.put(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X PUT \"https://pierdun.com/public/api/v1/user/2fa/secret/generate\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/user/2fa/status": {
      "path": "/user/2fa/status",
      "method": "GET",
      "summary": "Get Status",
      "description": "Get information about if two-factor verification enabled for current user Identity Identity",
      "category": "user",
      "tags": [
        "user"
      ],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token"
      ],
      "use_cases": [],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/user/2fa/status\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X GET \"https://pierdun.com/public/api/v1/user/2fa/status\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/identity/cookie": {
      "path": "/identity/cookie",
      "method": "PUT",
      "summary": "Update Cookie",
      "description": "Edit cookie settings.",
      "category": "identity",
      "tags": [],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token",
        "Include proper request body with required fields"
      ],
      "use_cases": [
        "Update existing cookie"
      ],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/identity/cookie\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.put(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X PUT \"https://pierdun.com/public/api/v1/identity/cookie\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/identity/{userId}/clone": {
      "path": "/identity/{userId}/clone",
      "method": "GET",
      "summary": "Get Clone",
      "description": "Identity Clone.",
      "category": "identity",
      "tags": [
        "user"
      ],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token"
      ],
      "use_cases": [],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/identity/{userId}/clone\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X GET \"https://pierdun.com/public/api/v1/identity/{userId}/clone\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/identity/{userId}": {
      "path": "/identity/{userId}",
      "method": "GET",
      "summary": "Get Identity",
      "description": "Identity Info.",
      "category": "identity",
      "tags": [
        "user"
      ],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token"
      ],
      "use_cases": [],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/identity/{userId}\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X GET \"https://pierdun.com/public/api/v1/identity/{userId}\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/identity/users/get": {
      "path": "/identity/users/get",
      "method": "GET",
      "summary": "Get Get",
      "description": "Identity Users.",
      "category": "user",
      "tags": [
        "user"
      ],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token"
      ],
      "use_cases": [],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/identity/users/get\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X GET \"https://pierdun.com/public/api/v1/identity/users/get\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/user/{adminId}/accessible-users": {
      "path": "/user/{adminId}/accessible-users",
      "method": "POST",
      "summary": "Create Accessible-Users",
      "description": "Set Accessible Users for Admin.",
      "category": "user",
      "tags": [
        "user"
      ],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token",
        "Include proper request body with required fields"
      ],
      "use_cases": [
        "Create new accessible-users"
      ],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/user/{adminId}/accessible-users\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.post(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X POST \"https://pierdun.com/public/api/v1/user/{adminId}/accessible-users\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/users/accessible": {
      "path": "/users/accessible",
      "method": "GET",
      "summary": "Get Accessible",
      "description": "Accessible Users.",
      "category": "user",
      "tags": [
        "user"
      ],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token"
      ],
      "use_cases": [],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/users/accessible\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X GET \"https://pierdun.com/public/api/v1/users/accessible\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/user/role": {
      "path": "/user/role",
      "method": "GET",
      "summary": "Get Role",
      "description": "User Role.",
      "category": "user",
      "tags": [
        "user"
      ],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token"
      ],
      "use_cases": [],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/user/role\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X GET \"https://pierdun.com/public/api/v1/user/role\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    },
    "/user/logout": {
      "path": "/user/logout",
      "method": "POST",
      "summary": "Create Logout",
      "description": "User Logout.",
      "category": "user",
      "tags": [
        "user"
      ],
      "parameters": [],
      "request_schema": {},
      "response_schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status"
          }
        }
      },
      "response_example": {
        "success": true
      },
      "ai_instructions": [
        "Always use 'api-key' header for authentication, NOT Bearer token",
        "Include proper request body with required fields"
      ],
      "use_cases": [
        "Create new logout"
      ],
      "error_handling": {
        "common_errors": {
          "401": {
            "description": "Unauthorized - Wrong API key or header format",
            "solution": "Use 'api-key' header, not Bearer token"
          },
          "400": {
            "description": "Bad Request - Missing required parameters",
            "solution": "Include datePreset and timezone for stats endpoints"
          },
          "404": {
            "description": "Not Found - Invalid endpoint or resource ID",
            "solution": "Check endpoint path and resource existence"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "solution": "Check API key permissions and resource access"
          }
        }
      },
      "code_examples": {
        "python": "import requests\nimport os\n\napi_key = os.getenv('binomPublic')\nurl = \"https://pierdun.com/public/api/v1/user/logout\"\n\nheaders = {\n    \"api-key\": api_key,\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\n# No parameters needed\n\nresponse = requests.post(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    print(f\"Success: {type(data)} response\")\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "curl": "curl -X POST \"https://pierdun.com/public/api/v1/user/logout\" \\\n  -H \"api-key: $binomPublic\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\""
      },
      "real_data_available": false,
      "last_tested": "",
      "documentation_source": "swagger_parsed"
    }
  },
  "categories": {
    "campaign": {
      "description": "Campaign management and optimization endpoints",
      "endpoints": 10,
      "real_data_available": 0
    },
    "rotation": {
      "description": "Traffic rotation and distribution endpoints",
      "endpoints": 15,
      "real_data_available": 0
    },
    "landing": {
      "description": "Landing page management endpoints",
      "endpoints": 19,
      "real_data_available": 0
    },
    "offer": {
      "description": "Offer management and tracking endpoints",
      "endpoints": 17,
      "real_data_available": 0
    },
    "info": {
      "description": "Basic information endpoints for getting entity lists and details",
      "endpoints": 1,
      "real_data_available": 0
    },
    "other": {
      "description": "Other miscellaneous endpoints",
      "endpoints": 76,
      "real_data_available": 0
    },
    "conversions": {
      "description": "Conversion tracking and management endpoints",
      "endpoints": 6,
      "real_data_available": 0
    },
    "traffic_source": {
      "description": "Traffic source configuration endpoints",
      "endpoints": 6,
      "real_data_available": 0
    },
    "user": {
      "description": "User management and authentication endpoints",
      "endpoints": 19,
      "real_data_available": 0
    },
    "identity": {
      "description": "API key and identity management endpoints",
      "endpoints": 3,
      "real_data_available": 0
    }
  },
  "ai_instructions": {
    "authentication": "CRITICAL: Use 'api-key' header, NOT Bearer token",
    "required_parameters": {
      "stats_endpoints": "datePreset and timezone are REQUIRED",
      "info_endpoints": "datePreset and timezone are optional but recommended"
    },
    "error_handling": "Always check status code and handle 401/400/404 errors",
    "best_practices": [
      "Test authentication first with /info/offer",
      "Use small limits for testing",
      "Handle custom metric UUIDs gracefully",
      "Validate resource IDs before making requests"
    ]
  }
}