[
  {
    "method": "GET",
    "path": "/public/api/v1/affiliate_network/{id}/clone",
    "summary": "Clone Affiliate Network.",
    "description": "Clone Affiliate Network.",
    "tags": [
      "Network Network"
    ],
    "parameters": [
      {
        "name": "id",
        "type": "integer",
        "required": true,
        "description": "Id identifier",
        "in": "path"
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success",
        "example": [
          {
            "id": 1,
            "name": "Example Item",
            "status": "active",
            "createdAt": "2025-09-27T00:00:00Z"
          }
        ]
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/affiliate_network/123/clone\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(\n    f\"{BASE_URL}/public/api/v1/affiliate_network/123/clone\",\n    headers=headers\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "POST",
    "path": "/public/api/v1/affiliate_network",
    "summary": "Create Affiliate Network.",
    "description": "Create Affiliate Network.",
    "tags": [
      "Network Network"
    ],
    "parameters": [],
    "requestBody": {
      "contentType": "application/json",
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Resource name"
          }
        }
      },
      "example": {
        "name": "Example Resource"
      }
    },
    "responses": {
      "201": {
        "description": "Created successfully",
        "example": {
          "id": 123,
          "message": "Resource created successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      }
    },
    "examples": {
      "curl": "curl -X POST \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/affiliate_network\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(\n    f\"{BASE_URL}/public/api/v1/affiliate_network\",\n    headers=headers,\n    json={'name': 'Example Resource'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "GET",
    "path": "/public/api/v1/affiliate_network/{id}",
    "summary": "Get Affiliate Network details.",
    "description": "Get Affiliate Network details.",
    "tags": [
      "Network Network"
    ],
    "parameters": [
      {
        "name": "id",
        "type": "integer",
        "required": true,
        "description": "Id identifier",
        "in": "path"
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success",
        "example": [
          {
            "id": 1,
            "name": "Example Item",
            "status": "active",
            "createdAt": "2025-09-27T00:00:00Z"
          }
        ]
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/affiliate_network/123\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(\n    f\"{BASE_URL}/public/api/v1/affiliate_network/123\",\n    headers=headers\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "PUT",
    "path": "/public/api/v1/affiliate_network/{id}",
    "summary": "Edit Affiliate Network.",
    "description": "Edit Affiliate Network.",
    "tags": [
      "Network Network"
    ],
    "parameters": [
      {
        "name": "id",
        "type": "integer",
        "required": true,
        "description": "Id identifier",
        "in": "path"
      }
    ],
    "requestBody": {
      "contentType": "application/json",
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Resource name"
          }
        }
      },
      "example": {
        "name": "Example Resource"
      }
    },
    "responses": {
      "200": {
        "description": "Updated successfully",
        "example": {
          "message": "Resource updated successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X PUT \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/affiliate_network/123\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.put(\n    f\"{BASE_URL}/public/api/v1/affiliate_network/123\",\n    headers=headers,\n    json={'name': 'Example Resource'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "DELETE",
    "path": "/public/api/v1/affiliate_network/{id}",
    "summary": "Delete Affiliate Network.",
    "description": "Delete Affiliate Network.",
    "tags": [
      "Network Network"
    ],
    "parameters": [
      {
        "name": "id",
        "type": "integer",
        "required": true,
        "description": "Id identifier",
        "in": "path"
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Deleted successfully",
        "example": {
          "message": "Resource deleted successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X DELETE \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/affiliate_network/123\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.delete(\n    f\"{BASE_URL}/public/api/v1/affiliate_network/123\",\n    headers=headers\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "PATCH",
    "path": "/public/api/v1/affiliate_network/{id}",
    "summary": "Restore Affiliate Network.",
    "description": "Restore Affiliate Network.",
    "tags": [
      "Network Network"
    ],
    "parameters": [
      {
        "name": "id",
        "type": "integer",
        "required": true,
        "description": "Id identifier",
        "in": "path"
      }
    ],
    "requestBody": {
      "contentType": "application/json",
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Resource name"
          }
        }
      },
      "example": {
        "name": "Example Resource"
      }
    },
    "responses": {
      "200": {
        "description": "Restored/Modified successfully",
        "example": {
          "message": "Resource restored successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X PATCH \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/affiliate_network/123\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.patch(\n    f\"{BASE_URL}/public/api/v1/affiliate_network/123\",\n    headers=headers,\n    json={'name': 'Example Resource'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "GET",
    "path": "/public/api/v1/affiliate_network/list/filtered",
    "summary": "Get Affiliate network list filtered.",
    "description": "Get Affiliate network list filtered.",
    "tags": [
      "Network Network"
    ],
    "parameters": [
      {
        "name": "datePreset",
        "type": "string",
        "required": true,
        "description": "Time period filter (e.g., 'last_7_days', 'today', 'yesterday')",
        "in": "query",
        "enum": [
          "today",
          "yesterday",
          "this_week",
          "last_week",
          "last_7_days",
          "last_14_days",
          "last_30_days",
          "this_month",
          "last_month",
          "this_year",
          "last_year",
          "all_time",
          "custom_time"
        ]
      },
      {
        "name": "timezone",
        "type": "string",
        "required": true,
        "description": "Timezone for date calculations (e.g., 'UTC')",
        "in": "query",
        "default": "UTC"
      },
      {
        "name": "limit",
        "type": "integer",
        "required": false,
        "description": "Maximum number of records to return (max 1000)",
        "in": "query",
        "default": 100
      },
      {
        "name": "offset",
        "type": "integer",
        "required": false,
        "description": "Number of records to skip for pagination",
        "in": "query",
        "default": 0
      },
      {
        "name": "sortColumn",
        "type": "string",
        "required": false,
        "description": "Column to sort by",
        "in": "query"
      },
      {
        "name": "sortType",
        "type": "string",
        "required": false,
        "description": "Sort direction",
        "in": "query",
        "enum": [
          "asc",
          "desc"
        ]
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success",
        "example": [
          {
            "id": 1,
            "name": "Example Item",
            "status": "active",
            "createdAt": "2025-09-27T00:00:00Z"
          }
        ]
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/affiliate_network/list/filtered?datePreset=VALUE&timezone=UTC\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(\n    f\"{BASE_URL}/public/api/v1/affiliate_network/list/filtered\",\n    headers=headers,\n    params={'datePreset': 'VALUE', 'timezone': 'UTC'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "GET",
    "path": "/public/api/v1/affiliate_network/list/all",
    "summary": "Get Affiliate Network list.",
    "description": "Get Affiliate Network list.",
    "tags": [
      "Network Network"
    ],
    "parameters": [
      {
        "name": "datePreset",
        "type": "string",
        "required": true,
        "description": "Time period filter (e.g., 'last_7_days', 'today', 'yesterday')",
        "in": "query",
        "enum": [
          "today",
          "yesterday",
          "this_week",
          "last_week",
          "last_7_days",
          "last_14_days",
          "last_30_days",
          "this_month",
          "last_month",
          "this_year",
          "last_year",
          "all_time",
          "custom_time"
        ]
      },
      {
        "name": "timezone",
        "type": "string",
        "required": true,
        "description": "Timezone for date calculations (e.g., 'UTC')",
        "in": "query",
        "default": "UTC"
      },
      {
        "name": "limit",
        "type": "integer",
        "required": false,
        "description": "Maximum number of records to return (max 1000)",
        "in": "query",
        "default": 100
      },
      {
        "name": "offset",
        "type": "integer",
        "required": false,
        "description": "Number of records to skip for pagination",
        "in": "query",
        "default": 0
      },
      {
        "name": "sortColumn",
        "type": "string",
        "required": false,
        "description": "Column to sort by",
        "in": "query"
      },
      {
        "name": "sortType",
        "type": "string",
        "required": false,
        "description": "Sort direction",
        "in": "query",
        "enum": [
          "asc",
          "desc"
        ]
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success",
        "example": [
          {
            "id": 1,
            "name": "Example Item",
            "status": "active",
            "createdAt": "2025-09-27T00:00:00Z"
          }
        ]
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/affiliate_network/list/all?datePreset=VALUE&timezone=UTC\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(\n    f\"{BASE_URL}/public/api/v1/affiliate_network/list/all\",\n    headers=headers,\n    params={'datePreset': 'VALUE', 'timezone': 'UTC'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "GET",
    "path": "/public/api/v1/affiliate_network/preset/catalog",
    "summary": "Get Affiliate Network presets.",
    "description": "Get Affiliate Network presets.",
    "tags": [
      "Network Network"
    ],
    "parameters": [],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success",
        "example": [
          {
            "id": 1,
            "name": "Example Item",
            "status": "active",
            "createdAt": "2025-09-27T00:00:00Z"
          }
        ]
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/affiliate_network/preset/catalog\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(\n    f\"{BASE_URL}/public/api/v1/affiliate_network/preset/catalog\",\n    headers=headers\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "PUT",
    "path": "/public/api/v1/affiliate_network/{id}/rename",
    "summary": "Rename Affiliate Network.",
    "description": "Rename Affiliate Network.",
    "tags": [
      "Network Network"
    ],
    "parameters": [
      {
        "name": "id",
        "type": "integer",
        "required": true,
        "description": "Id identifier",
        "in": "path"
      }
    ],
    "requestBody": {
      "contentType": "application/json",
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Resource name"
          }
        }
      },
      "example": {
        "name": "Example Resource"
      }
    },
    "responses": {
      "200": {
        "description": "Updated successfully",
        "example": {
          "message": "Resource updated successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X PUT \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/affiliate_network/123/rename\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.put(\n    f\"{BASE_URL}/public/api/v1/affiliate_network/123/rename\",\n    headers=headers,\n    json={'name': 'Example Resource'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "PUT",
    "path": "/public/api/v1/clicks/campaign/{id}",
    "summary": "Update campaign`s clicks cost.",
    "description": "Update campaign`s clicks cost.",
    "tags": [
      ""
    ],
    "parameters": [
      {
        "name": "id",
        "type": "integer",
        "required": true,
        "description": "Id identifier",
        "in": "path"
      }
    ],
    "requestBody": {
      "contentType": "application/json",
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Campaign name"
          },
          "cost": {
            "type": "number",
            "description": "Cost per click"
          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "paused"
            ],
            "description": "Campaign status"
          }
        }
      },
      "example": {
        "name": "Updated Campaign Name",
        "cost": 0.15,
        "status": "active"
      }
    },
    "responses": {
      "200": {
        "description": "Updated successfully",
        "example": {
          "message": "Resource updated successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X PUT \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/clicks/campaign/123\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.put(\n    f\"{BASE_URL}/public/api/v1/clicks/campaign/123\",\n    headers=headers,\n    json={'name': 'Updated Campaign Name', 'cost': 0.15, 'status': 'active'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "DELETE",
    "path": "/public/api/v1/clicks/campaign/{id}",
    "summary": "Delete campaign`s clicks.",
    "description": "Delete campaign`s clicks.",
    "tags": [
      ""
    ],
    "parameters": [
      {
        "name": "id",
        "type": "integer",
        "required": true,
        "description": "Id identifier",
        "in": "path"
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Deleted successfully",
        "example": {
          "message": "Resource deleted successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X DELETE \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/clicks/campaign/123\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.delete(\n    f\"{BASE_URL}/public/api/v1/clicks/campaign/123\",\n    headers=headers\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "GET",
    "path": "/public/api/v1/info/affiliate_network",
    "summary": "Get traffic sources info.",
    "description": "Get traffic sources info.",
    "tags": [
      "stats stats"
    ],
    "parameters": [
      {
        "name": "datePreset",
        "type": "string",
        "required": true,
        "description": "Time period filter (e.g., 'last_7_days', 'today', 'yesterday')",
        "in": "query",
        "enum": [
          "today",
          "yesterday",
          "this_week",
          "last_week",
          "last_7_days",
          "last_14_days",
          "last_30_days",
          "this_month",
          "last_month",
          "this_year",
          "last_year",
          "all_time",
          "custom_time"
        ]
      },
      {
        "name": "timezone",
        "type": "string",
        "required": true,
        "description": "Timezone for date calculations (e.g., 'UTC')",
        "in": "query",
        "default": "UTC"
      },
      {
        "name": "limit",
        "type": "integer",
        "required": false,
        "description": "Maximum number of records to return (max 1000)",
        "in": "query",
        "default": 100
      },
      {
        "name": "offset",
        "type": "integer",
        "required": false,
        "description": "Number of records to skip for pagination",
        "in": "query",
        "default": 0
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success",
        "example": [
          {
            "id": 1,
            "name": "Example Item",
            "status": "active",
            "createdAt": "2025-09-27T00:00:00Z"
          }
        ]
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/info/affiliate_network?datePreset=VALUE&timezone=UTC\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(\n    f\"{BASE_URL}/public/api/v1/info/affiliate_network\",\n    headers=headers,\n    params={'datePreset': 'VALUE', 'timezone': 'UTC'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "GET",
    "path": "/public/api/v1/info/campaign",
    "summary": "Get campaigns info.",
    "description": "Get campaigns info.",
    "tags": [
      "stats stats"
    ],
    "parameters": [
      {
        "name": "datePreset",
        "type": "string",
        "required": true,
        "description": "Time period filter (e.g., 'last_7_days', 'today', 'yesterday')",
        "in": "query",
        "enum": [
          "today",
          "yesterday",
          "this_week",
          "last_week",
          "last_7_days",
          "last_14_days",
          "last_30_days",
          "this_month",
          "last_month",
          "this_year",
          "last_year",
          "all_time",
          "custom_time"
        ]
      },
      {
        "name": "timezone",
        "type": "string",
        "required": true,
        "description": "Timezone for date calculations (e.g., 'UTC')",
        "in": "query",
        "default": "UTC"
      },
      {
        "name": "limit",
        "type": "integer",
        "required": false,
        "description": "Maximum number of records to return (max 1000)",
        "in": "query",
        "default": 100
      },
      {
        "name": "offset",
        "type": "integer",
        "required": false,
        "description": "Number of records to skip for pagination",
        "in": "query",
        "default": 0
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success",
        "example": [
          {
            "id": 1,
            "name": "Example Item",
            "status": "active",
            "createdAt": "2025-09-27T00:00:00Z"
          }
        ]
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/info/campaign?datePreset=VALUE&timezone=UTC\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(\n    f\"{BASE_URL}/public/api/v1/info/campaign\",\n    headers=headers,\n    params={'datePreset': 'VALUE', 'timezone': 'UTC'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "GET",
    "path": "/public/api/v1/info/landing",
    "summary": "Get landings info.",
    "description": "Get landings info.",
    "tags": [
      "stats stats"
    ],
    "parameters": [
      {
        "name": "datePreset",
        "type": "string",
        "required": true,
        "description": "Time period filter (e.g., 'last_7_days', 'today', 'yesterday')",
        "in": "query",
        "enum": [
          "today",
          "yesterday",
          "this_week",
          "last_week",
          "last_7_days",
          "last_14_days",
          "last_30_days",
          "this_month",
          "last_month",
          "this_year",
          "last_year",
          "all_time",
          "custom_time"
        ]
      },
      {
        "name": "timezone",
        "type": "string",
        "required": true,
        "description": "Timezone for date calculations (e.g., 'UTC')",
        "in": "query",
        "default": "UTC"
      },
      {
        "name": "limit",
        "type": "integer",
        "required": false,
        "description": "Maximum number of records to return (max 1000)",
        "in": "query",
        "default": 100
      },
      {
        "name": "offset",
        "type": "integer",
        "required": false,
        "description": "Number of records to skip for pagination",
        "in": "query",
        "default": 0
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success",
        "example": [
          {
            "id": 1,
            "name": "Example Item",
            "status": "active",
            "createdAt": "2025-09-27T00:00:00Z"
          }
        ]
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/info/landing?datePreset=VALUE&timezone=UTC\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(\n    f\"{BASE_URL}/public/api/v1/info/landing\",\n    headers=headers,\n    params={'datePreset': 'VALUE', 'timezone': 'UTC'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "GET",
    "path": "/public/api/v1/info/offer",
    "summary": "Get offers info.",
    "description": "Get offers info.",
    "tags": [
      "stats stats"
    ],
    "parameters": [
      {
        "name": "datePreset",
        "type": "string",
        "required": true,
        "description": "Time period filter (e.g., 'last_7_days', 'today', 'yesterday')",
        "in": "query",
        "enum": [
          "today",
          "yesterday",
          "this_week",
          "last_week",
          "last_7_days",
          "last_14_days",
          "last_30_days",
          "this_month",
          "last_month",
          "this_year",
          "last_year",
          "all_time",
          "custom_time"
        ]
      },
      {
        "name": "timezone",
        "type": "string",
        "required": true,
        "description": "Timezone for date calculations (e.g., 'UTC')",
        "in": "query",
        "default": "UTC"
      },
      {
        "name": "limit",
        "type": "integer",
        "required": false,
        "description": "Maximum number of records to return (max 1000)",
        "in": "query",
        "default": 100
      },
      {
        "name": "offset",
        "type": "integer",
        "required": false,
        "description": "Number of records to skip for pagination",
        "in": "query",
        "default": 0
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success",
        "example": [
          {
            "id": 1,
            "name": "Example Item",
            "status": "active",
            "createdAt": "2025-09-27T00:00:00Z"
          }
        ]
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/info/offer?datePreset=VALUE&timezone=UTC\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(\n    f\"{BASE_URL}/public/api/v1/info/offer\",\n    headers=headers,\n    params={'datePreset': 'VALUE', 'timezone': 'UTC'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "GET",
    "path": "/public/api/v1/info/rotation",
    "summary": "Get rotations info.",
    "description": "Get rotations info.",
    "tags": [
      "stats stats"
    ],
    "parameters": [
      {
        "name": "datePreset",
        "type": "string",
        "required": true,
        "description": "Time period filter (e.g., 'last_7_days', 'today', 'yesterday')",
        "in": "query",
        "enum": [
          "today",
          "yesterday",
          "this_week",
          "last_week",
          "last_7_days",
          "last_14_days",
          "last_30_days",
          "this_month",
          "last_month",
          "this_year",
          "last_year",
          "all_time",
          "custom_time"
        ]
      },
      {
        "name": "timezone",
        "type": "string",
        "required": true,
        "description": "Timezone for date calculations (e.g., 'UTC')",
        "in": "query",
        "default": "UTC"
      },
      {
        "name": "limit",
        "type": "integer",
        "required": false,
        "description": "Maximum number of records to return (max 1000)",
        "in": "query",
        "default": 100
      },
      {
        "name": "offset",
        "type": "integer",
        "required": false,
        "description": "Number of records to skip for pagination",
        "in": "query",
        "default": 0
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success",
        "example": [
          {
            "id": 1,
            "name": "Example Item",
            "status": "active",
            "createdAt": "2025-09-27T00:00:00Z"
          }
        ]
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/info/rotation?datePreset=VALUE&timezone=UTC\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(\n    f\"{BASE_URL}/public/api/v1/info/rotation\",\n    headers=headers,\n    params={'datePreset': 'VALUE', 'timezone': 'UTC'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "GET",
    "path": "/public/api/v1/info/traffic_source",
    "summary": "Get traffic sources info.",
    "description": "Get traffic sources info.",
    "tags": [
      "stats stats"
    ],
    "parameters": [
      {
        "name": "datePreset",
        "type": "string",
        "required": true,
        "description": "Time period filter (e.g., 'last_7_days', 'today', 'yesterday')",
        "in": "query",
        "enum": [
          "today",
          "yesterday",
          "this_week",
          "last_week",
          "last_7_days",
          "last_14_days",
          "last_30_days",
          "this_month",
          "last_month",
          "this_year",
          "last_year",
          "all_time",
          "custom_time"
        ]
      },
      {
        "name": "timezone",
        "type": "string",
        "required": true,
        "description": "Timezone for date calculations (e.g., 'UTC')",
        "in": "query",
        "default": "UTC"
      },
      {
        "name": "limit",
        "type": "integer",
        "required": false,
        "description": "Maximum number of records to return (max 1000)",
        "in": "query",
        "default": 100
      },
      {
        "name": "offset",
        "type": "integer",
        "required": false,
        "description": "Number of records to skip for pagination",
        "in": "query",
        "default": 0
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success",
        "example": [
          {
            "id": 1,
            "name": "Example Item",
            "status": "active",
            "createdAt": "2025-09-27T00:00:00Z"
          }
        ]
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/info/traffic_source?datePreset=VALUE&timezone=UTC\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(\n    f\"{BASE_URL}/public/api/v1/info/traffic_source\",\n    headers=headers,\n    params={'datePreset': 'VALUE', 'timezone': 'UTC'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "GET",
    "path": "/public/api/v1/report/{page}",
    "summary": "Get Report.",
    "description": "Get Report.",
    "tags": [
      ""
    ],
    "parameters": [
      {
        "name": "page",
        "type": "string",
        "required": true,
        "description": "Page identifier",
        "in": "path"
      },
      {
        "name": "datePreset",
        "type": "string",
        "required": true,
        "description": "Time period filter (e.g., 'last_7_days', 'today', 'yesterday')",
        "in": "query",
        "enum": [
          "today",
          "yesterday",
          "this_week",
          "last_week",
          "last_7_days",
          "last_14_days",
          "last_30_days",
          "this_month",
          "last_month",
          "this_year",
          "last_year",
          "all_time",
          "custom_time"
        ]
      },
      {
        "name": "timezone",
        "type": "string",
        "required": true,
        "description": "Timezone for date calculations (e.g., 'UTC')",
        "in": "query",
        "default": "UTC"
      },
      {
        "name": "limit",
        "type": "integer",
        "required": false,
        "description": "Maximum number of records to return (max 1000)",
        "in": "query",
        "default": 100
      },
      {
        "name": "offset",
        "type": "integer",
        "required": false,
        "description": "Number of records to skip for pagination",
        "in": "query",
        "default": 0
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success",
        "example": [
          {
            "id": 1,
            "name": "Example Item",
            "status": "active",
            "createdAt": "2025-09-27T00:00:00Z"
          }
        ]
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/report/123?datePreset=VALUE&timezone=UTC\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(\n    f\"{BASE_URL}/public/api/v1/report/123\",\n    headers=headers,\n    params={'datePreset': 'VALUE', 'timezone': 'UTC'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "GET",
    "path": "/public/api/v1/report/user/campaign",
    "summary": "Get user campaigns Report.",
    "description": "Get user campaigns Report.",
    "tags": [
      ""
    ],
    "parameters": [
      {
        "name": "datePreset",
        "type": "string",
        "required": true,
        "description": "Time period filter (e.g., 'last_7_days', 'today', 'yesterday')",
        "in": "query",
        "enum": [
          "today",
          "yesterday",
          "this_week",
          "last_week",
          "last_7_days",
          "last_14_days",
          "last_30_days",
          "this_month",
          "last_month",
          "this_year",
          "last_year",
          "all_time",
          "custom_time"
        ]
      },
      {
        "name": "timezone",
        "type": "string",
        "required": true,
        "description": "Timezone for date calculations (e.g., 'UTC')",
        "in": "query",
        "default": "UTC"
      },
      {
        "name": "limit",
        "type": "integer",
        "required": false,
        "description": "Maximum number of records to return (max 1000)",
        "in": "query",
        "default": 100
      },
      {
        "name": "offset",
        "type": "integer",
        "required": false,
        "description": "Number of records to skip for pagination",
        "in": "query",
        "default": 0
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success",
        "example": [
          {
            "id": 1,
            "name": "Example Item",
            "status": "active",
            "createdAt": "2025-09-27T00:00:00Z"
          }
        ]
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/report/user/campaign?datePreset=VALUE&timezone=UTC\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(\n    f\"{BASE_URL}/public/api/v1/report/user/campaign\",\n    headers=headers,\n    params={'datePreset': 'VALUE', 'timezone': 'UTC'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "GET",
    "path": "/public/api/v1/report/affiliate_network/groupings",
    "summary": "Get Affiliate network Groupings for single aggregate.",
    "description": "Get Affiliate network Groupings for single aggregate.",
    "tags": [
      "groupings groupings"
    ],
    "parameters": [
      {
        "name": "datePreset",
        "type": "string",
        "required": true,
        "description": "Time period filter (e.g., 'last_7_days', 'today', 'yesterday')",
        "in": "query",
        "enum": [
          "today",
          "yesterday",
          "this_week",
          "last_week",
          "last_7_days",
          "last_14_days",
          "last_30_days",
          "this_month",
          "last_month",
          "this_year",
          "last_year",
          "all_time",
          "custom_time"
        ]
      },
      {
        "name": "timezone",
        "type": "string",
        "required": true,
        "description": "Timezone for date calculations (e.g., 'UTC')",
        "in": "query",
        "default": "UTC"
      },
      {
        "name": "limit",
        "type": "integer",
        "required": false,
        "description": "Maximum number of records to return (max 1000)",
        "in": "query",
        "default": 100
      },
      {
        "name": "offset",
        "type": "integer",
        "required": false,
        "description": "Number of records to skip for pagination",
        "in": "query",
        "default": 0
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success",
        "example": [
          {
            "id": 1,
            "name": "Example Item",
            "status": "active",
            "createdAt": "2025-09-27T00:00:00Z"
          }
        ]
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/report/affiliate_network/groupings?datePreset=VALUE&timezone=UTC\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(\n    f\"{BASE_URL}/public/api/v1/report/affiliate_network/groupings\",\n    headers=headers,\n    params={'datePreset': 'VALUE', 'timezone': 'UTC'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "GET",
    "path": "/public/api/v1/report/campaign/groupings",
    "summary": "Get Campaign Groupings for single aggregate.",
    "description": "Get Campaign Groupings for single aggregate.",
    "tags": [
      "groupings groupings"
    ],
    "parameters": [
      {
        "name": "datePreset",
        "type": "string",
        "required": true,
        "description": "Time period filter (e.g., 'last_7_days', 'today', 'yesterday')",
        "in": "query",
        "enum": [
          "today",
          "yesterday",
          "this_week",
          "last_week",
          "last_7_days",
          "last_14_days",
          "last_30_days",
          "this_month",
          "last_month",
          "this_year",
          "last_year",
          "all_time",
          "custom_time"
        ]
      },
      {
        "name": "timezone",
        "type": "string",
        "required": true,
        "description": "Timezone for date calculations (e.g., 'UTC')",
        "in": "query",
        "default": "UTC"
      },
      {
        "name": "limit",
        "type": "integer",
        "required": false,
        "description": "Maximum number of records to return (max 1000)",
        "in": "query",
        "default": 100
      },
      {
        "name": "offset",
        "type": "integer",
        "required": false,
        "description": "Number of records to skip for pagination",
        "in": "query",
        "default": 0
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success",
        "example": [
          {
            "id": 1,
            "name": "Example Item",
            "status": "active",
            "createdAt": "2025-09-27T00:00:00Z"
          }
        ]
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/report/campaign/groupings?datePreset=VALUE&timezone=UTC\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(\n    f\"{BASE_URL}/public/api/v1/report/campaign/groupings\",\n    headers=headers,\n    params={'datePreset': 'VALUE', 'timezone': 'UTC'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "GET",
    "path": "/public/api/v1/report/campaign/groupings/multiple",
    "summary": "Get Groupings for multiple aggregates.",
    "description": "Get Groupings for multiple aggregates.",
    "tags": [
      "groupings groupings"
    ],
    "parameters": [
      {
        "name": "datePreset",
        "type": "string",
        "required": true,
        "description": "Time period filter (e.g., 'last_7_days', 'today', 'yesterday')",
        "in": "query",
        "enum": [
          "today",
          "yesterday",
          "this_week",
          "last_week",
          "last_7_days",
          "last_14_days",
          "last_30_days",
          "this_month",
          "last_month",
          "this_year",
          "last_year",
          "all_time",
          "custom_time"
        ]
      },
      {
        "name": "timezone",
        "type": "string",
        "required": true,
        "description": "Timezone for date calculations (e.g., 'UTC')",
        "in": "query",
        "default": "UTC"
      },
      {
        "name": "limit",
        "type": "integer",
        "required": false,
        "description": "Maximum number of records to return (max 1000)",
        "in": "query",
        "default": 100
      },
      {
        "name": "offset",
        "type": "integer",
        "required": false,
        "description": "Number of records to skip for pagination",
        "in": "query",
        "default": 0
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success",
        "example": [
          {
            "id": 1,
            "name": "Example Item",
            "status": "active",
            "createdAt": "2025-09-27T00:00:00Z"
          }
        ]
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/report/campaign/groupings/multiple?datePreset=VALUE&timezone=UTC\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(\n    f\"{BASE_URL}/public/api/v1/report/campaign/groupings/multiple\",\n    headers=headers,\n    params={'datePreset': 'VALUE', 'timezone': 'UTC'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "GET",
    "path": "/public/api/v1/report/landing/groupings",
    "summary": "Get Landing Groupings for single aggregate.",
    "description": "Get Landing Groupings for single aggregate.",
    "tags": [
      "groupings groupings"
    ],
    "parameters": [
      {
        "name": "datePreset",
        "type": "string",
        "required": true,
        "description": "Time period filter (e.g., 'last_7_days', 'today', 'yesterday')",
        "in": "query",
        "enum": [
          "today",
          "yesterday",
          "this_week",
          "last_week",
          "last_7_days",
          "last_14_days",
          "last_30_days",
          "this_month",
          "last_month",
          "this_year",
          "last_year",
          "all_time",
          "custom_time"
        ]
      },
      {
        "name": "timezone",
        "type": "string",
        "required": true,
        "description": "Timezone for date calculations (e.g., 'UTC')",
        "in": "query",
        "default": "UTC"
      },
      {
        "name": "limit",
        "type": "integer",
        "required": false,
        "description": "Maximum number of records to return (max 1000)",
        "in": "query",
        "default": 100
      },
      {
        "name": "offset",
        "type": "integer",
        "required": false,
        "description": "Number of records to skip for pagination",
        "in": "query",
        "default": 0
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success",
        "example": [
          {
            "id": 1,
            "name": "Example Item",
            "status": "active",
            "createdAt": "2025-09-27T00:00:00Z"
          }
        ]
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/report/landing/groupings?datePreset=VALUE&timezone=UTC\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(\n    f\"{BASE_URL}/public/api/v1/report/landing/groupings\",\n    headers=headers,\n    params={'datePreset': 'VALUE', 'timezone': 'UTC'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "GET",
    "path": "/public/api/v1/report/groupings/multiple",
    "summary": "Get Groupings for multiple aggregates.",
    "description": "Get Groupings for multiple aggregates.",
    "tags": [
      "groupings groupings"
    ],
    "parameters": [
      {
        "name": "datePreset",
        "type": "string",
        "required": true,
        "description": "Time period filter (e.g., 'last_7_days', 'today', 'yesterday')",
        "in": "query",
        "enum": [
          "today",
          "yesterday",
          "this_week",
          "last_week",
          "last_7_days",
          "last_14_days",
          "last_30_days",
          "this_month",
          "last_month",
          "this_year",
          "last_year",
          "all_time",
          "custom_time"
        ]
      },
      {
        "name": "timezone",
        "type": "string",
        "required": true,
        "description": "Timezone for date calculations (e.g., 'UTC')",
        "in": "query",
        "default": "UTC"
      },
      {
        "name": "limit",
        "type": "integer",
        "required": false,
        "description": "Maximum number of records to return (max 1000)",
        "in": "query",
        "default": 100
      },
      {
        "name": "offset",
        "type": "integer",
        "required": false,
        "description": "Number of records to skip for pagination",
        "in": "query",
        "default": 0
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success",
        "example": [
          {
            "id": 1,
            "name": "Example Item",
            "status": "active",
            "createdAt": "2025-09-27T00:00:00Z"
          }
        ]
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/report/groupings/multiple?datePreset=VALUE&timezone=UTC\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(\n    f\"{BASE_URL}/public/api/v1/report/groupings/multiple\",\n    headers=headers,\n    params={'datePreset': 'VALUE', 'timezone': 'UTC'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "GET",
    "path": "/public/api/v1/report/offer/groupings",
    "summary": "Get Offer Groupings for single aggregate.",
    "description": "Get Offer Groupings for single aggregate.",
    "tags": [
      "groupings groupings"
    ],
    "parameters": [
      {
        "name": "datePreset",
        "type": "string",
        "required": true,
        "description": "Time period filter (e.g., 'last_7_days', 'today', 'yesterday')",
        "in": "query",
        "enum": [
          "today",
          "yesterday",
          "this_week",
          "last_week",
          "last_7_days",
          "last_14_days",
          "last_30_days",
          "this_month",
          "last_month",
          "this_year",
          "last_year",
          "all_time",
          "custom_time"
        ]
      },
      {
        "name": "timezone",
        "type": "string",
        "required": true,
        "description": "Timezone for date calculations (e.g., 'UTC')",
        "in": "query",
        "default": "UTC"
      },
      {
        "name": "limit",
        "type": "integer",
        "required": false,
        "description": "Maximum number of records to return (max 1000)",
        "in": "query",
        "default": 100
      },
      {
        "name": "offset",
        "type": "integer",
        "required": false,
        "description": "Number of records to skip for pagination",
        "in": "query",
        "default": 0
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success",
        "example": [
          {
            "id": 1,
            "name": "Example Item",
            "status": "active",
            "createdAt": "2025-09-27T00:00:00Z"
          }
        ]
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/report/offer/groupings?datePreset=VALUE&timezone=UTC\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(\n    f\"{BASE_URL}/public/api/v1/report/offer/groupings\",\n    headers=headers,\n    params={'datePreset': 'VALUE', 'timezone': 'UTC'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "GET",
    "path": "/public/api/v1/report/rotation/groupings",
    "summary": "Get Rotation Groupings for single aggregate.",
    "description": "Get Rotation Groupings for single aggregate.",
    "tags": [
      "groupings groupings"
    ],
    "parameters": [
      {
        "name": "datePreset",
        "type": "string",
        "required": true,
        "description": "Time period filter (e.g., 'last_7_days', 'today', 'yesterday')",
        "in": "query",
        "enum": [
          "today",
          "yesterday",
          "this_week",
          "last_week",
          "last_7_days",
          "last_14_days",
          "last_30_days",
          "this_month",
          "last_month",
          "this_year",
          "last_year",
          "all_time",
          "custom_time"
        ]
      },
      {
        "name": "timezone",
        "type": "string",
        "required": true,
        "description": "Timezone for date calculations (e.g., 'UTC')",
        "in": "query",
        "default": "UTC"
      },
      {
        "name": "limit",
        "type": "integer",
        "required": false,
        "description": "Maximum number of records to return (max 1000)",
        "in": "query",
        "default": 100
      },
      {
        "name": "offset",
        "type": "integer",
        "required": false,
        "description": "Number of records to skip for pagination",
        "in": "query",
        "default": 0
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success",
        "example": [
          {
            "id": 1,
            "name": "Example Item",
            "status": "active",
            "createdAt": "2025-09-27T00:00:00Z"
          }
        ]
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/report/rotation/groupings?datePreset=VALUE&timezone=UTC\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(\n    f\"{BASE_URL}/public/api/v1/report/rotation/groupings\",\n    headers=headers,\n    params={'datePreset': 'VALUE', 'timezone': 'UTC'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "GET",
    "path": "/public/api/v1/report/traffic_source/groupings",
    "summary": "Get Traffic source Groupings for single aggregate.",
    "description": "Get Traffic source Groupings for single aggregate.",
    "tags": [
      "groupings groupings"
    ],
    "parameters": [
      {
        "name": "datePreset",
        "type": "string",
        "required": true,
        "description": "Time period filter (e.g., 'last_7_days', 'today', 'yesterday')",
        "in": "query",
        "enum": [
          "today",
          "yesterday",
          "this_week",
          "last_week",
          "last_7_days",
          "last_14_days",
          "last_30_days",
          "this_month",
          "last_month",
          "this_year",
          "last_year",
          "all_time",
          "custom_time"
        ]
      },
      {
        "name": "timezone",
        "type": "string",
        "required": true,
        "description": "Timezone for date calculations (e.g., 'UTC')",
        "in": "query",
        "default": "UTC"
      },
      {
        "name": "limit",
        "type": "integer",
        "required": false,
        "description": "Maximum number of records to return (max 1000)",
        "in": "query",
        "default": 100
      },
      {
        "name": "offset",
        "type": "integer",
        "required": false,
        "description": "Number of records to skip for pagination",
        "in": "query",
        "default": 0
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success",
        "example": [
          {
            "id": 1,
            "name": "Example Item",
            "status": "active",
            "createdAt": "2025-09-27T00:00:00Z"
          }
        ]
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/report/traffic_source/groupings?datePreset=VALUE&timezone=UTC\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(\n    f\"{BASE_URL}/public/api/v1/report/traffic_source/groupings\",\n    headers=headers,\n    params={'datePreset': 'VALUE', 'timezone': 'UTC'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "POST",
    "path": "/public/api/v1/report/mark/campaign/{id}",
    "summary": "Set mark to token by campaign id.",
    "description": "Set mark to token by campaign id.",
    "tags": [
      "Mark Mark"
    ],
    "parameters": [
      {
        "name": "id",
        "type": "integer",
        "required": true,
        "description": "Id identifier",
        "in": "path"
      }
    ],
    "requestBody": {
      "contentType": "application/json",
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Campaign name"
          },
          "trafficSourceId": {
            "type": "integer",
            "description": "Traffic source ID"
          },
          "cost": {
            "type": "number",
            "description": "Cost per click"
          },
          "currency": {
            "type": "string",
            "description": "Currency code",
            "default": "USD"
          }
        },
        "required": [
          "name",
          "trafficSourceId"
        ]
      },
      "example": {
        "name": "Test Campaign",
        "trafficSourceId": 1,
        "cost": 0.1,
        "currency": "USD"
      }
    },
    "responses": {
      "201": {
        "description": "Created successfully",
        "example": {
          "id": 123,
          "message": "Resource created successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      }
    },
    "examples": {
      "curl": "curl -X POST \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/report/mark/campaign/123\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(\n    f\"{BASE_URL}/public/api/v1/report/mark/campaign/123\",\n    headers=headers,\n    json={'name': 'Test Campaign', 'trafficSourceId': 1, 'cost': 0.1, 'currency': 'USD'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "DELETE",
    "path": "/public/api/v1/report/mark/campaign/{id}",
    "summary": "Delete mark for token by campaign id.",
    "description": "Delete mark for token by campaign id.",
    "tags": [
      "Mark Mark"
    ],
    "parameters": [
      {
        "name": "id",
        "type": "integer",
        "required": true,
        "description": "Id identifier",
        "in": "path"
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Deleted successfully",
        "example": {
          "message": "Resource deleted successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X DELETE \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/report/mark/campaign/123\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.delete(\n    f\"{BASE_URL}/public/api/v1/report/mark/campaign/123\",\n    headers=headers\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "POST",
    "path": "/public/api/v1/report/mark/traffic_source/{id}",
    "summary": "Set mark to token by traffic source id.",
    "description": "Set mark to token by traffic source id.",
    "tags": [
      "Mark Mark"
    ],
    "parameters": [
      {
        "name": "id",
        "type": "integer",
        "required": true,
        "description": "Id identifier",
        "in": "path"
      }
    ],
    "requestBody": {
      "contentType": "application/json",
      "schema": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "Token to mark"
          },
          "tokenValue": {
            "type": "string",
            "description": "Token value"
          },
          "mark": {
            "type": "string",
            "description": "Mark type"
          }
        },
        "required": [
          "token",
          "tokenValue",
          "mark"
        ]
      },
      "example": {
        "token": "click_id",
        "tokenValue": "accepted",
        "mark": "mints"
      }
    },
    "responses": {
      "201": {
        "description": "Created successfully",
        "example": {
          "id": 123,
          "message": "Resource created successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      }
    },
    "examples": {
      "curl": "curl -X POST \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/report/mark/traffic_source/123\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(\n    f\"{BASE_URL}/public/api/v1/report/mark/traffic_source/123\",\n    headers=headers,\n    json={'token': 'click_id', 'tokenValue': 'accepted', 'mark': 'mints'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "DELETE",
    "path": "/public/api/v1/report/mark/traffic_source/{id}",
    "summary": "Delete mark for token by traffic source id.",
    "description": "Delete mark for token by traffic source id.",
    "tags": [
      "Mark Mark"
    ],
    "parameters": [
      {
        "name": "id",
        "type": "integer",
        "required": true,
        "description": "Id identifier",
        "in": "path"
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Deleted successfully",
        "example": {
          "message": "Resource deleted successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X DELETE \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/report/mark/traffic_source/123\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.delete(\n    f\"{BASE_URL}/public/api/v1/report/mark/traffic_source/123\",\n    headers=headers\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "POST",
    "path": "/public/api/v1/report/mark/campaign/{id}/multiple",
    "summary": "Set mark to multiple tokens by campaign id.",
    "description": "Set mark to multiple tokens by campaign id.",
    "tags": [
      "Mark Mark"
    ],
    "parameters": [
      {
        "name": "id",
        "type": "integer",
        "required": true,
        "description": "Id identifier",
        "in": "path"
      }
    ],
    "requestBody": {
      "contentType": "application/json",
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Campaign name"
          },
          "trafficSourceId": {
            "type": "integer",
            "description": "Traffic source ID"
          },
          "cost": {
            "type": "number",
            "description": "Cost per click"
          },
          "currency": {
            "type": "string",
            "description": "Currency code",
            "default": "USD"
          }
        },
        "required": [
          "name",
          "trafficSourceId"
        ]
      },
      "example": {
        "name": "Test Campaign",
        "trafficSourceId": 1,
        "cost": 0.1,
        "currency": "USD"
      }
    },
    "responses": {
      "201": {
        "description": "Created successfully",
        "example": {
          "id": 123,
          "message": "Resource created successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      }
    },
    "examples": {
      "curl": "curl -X POST \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/report/mark/campaign/123/multiple\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(\n    f\"{BASE_URL}/public/api/v1/report/mark/campaign/123/multiple\",\n    headers=headers,\n    json={'name': 'Test Campaign', 'trafficSourceId': 1, 'cost': 0.1, 'currency': 'USD'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "POST",
    "path": "/public/api/v1/report/mark/traffic_source/{id}/multiple",
    "summary": "Set mark to multiple tokens by traffic source id.",
    "description": "Set mark to multiple tokens by traffic source id.",
    "tags": [
      "Mark Mark"
    ],
    "parameters": [
      {
        "name": "id",
        "type": "integer",
        "required": true,
        "description": "Id identifier",
        "in": "path"
      }
    ],
    "requestBody": {
      "contentType": "application/json",
      "schema": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "Token to mark"
          },
          "tokenValue": {
            "type": "string",
            "description": "Token value"
          },
          "mark": {
            "type": "string",
            "description": "Mark type"
          }
        },
        "required": [
          "token",
          "tokenValue",
          "mark"
        ]
      },
      "example": {
        "token": "click_id",
        "tokenValue": "accepted",
        "mark": "mints"
      }
    },
    "responses": {
      "201": {
        "description": "Created successfully",
        "example": {
          "id": 123,
          "message": "Resource created successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      }
    },
    "examples": {
      "curl": "curl -X POST \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/report/mark/traffic_source/123/multiple\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(\n    f\"{BASE_URL}/public/api/v1/report/mark/traffic_source/123/multiple\",\n    headers=headers,\n    json={'token': 'click_id', 'tokenValue': 'accepted', 'mark': 'mints'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "POST",
    "path": "/public/api/v1/report/preset/{subject}/{uuid}",
    "summary": "Create preset.",
    "description": "Create preset.",
    "tags": [
      "Presets Presets"
    ],
    "parameters": [
      {
        "name": "subject",
        "type": "string",
        "required": true,
        "description": "Subject identifier",
        "in": "path"
      },
      {
        "name": "uuid",
        "type": "string",
        "required": true,
        "description": "Uuid identifier",
        "in": "path"
      }
    ],
    "requestBody": {
      "contentType": "application/json",
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Resource name"
          }
        }
      },
      "example": {
        "name": "Example Resource"
      }
    },
    "responses": {
      "201": {
        "description": "Created successfully",
        "example": {
          "id": 123,
          "message": "Resource created successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      }
    },
    "examples": {
      "curl": "curl -X POST \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/report/preset/123/123\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(\n    f\"{BASE_URL}/public/api/v1/report/preset/123/123\",\n    headers=headers,\n    json={'name': 'Example Resource'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "DELETE",
    "path": "/public/api/v1/report/preset/{uuid}",
    "summary": "Delete preset.",
    "description": "Delete preset.",
    "tags": [
      "Presets Presets"
    ],
    "parameters": [
      {
        "name": "uuid",
        "type": "string",
        "required": true,
        "description": "Uuid identifier",
        "in": "path"
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Deleted successfully",
        "example": {
          "message": "Resource deleted successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X DELETE \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/report/preset/123\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.delete(\n    f\"{BASE_URL}/public/api/v1/report/preset/123\",\n    headers=headers\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "GET",
    "path": "/public/api/v1/report/preset/{subject}",
    "summary": "Get presets by Subject.",
    "description": "Get presets by Subject.",
    "tags": [
      "Presets Presets"
    ],
    "parameters": [
      {
        "name": "subject",
        "type": "string",
        "required": true,
        "description": "Subject identifier",
        "in": "path"
      },
      {
        "name": "datePreset",
        "type": "string",
        "required": true,
        "description": "Time period filter (e.g., 'last_7_days', 'today', 'yesterday')",
        "in": "query",
        "enum": [
          "today",
          "yesterday",
          "this_week",
          "last_week",
          "last_7_days",
          "last_14_days",
          "last_30_days",
          "this_month",
          "last_month",
          "this_year",
          "last_year",
          "all_time",
          "custom_time"
        ]
      },
      {
        "name": "timezone",
        "type": "string",
        "required": true,
        "description": "Timezone for date calculations (e.g., 'UTC')",
        "in": "query",
        "default": "UTC"
      },
      {
        "name": "limit",
        "type": "integer",
        "required": false,
        "description": "Maximum number of records to return (max 1000)",
        "in": "query",
        "default": 100
      },
      {
        "name": "offset",
        "type": "integer",
        "required": false,
        "description": "Number of records to skip for pagination",
        "in": "query",
        "default": 0
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success",
        "example": [
          {
            "id": 1,
            "name": "Example Item",
            "status": "active",
            "createdAt": "2025-09-27T00:00:00Z"
          }
        ]
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/report/preset/123?datePreset=VALUE&timezone=UTC\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(\n    f\"{BASE_URL}/public/api/v1/report/preset/123\",\n    headers=headers,\n    params={'datePreset': 'VALUE', 'timezone': 'UTC'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "POST",
    "path": "/public/api/v1/report/simple_filter/{subject}/{uuid}",
    "summary": "Create Simple filter.",
    "description": "Create Simple filter.",
    "tags": [
      "Simple filters Simple filters"
    ],
    "parameters": [
      {
        "name": "subject",
        "type": "string",
        "required": true,
        "description": "Subject identifier",
        "in": "path"
      },
      {
        "name": "uuid",
        "type": "string",
        "required": true,
        "description": "Uuid identifier",
        "in": "path"
      }
    ],
    "requestBody": {
      "contentType": "application/json",
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Resource name"
          }
        }
      },
      "example": {
        "name": "Example Resource"
      }
    },
    "responses": {
      "201": {
        "description": "Created successfully",
        "example": {
          "id": 123,
          "message": "Resource created successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      }
    },
    "examples": {
      "curl": "curl -X POST \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/report/simple_filter/123/123\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(\n    f\"{BASE_URL}/public/api/v1/report/simple_filter/123/123\",\n    headers=headers,\n    json={'name': 'Example Resource'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "PUT",
    "path": "/public/api/v1/report/simple_filter/{uuid}",
    "summary": "Edit Simple filter.",
    "description": "Edit Simple filter.",
    "tags": [
      "Simple filters Simple filters"
    ],
    "parameters": [
      {
        "name": "uuid",
        "type": "string",
        "required": true,
        "description": "Uuid identifier",
        "in": "path"
      }
    ],
    "requestBody": {
      "contentType": "application/json",
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Resource name"
          }
        }
      },
      "example": {
        "name": "Example Resource"
      }
    },
    "responses": {
      "200": {
        "description": "Updated successfully",
        "example": {
          "message": "Resource updated successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X PUT \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/report/simple_filter/123\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.put(\n    f\"{BASE_URL}/public/api/v1/report/simple_filter/123\",\n    headers=headers,\n    json={'name': 'Example Resource'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "DELETE",
    "path": "/public/api/v1/report/simple_filter/{uuid}",
    "summary": "Delete Simple filter.",
    "description": "Delete Simple filter.",
    "tags": [
      "Simple filters Simple filters"
    ],
    "parameters": [
      {
        "name": "uuid",
        "type": "string",
        "required": true,
        "description": "Uuid identifier",
        "in": "path"
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Deleted successfully",
        "example": {
          "message": "Resource deleted successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X DELETE \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/report/simple_filter/123\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.delete(\n    f\"{BASE_URL}/public/api/v1/report/simple_filter/123\",\n    headers=headers\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "GET",
    "path": "/public/api/v1/report/simple_filter/operators/list",
    "summary": "Get Simple filter Operators.",
    "description": "Get Simple filter Operators.",
    "tags": [
      "Simple filters Simple filters"
    ],
    "parameters": [
      {
        "name": "datePreset",
        "type": "string",
        "required": true,
        "description": "Time period filter (e.g., 'last_7_days', 'today', 'yesterday')",
        "in": "query",
        "enum": [
          "today",
          "yesterday",
          "this_week",
          "last_week",
          "last_7_days",
          "last_14_days",
          "last_30_days",
          "this_month",
          "last_month",
          "this_year",
          "last_year",
          "all_time",
          "custom_time"
        ]
      },
      {
        "name": "timezone",
        "type": "string",
        "required": true,
        "description": "Timezone for date calculations (e.g., 'UTC')",
        "in": "query",
        "default": "UTC"
      },
      {
        "name": "limit",
        "type": "integer",
        "required": false,
        "description": "Maximum number of records to return (max 1000)",
        "in": "query",
        "default": 100
      },
      {
        "name": "offset",
        "type": "integer",
        "required": false,
        "description": "Number of records to skip for pagination",
        "in": "query",
        "default": 0
      },
      {
        "name": "sortColumn",
        "type": "string",
        "required": false,
        "description": "Column to sort by",
        "in": "query"
      },
      {
        "name": "sortType",
        "type": "string",
        "required": false,
        "description": "Sort direction",
        "in": "query",
        "enum": [
          "asc",
          "desc"
        ]
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success",
        "example": [
          {
            "id": 1,
            "name": "Example Item",
            "status": "active",
            "createdAt": "2025-09-27T00:00:00Z"
          }
        ]
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/report/simple_filter/operators/list?datePreset=VALUE&timezone=UTC\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(\n    f\"{BASE_URL}/public/api/v1/report/simple_filter/operators/list\",\n    headers=headers,\n    params={'datePreset': 'VALUE', 'timezone': 'UTC'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "GET",
    "path": "/public/api/v1/report/simple_filter/{subject}",
    "summary": "Get Simple filters by Subject.",
    "description": "Get Simple filters by Subject.",
    "tags": [
      "Simple filters Simple filters"
    ],
    "parameters": [
      {
        "name": "subject",
        "type": "string",
        "required": true,
        "description": "Subject identifier",
        "in": "path"
      },
      {
        "name": "datePreset",
        "type": "string",
        "required": true,
        "description": "Time period filter (e.g., 'last_7_days', 'today', 'yesterday')",
        "in": "query",
        "enum": [
          "today",
          "yesterday",
          "this_week",
          "last_week",
          "last_7_days",
          "last_14_days",
          "last_30_days",
          "this_month",
          "last_month",
          "this_year",
          "last_year",
          "all_time",
          "custom_time"
        ]
      },
      {
        "name": "timezone",
        "type": "string",
        "required": true,
        "description": "Timezone for date calculations (e.g., 'UTC')",
        "in": "query",
        "default": "UTC"
      },
      {
        "name": "limit",
        "type": "integer",
        "required": false,
        "description": "Maximum number of records to return (max 1000)",
        "in": "query",
        "default": 100
      },
      {
        "name": "offset",
        "type": "integer",
        "required": false,
        "description": "Number of records to skip for pagination",
        "in": "query",
        "default": 0
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success",
        "example": [
          {
            "id": 1,
            "name": "Example Item",
            "status": "active",
            "createdAt": "2025-09-27T00:00:00Z"
          }
        ]
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/report/simple_filter/123?datePreset=VALUE&timezone=UTC\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(\n    f\"{BASE_URL}/public/api/v1/report/simple_filter/123\",\n    headers=headers,\n    params={'datePreset': 'VALUE', 'timezone': 'UTC'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "GET",
    "path": "/public/api/v1/stats/affiliate_network",
    "summary": "Get stats Affiliate Network.",
    "description": "Get stats Affiliate Network.",
    "tags": [
      ""
    ],
    "parameters": [
      {
        "name": "datePreset",
        "type": "string",
        "required": true,
        "description": "Time period filter (e.g., 'last_7_days', 'today', 'yesterday')",
        "in": "query",
        "enum": [
          "today",
          "yesterday",
          "this_week",
          "last_week",
          "last_7_days",
          "last_14_days",
          "last_30_days",
          "this_month",
          "last_month",
          "this_year",
          "last_year",
          "all_time",
          "custom_time"
        ]
      },
      {
        "name": "timezone",
        "type": "string",
        "required": true,
        "description": "Timezone for date calculations (e.g., 'UTC')",
        "in": "query",
        "default": "UTC"
      },
      {
        "name": "limit",
        "type": "integer",
        "required": false,
        "description": "Maximum number of records to return (max 1000)",
        "in": "query",
        "default": 100
      },
      {
        "name": "offset",
        "type": "integer",
        "required": false,
        "description": "Number of records to skip for pagination",
        "in": "query",
        "default": 0
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success",
        "example": [
          {
            "id": 1,
            "name": "Example Item",
            "status": "active",
            "createdAt": "2025-09-27T00:00:00Z"
          }
        ]
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/stats/affiliate_network?datePreset=VALUE&timezone=UTC\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(\n    f\"{BASE_URL}/public/api/v1/stats/affiliate_network\",\n    headers=headers,\n    params={'datePreset': 'VALUE', 'timezone': 'UTC'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "GET",
    "path": "/public/api/v1/stats/campaign",
    "summary": "Get stats Campaign.",
    "description": "Get stats Campaign.",
    "tags": [
      ""
    ],
    "parameters": [
      {
        "name": "datePreset",
        "type": "string",
        "required": true,
        "description": "Time period filter (e.g., 'last_7_days', 'today', 'yesterday')",
        "in": "query",
        "enum": [
          "today",
          "yesterday",
          "this_week",
          "last_week",
          "last_7_days",
          "last_14_days",
          "last_30_days",
          "this_month",
          "last_month",
          "this_year",
          "last_year",
          "all_time",
          "custom_time"
        ]
      },
      {
        "name": "timezone",
        "type": "string",
        "required": true,
        "description": "Timezone for date calculations (e.g., 'UTC')",
        "in": "query",
        "default": "UTC"
      },
      {
        "name": "limit",
        "type": "integer",
        "required": false,
        "description": "Maximum number of records to return (max 1000)",
        "in": "query",
        "default": 100
      },
      {
        "name": "offset",
        "type": "integer",
        "required": false,
        "description": "Number of records to skip for pagination",
        "in": "query",
        "default": 0
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success",
        "example": [
          {
            "id": 1,
            "name": "Example Item",
            "status": "active",
            "createdAt": "2025-09-27T00:00:00Z"
          }
        ]
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/stats/campaign?datePreset=VALUE&timezone=UTC\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(\n    f\"{BASE_URL}/public/api/v1/stats/campaign\",\n    headers=headers,\n    params={'datePreset': 'VALUE', 'timezone': 'UTC'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "GET",
    "path": "/public/api/v1/stats/landing",
    "summary": "Get stats Landing.",
    "description": "Get stats Landing.",
    "tags": [
      ""
    ],
    "parameters": [
      {
        "name": "datePreset",
        "type": "string",
        "required": true,
        "description": "Time period filter (e.g., 'last_7_days', 'today', 'yesterday')",
        "in": "query",
        "enum": [
          "today",
          "yesterday",
          "this_week",
          "last_week",
          "last_7_days",
          "last_14_days",
          "last_30_days",
          "this_month",
          "last_month",
          "this_year",
          "last_year",
          "all_time",
          "custom_time"
        ]
      },
      {
        "name": "timezone",
        "type": "string",
        "required": true,
        "description": "Timezone for date calculations (e.g., 'UTC')",
        "in": "query",
        "default": "UTC"
      },
      {
        "name": "limit",
        "type": "integer",
        "required": false,
        "description": "Maximum number of records to return (max 1000)",
        "in": "query",
        "default": 100
      },
      {
        "name": "offset",
        "type": "integer",
        "required": false,
        "description": "Number of records to skip for pagination",
        "in": "query",
        "default": 0
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success",
        "example": [
          {
            "id": 1,
            "name": "Example Item",
            "status": "active",
            "createdAt": "2025-09-27T00:00:00Z"
          }
        ]
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/stats/landing?datePreset=VALUE&timezone=UTC\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(\n    f\"{BASE_URL}/public/api/v1/stats/landing\",\n    headers=headers,\n    params={'datePreset': 'VALUE', 'timezone': 'UTC'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "GET",
    "path": "/public/api/v1/stats/offer",
    "summary": "Get stats Offer.",
    "description": "Get stats Offer.",
    "tags": [
      ""
    ],
    "parameters": [
      {
        "name": "datePreset",
        "type": "string",
        "required": true,
        "description": "Time period filter (e.g., 'last_7_days', 'today', 'yesterday')",
        "in": "query",
        "enum": [
          "today",
          "yesterday",
          "this_week",
          "last_week",
          "last_7_days",
          "last_14_days",
          "last_30_days",
          "this_month",
          "last_month",
          "this_year",
          "last_year",
          "all_time",
          "custom_time"
        ]
      },
      {
        "name": "timezone",
        "type": "string",
        "required": true,
        "description": "Timezone for date calculations (e.g., 'UTC')",
        "in": "query",
        "default": "UTC"
      },
      {
        "name": "limit",
        "type": "integer",
        "required": false,
        "description": "Maximum number of records to return (max 1000)",
        "in": "query",
        "default": 100
      },
      {
        "name": "offset",
        "type": "integer",
        "required": false,
        "description": "Number of records to skip for pagination",
        "in": "query",
        "default": 0
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success",
        "example": [
          {
            "id": 1,
            "name": "Example Item",
            "status": "active",
            "createdAt": "2025-09-27T00:00:00Z"
          }
        ]
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/stats/offer?datePreset=VALUE&timezone=UTC\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(\n    f\"{BASE_URL}/public/api/v1/stats/offer\",\n    headers=headers,\n    params={'datePreset': 'VALUE', 'timezone': 'UTC'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "GET",
    "path": "/public/api/v1/stats/rotation",
    "summary": "Get stats Rotation.",
    "description": "Get stats Rotation.",
    "tags": [
      ""
    ],
    "parameters": [
      {
        "name": "datePreset",
        "type": "string",
        "required": true,
        "description": "Time period filter (e.g., 'last_7_days', 'today', 'yesterday')",
        "in": "query",
        "enum": [
          "today",
          "yesterday",
          "this_week",
          "last_week",
          "last_7_days",
          "last_14_days",
          "last_30_days",
          "this_month",
          "last_month",
          "this_year",
          "last_year",
          "all_time",
          "custom_time"
        ]
      },
      {
        "name": "timezone",
        "type": "string",
        "required": true,
        "description": "Timezone for date calculations (e.g., 'UTC')",
        "in": "query",
        "default": "UTC"
      },
      {
        "name": "limit",
        "type": "integer",
        "required": false,
        "description": "Maximum number of records to return (max 1000)",
        "in": "query",
        "default": 100
      },
      {
        "name": "offset",
        "type": "integer",
        "required": false,
        "description": "Number of records to skip for pagination",
        "in": "query",
        "default": 0
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success",
        "example": [
          {
            "id": 1,
            "name": "Example Item",
            "status": "active",
            "createdAt": "2025-09-27T00:00:00Z"
          }
        ]
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/stats/rotation?datePreset=VALUE&timezone=UTC\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(\n    f\"{BASE_URL}/public/api/v1/stats/rotation\",\n    headers=headers,\n    params={'datePreset': 'VALUE', 'timezone': 'UTC'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "GET",
    "path": "/public/api/v1/stats/traffic_source",
    "summary": "Get stats Traffic Source.",
    "description": "Get stats Traffic Source.",
    "tags": [
      ""
    ],
    "parameters": [
      {
        "name": "datePreset",
        "type": "string",
        "required": true,
        "description": "Time period filter (e.g., 'last_7_days', 'today', 'yesterday')",
        "in": "query",
        "enum": [
          "today",
          "yesterday",
          "this_week",
          "last_week",
          "last_7_days",
          "last_14_days",
          "last_30_days",
          "this_month",
          "last_month",
          "this_year",
          "last_year",
          "all_time",
          "custom_time"
        ]
      },
      {
        "name": "timezone",
        "type": "string",
        "required": true,
        "description": "Timezone for date calculations (e.g., 'UTC')",
        "in": "query",
        "default": "UTC"
      },
      {
        "name": "limit",
        "type": "integer",
        "required": false,
        "description": "Maximum number of records to return (max 1000)",
        "in": "query",
        "default": 100
      },
      {
        "name": "offset",
        "type": "integer",
        "required": false,
        "description": "Number of records to skip for pagination",
        "in": "query",
        "default": 0
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success",
        "example": [
          {
            "id": 1,
            "name": "Example Item",
            "status": "active",
            "createdAt": "2025-09-27T00:00:00Z"
          }
        ]
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/stats/traffic_source?datePreset=VALUE&timezone=UTC\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(\n    f\"{BASE_URL}/public/api/v1/stats/traffic_source\",\n    headers=headers,\n    params={'datePreset': 'VALUE', 'timezone': 'UTC'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "POST",
    "path": "/public/api/v1/identity/api_key/block/{id}",
    "summary": "Identity Block ApiKey",
    "description": "Identity Block ApiKey",
    "tags": [
      "API key API key"
    ],
    "parameters": [
      {
        "name": "id",
        "type": "integer",
        "required": true,
        "description": "Id identifier",
        "in": "path"
      }
    ],
    "requestBody": {
      "contentType": "application/json",
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Resource name"
          }
        }
      },
      "example": {
        "name": "Example Resource"
      }
    },
    "responses": {
      "201": {
        "description": "Created successfully",
        "example": {
          "id": 123,
          "message": "Resource created successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      }
    },
    "examples": {
      "curl": "curl -X POST \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/identity/api_key/block/123\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(\n    f\"{BASE_URL}/public/api/v1/identity/api_key/block/123\",\n    headers=headers,\n    json={'name': 'Example Resource'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "GET",
    "path": "/public/api/v1/identity/api_key/{id}",
    "summary": "Identity Get ApiKey",
    "description": "Identity Get ApiKey",
    "tags": [
      "API key API key"
    ],
    "parameters": [
      {
        "name": "id",
        "type": "integer",
        "required": true,
        "description": "Id identifier",
        "in": "path"
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success",
        "example": [
          {
            "id": 1,
            "name": "Example Item",
            "status": "active",
            "createdAt": "2025-09-27T00:00:00Z"
          }
        ]
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/identity/api_key/123\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(\n    f\"{BASE_URL}/public/api/v1/identity/api_key/123\",\n    headers=headers\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "PUT",
    "path": "/public/api/v1/identity/api_key/refresh/{id}",
    "summary": "Identity Refresh ApiKey",
    "description": "Identity Refresh ApiKey",
    "tags": [
      "API key API key"
    ],
    "parameters": [
      {
        "name": "id",
        "type": "integer",
        "required": true,
        "description": "Id identifier",
        "in": "path"
      }
    ],
    "requestBody": {
      "contentType": "application/json",
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Resource name"
          }
        }
      },
      "example": {
        "name": "Example Resource"
      }
    },
    "responses": {
      "200": {
        "description": "Updated successfully",
        "example": {
          "message": "Resource updated successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X PUT \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/identity/api_key/refresh/123\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.put(\n    f\"{BASE_URL}/public/api/v1/identity/api_key/refresh/123\",\n    headers=headers,\n    json={'name': 'Example Resource'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "POST",
    "path": "/public/api/v1/identity/api_key/unblock/{id}",
    "summary": "Identity Unblock ApiKey",
    "description": "Identity Unblock ApiKey",
    "tags": [
      "API key API key"
    ],
    "parameters": [
      {
        "name": "id",
        "type": "integer",
        "required": true,
        "description": "Id identifier",
        "in": "path"
      }
    ],
    "requestBody": {
      "contentType": "application/json",
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Resource name"
          }
        }
      },
      "example": {
        "name": "Example Resource"
      }
    },
    "responses": {
      "201": {
        "description": "Created successfully",
        "example": {
          "id": 123,
          "message": "Resource created successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      }
    },
    "examples": {
      "curl": "curl -X POST \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/identity/api_key/unblock/123\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(\n    f\"{BASE_URL}/public/api/v1/identity/api_key/unblock/123\",\n    headers=headers,\n    json={'name': 'Example Resource'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "POST",
    "path": "/public/api/v1/binom/protect/beta/disable",
    "summary": "Disable Beta",
    "description": "Disable Beta",
    "tags": [
      "Protect Protect"
    ],
    "parameters": [],
    "requestBody": {
      "contentType": "application/json",
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Resource name"
          }
        }
      },
      "example": {
        "name": "Example Resource"
      }
    },
    "responses": {
      "201": {
        "description": "Created successfully",
        "example": {
          "id": 123,
          "message": "Resource created successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      }
    },
    "examples": {
      "curl": "curl -X POST \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/binom/protect/beta/disable\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(\n    f\"{BASE_URL}/public/api/v1/binom/protect/beta/disable\",\n    headers=headers,\n    json={'name': 'Example Resource'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "GET",
    "path": "/public/api/v1/binom/protect/beta/status",
    "summary": "Get Beta status",
    "description": "Get Beta status",
    "tags": [
      "Protect Protect"
    ],
    "parameters": [],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success",
        "example": [
          {
            "id": 1,
            "name": "Example Item",
            "status": "active",
            "createdAt": "2025-09-27T00:00:00Z"
          }
        ]
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/binom/protect/beta/status\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(\n    f\"{BASE_URL}/public/api/v1/binom/protect/beta/status\",\n    headers=headers\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "GET",
    "path": "/public/api/v1/binom/protect/methods",
    "summary": "Get available bot detection methods and presets",
    "description": "Get available bot detection methods and presets",
    "tags": [
      "Protect Protect"
    ],
    "parameters": [],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success",
        "example": [
          {
            "id": 1,
            "name": "Example Item",
            "status": "active",
            "createdAt": "2025-09-27T00:00:00Z"
          }
        ]
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/binom/protect/methods\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(\n    f\"{BASE_URL}/public/api/v1/binom/protect/methods\",\n    headers=headers\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "GET",
    "path": "/public/api/v1/binom/protect/campaign/{campaignId}/settings",
    "summary": "Get Settings for a Campaign",
    "description": "Get Settings for a Campaign",
    "tags": [
      "Protect Protect"
    ],
    "parameters": [
      {
        "name": "campaignId",
        "type": "string",
        "required": true,
        "description": "Campaignid identifier",
        "in": "path"
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success",
        "example": [
          {
            "id": 1,
            "name": "Example Item",
            "status": "active",
            "createdAt": "2025-09-27T00:00:00Z"
          }
        ]
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/binom/protect/campaign/123/settings\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(\n    f\"{BASE_URL}/public/api/v1/binom/protect/campaign/123/settings\",\n    headers=headers\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "POST",
    "path": "/public/api/v1/binom/protect/campaign/{campaignId}/settings",
    "summary": "Update Settings for a Campaign",
    "description": "Update Settings for a Campaign",
    "tags": [
      "Protect Protect"
    ],
    "parameters": [
      {
        "name": "campaignId",
        "type": "string",
        "required": true,
        "description": "Campaignid identifier",
        "in": "path"
      }
    ],
    "requestBody": {
      "contentType": "application/json",
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Campaign name"
          },
          "trafficSourceId": {
            "type": "integer",
            "description": "Traffic source ID"
          },
          "cost": {
            "type": "number",
            "description": "Cost per click"
          },
          "currency": {
            "type": "string",
            "description": "Currency code",
            "default": "USD"
          }
        },
        "required": [
          "name",
          "trafficSourceId"
        ]
      },
      "example": {
        "name": "Test Campaign",
        "trafficSourceId": 1,
        "cost": 0.1,
        "currency": "USD"
      }
    },
    "responses": {
      "201": {
        "description": "Created successfully",
        "example": {
          "id": 123,
          "message": "Resource created successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      }
    },
    "examples": {
      "curl": "curl -X POST \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/binom/protect/campaign/123/settings\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(\n    f\"{BASE_URL}/public/api/v1/binom/protect/campaign/123/settings\",\n    headers=headers,\n    json={'name': 'Test Campaign', 'trafficSourceId': 1, 'cost': 0.1, 'currency': 'USD'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "POST",
    "path": "/public/api/v1/binom/protect/campaigns/settings",
    "summary": "Update Settings for multiple Campaigns",
    "description": "Update Settings for multiple Campaigns",
    "tags": [
      "Protect Protect"
    ],
    "parameters": [],
    "requestBody": {
      "contentType": "application/json",
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Campaign name"
          },
          "trafficSourceId": {
            "type": "integer",
            "description": "Traffic source ID"
          },
          "cost": {
            "type": "number",
            "description": "Cost per click"
          },
          "currency": {
            "type": "string",
            "description": "Currency code",
            "default": "USD"
          }
        },
        "required": [
          "name",
          "trafficSourceId"
        ]
      },
      "example": {
        "name": "Test Campaign",
        "trafficSourceId": 1,
        "cost": 0.1,
        "currency": "USD"
      }
    },
    "responses": {
      "201": {
        "description": "Created successfully",
        "example": {
          "id": 123,
          "message": "Resource created successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      }
    },
    "examples": {
      "curl": "curl -X POST \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/binom/protect/campaigns/settings\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(\n    f\"{BASE_URL}/public/api/v1/binom/protect/campaigns/settings\",\n    headers=headers,\n    json={'name': 'Test Campaign', 'trafficSourceId': 1, 'cost': 0.1, 'currency': 'USD'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "POST",
    "path": "/public/api/v1/binom/protect/visits/{campaignId}/reset",
    "summary": "Reset first visits counter.",
    "description": "Reset first visits counter.",
    "tags": [
      "Protect Protect"
    ],
    "parameters": [
      {
        "name": "campaignId",
        "type": "string",
        "required": true,
        "description": "Campaignid identifier",
        "in": "path"
      }
    ],
    "requestBody": {
      "contentType": "application/json",
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Campaign name"
          },
          "trafficSourceId": {
            "type": "integer",
            "description": "Traffic source ID"
          },
          "cost": {
            "type": "number",
            "description": "Cost per click"
          },
          "currency": {
            "type": "string",
            "description": "Currency code",
            "default": "USD"
          }
        },
        "required": [
          "name",
          "trafficSourceId"
        ]
      },
      "example": {
        "name": "Test Campaign",
        "trafficSourceId": 1,
        "cost": 0.1,
        "currency": "USD"
      }
    },
    "responses": {
      "201": {
        "description": "Created successfully",
        "example": {
          "id": 123,
          "message": "Resource created successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      }
    },
    "examples": {
      "curl": "curl -X POST \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/binom/protect/visits/123/reset\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(\n    f\"{BASE_URL}/public/api/v1/binom/protect/visits/123/reset\",\n    headers=headers,\n    json={'name': 'Test Campaign', 'trafficSourceId': 1, 'cost': 0.1, 'currency': 'USD'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "DELETE",
    "path": "/public/api/v1/csv/clicklog/clear",
    "summary": "Delete all clicklog files.",
    "description": "Delete all clicklog files.",
    "tags": [
      ""
    ],
    "parameters": [],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Deleted successfully",
        "example": {
          "message": "Resource deleted successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X DELETE \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/csv/clicklog/clear\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.delete(\n    f\"{BASE_URL}/public/api/v1/csv/clicklog/clear\",\n    headers=headers\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "DELETE",
    "path": "/public/api/v1/csv/conversions/clear",
    "summary": "Delete all conversion files.",
    "description": "Delete all conversion files.",
    "tags": [
      ""
    ],
    "parameters": [],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Deleted successfully",
        "example": {
          "message": "Resource deleted successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X DELETE \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/csv/conversions/clear\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.delete(\n    f\"{BASE_URL}/public/api/v1/csv/conversions/clear\",\n    headers=headers\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "GET",
    "path": "/public/api/v1/csv/file/{filename}",
    "summary": "Download file by name.",
    "description": "Download file by name.",
    "tags": [
      ""
    ],
    "parameters": [
      {
        "name": "filename",
        "type": "string",
        "required": true,
        "description": "Filename identifier",
        "in": "path"
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success",
        "example": [
          {
            "id": 1,
            "name": "Example Item",
            "status": "active",
            "createdAt": "2025-09-27T00:00:00Z"
          }
        ]
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/csv/file/123\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(\n    f\"{BASE_URL}/public/api/v1/csv/file/123\",\n    headers=headers\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "DELETE",
    "path": "/public/api/v1/csv/file/{filename}",
    "summary": "Delete file by name.",
    "description": "Delete file by name.",
    "tags": [
      ""
    ],
    "parameters": [
      {
        "name": "filename",
        "type": "string",
        "required": true,
        "description": "Filename identifier",
        "in": "path"
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Deleted successfully",
        "example": {
          "message": "Resource deleted successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X DELETE \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/csv/file/123\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.delete(\n    f\"{BASE_URL}/public/api/v1/csv/file/123\",\n    headers=headers\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "POST",
    "path": "/public/api/v1/csv/task/dequeue/{id}",
    "summary": "Remove task from the queue.",
    "description": "Remove task from the queue.",
    "tags": [
      ""
    ],
    "parameters": [
      {
        "name": "id",
        "type": "integer",
        "required": true,
        "description": "Id identifier",
        "in": "path"
      }
    ],
    "requestBody": {
      "contentType": "application/json",
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Resource name"
          }
        }
      },
      "example": {
        "name": "Example Resource"
      }
    },
    "responses": {
      "201": {
        "description": "Created successfully",
        "example": {
          "id": 123,
          "message": "Resource created successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      }
    },
    "examples": {
      "curl": "curl -X POST \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/csv/task/dequeue/123\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(\n    f\"{BASE_URL}/public/api/v1/csv/task/dequeue/123\",\n    headers=headers,\n    json={'name': 'Example Resource'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "POST",
    "path": "/public/api/v1/csv/task/enqueue",
    "summary": "Add new task to the queue.",
    "description": "Add new task to the queue.",
    "tags": [
      ""
    ],
    "parameters": [],
    "requestBody": {
      "contentType": "application/json",
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Resource name"
          }
        }
      },
      "example": {
        "name": "Example Resource"
      }
    },
    "responses": {
      "201": {
        "description": "Created successfully",
        "example": {
          "id": 123,
          "message": "Resource created successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      }
    },
    "examples": {
      "curl": "curl -X POST \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/csv/task/enqueue\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(\n    f\"{BASE_URL}/public/api/v1/csv/task/enqueue\",\n    headers=headers,\n    json={'name': 'Example Resource'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "GET",
    "path": "/public/api/v1/csv/files",
    "summary": "Get csv files.",
    "description": "Get csv files.",
    "tags": [
      ""
    ],
    "parameters": [],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success",
        "example": [
          {
            "id": 1,
            "name": "Example Item",
            "status": "active",
            "createdAt": "2025-09-27T00:00:00Z"
          }
        ]
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/csv/files\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(\n    f\"{BASE_URL}/public/api/v1/csv/files\",\n    headers=headers\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "POST",
    "path": "/public/api/v1/campaign/change_setting",
    "summary": "Edit Settings for multiple Campaigns",
    "description": "Edit Settings for multiple Campaigns",
    "tags": [
      ""
    ],
    "parameters": [],
    "requestBody": {
      "contentType": "application/json",
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Campaign name"
          },
          "trafficSourceId": {
            "type": "integer",
            "description": "Traffic source ID"
          },
          "cost": {
            "type": "number",
            "description": "Cost per click"
          },
          "currency": {
            "type": "string",
            "description": "Currency code",
            "default": "USD"
          }
        },
        "required": [
          "name",
          "trafficSourceId"
        ]
      },
      "example": {
        "name": "Test Campaign",
        "trafficSourceId": 1,
        "cost": 0.1,
        "currency": "USD"
      }
    },
    "responses": {
      "201": {
        "description": "Created successfully",
        "example": {
          "id": 123,
          "message": "Resource created successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      }
    },
    "examples": {
      "curl": "curl -X POST \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/campaign/change_setting\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(\n    f\"{BASE_URL}/public/api/v1/campaign/change_setting\",\n    headers=headers,\n    json={'name': 'Test Campaign', 'trafficSourceId': 1, 'cost': 0.1, 'currency': 'USD'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "POST",
    "path": "/public/api/v1/campaign/change_cost",
    "summary": "Change cost for multiple Campaigns",
    "description": "Change cost for multiple Campaigns",
    "tags": [
      ""
    ],
    "parameters": [],
    "requestBody": {
      "contentType": "application/json",
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Campaign name"
          },
          "trafficSourceId": {
            "type": "integer",
            "description": "Traffic source ID"
          },
          "cost": {
            "type": "number",
            "description": "Cost per click"
          },
          "currency": {
            "type": "string",
            "description": "Currency code",
            "default": "USD"
          }
        },
        "required": [
          "name",
          "trafficSourceId"
        ]
      },
      "example": {
        "name": "Test Campaign",
        "trafficSourceId": 1,
        "cost": 0.1,
        "currency": "USD"
      }
    },
    "responses": {
      "201": {
        "description": "Created successfully",
        "example": {
          "id": 123,
          "message": "Resource created successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      }
    },
    "examples": {
      "curl": "curl -X POST \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/campaign/change_cost\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(\n    f\"{BASE_URL}/public/api/v1/campaign/change_cost\",\n    headers=headers,\n    json={'name': 'Test Campaign', 'trafficSourceId': 1, 'cost': 0.1, 'currency': 'USD'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "POST",
    "path": "/public/api/v1/campaign/change_domain",
    "summary": "Change Domain for multiple Campaigns",
    "description": "Change Domain for multiple Campaigns",
    "tags": [
      ""
    ],
    "parameters": [],
    "requestBody": {
      "contentType": "application/json",
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Campaign name"
          },
          "trafficSourceId": {
            "type": "integer",
            "description": "Traffic source ID"
          },
          "cost": {
            "type": "number",
            "description": "Cost per click"
          },
          "currency": {
            "type": "string",
            "description": "Currency code",
            "default": "USD"
          }
        },
        "required": [
          "name",
          "trafficSourceId"
        ]
      },
      "example": {
        "name": "Test Campaign",
        "trafficSourceId": 1,
        "cost": 0.1,
        "currency": "USD"
      }
    },
    "responses": {
      "201": {
        "description": "Created successfully",
        "example": {
          "id": 123,
          "message": "Resource created successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      }
    },
    "examples": {
      "curl": "curl -X POST \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/campaign/change_domain\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(\n    f\"{BASE_URL}/public/api/v1/campaign/change_domain\",\n    headers=headers,\n    json={'name': 'Test Campaign', 'trafficSourceId': 1, 'cost': 0.1, 'currency': 'USD'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "POST",
    "path": "/public/api/v1/campaign/change_group",
    "summary": "Change Group for multiple Campaigns",
    "description": "Change Group for multiple Campaigns",
    "tags": [
      ""
    ],
    "parameters": [],
    "requestBody": {
      "contentType": "application/json",
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Campaign name"
          },
          "trafficSourceId": {
            "type": "integer",
            "description": "Traffic source ID"
          },
          "cost": {
            "type": "number",
            "description": "Cost per click"
          },
          "currency": {
            "type": "string",
            "description": "Currency code",
            "default": "USD"
          }
        },
        "required": [
          "name",
          "trafficSourceId"
        ]
      },
      "example": {
        "name": "Test Campaign",
        "trafficSourceId": 1,
        "cost": 0.1,
        "currency": "USD"
      }
    },
    "responses": {
      "201": {
        "description": "Created successfully",
        "example": {
          "id": 123,
          "message": "Resource created successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      }
    },
    "examples": {
      "curl": "curl -X POST \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/campaign/change_group\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(\n    f\"{BASE_URL}/public/api/v1/campaign/change_group\",\n    headers=headers,\n    json={'name': 'Test Campaign', 'trafficSourceId': 1, 'cost': 0.1, 'currency': 'USD'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "POST",
    "path": "/public/api/v1/campaign/{campaignId}/owner",
    "summary": "Change Campaign Owner",
    "description": "Change Campaign Owner",
    "tags": [
      ""
    ],
    "parameters": [
      {
        "name": "campaignId",
        "type": "string",
        "required": true,
        "description": "Campaignid identifier",
        "in": "path"
      }
    ],
    "requestBody": {
      "contentType": "application/json",
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Campaign name"
          },
          "trafficSourceId": {
            "type": "integer",
            "description": "Traffic source ID"
          },
          "cost": {
            "type": "number",
            "description": "Cost per click"
          },
          "currency": {
            "type": "string",
            "description": "Currency code",
            "default": "USD"
          }
        },
        "required": [
          "name",
          "trafficSourceId"
        ]
      },
      "example": {
        "name": "Test Campaign",
        "trafficSourceId": 1,
        "cost": 0.1,
        "currency": "USD"
      }
    },
    "responses": {
      "201": {
        "description": "Created successfully",
        "example": {
          "id": 123,
          "message": "Resource created successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      }
    },
    "examples": {
      "curl": "curl -X POST \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/campaign/123/owner\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(\n    f\"{BASE_URL}/public/api/v1/campaign/123/owner\",\n    headers=headers,\n    json={'name': 'Test Campaign', 'trafficSourceId': 1, 'cost': 0.1, 'currency': 'USD'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "DELETE",
    "path": "/public/api/v1/campaign/{campaignId}/owner",
    "summary": "Delete Campaign Owner",
    "description": "Delete Campaign Owner",
    "tags": [
      ""
    ],
    "parameters": [
      {
        "name": "campaignId",
        "type": "string",
        "required": true,
        "description": "Campaignid identifier",
        "in": "path"
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Deleted successfully",
        "example": {
          "message": "Resource deleted successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X DELETE \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/campaign/123/owner\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.delete(\n    f\"{BASE_URL}/public/api/v1/campaign/123/owner\",\n    headers=headers\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "POST",
    "path": "/public/api/v1/campaign/change_traffic_distribution_info",
    "summary": "Change TrafficDistributionInfo for multiple Campaigns",
    "description": "Change TrafficDistributionInfo for multiple Campaigns",
    "tags": [
      ""
    ],
    "parameters": [],
    "requestBody": {
      "contentType": "application/json",
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Campaign name"
          },
          "trafficSourceId": {
            "type": "integer",
            "description": "Traffic source ID"
          },
          "cost": {
            "type": "number",
            "description": "Cost per click"
          },
          "currency": {
            "type": "string",
            "description": "Currency code",
            "default": "USD"
          }
        },
        "required": [
          "name",
          "trafficSourceId"
        ]
      },
      "example": {
        "name": "Test Campaign",
        "trafficSourceId": 1,
        "cost": 0.1,
        "currency": "USD"
      }
    },
    "responses": {
      "201": {
        "description": "Created successfully",
        "example": {
          "id": 123,
          "message": "Resource created successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      }
    },
    "examples": {
      "curl": "curl -X POST \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/campaign/change_traffic_distribution_info\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(\n    f\"{BASE_URL}/public/api/v1/campaign/change_traffic_distribution_info\",\n    headers=headers,\n    json={'name': 'Test Campaign', 'trafficSourceId': 1, 'cost': 0.1, 'currency': 'USD'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "GET",
    "path": "/public/api/v1/campaign/{id}/clone",
    "summary": "Clone Campaign.",
    "description": "Clone Campaign.",
    "tags": [
      ""
    ],
    "parameters": [
      {
        "name": "id",
        "type": "integer",
        "required": true,
        "description": "Id identifier",
        "in": "path"
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success",
        "example": [
          {
            "id": 1,
            "name": "Example Item",
            "status": "active",
            "createdAt": "2025-09-27T00:00:00Z"
          }
        ]
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/campaign/123/clone\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(\n    f\"{BASE_URL}/public/api/v1/campaign/123/clone\",\n    headers=headers\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "POST",
    "path": "/public/api/v1/campaign",
    "summary": "Create Campaign.",
    "description": "Create Campaign.",
    "tags": [
      ""
    ],
    "parameters": [],
    "requestBody": {
      "contentType": "application/json",
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Campaign name"
          },
          "trafficSourceId": {
            "type": "integer",
            "description": "Traffic source ID"
          },
          "cost": {
            "type": "number",
            "description": "Cost per click"
          },
          "currency": {
            "type": "string",
            "description": "Currency code",
            "default": "USD"
          }
        },
        "required": [
          "name",
          "trafficSourceId"
        ]
      },
      "example": {
        "name": "Test Campaign",
        "trafficSourceId": 1,
        "cost": 0.1,
        "currency": "USD"
      }
    },
    "responses": {
      "201": {
        "description": "Created successfully",
        "example": {
          "id": 123,
          "message": "Resource created successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      }
    },
    "examples": {
      "curl": "curl -X POST \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/campaign\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(\n    f\"{BASE_URL}/public/api/v1/campaign\",\n    headers=headers,\n    json={'name': 'Test Campaign', 'trafficSourceId': 1, 'cost': 0.1, 'currency': 'USD'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "GET",
    "path": "/public/api/v1/campaign/{id}",
    "summary": "Get Campaign.",
    "description": "Get Campaign.",
    "tags": [
      ""
    ],
    "parameters": [
      {
        "name": "id",
        "type": "integer",
        "required": true,
        "description": "Id identifier",
        "in": "path"
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success",
        "example": [
          {
            "id": 1,
            "name": "Example Item",
            "status": "active",
            "createdAt": "2025-09-27T00:00:00Z"
          }
        ]
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/campaign/123\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(\n    f\"{BASE_URL}/public/api/v1/campaign/123\",\n    headers=headers\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "PUT",
    "path": "/public/api/v1/campaign/{id}",
    "summary": "Edit Campaign.",
    "description": "Edit Campaign.",
    "tags": [
      ""
    ],
    "parameters": [
      {
        "name": "id",
        "type": "integer",
        "required": true,
        "description": "Id identifier",
        "in": "path"
      }
    ],
    "requestBody": {
      "contentType": "application/json",
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Campaign name"
          },
          "cost": {
            "type": "number",
            "description": "Cost per click"
          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "paused"
            ],
            "description": "Campaign status"
          }
        }
      },
      "example": {
        "name": "Updated Campaign Name",
        "cost": 0.15,
        "status": "active"
      }
    },
    "responses": {
      "200": {
        "description": "Updated successfully",
        "example": {
          "message": "Resource updated successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X PUT \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/campaign/123\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.put(\n    f\"{BASE_URL}/public/api/v1/campaign/123\",\n    headers=headers,\n    json={'name': 'Updated Campaign Name', 'cost': 0.15, 'status': 'active'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "DELETE",
    "path": "/public/api/v1/campaign/{id}",
    "summary": "Delete Campaign.",
    "description": "Delete Campaign.",
    "tags": [
      ""
    ],
    "parameters": [
      {
        "name": "id",
        "type": "integer",
        "required": true,
        "description": "Id identifier",
        "in": "path"
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Deleted successfully",
        "example": {
          "message": "Resource deleted successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X DELETE \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/campaign/123\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.delete(\n    f\"{BASE_URL}/public/api/v1/campaign/123\",\n    headers=headers\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "PATCH",
    "path": "/public/api/v1/campaign/{id}",
    "summary": "Restore Campaign.",
    "description": "Restore Campaign.",
    "tags": [
      ""
    ],
    "parameters": [
      {
        "name": "id",
        "type": "integer",
        "required": true,
        "description": "Id identifier",
        "in": "path"
      }
    ],
    "requestBody": {
      "contentType": "application/json",
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Campaign name"
          },
          "cost": {
            "type": "number",
            "description": "Cost per click"
          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "paused"
            ],
            "description": "Campaign status"
          }
        }
      },
      "example": {
        "name": "Updated Campaign Name",
        "cost": 0.15,
        "status": "active"
      }
    },
    "responses": {
      "200": {
        "description": "Restored/Modified successfully",
        "example": {
          "message": "Resource restored successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X PATCH \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/campaign/123\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.patch(\n    f\"{BASE_URL}/public/api/v1/campaign/123\",\n    headers=headers,\n    json={'name': 'Updated Campaign Name', 'cost': 0.15, 'status': 'active'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "GET",
    "path": "/public/api/v1/campaign/{id}/link",
    "summary": "Get Campaign link.",
    "description": "Get Campaign link.",
    "tags": [
      ""
    ],
    "parameters": [
      {
        "name": "id",
        "type": "integer",
        "required": true,
        "description": "Id identifier",
        "in": "path"
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success",
        "example": [
          {
            "id": 1,
            "name": "Example Item",
            "status": "active",
            "createdAt": "2025-09-27T00:00:00Z"
          }
        ]
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/campaign/123/link\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(\n    f\"{BASE_URL}/public/api/v1/campaign/123/link\",\n    headers=headers\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "GET",
    "path": "/public/api/v1/campaign/list/filtered",
    "summary": "Get Campaign list filtered.",
    "description": "Get Campaign list filtered.",
    "tags": [
      ""
    ],
    "parameters": [
      {
        "name": "datePreset",
        "type": "string",
        "required": true,
        "description": "Time period filter (e.g., 'last_7_days', 'today', 'yesterday')",
        "in": "query",
        "enum": [
          "today",
          "yesterday",
          "this_week",
          "last_week",
          "last_7_days",
          "last_14_days",
          "last_30_days",
          "this_month",
          "last_month",
          "this_year",
          "last_year",
          "all_time",
          "custom_time"
        ]
      },
      {
        "name": "timezone",
        "type": "string",
        "required": true,
        "description": "Timezone for date calculations (e.g., 'UTC')",
        "in": "query",
        "default": "UTC"
      },
      {
        "name": "limit",
        "type": "integer",
        "required": false,
        "description": "Maximum number of records to return (max 1000)",
        "in": "query",
        "default": 100
      },
      {
        "name": "offset",
        "type": "integer",
        "required": false,
        "description": "Number of records to skip for pagination",
        "in": "query",
        "default": 0
      },
      {
        "name": "sortColumn",
        "type": "string",
        "required": false,
        "description": "Column to sort by",
        "in": "query"
      },
      {
        "name": "sortType",
        "type": "string",
        "required": false,
        "description": "Sort direction",
        "in": "query",
        "enum": [
          "asc",
          "desc"
        ]
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success",
        "example": [
          {
            "id": 1,
            "name": "Example Item",
            "status": "active",
            "createdAt": "2025-09-27T00:00:00Z"
          }
        ]
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/campaign/list/filtered?datePreset=VALUE&timezone=UTC\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(\n    f\"{BASE_URL}/public/api/v1/campaign/list/filtered\",\n    headers=headers,\n    params={'datePreset': 'VALUE', 'timezone': 'UTC'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "GET",
    "path": "/public/api/v1/campaign/short/info",
    "summary": "Get Campaign short info with links.",
    "description": "Get Campaign short info with links.",
    "tags": [
      ""
    ],
    "parameters": [
      {
        "name": "datePreset",
        "type": "string",
        "required": true,
        "description": "Time period filter (e.g., 'last_7_days', 'today', 'yesterday')",
        "in": "query",
        "enum": [
          "today",
          "yesterday",
          "this_week",
          "last_week",
          "last_7_days",
          "last_14_days",
          "last_30_days",
          "this_month",
          "last_month",
          "this_year",
          "last_year",
          "all_time",
          "custom_time"
        ]
      },
      {
        "name": "timezone",
        "type": "string",
        "required": true,
        "description": "Timezone for date calculations (e.g., 'UTC')",
        "in": "query",
        "default": "UTC"
      },
      {
        "name": "limit",
        "type": "integer",
        "required": false,
        "description": "Maximum number of records to return (max 1000)",
        "in": "query",
        "default": 100
      },
      {
        "name": "offset",
        "type": "integer",
        "required": false,
        "description": "Number of records to skip for pagination",
        "in": "query",
        "default": 0
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success",
        "example": [
          {
            "id": 1,
            "name": "Example Item",
            "status": "active",
            "createdAt": "2025-09-27T00:00:00Z"
          }
        ]
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/campaign/short/info?datePreset=VALUE&timezone=UTC\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(\n    f\"{BASE_URL}/public/api/v1/campaign/short/info\",\n    headers=headers,\n    params={'datePreset': 'VALUE', 'timezone': 'UTC'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "GET",
    "path": "/public/api/v1/campaign/by_rotation/{rotationId}/list",
    "summary": "Get Campaigns list by Rotation ID.",
    "description": "Get Campaigns list by Rotation ID.",
    "tags": [
      ""
    ],
    "parameters": [
      {
        "name": "rotationId",
        "type": "string",
        "required": true,
        "description": "Rotationid identifier",
        "in": "path"
      },
      {
        "name": "datePreset",
        "type": "string",
        "required": true,
        "description": "Time period filter (e.g., 'last_7_days', 'today', 'yesterday')",
        "in": "query",
        "enum": [
          "today",
          "yesterday",
          "this_week",
          "last_week",
          "last_7_days",
          "last_14_days",
          "last_30_days",
          "this_month",
          "last_month",
          "this_year",
          "last_year",
          "all_time",
          "custom_time"
        ]
      },
      {
        "name": "timezone",
        "type": "string",
        "required": true,
        "description": "Timezone for date calculations (e.g., 'UTC')",
        "in": "query",
        "default": "UTC"
      },
      {
        "name": "limit",
        "type": "integer",
        "required": false,
        "description": "Maximum number of records to return (max 1000)",
        "in": "query",
        "default": 100
      },
      {
        "name": "offset",
        "type": "integer",
        "required": false,
        "description": "Number of records to skip for pagination",
        "in": "query",
        "default": 0
      },
      {
        "name": "sortColumn",
        "type": "string",
        "required": false,
        "description": "Column to sort by",
        "in": "query"
      },
      {
        "name": "sortType",
        "type": "string",
        "required": false,
        "description": "Sort direction",
        "in": "query",
        "enum": [
          "asc",
          "desc"
        ]
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success",
        "example": [
          {
            "id": 1,
            "name": "Example Item",
            "status": "active",
            "createdAt": "2025-09-27T00:00:00Z"
          }
        ]
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/campaign/by_rotation/123/list?datePreset=VALUE&timezone=UTC\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(\n    f\"{BASE_URL}/public/api/v1/campaign/by_rotation/123/list\",\n    headers=headers,\n    params={'datePreset': 'VALUE', 'timezone': 'UTC'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "GET",
    "path": "/public/api/v1/campaign/traffic_source/list",
    "summary": "Get TrafficSource with Campaign list.",
    "description": "Get TrafficSource with Campaign list.",
    "tags": [
      ""
    ],
    "parameters": [
      {
        "name": "datePreset",
        "type": "string",
        "required": true,
        "description": "Time period filter (e.g., 'last_7_days', 'today', 'yesterday')",
        "in": "query",
        "enum": [
          "today",
          "yesterday",
          "this_week",
          "last_week",
          "last_7_days",
          "last_14_days",
          "last_30_days",
          "this_month",
          "last_month",
          "this_year",
          "last_year",
          "all_time",
          "custom_time"
        ]
      },
      {
        "name": "timezone",
        "type": "string",
        "required": true,
        "description": "Timezone for date calculations (e.g., 'UTC')",
        "in": "query",
        "default": "UTC"
      },
      {
        "name": "limit",
        "type": "integer",
        "required": false,
        "description": "Maximum number of records to return (max 1000)",
        "in": "query",
        "default": 100
      },
      {
        "name": "offset",
        "type": "integer",
        "required": false,
        "description": "Number of records to skip for pagination",
        "in": "query",
        "default": 0
      },
      {
        "name": "sortColumn",
        "type": "string",
        "required": false,
        "description": "Column to sort by",
        "in": "query"
      },
      {
        "name": "sortType",
        "type": "string",
        "required": false,
        "description": "Sort direction",
        "in": "query",
        "enum": [
          "asc",
          "desc"
        ]
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success",
        "example": [
          {
            "id": 1,
            "name": "Example Item",
            "status": "active",
            "createdAt": "2025-09-27T00:00:00Z"
          }
        ]
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/campaign/traffic_source/list?datePreset=VALUE&timezone=UTC\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(\n    f\"{BASE_URL}/public/api/v1/campaign/traffic_source/list\",\n    headers=headers,\n    params={'datePreset': 'VALUE', 'timezone': 'UTC'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "GET",
    "path": "/public/api/v1/campaign/{id}/permissions",
    "summary": "Get users with Permission access to the passed Campaign",
    "description": "Get users with Permission access to the passed Campaign",
    "tags": [
      ""
    ],
    "parameters": [
      {
        "name": "id",
        "type": "integer",
        "required": true,
        "description": "Id identifier",
        "in": "path"
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success",
        "example": [
          {
            "id": 1,
            "name": "Example Item",
            "status": "active",
            "createdAt": "2025-09-27T00:00:00Z"
          }
        ]
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/campaign/123/permissions\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(\n    f\"{BASE_URL}/public/api/v1/campaign/123/permissions\",\n    headers=headers\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "POST",
    "path": "/public/api/v1/campaign/{id}/permissions",
    "summary": "Grant user access to the specified campaign",
    "description": "Grant user access to the specified campaign",
    "tags": [
      ""
    ],
    "parameters": [
      {
        "name": "id",
        "type": "integer",
        "required": true,
        "description": "Id identifier",
        "in": "path"
      }
    ],
    "requestBody": {
      "contentType": "application/json",
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Campaign name"
          },
          "trafficSourceId": {
            "type": "integer",
            "description": "Traffic source ID"
          },
          "cost": {
            "type": "number",
            "description": "Cost per click"
          },
          "currency": {
            "type": "string",
            "description": "Currency code",
            "default": "USD"
          }
        },
        "required": [
          "name",
          "trafficSourceId"
        ]
      },
      "example": {
        "name": "Test Campaign",
        "trafficSourceId": 1,
        "cost": 0.1,
        "currency": "USD"
      }
    },
    "responses": {
      "201": {
        "description": "Created successfully",
        "example": {
          "id": 123,
          "message": "Resource created successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      }
    },
    "examples": {
      "curl": "curl -X POST \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/campaign/123/permissions\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(\n    f\"{BASE_URL}/public/api/v1/campaign/123/permissions\",\n    headers=headers,\n    json={'name': 'Test Campaign', 'trafficSourceId': 1, 'cost': 0.1, 'currency': 'USD'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "DELETE",
    "path": "/public/api/v1/campaign/{id}/permissions",
    "summary": "Revoke users access to the specified campaign",
    "description": "Revoke users access to the specified campaign",
    "tags": [
      ""
    ],
    "parameters": [
      {
        "name": "id",
        "type": "integer",
        "required": true,
        "description": "Id identifier",
        "in": "path"
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Deleted successfully",
        "example": {
          "message": "Resource deleted successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X DELETE \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/campaign/123/permissions\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.delete(\n    f\"{BASE_URL}/public/api/v1/campaign/123/permissions\",\n    headers=headers\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "PATCH",
    "path": "/public/api/v1/campaign/modify/{id}",
    "summary": "Partially update Campaign.",
    "description": "Partially update Campaign.",
    "tags": [
      ""
    ],
    "parameters": [
      {
        "name": "id",
        "type": "integer",
        "required": true,
        "description": "Id identifier",
        "in": "path"
      }
    ],
    "requestBody": {
      "contentType": "application/json",
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Campaign name"
          },
          "cost": {
            "type": "number",
            "description": "Cost per click"
          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "paused"
            ],
            "description": "Campaign status"
          }
        }
      },
      "example": {
        "name": "Updated Campaign Name",
        "cost": 0.15,
        "status": "active"
      }
    },
    "responses": {
      "200": {
        "description": "Restored/Modified successfully",
        "example": {
          "message": "Resource restored successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X PATCH \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/campaign/modify/123\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.patch(\n    f\"{BASE_URL}/public/api/v1/campaign/modify/123\",\n    headers=headers,\n    json={'name': 'Updated Campaign Name', 'cost': 0.15, 'status': 'active'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "PUT",
    "path": "/public/api/v1/campaign/{id}/rename",
    "summary": "Rename Campaign.",
    "description": "Rename Campaign.",
    "tags": [
      ""
    ],
    "parameters": [
      {
        "name": "id",
        "type": "integer",
        "required": true,
        "description": "Id identifier",
        "in": "path"
      }
    ],
    "requestBody": {
      "contentType": "application/json",
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Campaign name"
          },
          "cost": {
            "type": "number",
            "description": "Cost per click"
          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "paused"
            ],
            "description": "Campaign status"
          }
        }
      },
      "example": {
        "name": "Updated Campaign Name",
        "cost": 0.15,
        "status": "active"
      }
    },
    "responses": {
      "200": {
        "description": "Updated successfully",
        "example": {
          "message": "Resource updated successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X PUT \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/campaign/123/rename\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.put(\n    f\"{BASE_URL}/public/api/v1/campaign/123/rename\",\n    headers=headers,\n    json={'name': 'Updated Campaign Name', 'cost': 0.15, 'status': 'active'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "POST",
    "path": "/public/api/v1/campaign/switch_domain",
    "summary": "Change Domain for multiple Campaigns",
    "description": "Change Domain for multiple Campaigns",
    "tags": [
      ""
    ],
    "parameters": [],
    "requestBody": {
      "contentType": "application/json",
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Campaign name"
          },
          "trafficSourceId": {
            "type": "integer",
            "description": "Traffic source ID"
          },
          "cost": {
            "type": "number",
            "description": "Cost per click"
          },
          "currency": {
            "type": "string",
            "description": "Currency code",
            "default": "USD"
          }
        },
        "required": [
          "name",
          "trafficSourceId"
        ]
      },
      "example": {
        "name": "Test Campaign",
        "trafficSourceId": 1,
        "cost": 0.1,
        "currency": "USD"
      }
    },
    "responses": {
      "201": {
        "description": "Created successfully",
        "example": {
          "id": 123,
          "message": "Resource created successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      }
    },
    "examples": {
      "curl": "curl -X POST \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/campaign/switch_domain\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(\n    f\"{BASE_URL}/public/api/v1/campaign/switch_domain\",\n    headers=headers,\n    json={'name': 'Test Campaign', 'trafficSourceId': 1, 'cost': 0.1, 'currency': 'USD'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "PUT",
    "path": "/public/api/v1/campaign/landing/pause",
    "summary": "Pause landing in campaign.",
    "description": "Pause landing in campaign.",
    "tags": [
      ""
    ],
    "parameters": [],
    "requestBody": {
      "contentType": "application/json",
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Campaign name"
          },
          "cost": {
            "type": "number",
            "description": "Cost per click"
          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "paused"
            ],
            "description": "Campaign status"
          }
        }
      },
      "example": {
        "name": "Updated Campaign Name",
        "cost": 0.15,
        "status": "active"
      }
    },
    "responses": {
      "200": {
        "description": "Updated successfully",
        "example": {
          "message": "Resource updated successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X PUT \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/campaign/landing/pause\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.put(\n    f\"{BASE_URL}/public/api/v1/campaign/landing/pause\",\n    headers=headers,\n    json={'name': 'Updated Campaign Name', 'cost': 0.15, 'status': 'active'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "PUT",
    "path": "/public/api/v1/campaign/offer/pause",
    "summary": "Pause offer in campaign.",
    "description": "Pause offer in campaign.",
    "tags": [
      ""
    ],
    "parameters": [],
    "requestBody": {
      "contentType": "application/json",
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Campaign name"
          },
          "cost": {
            "type": "number",
            "description": "Cost per click"
          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "paused"
            ],
            "description": "Campaign status"
          }
        }
      },
      "example": {
        "name": "Updated Campaign Name",
        "cost": 0.15,
        "status": "active"
      }
    },
    "responses": {
      "200": {
        "description": "Updated successfully",
        "example": {
          "message": "Resource updated successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X PUT \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/campaign/offer/pause\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.put(\n    f\"{BASE_URL}/public/api/v1/campaign/offer/pause\",\n    headers=headers,\n    json={'name': 'Updated Campaign Name', 'cost': 0.15, 'status': 'active'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "PUT",
    "path": "/public/api/v1/campaign/path/pause",
    "summary": "Pause path in campaign.",
    "description": "Pause path in campaign.",
    "tags": [
      ""
    ],
    "parameters": [],
    "requestBody": {
      "contentType": "application/json",
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Campaign name"
          },
          "cost": {
            "type": "number",
            "description": "Cost per click"
          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "paused"
            ],
            "description": "Campaign status"
          }
        }
      },
      "example": {
        "name": "Updated Campaign Name",
        "cost": 0.15,
        "status": "active"
      }
    },
    "responses": {
      "200": {
        "description": "Updated successfully",
        "example": {
          "message": "Resource updated successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X PUT \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/campaign/path/pause\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.put(\n    f\"{BASE_URL}/public/api/v1/campaign/path/pause\",\n    headers=headers,\n    json={'name': 'Updated Campaign Name', 'cost': 0.15, 'status': 'active'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "GET",
    "path": "/public/api/v1/conversion/{id}/clone",
    "summary": "Clone Conversion.",
    "description": "Clone Conversion.",
    "tags": [
      ""
    ],
    "parameters": [
      {
        "name": "id",
        "type": "integer",
        "required": true,
        "description": "Id identifier",
        "in": "path"
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success",
        "example": [
          {
            "id": 1,
            "name": "Example Item",
            "status": "active",
            "createdAt": "2025-09-27T00:00:00Z"
          }
        ]
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/conversion/123/clone\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(\n    f\"{BASE_URL}/public/api/v1/conversion/123/clone\",\n    headers=headers\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "POST",
    "path": "/public/api/v1/conversion",
    "summary": "Create Conversion.",
    "description": "Create Conversion.",
    "tags": [
      ""
    ],
    "parameters": [],
    "requestBody": {
      "contentType": "application/json",
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Resource name"
          }
        }
      },
      "example": {
        "name": "Example Resource"
      }
    },
    "responses": {
      "201": {
        "description": "Created successfully",
        "example": {
          "id": 123,
          "message": "Resource created successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      }
    },
    "examples": {
      "curl": "curl -X POST \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/conversion\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(\n    f\"{BASE_URL}/public/api/v1/conversion\",\n    headers=headers,\n    json={'name': 'Example Resource'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "GET",
    "path": "/public/api/v1/conversion/{id}",
    "summary": "Get Conversion.",
    "description": "Get Conversion.",
    "tags": [
      ""
    ],
    "parameters": [
      {
        "name": "id",
        "type": "integer",
        "required": true,
        "description": "Id identifier",
        "in": "path"
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success",
        "example": [
          {
            "id": 1,
            "name": "Example Item",
            "status": "active",
            "createdAt": "2025-09-27T00:00:00Z"
          }
        ]
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/conversion/123\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(\n    f\"{BASE_URL}/public/api/v1/conversion/123\",\n    headers=headers\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "PUT",
    "path": "/public/api/v1/conversion/{id}",
    "summary": "Edit Conversion.",
    "description": "Edit Conversion.",
    "tags": [
      ""
    ],
    "parameters": [
      {
        "name": "id",
        "type": "integer",
        "required": true,
        "description": "Id identifier",
        "in": "path"
      }
    ],
    "requestBody": {
      "contentType": "application/json",
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Resource name"
          }
        }
      },
      "example": {
        "name": "Example Resource"
      }
    },
    "responses": {
      "200": {
        "description": "Updated successfully",
        "example": {
          "message": "Resource updated successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X PUT \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/conversion/123\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.put(\n    f\"{BASE_URL}/public/api/v1/conversion/123\",\n    headers=headers,\n    json={'name': 'Example Resource'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "DELETE",
    "path": "/public/api/v1/conversion/{id}",
    "summary": "Delete Conversion.",
    "description": "Delete Conversion.",
    "tags": [
      ""
    ],
    "parameters": [
      {
        "name": "id",
        "type": "integer",
        "required": true,
        "description": "Id identifier",
        "in": "path"
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Deleted successfully",
        "example": {
          "message": "Resource deleted successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X DELETE \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/conversion/123\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.delete(\n    f\"{BASE_URL}/public/api/v1/conversion/123\",\n    headers=headers\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "PATCH",
    "path": "/public/api/v1/conversion/{id}",
    "summary": "Restore Conversion.",
    "description": "Restore Conversion.",
    "tags": [
      ""
    ],
    "parameters": [
      {
        "name": "id",
        "type": "integer",
        "required": true,
        "description": "Id identifier",
        "in": "path"
      }
    ],
    "requestBody": {
      "contentType": "application/json",
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Resource name"
          }
        }
      },
      "example": {
        "name": "Example Resource"
      }
    },
    "responses": {
      "200": {
        "description": "Restored/Modified successfully",
        "example": {
          "message": "Resource restored successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X PATCH \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/conversion/123\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.patch(\n    f\"{BASE_URL}/public/api/v1/conversion/123\",\n    headers=headers,\n    json={'name': 'Example Resource'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "GET",
    "path": "/public/api/v1/conversion/list/filtered",
    "summary": "Get Conversion list filtered.",
    "description": "Get Conversion list filtered.",
    "tags": [
      ""
    ],
    "parameters": [
      {
        "name": "datePreset",
        "type": "string",
        "required": true,
        "description": "Time period filter (e.g., 'last_7_days', 'today', 'yesterday')",
        "in": "query",
        "enum": [
          "today",
          "yesterday",
          "this_week",
          "last_week",
          "last_7_days",
          "last_14_days",
          "last_30_days",
          "this_month",
          "last_month",
          "this_year",
          "last_year",
          "all_time",
          "custom_time"
        ]
      },
      {
        "name": "timezone",
        "type": "string",
        "required": true,
        "description": "Timezone for date calculations (e.g., 'UTC')",
        "in": "query",
        "default": "UTC"
      },
      {
        "name": "limit",
        "type": "integer",
        "required": false,
        "description": "Maximum number of records to return (max 1000)",
        "in": "query",
        "default": 100
      },
      {
        "name": "offset",
        "type": "integer",
        "required": false,
        "description": "Number of records to skip for pagination",
        "in": "query",
        "default": 0
      },
      {
        "name": "sortColumn",
        "type": "string",
        "required": false,
        "description": "Column to sort by",
        "in": "query"
      },
      {
        "name": "sortType",
        "type": "string",
        "required": false,
        "description": "Sort direction",
        "in": "query",
        "enum": [
          "asc",
          "desc"
        ]
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success",
        "example": [
          {
            "id": 1,
            "name": "Example Item",
            "status": "active",
            "createdAt": "2025-09-27T00:00:00Z"
          }
        ]
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/conversion/list/filtered?datePreset=VALUE&timezone=UTC\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(\n    f\"{BASE_URL}/public/api/v1/conversion/list/filtered\",\n    headers=headers,\n    params={'datePreset': 'VALUE', 'timezone': 'UTC'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "PUT",
    "path": "/public/api/v1/conversion/{id}/rename",
    "summary": "Rename Conversion.",
    "description": "Rename Conversion.",
    "tags": [
      ""
    ],
    "parameters": [
      {
        "name": "id",
        "type": "integer",
        "required": true,
        "description": "Id identifier",
        "in": "path"
      }
    ],
    "requestBody": {
      "contentType": "application/json",
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Resource name"
          }
        }
      },
      "example": {
        "name": "Example Resource"
      }
    },
    "responses": {
      "200": {
        "description": "Updated successfully",
        "example": {
          "message": "Resource updated successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X PUT \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/conversion/123/rename\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.put(\n    f\"{BASE_URL}/public/api/v1/conversion/123/rename\",\n    headers=headers,\n    json={'name': 'Example Resource'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "GET",
    "path": "/public/api/v1/domain/{id}/clone",
    "summary": "Clone Domain.",
    "description": "Clone Domain.",
    "tags": [
      ""
    ],
    "parameters": [
      {
        "name": "id",
        "type": "integer",
        "required": true,
        "description": "Id identifier",
        "in": "path"
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success",
        "example": [
          {
            "id": 1,
            "name": "Example Item",
            "status": "active",
            "createdAt": "2025-09-27T00:00:00Z"
          }
        ]
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/domain/123/clone\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(\n    f\"{BASE_URL}/public/api/v1/domain/123/clone\",\n    headers=headers\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "POST",
    "path": "/public/api/v1/domain",
    "summary": "Create Domain.",
    "description": "Create Domain.",
    "tags": [
      ""
    ],
    "parameters": [],
    "requestBody": {
      "contentType": "application/json",
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Resource name"
          }
        }
      },
      "example": {
        "name": "Example Resource"
      }
    },
    "responses": {
      "201": {
        "description": "Created successfully",
        "example": {
          "id": 123,
          "message": "Resource created successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      }
    },
    "examples": {
      "curl": "curl -X POST \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/domain\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(\n    f\"{BASE_URL}/public/api/v1/domain\",\n    headers=headers,\n    json={'name': 'Example Resource'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "GET",
    "path": "/public/api/v1/domain/{id}",
    "summary": "Get Domain.",
    "description": "Get Domain.",
    "tags": [
      ""
    ],
    "parameters": [
      {
        "name": "id",
        "type": "integer",
        "required": true,
        "description": "Id identifier",
        "in": "path"
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success",
        "example": [
          {
            "id": 1,
            "name": "Example Item",
            "status": "active",
            "createdAt": "2025-09-27T00:00:00Z"
          }
        ]
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/domain/123\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(\n    f\"{BASE_URL}/public/api/v1/domain/123\",\n    headers=headers\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "PUT",
    "path": "/public/api/v1/domain/{id}",
    "summary": "Edit Domain.",
    "description": "Edit Domain.",
    "tags": [
      ""
    ],
    "parameters": [
      {
        "name": "id",
        "type": "integer",
        "required": true,
        "description": "Id identifier",
        "in": "path"
      }
    ],
    "requestBody": {
      "contentType": "application/json",
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Resource name"
          }
        }
      },
      "example": {
        "name": "Example Resource"
      }
    },
    "responses": {
      "200": {
        "description": "Updated successfully",
        "example": {
          "message": "Resource updated successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X PUT \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/domain/123\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.put(\n    f\"{BASE_URL}/public/api/v1/domain/123\",\n    headers=headers,\n    json={'name': 'Example Resource'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "DELETE",
    "path": "/public/api/v1/domain/{id}",
    "summary": "Delete Domain.",
    "description": "Delete Domain.",
    "tags": [
      ""
    ],
    "parameters": [
      {
        "name": "id",
        "type": "integer",
        "required": true,
        "description": "Id identifier",
        "in": "path"
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Deleted successfully",
        "example": {
          "message": "Resource deleted successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X DELETE \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/domain/123\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.delete(\n    f\"{BASE_URL}/public/api/v1/domain/123\",\n    headers=headers\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "PATCH",
    "path": "/public/api/v1/domain/{id}",
    "summary": "Restore Domain.",
    "description": "Restore Domain.",
    "tags": [
      ""
    ],
    "parameters": [
      {
        "name": "id",
        "type": "integer",
        "required": true,
        "description": "Id identifier",
        "in": "path"
      }
    ],
    "requestBody": {
      "contentType": "application/json",
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Resource name"
          }
        }
      },
      "example": {
        "name": "Example Resource"
      }
    },
    "responses": {
      "200": {
        "description": "Restored/Modified successfully",
        "example": {
          "message": "Resource restored successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X PATCH \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/domain/123\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.patch(\n    f\"{BASE_URL}/public/api/v1/domain/123\",\n    headers=headers,\n    json={'name': 'Example Resource'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "GET",
    "path": "/public/api/v1/domain/list/filtered",
    "summary": "Get Domain list filtered.",
    "description": "Get Domain list filtered.",
    "tags": [
      ""
    ],
    "parameters": [
      {
        "name": "datePreset",
        "type": "string",
        "required": true,
        "description": "Time period filter (e.g., 'last_7_days', 'today', 'yesterday')",
        "in": "query",
        "enum": [
          "today",
          "yesterday",
          "this_week",
          "last_week",
          "last_7_days",
          "last_14_days",
          "last_30_days",
          "this_month",
          "last_month",
          "this_year",
          "last_year",
          "all_time",
          "custom_time"
        ]
      },
      {
        "name": "timezone",
        "type": "string",
        "required": true,
        "description": "Timezone for date calculations (e.g., 'UTC')",
        "in": "query",
        "default": "UTC"
      },
      {
        "name": "limit",
        "type": "integer",
        "required": false,
        "description": "Maximum number of records to return (max 1000)",
        "in": "query",
        "default": 100
      },
      {
        "name": "offset",
        "type": "integer",
        "required": false,
        "description": "Number of records to skip for pagination",
        "in": "query",
        "default": 0
      },
      {
        "name": "sortColumn",
        "type": "string",
        "required": false,
        "description": "Column to sort by",
        "in": "query"
      },
      {
        "name": "sortType",
        "type": "string",
        "required": false,
        "description": "Sort direction",
        "in": "query",
        "enum": [
          "asc",
          "desc"
        ]
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success",
        "example": [
          {
            "id": 1,
            "name": "Example Item",
            "status": "active",
            "createdAt": "2025-09-27T00:00:00Z"
          }
        ]
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/domain/list/filtered?datePreset=VALUE&timezone=UTC\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(\n    f\"{BASE_URL}/public/api/v1/domain/list/filtered\",\n    headers=headers,\n    params={'datePreset': 'VALUE', 'timezone': 'UTC'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "PUT",
    "path": "/public/api/v1/domain/{id}/rename",
    "summary": "Rename Domain.",
    "description": "Rename Domain.",
    "tags": [
      ""
    ],
    "parameters": [
      {
        "name": "id",
        "type": "integer",
        "required": true,
        "description": "Id identifier",
        "in": "path"
      }
    ],
    "requestBody": {
      "contentType": "application/json",
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Resource name"
          }
        }
      },
      "example": {
        "name": "Example Resource"
      }
    },
    "responses": {
      "200": {
        "description": "Updated successfully",
        "example": {
          "message": "Resource updated successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X PUT \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/domain/123/rename\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.put(\n    f\"{BASE_URL}/public/api/v1/domain/123/rename\",\n    headers=headers,\n    json={'name': 'Example Resource'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "GET",
    "path": "/public/api/v1/group/{id}/clone",
    "summary": "Clone Group.",
    "description": "Clone Group.",
    "tags": [
      ""
    ],
    "parameters": [
      {
        "name": "id",
        "type": "integer",
        "required": true,
        "description": "Id identifier",
        "in": "path"
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success",
        "example": [
          {
            "id": 1,
            "name": "Example Item",
            "status": "active",
            "createdAt": "2025-09-27T00:00:00Z"
          }
        ]
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/group/123/clone\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(\n    f\"{BASE_URL}/public/api/v1/group/123/clone\",\n    headers=headers\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "POST",
    "path": "/public/api/v1/group",
    "summary": "Create Group.",
    "description": "Create Group.",
    "tags": [
      ""
    ],
    "parameters": [],
    "requestBody": {
      "contentType": "application/json",
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Resource name"
          }
        }
      },
      "example": {
        "name": "Example Resource"
      }
    },
    "responses": {
      "201": {
        "description": "Created successfully",
        "example": {
          "id": 123,
          "message": "Resource created successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      }
    },
    "examples": {
      "curl": "curl -X POST \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/group\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(\n    f\"{BASE_URL}/public/api/v1/group\",\n    headers=headers,\n    json={'name': 'Example Resource'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "GET",
    "path": "/public/api/v1/group/{id}",
    "summary": "Get Group.",
    "description": "Get Group.",
    "tags": [
      ""
    ],
    "parameters": [
      {
        "name": "id",
        "type": "integer",
        "required": true,
        "description": "Id identifier",
        "in": "path"
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success",
        "example": [
          {
            "id": 1,
            "name": "Example Item",
            "status": "active",
            "createdAt": "2025-09-27T00:00:00Z"
          }
        ]
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/group/123\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(\n    f\"{BASE_URL}/public/api/v1/group/123\",\n    headers=headers\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "PUT",
    "path": "/public/api/v1/group/{id}",
    "summary": "Edit Group.",
    "description": "Edit Group.",
    "tags": [
      ""
    ],
    "parameters": [
      {
        "name": "id",
        "type": "integer",
        "required": true,
        "description": "Id identifier",
        "in": "path"
      }
    ],
    "requestBody": {
      "contentType": "application/json",
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Resource name"
          }
        }
      },
      "example": {
        "name": "Example Resource"
      }
    },
    "responses": {
      "200": {
        "description": "Updated successfully",
        "example": {
          "message": "Resource updated successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X PUT \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/group/123\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.put(\n    f\"{BASE_URL}/public/api/v1/group/123\",\n    headers=headers,\n    json={'name': 'Example Resource'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "DELETE",
    "path": "/public/api/v1/group/{id}",
    "summary": "Delete Group.",
    "description": "Delete Group.",
    "tags": [
      ""
    ],
    "parameters": [
      {
        "name": "id",
        "type": "integer",
        "required": true,
        "description": "Id identifier",
        "in": "path"
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Deleted successfully",
        "example": {
          "message": "Resource deleted successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X DELETE \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/group/123\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.delete(\n    f\"{BASE_URL}/public/api/v1/group/123\",\n    headers=headers\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "PATCH",
    "path": "/public/api/v1/group/{id}",
    "summary": "Restore Group.",
    "description": "Restore Group.",
    "tags": [
      ""
    ],
    "parameters": [
      {
        "name": "id",
        "type": "integer",
        "required": true,
        "description": "Id identifier",
        "in": "path"
      }
    ],
    "requestBody": {
      "contentType": "application/json",
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Resource name"
          }
        }
      },
      "example": {
        "name": "Example Resource"
      }
    },
    "responses": {
      "200": {
        "description": "Restored/Modified successfully",
        "example": {
          "message": "Resource restored successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X PATCH \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/group/123\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.patch(\n    f\"{BASE_URL}/public/api/v1/group/123\",\n    headers=headers,\n    json={'name': 'Example Resource'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "GET",
    "path": "/public/api/v1/group/list/filtered",
    "summary": "Get Group list filtered.",
    "description": "Get Group list filtered.",
    "tags": [
      ""
    ],
    "parameters": [
      {
        "name": "datePreset",
        "type": "string",
        "required": true,
        "description": "Time period filter (e.g., 'last_7_days', 'today', 'yesterday')",
        "in": "query",
        "enum": [
          "today",
          "yesterday",
          "this_week",
          "last_week",
          "last_7_days",
          "last_14_days",
          "last_30_days",
          "this_month",
          "last_month",
          "this_year",
          "last_year",
          "all_time",
          "custom_time"
        ]
      },
      {
        "name": "timezone",
        "type": "string",
        "required": true,
        "description": "Timezone for date calculations (e.g., 'UTC')",
        "in": "query",
        "default": "UTC"
      },
      {
        "name": "limit",
        "type": "integer",
        "required": false,
        "description": "Maximum number of records to return (max 1000)",
        "in": "query",
        "default": 100
      },
      {
        "name": "offset",
        "type": "integer",
        "required": false,
        "description": "Number of records to skip for pagination",
        "in": "query",
        "default": 0
      },
      {
        "name": "sortColumn",
        "type": "string",
        "required": false,
        "description": "Column to sort by",
        "in": "query"
      },
      {
        "name": "sortType",
        "type": "string",
        "required": false,
        "description": "Sort direction",
        "in": "query",
        "enum": [
          "asc",
          "desc"
        ]
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success",
        "example": [
          {
            "id": 1,
            "name": "Example Item",
            "status": "active",
            "createdAt": "2025-09-27T00:00:00Z"
          }
        ]
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/group/list/filtered?datePreset=VALUE&timezone=UTC\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(\n    f\"{BASE_URL}/public/api/v1/group/list/filtered\",\n    headers=headers,\n    params={'datePreset': 'VALUE', 'timezone': 'UTC'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "PUT",
    "path": "/public/api/v1/group/{id}/rename",
    "summary": "Rename Group.",
    "description": "Rename Group.",
    "tags": [
      ""
    ],
    "parameters": [
      {
        "name": "id",
        "type": "integer",
        "required": true,
        "description": "Id identifier",
        "in": "path"
      }
    ],
    "requestBody": {
      "contentType": "application/json",
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Resource name"
          }
        }
      },
      "example": {
        "name": "Example Resource"
      }
    },
    "responses": {
      "200": {
        "description": "Updated successfully",
        "example": {
          "message": "Resource updated successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X PUT \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/group/123/rename\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.put(\n    f\"{BASE_URL}/public/api/v1/group/123/rename\",\n    headers=headers,\n    json={'name': 'Example Resource'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "GET",
    "path": "/public/api/v1/landing/{id}/clone",
    "summary": "Clone Landing.",
    "description": "Clone Landing.",
    "tags": [
      ""
    ],
    "parameters": [
      {
        "name": "id",
        "type": "integer",
        "required": true,
        "description": "Id identifier",
        "in": "path"
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success",
        "example": [
          {
            "id": 1,
            "name": "Example Item",
            "status": "active",
            "createdAt": "2025-09-27T00:00:00Z"
          }
        ]
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/landing/123/clone\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(\n    f\"{BASE_URL}/public/api/v1/landing/123/clone\",\n    headers=headers\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "POST",
    "path": "/public/api/v1/landing",
    "summary": "Create Landing.",
    "description": "Create Landing.",
    "tags": [
      ""
    ],
    "parameters": [],
    "requestBody": {
      "contentType": "application/json",
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Landing page name"
          },
          "url": {
            "type": "string",
            "description": "Landing page URL"
          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "paused"
            ],
            "description": "Landing status"
          }
        },
        "required": [
          "name",
          "url"
        ]
      },
      "example": {
        "name": "Main Landing Page",
        "url": "https://example.com/landing",
        "status": "active"
      }
    },
    "responses": {
      "201": {
        "description": "Created successfully",
        "example": {
          "id": 123,
          "message": "Resource created successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      }
    },
    "examples": {
      "curl": "curl -X POST \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/landing\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(\n    f\"{BASE_URL}/public/api/v1/landing\",\n    headers=headers,\n    json={'name': 'Main Landing Page', 'url': 'https://example.com/landing', 'status': 'active'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "GET",
    "path": "/public/api/v1/landing/{id}",
    "summary": "Get Landing.",
    "description": "Get Landing.",
    "tags": [
      ""
    ],
    "parameters": [
      {
        "name": "id",
        "type": "integer",
        "required": true,
        "description": "Id identifier",
        "in": "path"
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success",
        "example": [
          {
            "id": 1,
            "name": "Example Item",
            "status": "active",
            "createdAt": "2025-09-27T00:00:00Z"
          }
        ]
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/landing/123\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(\n    f\"{BASE_URL}/public/api/v1/landing/123\",\n    headers=headers\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "PUT",
    "path": "/public/api/v1/landing/{id}",
    "summary": "Edit Landing.",
    "description": "Edit Landing.",
    "tags": [
      ""
    ],
    "parameters": [
      {
        "name": "id",
        "type": "integer",
        "required": true,
        "description": "Id identifier",
        "in": "path"
      }
    ],
    "requestBody": {
      "contentType": "application/json",
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Landing page name"
          },
          "url": {
            "type": "string",
            "description": "Landing page URL"
          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "paused"
            ],
            "description": "Landing status"
          }
        },
        "required": [
          "name",
          "url"
        ]
      },
      "example": {
        "name": "Main Landing Page",
        "url": "https://example.com/landing",
        "status": "active"
      }
    },
    "responses": {
      "200": {
        "description": "Updated successfully",
        "example": {
          "message": "Resource updated successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X PUT \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/landing/123\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.put(\n    f\"{BASE_URL}/public/api/v1/landing/123\",\n    headers=headers,\n    json={'name': 'Main Landing Page', 'url': 'https://example.com/landing', 'status': 'active'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "DELETE",
    "path": "/public/api/v1/landing/{id}",
    "summary": "Delete Landing.",
    "description": "Delete Landing.",
    "tags": [
      ""
    ],
    "parameters": [
      {
        "name": "id",
        "type": "integer",
        "required": true,
        "description": "Id identifier",
        "in": "path"
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Deleted successfully",
        "example": {
          "message": "Resource deleted successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X DELETE \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/landing/123\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.delete(\n    f\"{BASE_URL}/public/api/v1/landing/123\",\n    headers=headers\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "PATCH",
    "path": "/public/api/v1/landing/{id}",
    "summary": "Restore Landing.",
    "description": "Restore Landing.",
    "tags": [
      ""
    ],
    "parameters": [
      {
        "name": "id",
        "type": "integer",
        "required": true,
        "description": "Id identifier",
        "in": "path"
      }
    ],
    "requestBody": {
      "contentType": "application/json",
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Landing page name"
          },
          "url": {
            "type": "string",
            "description": "Landing page URL"
          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "paused"
            ],
            "description": "Landing status"
          }
        },
        "required": [
          "name",
          "url"
        ]
      },
      "example": {
        "name": "Main Landing Page",
        "url": "https://example.com/landing",
        "status": "active"
      }
    },
    "responses": {
      "200": {
        "description": "Restored/Modified successfully",
        "example": {
          "message": "Resource restored successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X PATCH \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/landing/123\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.patch(\n    f\"{BASE_URL}/public/api/v1/landing/123\",\n    headers=headers,\n    json={'name': 'Main Landing Page', 'url': 'https://example.com/landing', 'status': 'active'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "GET",
    "path": "/public/api/v1/landing/list/filtered",
    "summary": "Get Landing list filtered.",
    "description": "Get Landing list filtered.",
    "tags": [
      ""
    ],
    "parameters": [
      {
        "name": "datePreset",
        "type": "string",
        "required": true,
        "description": "Time period filter (e.g., 'last_7_days', 'today', 'yesterday')",
        "in": "query",
        "enum": [
          "today",
          "yesterday",
          "this_week",
          "last_week",
          "last_7_days",
          "last_14_days",
          "last_30_days",
          "this_month",
          "last_month",
          "this_year",
          "last_year",
          "all_time",
          "custom_time"
        ]
      },
      {
        "name": "timezone",
        "type": "string",
        "required": true,
        "description": "Timezone for date calculations (e.g., 'UTC')",
        "in": "query",
        "default": "UTC"
      },
      {
        "name": "limit",
        "type": "integer",
        "required": false,
        "description": "Maximum number of records to return (max 1000)",
        "in": "query",
        "default": 100
      },
      {
        "name": "offset",
        "type": "integer",
        "required": false,
        "description": "Number of records to skip for pagination",
        "in": "query",
        "default": 0
      },
      {
        "name": "sortColumn",
        "type": "string",
        "required": false,
        "description": "Column to sort by",
        "in": "query"
      },
      {
        "name": "sortType",
        "type": "string",
        "required": false,
        "description": "Sort direction",
        "in": "query",
        "enum": [
          "asc",
          "desc"
        ]
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success",
        "example": [
          {
            "id": 1,
            "name": "Example Item",
            "status": "active",
            "createdAt": "2025-09-27T00:00:00Z"
          }
        ]
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/landing/list/filtered?datePreset=VALUE&timezone=UTC\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(\n    f\"{BASE_URL}/public/api/v1/landing/list/filtered\",\n    headers=headers,\n    params={'datePreset': 'VALUE', 'timezone': 'UTC'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "PUT",
    "path": "/public/api/v1/landing/{id}/rename",
    "summary": "Rename Landing.",
    "description": "Rename Landing.",
    "tags": [
      ""
    ],
    "parameters": [
      {
        "name": "id",
        "type": "integer",
        "required": true,
        "description": "Id identifier",
        "in": "path"
      }
    ],
    "requestBody": {
      "contentType": "application/json",
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Landing page name"
          },
          "url": {
            "type": "string",
            "description": "Landing page URL"
          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "paused"
            ],
            "description": "Landing status"
          }
        },
        "required": [
          "name",
          "url"
        ]
      },
      "example": {
        "name": "Main Landing Page",
        "url": "https://example.com/landing",
        "status": "active"
      }
    },
    "responses": {
      "200": {
        "description": "Updated successfully",
        "example": {
          "message": "Resource updated successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X PUT \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/landing/123/rename\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.put(\n    f\"{BASE_URL}/public/api/v1/landing/123/rename\",\n    headers=headers,\n    json={'name': 'Main Landing Page', 'url': 'https://example.com/landing', 'status': 'active'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "GET",
    "path": "/public/api/v1/offer/{id}/clone",
    "summary": "Clone Offer.",
    "description": "Clone Offer.",
    "tags": [
      ""
    ],
    "parameters": [
      {
        "name": "id",
        "type": "integer",
        "required": true,
        "description": "Id identifier",
        "in": "path"
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success",
        "example": [
          {
            "id": 1,
            "name": "Example Item",
            "status": "active",
            "createdAt": "2025-09-27T00:00:00Z"
          }
        ]
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/offer/123/clone\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(\n    f\"{BASE_URL}/public/api/v1/offer/123/clone\",\n    headers=headers\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "POST",
    "path": "/public/api/v1/offer",
    "summary": "Create Offer.",
    "description": "Create Offer.",
    "tags": [
      ""
    ],
    "parameters": [],
    "requestBody": {
      "contentType": "application/json",
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Offer name"
          },
          "url": {
            "type": "string",
            "description": "Offer URL"
          },
          "payout": {
            "type": "number",
            "description": "Payout amount"
          }
        },
        "required": [
          "name",
          "url"
        ]
      },
      "example": {
        "name": "Premium Offer",
        "url": "https://affiliate.com/offer",
        "payout": 50.0
      }
    },
    "responses": {
      "201": {
        "description": "Created successfully",
        "example": {
          "id": 123,
          "message": "Resource created successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      }
    },
    "examples": {
      "curl": "curl -X POST \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/offer\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(\n    f\"{BASE_URL}/public/api/v1/offer\",\n    headers=headers,\n    json={'name': 'Premium Offer', 'url': 'https://affiliate.com/offer', 'payout': 50.0}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "GET",
    "path": "/public/api/v1/offer/{id}",
    "summary": "Get Offer.",
    "description": "Get Offer.",
    "tags": [
      ""
    ],
    "parameters": [
      {
        "name": "id",
        "type": "integer",
        "required": true,
        "description": "Id identifier",
        "in": "path"
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success",
        "example": [
          {
            "id": 1,
            "name": "Example Item",
            "status": "active",
            "createdAt": "2025-09-27T00:00:00Z"
          }
        ]
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/offer/123\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(\n    f\"{BASE_URL}/public/api/v1/offer/123\",\n    headers=headers\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "PUT",
    "path": "/public/api/v1/offer/{id}",
    "summary": "Edit Offer.",
    "description": "Edit Offer.",
    "tags": [
      ""
    ],
    "parameters": [
      {
        "name": "id",
        "type": "integer",
        "required": true,
        "description": "Id identifier",
        "in": "path"
      }
    ],
    "requestBody": {
      "contentType": "application/json",
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Offer name"
          },
          "url": {
            "type": "string",
            "description": "Offer URL"
          },
          "payout": {
            "type": "number",
            "description": "Payout amount"
          }
        },
        "required": [
          "name",
          "url"
        ]
      },
      "example": {
        "name": "Premium Offer",
        "url": "https://affiliate.com/offer",
        "payout": 50.0
      }
    },
    "responses": {
      "200": {
        "description": "Updated successfully",
        "example": {
          "message": "Resource updated successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X PUT \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/offer/123\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.put(\n    f\"{BASE_URL}/public/api/v1/offer/123\",\n    headers=headers,\n    json={'name': 'Premium Offer', 'url': 'https://affiliate.com/offer', 'payout': 50.0}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "DELETE",
    "path": "/public/api/v1/offer/{id}",
    "summary": "Delete Offer.",
    "description": "Delete Offer.",
    "tags": [
      ""
    ],
    "parameters": [
      {
        "name": "id",
        "type": "integer",
        "required": true,
        "description": "Id identifier",
        "in": "path"
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Deleted successfully",
        "example": {
          "message": "Resource deleted successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X DELETE \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/offer/123\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.delete(\n    f\"{BASE_URL}/public/api/v1/offer/123\",\n    headers=headers\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "PATCH",
    "path": "/public/api/v1/offer/{id}",
    "summary": "Restore Offer.",
    "description": "Restore Offer.",
    "tags": [
      ""
    ],
    "parameters": [
      {
        "name": "id",
        "type": "integer",
        "required": true,
        "description": "Id identifier",
        "in": "path"
      }
    ],
    "requestBody": {
      "contentType": "application/json",
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Offer name"
          },
          "url": {
            "type": "string",
            "description": "Offer URL"
          },
          "payout": {
            "type": "number",
            "description": "Payout amount"
          }
        },
        "required": [
          "name",
          "url"
        ]
      },
      "example": {
        "name": "Premium Offer",
        "url": "https://affiliate.com/offer",
        "payout": 50.0
      }
    },
    "responses": {
      "200": {
        "description": "Restored/Modified successfully",
        "example": {
          "message": "Resource restored successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X PATCH \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/offer/123\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.patch(\n    f\"{BASE_URL}/public/api/v1/offer/123\",\n    headers=headers,\n    json={'name': 'Premium Offer', 'url': 'https://affiliate.com/offer', 'payout': 50.0}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "GET",
    "path": "/public/api/v1/offer/list/filtered",
    "summary": "Get Offer list filtered.",
    "description": "Get Offer list filtered.",
    "tags": [
      ""
    ],
    "parameters": [
      {
        "name": "datePreset",
        "type": "string",
        "required": true,
        "description": "Time period filter (e.g., 'last_7_days', 'today', 'yesterday')",
        "in": "query",
        "enum": [
          "today",
          "yesterday",
          "this_week",
          "last_week",
          "last_7_days",
          "last_14_days",
          "last_30_days",
          "this_month",
          "last_month",
          "this_year",
          "last_year",
          "all_time",
          "custom_time"
        ]
      },
      {
        "name": "timezone",
        "type": "string",
        "required": true,
        "description": "Timezone for date calculations (e.g., 'UTC')",
        "in": "query",
        "default": "UTC"
      },
      {
        "name": "limit",
        "type": "integer",
        "required": false,
        "description": "Maximum number of records to return (max 1000)",
        "in": "query",
        "default": 100
      },
      {
        "name": "offset",
        "type": "integer",
        "required": false,
        "description": "Number of records to skip for pagination",
        "in": "query",
        "default": 0
      },
      {
        "name": "sortColumn",
        "type": "string",
        "required": false,
        "description": "Column to sort by",
        "in": "query"
      },
      {
        "name": "sortType",
        "type": "string",
        "required": false,
        "description": "Sort direction",
        "in": "query",
        "enum": [
          "asc",
          "desc"
        ]
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success",
        "example": [
          {
            "id": 1,
            "name": "Example Item",
            "status": "active",
            "createdAt": "2025-09-27T00:00:00Z"
          }
        ]
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/offer/list/filtered?datePreset=VALUE&timezone=UTC\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(\n    f\"{BASE_URL}/public/api/v1/offer/list/filtered\",\n    headers=headers,\n    params={'datePreset': 'VALUE', 'timezone': 'UTC'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "PUT",
    "path": "/public/api/v1/offer/{id}/rename",
    "summary": "Rename Offer.",
    "description": "Rename Offer.",
    "tags": [
      ""
    ],
    "parameters": [
      {
        "name": "id",
        "type": "integer",
        "required": true,
        "description": "Id identifier",
        "in": "path"
      }
    ],
    "requestBody": {
      "contentType": "application/json",
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Offer name"
          },
          "url": {
            "type": "string",
            "description": "Offer URL"
          },
          "payout": {
            "type": "number",
            "description": "Payout amount"
          }
        },
        "required": [
          "name",
          "url"
        ]
      },
      "example": {
        "name": "Premium Offer",
        "url": "https://affiliate.com/offer",
        "payout": 50.0
      }
    },
    "responses": {
      "200": {
        "description": "Updated successfully",
        "example": {
          "message": "Resource updated successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X PUT \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/offer/123/rename\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.put(\n    f\"{BASE_URL}/public/api/v1/offer/123/rename\",\n    headers=headers,\n    json={'name': 'Premium Offer', 'url': 'https://affiliate.com/offer', 'payout': 50.0}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "GET",
    "path": "/public/api/v1/rotation/{id}/clone",
    "summary": "Clone Rotation.",
    "description": "Clone Rotation.",
    "tags": [
      ""
    ],
    "parameters": [
      {
        "name": "id",
        "type": "integer",
        "required": true,
        "description": "Id identifier",
        "in": "path"
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success",
        "example": [
          {
            "id": 1,
            "name": "Example Item",
            "status": "active",
            "createdAt": "2025-09-27T00:00:00Z"
          }
        ]
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/rotation/123/clone\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(\n    f\"{BASE_URL}/public/api/v1/rotation/123/clone\",\n    headers=headers\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "POST",
    "path": "/public/api/v1/rotation",
    "summary": "Create Rotation.",
    "description": "Create Rotation.",
    "tags": [
      ""
    ],
    "parameters": [],
    "requestBody": {
      "contentType": "application/json",
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Resource name"
          }
        }
      },
      "example": {
        "name": "Example Resource"
      }
    },
    "responses": {
      "201": {
        "description": "Created successfully",
        "example": {
          "id": 123,
          "message": "Resource created successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      }
    },
    "examples": {
      "curl": "curl -X POST \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/rotation\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(\n    f\"{BASE_URL}/public/api/v1/rotation\",\n    headers=headers,\n    json={'name': 'Example Resource'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "GET",
    "path": "/public/api/v1/rotation/{id}",
    "summary": "Get Rotation.",
    "description": "Get Rotation.",
    "tags": [
      ""
    ],
    "parameters": [
      {
        "name": "id",
        "type": "integer",
        "required": true,
        "description": "Id identifier",
        "in": "path"
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success",
        "example": [
          {
            "id": 1,
            "name": "Example Item",
            "status": "active",
            "createdAt": "2025-09-27T00:00:00Z"
          }
        ]
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/rotation/123\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(\n    f\"{BASE_URL}/public/api/v1/rotation/123\",\n    headers=headers\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "PUT",
    "path": "/public/api/v1/rotation/{id}",
    "summary": "Edit Rotation.",
    "description": "Edit Rotation.",
    "tags": [
      ""
    ],
    "parameters": [
      {
        "name": "id",
        "type": "integer",
        "required": true,
        "description": "Id identifier",
        "in": "path"
      }
    ],
    "requestBody": {
      "contentType": "application/json",
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Resource name"
          }
        }
      },
      "example": {
        "name": "Example Resource"
      }
    },
    "responses": {
      "200": {
        "description": "Updated successfully",
        "example": {
          "message": "Resource updated successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X PUT \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/rotation/123\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.put(\n    f\"{BASE_URL}/public/api/v1/rotation/123\",\n    headers=headers,\n    json={'name': 'Example Resource'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "DELETE",
    "path": "/public/api/v1/rotation/{id}",
    "summary": "Delete Rotation.",
    "description": "Delete Rotation.",
    "tags": [
      ""
    ],
    "parameters": [
      {
        "name": "id",
        "type": "integer",
        "required": true,
        "description": "Id identifier",
        "in": "path"
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Deleted successfully",
        "example": {
          "message": "Resource deleted successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X DELETE \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/rotation/123\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.delete(\n    f\"{BASE_URL}/public/api/v1/rotation/123\",\n    headers=headers\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "PATCH",
    "path": "/public/api/v1/rotation/{id}",
    "summary": "Restore Rotation.",
    "description": "Restore Rotation.",
    "tags": [
      ""
    ],
    "parameters": [
      {
        "name": "id",
        "type": "integer",
        "required": true,
        "description": "Id identifier",
        "in": "path"
      }
    ],
    "requestBody": {
      "contentType": "application/json",
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Resource name"
          }
        }
      },
      "example": {
        "name": "Example Resource"
      }
    },
    "responses": {
      "200": {
        "description": "Restored/Modified successfully",
        "example": {
          "message": "Resource restored successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X PATCH \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/rotation/123\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.patch(\n    f\"{BASE_URL}/public/api/v1/rotation/123\",\n    headers=headers,\n    json={'name': 'Example Resource'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "GET",
    "path": "/public/api/v1/rotation/list/filtered",
    "summary": "Get Rotation list filtered.",
    "description": "Get Rotation list filtered.",
    "tags": [
      ""
    ],
    "parameters": [
      {
        "name": "datePreset",
        "type": "string",
        "required": true,
        "description": "Time period filter (e.g., 'last_7_days', 'today', 'yesterday')",
        "in": "query",
        "enum": [
          "today",
          "yesterday",
          "this_week",
          "last_week",
          "last_7_days",
          "last_14_days",
          "last_30_days",
          "this_month",
          "last_month",
          "this_year",
          "last_year",
          "all_time",
          "custom_time"
        ]
      },
      {
        "name": "timezone",
        "type": "string",
        "required": true,
        "description": "Timezone for date calculations (e.g., 'UTC')",
        "in": "query",
        "default": "UTC"
      },
      {
        "name": "limit",
        "type": "integer",
        "required": false,
        "description": "Maximum number of records to return (max 1000)",
        "in": "query",
        "default": 100
      },
      {
        "name": "offset",
        "type": "integer",
        "required": false,
        "description": "Number of records to skip for pagination",
        "in": "query",
        "default": 0
      },
      {
        "name": "sortColumn",
        "type": "string",
        "required": false,
        "description": "Column to sort by",
        "in": "query"
      },
      {
        "name": "sortType",
        "type": "string",
        "required": false,
        "description": "Sort direction",
        "in": "query",
        "enum": [
          "asc",
          "desc"
        ]
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success",
        "example": [
          {
            "id": 1,
            "name": "Example Item",
            "status": "active",
            "createdAt": "2025-09-27T00:00:00Z"
          }
        ]
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/rotation/list/filtered?datePreset=VALUE&timezone=UTC\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(\n    f\"{BASE_URL}/public/api/v1/rotation/list/filtered\",\n    headers=headers,\n    params={'datePreset': 'VALUE', 'timezone': 'UTC'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "PUT",
    "path": "/public/api/v1/rotation/{id}/rename",
    "summary": "Rename Rotation.",
    "description": "Rename Rotation.",
    "tags": [
      ""
    ],
    "parameters": [
      {
        "name": "id",
        "type": "integer",
        "required": true,
        "description": "Id identifier",
        "in": "path"
      }
    ],
    "requestBody": {
      "contentType": "application/json",
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Resource name"
          }
        }
      },
      "example": {
        "name": "Example Resource"
      }
    },
    "responses": {
      "200": {
        "description": "Updated successfully",
        "example": {
          "message": "Resource updated successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X PUT \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/rotation/123/rename\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.put(\n    f\"{BASE_URL}/public/api/v1/rotation/123/rename\",\n    headers=headers,\n    json={'name': 'Example Resource'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "GET",
    "path": "/public/api/v1/traffic_source/{id}/clone",
    "summary": "Clone Traffic Source.",
    "description": "Clone Traffic Source.",
    "tags": [
      ""
    ],
    "parameters": [
      {
        "name": "id",
        "type": "integer",
        "required": true,
        "description": "Id identifier",
        "in": "path"
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success",
        "example": [
          {
            "id": 1,
            "name": "Example Item",
            "status": "active",
            "createdAt": "2025-09-27T00:00:00Z"
          }
        ]
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/traffic_source/123/clone\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(\n    f\"{BASE_URL}/public/api/v1/traffic_source/123/clone\",\n    headers=headers\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "POST",
    "path": "/public/api/v1/traffic_source",
    "summary": "Create Traffic Source.",
    "description": "Create Traffic Source.",
    "tags": [
      ""
    ],
    "parameters": [],
    "requestBody": {
      "contentType": "application/json",
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Resource name"
          }
        }
      },
      "example": {
        "name": "Example Resource"
      }
    },
    "responses": {
      "201": {
        "description": "Created successfully",
        "example": {
          "id": 123,
          "message": "Resource created successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      }
    },
    "examples": {
      "curl": "curl -X POST \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/traffic_source\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(\n    f\"{BASE_URL}/public/api/v1/traffic_source\",\n    headers=headers,\n    json={'name': 'Example Resource'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "GET",
    "path": "/public/api/v1/traffic_source/{id}",
    "summary": "Get Traffic Source.",
    "description": "Get Traffic Source.",
    "tags": [
      ""
    ],
    "parameters": [
      {
        "name": "id",
        "type": "integer",
        "required": true,
        "description": "Id identifier",
        "in": "path"
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success",
        "example": [
          {
            "id": 1,
            "name": "Example Item",
            "status": "active",
            "createdAt": "2025-09-27T00:00:00Z"
          }
        ]
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/traffic_source/123\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(\n    f\"{BASE_URL}/public/api/v1/traffic_source/123\",\n    headers=headers\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "PUT",
    "path": "/public/api/v1/traffic_source/{id}",
    "summary": "Edit Traffic Source.",
    "description": "Edit Traffic Source.",
    "tags": [
      ""
    ],
    "parameters": [
      {
        "name": "id",
        "type": "integer",
        "required": true,
        "description": "Id identifier",
        "in": "path"
      }
    ],
    "requestBody": {
      "contentType": "application/json",
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Resource name"
          }
        }
      },
      "example": {
        "name": "Example Resource"
      }
    },
    "responses": {
      "200": {
        "description": "Updated successfully",
        "example": {
          "message": "Resource updated successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X PUT \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/traffic_source/123\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.put(\n    f\"{BASE_URL}/public/api/v1/traffic_source/123\",\n    headers=headers,\n    json={'name': 'Example Resource'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "DELETE",
    "path": "/public/api/v1/traffic_source/{id}",
    "summary": "Delete Traffic Source.",
    "description": "Delete Traffic Source.",
    "tags": [
      ""
    ],
    "parameters": [
      {
        "name": "id",
        "type": "integer",
        "required": true,
        "description": "Id identifier",
        "in": "path"
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Deleted successfully",
        "example": {
          "message": "Resource deleted successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X DELETE \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/traffic_source/123\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.delete(\n    f\"{BASE_URL}/public/api/v1/traffic_source/123\",\n    headers=headers\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "PATCH",
    "path": "/public/api/v1/traffic_source/{id}",
    "summary": "Restore Traffic Source.",
    "description": "Restore Traffic Source.",
    "tags": [
      ""
    ],
    "parameters": [
      {
        "name": "id",
        "type": "integer",
        "required": true,
        "description": "Id identifier",
        "in": "path"
      }
    ],
    "requestBody": {
      "contentType": "application/json",
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Resource name"
          }
        }
      },
      "example": {
        "name": "Example Resource"
      }
    },
    "responses": {
      "200": {
        "description": "Restored/Modified successfully",
        "example": {
          "message": "Resource restored successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X PATCH \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/traffic_source/123\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.patch(\n    f\"{BASE_URL}/public/api/v1/traffic_source/123\",\n    headers=headers,\n    json={'name': 'Example Resource'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "GET",
    "path": "/public/api/v1/traffic_source/list/filtered",
    "summary": "Get Traffic Source list filtered.",
    "description": "Get Traffic Source list filtered.",
    "tags": [
      ""
    ],
    "parameters": [
      {
        "name": "datePreset",
        "type": "string",
        "required": true,
        "description": "Time period filter (e.g., 'last_7_days', 'today', 'yesterday')",
        "in": "query",
        "enum": [
          "today",
          "yesterday",
          "this_week",
          "last_week",
          "last_7_days",
          "last_14_days",
          "last_30_days",
          "this_month",
          "last_month",
          "this_year",
          "last_year",
          "all_time",
          "custom_time"
        ]
      },
      {
        "name": "timezone",
        "type": "string",
        "required": true,
        "description": "Timezone for date calculations (e.g., 'UTC')",
        "in": "query",
        "default": "UTC"
      },
      {
        "name": "limit",
        "type": "integer",
        "required": false,
        "description": "Maximum number of records to return (max 1000)",
        "in": "query",
        "default": 100
      },
      {
        "name": "offset",
        "type": "integer",
        "required": false,
        "description": "Number of records to skip for pagination",
        "in": "query",
        "default": 0
      },
      {
        "name": "sortColumn",
        "type": "string",
        "required": false,
        "description": "Column to sort by",
        "in": "query"
      },
      {
        "name": "sortType",
        "type": "string",
        "required": false,
        "description": "Sort direction",
        "in": "query",
        "enum": [
          "asc",
          "desc"
        ]
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success",
        "example": [
          {
            "id": 1,
            "name": "Example Item",
            "status": "active",
            "createdAt": "2025-09-27T00:00:00Z"
          }
        ]
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/traffic_source/list/filtered?datePreset=VALUE&timezone=UTC\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(\n    f\"{BASE_URL}/public/api/v1/traffic_source/list/filtered\",\n    headers=headers,\n    params={'datePreset': 'VALUE', 'timezone': 'UTC'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "GET",
    "path": "/public/api/v1/traffic_source_templates",
    "summary": "Get Traffic Source Templates.",
    "description": "Get Traffic Source Templates.",
    "tags": [
      ""
    ],
    "parameters": [],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success",
        "example": [
          {
            "id": 1,
            "name": "Example Item",
            "status": "active",
            "createdAt": "2025-09-27T00:00:00Z"
          }
        ]
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/traffic_source_templates\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(\n    f\"{BASE_URL}/public/api/v1/traffic_source_templates\",\n    headers=headers\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "PUT",
    "path": "/public/api/v1/traffic_source/{id}/rename",
    "summary": "Rename Traffic Source.",
    "description": "Rename Traffic Source.",
    "tags": [
      ""
    ],
    "parameters": [
      {
        "name": "id",
        "type": "integer",
        "required": true,
        "description": "Id identifier",
        "in": "path"
      }
    ],
    "requestBody": {
      "contentType": "application/json",
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Resource name"
          }
        }
      },
      "example": {
        "name": "Example Resource"
      }
    },
    "responses": {
      "200": {
        "description": "Updated successfully",
        "example": {
          "message": "Resource updated successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X PUT \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/traffic_source/123/rename\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.put(\n    f\"{BASE_URL}/public/api/v1/traffic_source/123/rename\",\n    headers=headers,\n    json={'name': 'Example Resource'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "GET",
    "path": "/public/api/v1/trends",
    "summary": "Get Trends.",
    "description": "Get Trends.",
    "tags": [
      ""
    ],
    "parameters": [],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success",
        "example": [
          {
            "id": 1,
            "name": "Example Item",
            "status": "active",
            "createdAt": "2025-09-27T00:00:00Z"
          }
        ]
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/trends\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(\n    f\"{BASE_URL}/public/api/v1/trends\",\n    headers=headers\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "PUT",
    "path": "/public/api/v1/user/change_login",
    "summary": "Change User Login.",
    "description": "Change User Login.",
    "tags": [
      ""
    ],
    "parameters": [],
    "requestBody": {
      "contentType": "application/json",
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Resource name"
          }
        }
      },
      "example": {
        "name": "Example Resource"
      }
    },
    "responses": {
      "200": {
        "description": "Updated successfully",
        "example": {
          "message": "Resource updated successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X PUT \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/user/change_login\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.put(\n    f\"{BASE_URL}/public/api/v1/user/change_login\",\n    headers=headers,\n    json={'name': 'Example Resource'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "PUT",
    "path": "/public/api/v1/user/change_password",
    "summary": "Change User Password.",
    "description": "Change User Password.",
    "tags": [
      ""
    ],
    "parameters": [],
    "requestBody": {
      "contentType": "application/json",
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Resource name"
          }
        }
      },
      "example": {
        "name": "Example Resource"
      }
    },
    "responses": {
      "200": {
        "description": "Updated successfully",
        "example": {
          "message": "Resource updated successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X PUT \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/user/change_password\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.put(\n    f\"{BASE_URL}/public/api/v1/user/change_password\",\n    headers=headers,\n    json={'name': 'Example Resource'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "POST",
    "path": "/public/api/v1/user/create",
    "summary": "Create User",
    "description": "Create User",
    "tags": [
      ""
    ],
    "parameters": [],
    "requestBody": {
      "contentType": "application/json",
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Resource name"
          }
        }
      },
      "example": {
        "name": "Example Resource"
      }
    },
    "responses": {
      "201": {
        "description": "Created successfully",
        "example": {
          "id": 123,
          "message": "Resource created successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      }
    },
    "examples": {
      "curl": "curl -X POST \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/user/create\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(\n    f\"{BASE_URL}/public/api/v1/user/create\",\n    headers=headers,\n    json={'name': 'Example Resource'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "DELETE",
    "path": "/public/api/v1/user/{userId}",
    "summary": "Delete User.",
    "description": "Delete User.",
    "tags": [
      ""
    ],
    "parameters": [
      {
        "name": "userId",
        "type": "string",
        "required": true,
        "description": "Userid identifier",
        "in": "path"
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Deleted successfully",
        "example": {
          "message": "Resource deleted successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X DELETE \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/user/123\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.delete(\n    f\"{BASE_URL}/public/api/v1/user/123\",\n    headers=headers\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "GET",
    "path": "/public/api/v1/user/{adminId}/can_create_users",
    "summary": "Get information about admin's ability to create users",
    "description": "Get information about admin's ability to create users",
    "tags": [
      ""
    ],
    "parameters": [
      {
        "name": "adminId",
        "type": "string",
        "required": true,
        "description": "Adminid identifier",
        "in": "path"
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success",
        "example": [
          {
            "id": 1,
            "name": "Example Item",
            "status": "active",
            "createdAt": "2025-09-27T00:00:00Z"
          }
        ]
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/user/123/can_create_users\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(\n    f\"{BASE_URL}/public/api/v1/user/123/can_create_users\",\n    headers=headers\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "PUT",
    "path": "/public/api/v1/user/{adminId}/can_create_users",
    "summary": "Set if admin can create another users.",
    "description": "Set if admin can create another users.",
    "tags": [
      ""
    ],
    "parameters": [
      {
        "name": "adminId",
        "type": "string",
        "required": true,
        "description": "Adminid identifier",
        "in": "path"
      }
    ],
    "requestBody": {
      "contentType": "application/json",
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Resource name"
          }
        }
      },
      "example": {
        "name": "Example Resource"
      }
    },
    "responses": {
      "200": {
        "description": "Updated successfully",
        "example": {
          "message": "Resource updated successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X PUT \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/user/123/can_create_users\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.put(\n    f\"{BASE_URL}/public/api/v1/user/123/can_create_users\",\n    headers=headers,\n    json={'name': 'Example Resource'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "GET",
    "path": "/public/api/v1/user/{userId}/hide_profit",
    "summary": "HideProfit Info.",
    "description": "HideProfit Info.",
    "tags": [
      ""
    ],
    "parameters": [
      {
        "name": "userId",
        "type": "string",
        "required": true,
        "description": "Userid identifier",
        "in": "path"
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success",
        "example": [
          {
            "id": 1,
            "name": "Example Item",
            "status": "active",
            "createdAt": "2025-09-27T00:00:00Z"
          }
        ]
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/user/123/hide_profit\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(\n    f\"{BASE_URL}/public/api/v1/user/123/hide_profit\",\n    headers=headers\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "PUT",
    "path": "/public/api/v1/user/{userId}/hide_profit",
    "summary": "Edit User HideProfit.",
    "description": "Edit User HideProfit.",
    "tags": [
      ""
    ],
    "parameters": [
      {
        "name": "userId",
        "type": "string",
        "required": true,
        "description": "Userid identifier",
        "in": "path"
      }
    ],
    "requestBody": {
      "contentType": "application/json",
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Resource name"
          }
        }
      },
      "example": {
        "name": "Example Resource"
      }
    },
    "responses": {
      "200": {
        "description": "Updated successfully",
        "example": {
          "message": "Resource updated successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X PUT \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/user/123/hide_profit\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.put(\n    f\"{BASE_URL}/public/api/v1/user/123/hide_profit\",\n    headers=headers,\n    json={'name': 'Example Resource'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "PUT",
    "path": "/public/api/v1/user/{userId}/permissions",
    "summary": "Edit User Permissions.",
    "description": "Edit User Permissions.",
    "tags": [
      ""
    ],
    "parameters": [
      {
        "name": "userId",
        "type": "string",
        "required": true,
        "description": "Userid identifier",
        "in": "path"
      }
    ],
    "requestBody": {
      "contentType": "application/json",
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Resource name"
          }
        }
      },
      "example": {
        "name": "Example Resource"
      }
    },
    "responses": {
      "200": {
        "description": "Updated successfully",
        "example": {
          "message": "Resource updated successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X PUT \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/user/123/permissions\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.put(\n    f\"{BASE_URL}/public/api/v1/user/123/permissions\",\n    headers=headers,\n    json={'name': 'Example Resource'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "PUT",
    "path": "/public/api/v1/user/{userId}/edit",
    "summary": "Edit User.",
    "description": "Edit User.",
    "tags": [
      ""
    ],
    "parameters": [
      {
        "name": "userId",
        "type": "string",
        "required": true,
        "description": "Userid identifier",
        "in": "path"
      }
    ],
    "requestBody": {
      "contentType": "application/json",
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Resource name"
          }
        }
      },
      "example": {
        "name": "Example Resource"
      }
    },
    "responses": {
      "200": {
        "description": "Updated successfully",
        "example": {
          "message": "Resource updated successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X PUT \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/user/123/edit\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.put(\n    f\"{BASE_URL}/public/api/v1/user/123/edit\",\n    headers=headers,\n    json={'name': 'Example Resource'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "GET",
    "path": "/public/api/v1/user/log",
    "summary": "Get Users Events log.",
    "description": "Get Users Events log.",
    "tags": [
      ""
    ],
    "parameters": [],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success",
        "example": [
          {
            "id": 1,
            "name": "Example Item",
            "status": "active",
            "createdAt": "2025-09-27T00:00:00Z"
          }
        ]
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/user/log\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(\n    f\"{BASE_URL}/public/api/v1/user/log\",\n    headers=headers\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "GET",
    "path": "/public/api/v1/user/log/types",
    "summary": "Get Users Events log.",
    "description": "Get Users Events log.",
    "tags": [
      ""
    ],
    "parameters": [],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success",
        "example": [
          {
            "id": 1,
            "name": "Example Item",
            "status": "active",
            "createdAt": "2025-09-27T00:00:00Z"
          }
        ]
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/user/log/types\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(\n    f\"{BASE_URL}/public/api/v1/user/log/types\",\n    headers=headers\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "POST",
    "path": "/public/api/v1/user/2fa/disable",
    "summary": "Disable two-factor verification for current user",
    "description": "Disable two-factor verification for current user",
    "tags": [
      ""
    ],
    "parameters": [],
    "requestBody": {
      "contentType": "application/json",
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Resource name"
          }
        }
      },
      "example": {
        "name": "Example Resource"
      }
    },
    "responses": {
      "201": {
        "description": "Created successfully",
        "example": {
          "id": 123,
          "message": "Resource created successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      }
    },
    "examples": {
      "curl": "curl -X POST \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/user/2fa/disable\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(\n    f\"{BASE_URL}/public/api/v1/user/2fa/disable\",\n    headers=headers,\n    json={'name': 'Example Resource'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "POST",
    "path": "/public/api/v1/user/2fa/enable",
    "summary": "Enable two-factor verification for current user",
    "description": "Enable two-factor verification for current user",
    "tags": [
      ""
    ],
    "parameters": [],
    "requestBody": {
      "contentType": "application/json",
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Resource name"
          }
        }
      },
      "example": {
        "name": "Example Resource"
      }
    },
    "responses": {
      "201": {
        "description": "Created successfully",
        "example": {
          "id": 123,
          "message": "Resource created successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      }
    },
    "examples": {
      "curl": "curl -X POST \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/user/2fa/enable\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(\n    f\"{BASE_URL}/public/api/v1/user/2fa/enable\",\n    headers=headers,\n    json={'name': 'Example Resource'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "PUT",
    "path": "/public/api/v1/user/2fa/secret/generate",
    "summary": "Generate two-factor secrets for current user, when two-factor authentication is disabled",
    "description": "Generate two-factor secrets for current user, when two-factor authentication is disabled",
    "tags": [
      ""
    ],
    "parameters": [],
    "requestBody": {
      "contentType": "application/json",
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Resource name"
          }
        }
      },
      "example": {
        "name": "Example Resource"
      }
    },
    "responses": {
      "200": {
        "description": "Updated successfully",
        "example": {
          "message": "Resource updated successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X PUT \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/user/2fa/secret/generate\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.put(\n    f\"{BASE_URL}/public/api/v1/user/2fa/secret/generate\",\n    headers=headers,\n    json={'name': 'Example Resource'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "GET",
    "path": "/public/api/v1/user/2fa/status",
    "summary": "Get information about if two-factor verification enabled for current user",
    "description": "Get information about if two-factor verification enabled for current user",
    "tags": [
      ""
    ],
    "parameters": [],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success",
        "example": [
          {
            "id": 1,
            "name": "Example Item",
            "status": "active",
            "createdAt": "2025-09-27T00:00:00Z"
          }
        ]
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/user/2fa/status\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(\n    f\"{BASE_URL}/public/api/v1/user/2fa/status\",\n    headers=headers\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "GET",
    "path": "/public/api/v1/identity/cookie",
    "summary": "Get cookie settings.",
    "description": "Get cookie settings.",
    "tags": [
      ""
    ],
    "parameters": [],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success",
        "example": [
          {
            "id": 1,
            "name": "Example Item",
            "status": "active",
            "createdAt": "2025-09-27T00:00:00Z"
          }
        ]
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/identity/cookie\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(\n    f\"{BASE_URL}/public/api/v1/identity/cookie\",\n    headers=headers\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "PUT",
    "path": "/public/api/v1/identity/cookie",
    "summary": "Edit cookie settings.",
    "description": "Edit cookie settings.",
    "tags": [
      ""
    ],
    "parameters": [],
    "requestBody": {
      "contentType": "application/json",
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Resource name"
          }
        }
      },
      "example": {
        "name": "Example Resource"
      }
    },
    "responses": {
      "200": {
        "description": "Updated successfully",
        "example": {
          "message": "Resource updated successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X PUT \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/identity/cookie\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.put(\n    f\"{BASE_URL}/public/api/v1/identity/cookie\",\n    headers=headers,\n    json={'name': 'Example Resource'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "GET",
    "path": "/public/api/v1/identity/{userId}/clone",
    "summary": "Identity Clone.",
    "description": "Identity Clone.",
    "tags": [
      ""
    ],
    "parameters": [
      {
        "name": "userId",
        "type": "string",
        "required": true,
        "description": "Userid identifier",
        "in": "path"
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success",
        "example": [
          {
            "id": 1,
            "name": "Example Item",
            "status": "active",
            "createdAt": "2025-09-27T00:00:00Z"
          }
        ]
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/identity/123/clone\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(\n    f\"{BASE_URL}/public/api/v1/identity/123/clone\",\n    headers=headers\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "GET",
    "path": "/public/api/v1/identity/{userId}",
    "summary": "Identity Info.",
    "description": "Identity Info.",
    "tags": [
      ""
    ],
    "parameters": [
      {
        "name": "userId",
        "type": "string",
        "required": true,
        "description": "Userid identifier",
        "in": "path"
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success",
        "example": [
          {
            "id": 1,
            "name": "Example Item",
            "status": "active",
            "createdAt": "2025-09-27T00:00:00Z"
          }
        ]
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/identity/123\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(\n    f\"{BASE_URL}/public/api/v1/identity/123\",\n    headers=headers\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "GET",
    "path": "/public/api/v1/identity/users/get",
    "summary": "Identity Users.",
    "description": "Identity Users.",
    "tags": [
      ""
    ],
    "parameters": [],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success",
        "example": [
          {
            "id": 1,
            "name": "Example Item",
            "status": "active",
            "createdAt": "2025-09-27T00:00:00Z"
          }
        ]
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/identity/users/get\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(\n    f\"{BASE_URL}/public/api/v1/identity/users/get\",\n    headers=headers\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "GET",
    "path": "/public/api/v1/user/{adminId}/accessible-users",
    "summary": "Accessible Users of Admin.",
    "description": "Accessible Users of Admin.",
    "tags": [
      ""
    ],
    "parameters": [
      {
        "name": "adminId",
        "type": "string",
        "required": true,
        "description": "Adminid identifier",
        "in": "path"
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success",
        "example": [
          {
            "id": 1,
            "name": "Example Item",
            "status": "active",
            "createdAt": "2025-09-27T00:00:00Z"
          }
        ]
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/user/123/accessible-users\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(\n    f\"{BASE_URL}/public/api/v1/user/123/accessible-users\",\n    headers=headers\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "POST",
    "path": "/public/api/v1/user/{adminId}/accessible-users",
    "summary": "Set Accessible Users for Admin.",
    "description": "Set Accessible Users for Admin.",
    "tags": [
      ""
    ],
    "parameters": [
      {
        "name": "adminId",
        "type": "string",
        "required": true,
        "description": "Adminid identifier",
        "in": "path"
      }
    ],
    "requestBody": {
      "contentType": "application/json",
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Resource name"
          }
        }
      },
      "example": {
        "name": "Example Resource"
      }
    },
    "responses": {
      "201": {
        "description": "Created successfully",
        "example": {
          "id": 123,
          "message": "Resource created successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      }
    },
    "examples": {
      "curl": "curl -X POST \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/user/123/accessible-users\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(\n    f\"{BASE_URL}/public/api/v1/user/123/accessible-users\",\n    headers=headers,\n    json={'name': 'Example Resource'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "GET",
    "path": "/public/api/v1/users/accessible",
    "summary": "Accessible Users.",
    "description": "Accessible Users.",
    "tags": [
      ""
    ],
    "parameters": [],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success",
        "example": [
          {
            "id": 1,
            "name": "Example Item",
            "status": "active",
            "createdAt": "2025-09-27T00:00:00Z"
          }
        ]
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/users/accessible\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(\n    f\"{BASE_URL}/public/api/v1/users/accessible\",\n    headers=headers\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "GET",
    "path": "/public/api/v1/user/role",
    "summary": "User Role.",
    "description": "User Role.",
    "tags": [
      ""
    ],
    "parameters": [],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success",
        "example": [
          {
            "id": 1,
            "name": "Example Item",
            "status": "active",
            "createdAt": "2025-09-27T00:00:00Z"
          }
        ]
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Resource not found"
        }
      }
    },
    "examples": {
      "curl": "curl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/user/role\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.get(\n    f\"{BASE_URL}/public/api/v1/user/role\",\n    headers=headers\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  },
  {
    "method": "POST",
    "path": "/public/api/v1/user/logout",
    "summary": "User Logout.",
    "description": "User Logout.",
    "tags": [
      ""
    ],
    "parameters": [],
    "requestBody": {
      "contentType": "application/json",
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Resource name"
          }
        }
      },
      "example": {
        "name": "Example Resource"
      }
    },
    "responses": {
      "201": {
        "description": "Created successfully",
        "example": {
          "id": 123,
          "message": "Resource created successfully"
        }
      },
      "400": {
        "description": "Bad Request - Invalid parameters",
        "example": {
          "error": "Invalid parameters. Check datePreset and timezone."
        }
      },
      "401": {
        "description": "Unauthorized - Invalid API key",
        "example": {
          "error": "Invalid API key"
        }
      },
      "403": {
        "description": "Forbidden - Access denied",
        "example": {
          "error": "Access denied"
        }
      }
    },
    "examples": {
      "curl": "curl -X POST \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  \"https://pierdun.com/public/api/v1/user/logout\"\n",
      "python": "import requests\nimport os\n\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\"\n}\n\nresponse = requests.post(\n    f\"{BASE_URL}/public/api/v1/user/logout\",\n    headers=headers,\n    json={'name': 'Example Resource'}\n)\n\nif response.status_code in [200, 201]:\n    data = response.json()\n    print(data)\nelse:\n    print(f\"Error: {{response.status_code}} - {{response.text}}\")\n"
    }
  }
]