#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ Swagger UI
"""

import json
import time
import os
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from selenium.common.exceptions import TimeoutException, NoSuchElementException

def setup_driver():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Chrome –¥—Ä–∞–π–≤–µ—Ä–∞"""
    chrome_options = Options()
    chrome_options.add_argument('--headless')
    chrome_options.add_argument('--no-sandbox')
    chrome_options.add_argument('--disable-dev-shm-usage')
    chrome_options.add_argument('--disable-gpu')
    chrome_options.add_argument('--window-size=1920,1080')
    
    driver = webdriver.Chrome(options=chrome_options)
    return driver

def extract_real_endpoint_data():
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ Swagger UI"""
    
    print("üöÄ –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –†–ï–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–• –ò–ó SWAGGER UI")
    print("=" * 55)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –æ—Ç–∫—Ä—ã—Ç—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–µ—Ä–µ–∑ JavaScript –≤ –±—Ä–∞—É–∑–µ—Ä–µ
    # –°–æ–∑–¥–∞–µ–º JavaScript —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    
    js_script = """
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    function extractAllRealData() {
        const realData = {};
        const operations = document.querySelectorAll('.opblock');
        
        console.log(`Found ${operations.length} operations to process`);
        
        let processedCount = 0;
        
        operations.forEach((operation, index) => {
            try {
                // –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                const methodElement = operation.querySelector('.opblock-summary-method');
                const pathElement = operation.querySelector('.opblock-summary-path a');
                const summaryElement = operation.querySelector('.opblock-summary-description');
                
                if (!methodElement || !pathElement) return;
                
                const method = methodElement.textContent.trim();
                const path = pathElement.textContent.trim();
                const summary = summaryElement ? summaryElement.textContent.trim() : '';
                const endpointKey = `${method} ${path}`;
                
                console.log(`Processing ${index + 1}/${operations.length}: ${endpointKey}`);
                
                // –†–∞—Å–∫—Ä—ã–≤–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
                const summaryButton = operation.querySelector('.opblock-summary');
                if (summaryButton && !operation.classList.contains('is-open')) {
                    summaryButton.click();
                    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                    setTimeout(() => {}, 100);
                }
                
                const endpointData = {
                    method: method,
                    path: path,
                    summary: summary,
                    parameters: [],
                    requestBody: null,
                    responses: {}
                };
                
                // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                const parametersSection = operation.querySelector('.parameters');
                if (parametersSection) {
                    const paramTable = parametersSection.querySelector('table tbody');
                    if (paramTable) {
                        const rows = paramTable.querySelectorAll('tr');
                        rows.forEach(row => {
                            const cells = row.querySelectorAll('td');
                            if (cells.length >= 2) {
                                const nameCell = cells[0];
                                const descCell = cells[1];
                                
                                const nameText = nameCell.textContent.trim();
                                const isRequired = nameCell.querySelector('.required') !== null;
                                const description = descCell.textContent.trim();
                                
                                // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
                                const paramName = nameText.split('\\n')[0].replace('*', '').trim();
                                
                                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø
                                let type = 'string';
                                if (nameText.includes('integer')) type = 'integer';
                                else if (nameText.includes('boolean')) type = 'boolean';
                                else if (nameText.includes('array')) type = 'array';
                                
                                endpointData.parameters.push({
                                    name: paramName,
                                    type: type,
                                    required: isRequired,
                                    description: description,
                                    in: path.includes(`{${paramName}}`) ? 'path' : 'query'
                                });
                            }
                        });
                    }
                }
                
                // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
                const requestBodySection = operation.querySelector('.request-body');
                if (requestBodySection) {
                    const requestBodyData = {
                        contentType: 'application/json',
                        example: null,
                        schema: null
                    };
                    
                    // –ò—â–µ–º –ø—Ä–∏–º–µ—Ä
                    const exampleButton = requestBodySection.querySelector('button[title*="Example"], .btn[title*="Example"]');
                    if (exampleButton) {
                        exampleButton.click();
                        setTimeout(() => {}, 50);
                        
                        const codeBlock = requestBodySection.querySelector('.highlight-code pre, .microlight');
                        if (codeBlock) {
                            const codeText = codeBlock.textContent.trim();
                            try {
                                requestBodyData.example = JSON.parse(codeText);
                            } catch (e) {
                                requestBodyData.example = codeText;
                            }
                        }
                    }
                    
                    // –ò—â–µ–º —Å—Ö–µ–º—É
                    const schemaButton = requestBodySection.querySelector('button[title*="Schema"], .btn[title*="Schema"]');
                    if (schemaButton) {
                        schemaButton.click();
                        setTimeout(() => {}, 50);
                        
                        const schemaElement = requestBodySection.querySelector('.model-box, .model');
                        if (schemaElement) {
                            requestBodyData.schema = schemaElement.textContent.trim();
                        }
                    }
                    
                    if (requestBodyData.example || requestBodyData.schema) {
                        endpointData.requestBody = requestBodyData;
                    }
                }
                
                // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–≤–µ—Ç—ã
                const responsesSection = operation.querySelector('.responses-wrapper');
                if (responsesSection) {
                    const responseRows = responsesSection.querySelectorAll('table tbody tr');
                    responseRows.forEach(row => {
                        const cells = row.querySelectorAll('td');
                        if (cells.length >= 2) {
                            const statusCode = cells[0].textContent.trim();
                            const description = cells[1].textContent.trim();
                            
                            const responseData = {
                                description: description,
                                example: null
                            };
                            
                            // –ò—â–µ–º –ø—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞
                            const responseCodeBlock = row.querySelector('.highlight-code pre, .microlight');
                            if (responseCodeBlock) {
                                const codeText = responseCodeBlock.textContent.trim();
                                try {
                                    responseData.example = JSON.parse(codeText);
                                } catch (e) {
                                    responseData.example = codeText;
                                }
                            }
                            
                            endpointData.responses[statusCode] = responseData;
                        }
                    });
                }
                
                realData[endpointKey] = endpointData;
                processedCount++;
                
            } catch (e) {
                console.log(`Error processing operation ${index}: ${e.message}`);
            }
        });
        
        console.log(`Successfully processed ${processedCount} endpoints`);
        return realData;
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ
    return extractAllRealData();
    """
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º JavaScript —Å–∫—Ä–∏–ø—Ç
    with open('/home/ubuntu/binom-api-encyclopedia/extract_swagger_data.js', 'w', encoding='utf-8') as f:
        f.write(js_script)
    
    print("‚úÖ JavaScript —Å–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–Ω")
    print("üìã –î–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞:")
    print("   1. –û—Ç–∫—Ä–æ–π—Ç–µ https://pierdun.com/api/doc")
    print("   2. –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ —Ñ–∞–π–ª–∞ extract_swagger_data.js")
    print("   3. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ real_swagger_data.json")
    
    return js_script

def create_real_data_processor():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    
    processor_code = '''#!/usr/bin/env python3
"""
–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ Swagger UI
"""

import json
import os

def process_real_swagger_data():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ Swagger UI"""
    
    print("üîÑ –û–ë–†–ê–ë–û–¢–ö–ê –†–ï–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–•")
    print("=" * 35)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if not os.path.exists('real_swagger_data.json'):
        print("‚ùå –§–∞–π–ª real_swagger_data.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("   –°–Ω–∞—á–∞–ª–∞ –∏–∑–≤–ª–µ–∫–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Swagger UI")
        return None
    
    with open('real_swagger_data.json', 'r', encoding='utf-8') as f:
        real_data = json.load(f)
    
    print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(real_data)} —Ä–µ–∞–ª—å–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    with_params = len([e for e in real_data.values() if e.get('parameters')])
    with_body = len([e for e in real_data.values() if e.get('requestBody')])
    with_responses = len([e for e in real_data.values() if e.get('responses')])
    
    print(f"   - –° –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {with_params}")
    print(f"   - –° —Ç–µ–ª–æ–º –∑–∞–ø—Ä–æ—Å–∞: {with_body}")
    print(f"   - –° –æ—Ç–≤–µ—Ç–∞–º–∏: {with_responses}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
    update_documentation_with_real_data(real_data)
    
    return real_data

def update_documentation_with_real_data(real_data):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    
    print("üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    with open('categorized_endpoints.json', 'r', encoding='utf-8') as f:
        categories = json.load(f)
    
    updated_count = 0
    
    for category, endpoints in categories.items():
        print(f"üìÇ –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category}")
        
        for endpoint in endpoints:
            method = endpoint['method']
            path = endpoint['path']
            endpoint_key = f"{method} {path}"
            
            if endpoint_key in real_data:
                real_endpoint = real_data[endpoint_key]
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
                enhanced_doc = generate_real_endpoint_documentation(real_endpoint)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º
                filename = f"{method.lower()}_{path.replace('/', '_').replace('{', '').replace('}', '').replace('__', '_').strip('_')}.md"
                filepath = f"docs/endpoints/{category}/{filename}"
                
                with open(filepath, 'w', encoding='utf-8') as f:
                    f.write(enhanced_doc)
                
                updated_count += 1
    
    print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count} —Ñ–∞–π–ª–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏")

def generate_real_endpoint_documentation(endpoint_data):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    
    method = endpoint_data['method']
    path = endpoint_data['path']
    summary = endpoint_data['summary']
    
    doc = f"""# {method} {path}

## Overview

**Description**: {summary}  
**Method**: `{method}`  
**Path**: `{path}`  
**Authentication**: Required (Bearer Token)

## Request

### Headers
```http
Authorization: Bearer YOUR_API_KEY
Content-Type: application/json
Accept: application/json
```

"""
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
    if endpoint_data.get('parameters'):
        doc += "### Parameters\\n\\n"
        doc += "| Parameter | Type | Required | In | Description |\\n"
        doc += "|-----------|------|----------|----|-----------------|\\n"
        
        for param in endpoint_data['parameters']:
            required = "‚úÖ Yes" if param['required'] else "‚ùå No"
            doc += f"| `{param['name']}` | {param['type']} | {required} | {param['in']} | {param['description']} |\\n"
        
        doc += "\\n"
    
    # –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
    if endpoint_data.get('requestBody'):
        body = endpoint_data['requestBody']
        doc += "### Request Body\\n\\n"
        doc += f"**Content-Type**: `{body['contentType']}`\\n\\n"
        
        if body.get('example'):
            doc += "**Real Example:**\\n```json\\n"
            doc += json.dumps(body['example'], indent=2, ensure_ascii=False)
            doc += "\\n```\\n\\n"
        
        if body.get('schema'):
            doc += "**Schema:**\\n```\\n"
            doc += str(body['schema'])
            doc += "\\n```\\n\\n"
    
    # –û—Ç–≤–µ—Ç—ã
    if endpoint_data.get('responses'):
        doc += "## Responses\\n\\n"
        
        for status_code, response_data in endpoint_data['responses'].items():
            doc += f"### {status_code} - {response_data['description']}\\n\\n"
            
            if response_data.get('example'):
                doc += "**Real Example:**\\n```json\\n"
                doc += json.dumps(response_data['example'], indent=2, ensure_ascii=False)
                doc += "\\n```\\n\\n"
    
    # –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã
    doc += f"""## Code Examples

### Python
```python
import requests
import os

API_KEY = os.getenv('binomPublic')
BASE_URL = "https://pierdun.com/public/api/v1"

headers = {{
    "Authorization": f"Bearer {{API_KEY}}",
    "Content-Type": "application/json"
}}

# Example request
response = requests.{method.lower()}(
    f"{{BASE_URL}}{path}",
    headers=headers"""
    
    if endpoint_data.get('requestBody') and endpoint_data['requestBody'].get('example'):
        doc += f""",
    json={json.dumps(endpoint_data['requestBody']['example'], indent=4)}"""
    
    doc += """
)

if response.status_code in [200, 201]:
    data = response.json()
    print("Success:", data)
else:
    print(f"Error: {response.status_code} - {response.text}")
```

### cURL
```bash
curl -X """ + method + """ \\
  -H "Authorization: Bearer $BINOM_API_KEY" \\
  -H "Content-Type: application/json" \\"""
    
    if endpoint_data.get('requestBody') and endpoint_data['requestBody'].get('example'):
        doc += f"""
  -d '{json.dumps(endpoint_data['requestBody']['example'])}' \\"""
    
    doc += f"""
  "https://pierdun.com{path}"
```

## AI Agent Notes

- **Real data extracted**: ‚úÖ This documentation contains actual examples from Swagger UI
- **Tested parameters**: All parameters and schemas are from live API documentation
- **Error handling**: Implement proper status code checking
- **Rate limiting**: Add delays between requests to avoid API limits

---

*Documentation generated from real Binom API v2 Swagger specification*
"""
    
    return doc

if __name__ == "__main__":
    process_real_swagger_data()
'''
    
    with open('/home/ubuntu/binom-api-encyclopedia/process_real_data.py', 'w', encoding='utf-8') as f:
        f.write(processor_code)
    
    print("‚úÖ –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üéØ –°–û–ó–î–ê–ù–ò–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í –î–õ–Ø –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø –†–ï–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–•")
    print("=" * 65)
    
    # –°–æ–∑–¥–∞–µ–º JavaScript —Å–∫—Ä–∏–ø—Ç
    js_script = extract_real_endpoint_data()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
    create_real_data_processor()
    
    print("\\nüéâ –ò–ù–°–¢–†–£–ú–ï–ù–¢–´ –ì–û–¢–û–í–´!")
    print("üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("   1. –í—ã–ø–æ–ª–Ω–∏—Ç–µ JavaScript –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞")
    print("   2. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ real_swagger_data.json")
    print("   3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ process_real_data.py")
    print("   4. –ü–æ–ª—É—á–∏—Ç–µ –Ω–∞—Å—Ç–æ—è—â—É—é —ç–Ω—Ü–∏–∫–ª–æ–ø–µ–¥–∏—é —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏!")

if __name__ == "__main__":
    main()
