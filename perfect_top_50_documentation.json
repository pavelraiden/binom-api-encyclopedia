{
  "metadata": {
    "title": "Binom API v2 - Perfect Documentation for Top 50 Endpoints",
    "version": "1.0.0",
    "createdAt": "2025-09-26T21:22:37.639745",
    "totalEndpoints": 50,
    "customMetricsEndpoints": 8,
    "qualityLevel": "10/10 - Production Ready"
  },
  "endpoints": {
    "GET /public/api/v1/stats/campaign": {
      "metadata": {
        "method": "GET",
        "path": "/public/api/v1/stats/campaign",
        "category": "stats",
        "priority": 1,
        "importance": "CRITICAL",
        "hasCustomMetrics": true,
        "aiUsage": "Постоянно используется для оптимизации и анализа"
      },
      "description": {
        "summary": "Основной эндпоинт для анализа производительности кампаний с кастомными метриками",
        "detailed": "Retrieves comprehensive performance statistics for campaigns including standard metrics (clicks, conversions, cost, revenue) \nand custom metrics (eCPT, eCPB, trials, buyouts). This is the primary endpoint for campaign performance analysis and optimization.\n\nKey features:\n- Supports date range filtering with datePreset parameter\n- Returns custom metrics when configured in campaign settings\n- Allows grouping by various dimensions (landingId, offerId, etc.)\n- Essential for ROI analysis and campaign optimization decisions",
        "businessContext": "Performance analysis and optimization - used for ROI calculations, A/B testing, and campaign optimization decisions",
        "whenToUse": [
          "Daily performance monitoring and reporting",
          "Campaign optimization based on eCPT/eCPB metrics",
          "ROI analysis and profitability calculations",
          "A/B testing landing pages and offers",
          "Identifying top-performing campaigns for scaling"
        ]
      },
      "authentication": {
        "type": "Bearer Token",
        "header": "Authorization: Bearer {binomPublic}",
        "required": true,
        "note": "Use environment variable binomPublic"
      },
      "parameters": {
        "path": [],
        "query": [
          {
            "name": "datePreset",
            "type": "string",
            "required": true,
            "description": "Date range preset for data filtering",
            "enum": [
              "today",
              "yesterday",
              "last_7_days",
              "last_30_days",
              "this_month",
              "last_month",
              "custom_time"
            ],
            "example": "last_7_days"
          },
          {
            "name": "timezone",
            "type": "string",
            "required": true,
            "description": "Timezone for date calculations",
            "example": "UTC"
          },
          {
            "name": "limit",
            "type": "integer",
            "required": false,
            "description": "Maximum number of records to return",
            "example": 100,
            "default": 100
          },
          {
            "name": "offset",
            "type": "integer",
            "required": false,
            "description": "Number of records to skip for pagination",
            "example": 0,
            "default": 0
          },
          {
            "name": "groupBy",
            "type": "string",
            "required": false,
            "description": "Field to group results by",
            "enum": [
              "landingId",
              "offerId",
              "trafficSourceId",
              "campaignId"
            ],
            "example": "landingId"
          },
          {
            "name": "sortColumn",
            "type": "string",
            "required": false,
            "description": "Column to sort results by",
            "example": "clicks"
          },
          {
            "name": "sortType",
            "type": "string",
            "required": false,
            "description": "Sort direction",
            "enum": [
              "asc",
              "desc"
            ],
            "example": "desc"
          }
        ],
        "header": [
          {
            "name": "Authorization",
            "type": "string",
            "required": true,
            "description": "Bearer token authentication",
            "example": "Bearer your_api_key_here"
          },
          {
            "name": "Content-Type",
            "type": "string",
            "required": false,
            "description": "Content type for request body",
            "example": "application/json"
          }
        ]
      },
      "requestBody": null,
      "responses": {
        "200": {
          "description": "Success",
          "contentType": "application/json",
          "schema": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "name": {
                  "type": "string"
                },
                "clicks": {
                  "type": "integer"
                },
                "conversions": {
                  "type": "integer"
                },
                "cost": {
                  "type": "number"
                },
                "revenue": {
                  "type": "number"
                },
                "eCPT": {
                  "type": "number",
                  "description": "Effective Cost Per Trial"
                },
                "eCPB": {
                  "type": "number",
                  "description": "Effective Cost Per Buyout"
                },
                "trials": {
                  "type": "integer",
                  "description": "Number of trial conversions"
                },
                "buyouts": {
                  "type": "integer",
                  "description": "Number of buyout conversions"
                }
              }
            }
          },
          "example": [
            {
              "id": 51,
              "name": "i16 - CAEN - APP - WIFI",
              "clicks": 290,
              "conversions": 64,
              "cost": 1517.52,
              "revenue": 2240.0,
              "profit": 722.48,
              "roi": 47.6,
              "eCPT": 30.35,
              "eCPB": 108.39,
              "trials": 50,
              "buyouts": 14,
              "trialRate": 17.24,
              "buyoutRate": 28.0
            }
          ]
        },
        "400": {
          "description": "Bad Request - Invalid parameters or missing required fields",
          "contentType": "application/json",
          "schema": {
            "type": "object",
            "properties": {
              "error": {
                "type": "string"
              },
              "message": {
                "type": "string"
              },
              "details": {
                "type": "object"
              }
            }
          },
          "example": {
            "error": "Validation failed",
            "message": "Field 'datePreset' is required for stats endpoints",
            "details": {
              "field": "datePreset",
              "code": "required"
            }
          }
        },
        "401": {
          "description": "Unauthorized - Invalid or missing API key",
          "contentType": "application/json",
          "example": {
            "error": "Unauthorized",
            "message": "Invalid API key or missing Authorization header"
          }
        },
        "403": {
          "description": "Forbidden - Insufficient permissions",
          "contentType": "application/json",
          "example": {
            "error": "Access denied",
            "message": "Insufficient permissions to access this resource"
          }
        },
        "404": {
          "description": "Not Found - Resource does not exist",
          "contentType": "application/json",
          "example": {
            "error": "Not found",
            "message": "Campaign with ID 999 not found"
          }
        },
        "429": {
          "description": "Too Many Requests - Rate limit exceeded",
          "contentType": "application/json",
          "example": {
            "error": "Rate limit exceeded",
            "message": "Too many requests. Please wait before making another request.",
            "retryAfter": 60
          }
        },
        "500": {
          "description": "Internal Server Error",
          "contentType": "application/json",
          "example": {
            "error": "Internal server error",
            "message": "An unexpected error occurred. Please try again later."
          }
        }
      },
      "examples": {
        "python": "import requests\nimport os\nfrom datetime import datetime\n\n# Configuration\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\ndef handle_response(response):\n    \"\"\"Handle API response with proper error handling\"\"\"\n    if response.status_code == 200:\n        return response.json()\n    elif response.status_code == 400:\n        print(f\"Bad Request: {response.json()}\")\n    elif response.status_code == 401:\n        print(\"Unauthorized: Check your API key\")\n    elif response.status_code == 403:\n        print(\"Forbidden: Insufficient permissions\")\n    elif response.status_code == 404:\n        print(\"Not Found: Resource doesn't exist\")\n    elif response.status_code == 429:\n        print(\"Rate Limited: Wait before retrying\")\n    else:\n        print(f\"Error {response.status_code}: {response.text}\")\n    return None\n\n# Get campaign statistics with custom metrics\ndef get_campaign_stats(date_preset=\"last_7_days\", group_by=None):\n    \"\"\"\n    Get campaign statistics including custom metrics (eCPT, eCPB, trials, buyouts)\n    \n    Args:\n        date_preset: Date range for statistics\n        group_by: Optional grouping field (landingId, offerId, etc.)\n    \"\"\"\n    params = {\n        \"datePreset\": date_preset,\n        \"timezone\": \"UTC\",\n        \"limit\": 100,\n        \"offset\": 0\n    }\n    \n    if group_by:\n        params[\"groupBy\"] = group_by\n    \n    response = requests.get(\n        f\"{BASE_URL}/stats/campaign\",\n        headers=headers,\n        params=params\n    )\n    \n    data = handle_response(response)\n    if data:\n        # Process custom metrics\n        for campaign in data:\n            if 'eCPT' in campaign and campaign['eCPT']:\n                print(f\"Campaign {campaign['name']}: eCPT=${campaign['eCPT']:.2f}\")\n            if 'trials' in campaign:\n                print(f\"  Trials: {campaign['trials']}, Buyouts: {campaign.get('buyouts', 0)}\")\n    \n    return data\n\n# Usage example\nif __name__ == \"__main__\":\n    # Get last 7 days campaign stats\n    stats = get_campaign_stats(\"last_7_days\")\n    \n    # Get stats grouped by landing pages\n    landing_stats = get_campaign_stats(\"last_7_days\", \"landingId\")\n",
        "curl": "# GET /public/api/v1/stats/campaign\ncurl -X GET \\\n  \"https://pierdun.com/public/api/v1/public/api/v1/stats/campaign?datePreset=last_7_days&timezone=UTC&limit=100\" \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Accept: application/json\"",
        "javascript": "// GET /public/api/v1/stats/campaign\nconst BINOM_API_KEY = process.env.BINOM_PUBLIC;\nconst BASE_URL = 'https://pierdun.com/public/api/v1';\n\nasync function callBinomAPI() {\n    const config = {\n        method: 'GET',\n        headers: {\n            'Authorization': `Bearer ${BINOM_API_KEY}`,\n            'Accept': 'application/json'\n        }\n    };\n    \n    try {\n        const response = await fetch(`${BASE_URL}/public/api/v1/stats/campaign`, config);\n        \n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        \n        const data = await response.json();\n        console.log('Success:', data);\n        return data;\n    } catch (error) {\n        console.error('Error:', error);\n        throw error;\n    }\n}\n\n// Usage\ncallBinomAPI()\n    .then(data => console.log(data))\n    .catch(error => console.error('Failed:', error));"
      },
      "customMetrics": {
        "available": true,
        "metrics": [
          {
            "name": "eCPT",
            "fullName": "Effective Cost Per Trial",
            "description": "Average cost to acquire one trial subscription",
            "calculation": "total_cost / trials",
            "type": "currency",
            "importance": "CRITICAL",
            "aiNote": "Key metric for trial-based offers optimization. Lower eCPT indicates better campaign efficiency.",
            "troubleshooting": [
              "If eCPT is null, check if trials are configured in campaign",
              "High eCPT may indicate poor traffic quality or landing page issues",
              "Compare eCPT across different traffic sources to identify best performers"
            ]
          },
          {
            "name": "eCPB",
            "fullName": "Effective Cost Per Buyout",
            "description": "Average cost to acquire one full purchase/subscription",
            "calculation": "total_cost / buyouts",
            "type": "currency",
            "importance": "CRITICAL",
            "aiNote": "Primary ROI metric for subscription offers. Must be lower than payout for profitability.",
            "troubleshooting": [
              "If eCPB is null, check if buyouts are configured in campaign",
              "eCPB higher than payout indicates unprofitable campaign",
              "Monitor eCPB trends to detect performance degradation"
            ]
          },
          {
            "name": "trials",
            "fullName": "Trial Conversions",
            "description": "Number of trial subscriptions acquired",
            "type": "integer",
            "importance": "HIGH",
            "aiNote": "Intermediate conversion metric. Higher trials indicate good initial interest.",
            "troubleshooting": [
              "Low trials may indicate traffic quality issues",
              "High trials but low buyouts suggest offer or funnel problems",
              "Track trial-to-buyout conversion rate for optimization"
            ]
          },
          {
            "name": "buyouts",
            "fullName": "Buyout Conversions",
            "description": "Number of full purchases/subscriptions",
            "type": "integer",
            "importance": "CRITICAL",
            "aiNote": "Final conversion metric. Directly impacts revenue and ROI calculations.",
            "troubleshooting": [
              "Zero buyouts indicate serious funnel issues",
              "Low buyout rate from trials suggests billing or offer problems",
              "Monitor buyout trends for early problem detection"
            ]
          }
        ],
        "howToFind": {
          "webInterface": "Settings -> Columns in Binom interface",
          "apiAccess": "Available in stats and report endpoints response",
          "configuration": "Must be configured in campaign postback settings"
        },
        "aiInstructions": {
          "rule": "ALWAYS ask operator for clarification if custom metric values seem unexpected",
          "when": [
            "Custom metric is null or zero unexpectedly",
            "Metric values don't align with campaign performance",
            "Unfamiliar custom metrics appear in response"
          ],
          "howToAsk": "What does [metric_name] represent in your campaign setup?",
          "examples": [
            "If eCPT is $50 but expected $5, ask: 'The eCPT seems high at $50. Is this expected for this campaign type?'",
            "If trials are 0 but clicks are high, ask: 'I see clicks but no trials. Are trial conversions configured correctly?'"
          ]
        }
      },
      "aiInstructions": {
        "priority": "CRITICAL",
        "complexity": "MEDIUM",
        "keyPoints": [
          "This is a CRITICAL priority endpoint",
          "Category: stats operations",
          "Custom metrics: Available",
          "Always use Bearer token authentication",
          "Handle rate limiting with exponential backoff"
        ],
        "beforeUsing": [
          "Verify API key is set in environment variables",
          "Check if datePreset and timezone are required",
          "Validate all required parameters are provided",
          "Ensure proper error handling is implemented"
        ],
        "afterUsing": [
          "Validate response structure matches expected schema",
          "Check for custom metrics if endpoint supports them",
          "Log important metrics for monitoring",
          "Handle pagination if response is truncated"
        ],
        "commonMistakes": [
          "Forgetting datePreset parameter for stats endpoints",
          "Using wrong Bearer token format",
          "Not handling 429 rate limit responses",
          "Ignoring custom metrics in optimization decisions",
          "Not validating response data before processing"
        ],
        "optimization": [
          "Cache responses when appropriate",
          "Use batch operations when available",
          "Implement retry logic with exponential backoff",
          "Monitor API usage to avoid rate limits",
          "Use appropriate date ranges to minimize data transfer"
        ],
        "customMetricsGuidance": {
          "applicable": true,
          "criticalRule": "ALWAYS clarify unknown or unexpected custom metrics with operator",
          "whenToAsk": [
            "Custom metric value is null when data exists",
            "Metric values seem inconsistent with campaign performance",
            "Unfamiliar custom metric names appear",
            "Metric calculations don't match expected formulas"
          ],
          "howToAsk": [
            "Be specific: 'I see eCPT of $X, is this expected for this campaign type?'",
            "Provide context: 'Campaign has Y clicks but Z trials, should I investigate?'",
            "Ask for clarification: 'What does [custom_metric] represent in your setup?'"
          ],
          "neverAssume": [
            "Don't assume metric meanings without confirmation",
            "Don't ignore null values without asking",
            "Don't make optimization decisions on unclear metrics",
            "Don't extrapolate metrics without understanding calculation"
          ],
          "bestPractices": [
            "Document all custom metrics and their meanings",
            "Validate metric values against business logic",
            "Ask for acceptable ranges for each metric",
            "Confirm optimization goals before making changes"
          ]
        }
      },
      "errorHandling": {
        "retryStrategy": {
          "429": {
            "action": "Exponential backoff retry",
            "initialDelay": 1,
            "maxRetries": 5,
            "backoffMultiplier": 2
          },
          "500": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 5
          },
          "502": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 10
          }
        },
        "noRetryErrors": [
          400,
          401,
          403,
          404
        ],
        "commonIssues": [
          {
            "error": "400 - Missing datePreset",
            "solution": "Add datePreset and timezone parameters to GET requests",
            "prevention": "Always validate required parameters before sending request"
          },
          {
            "error": "401 - Invalid API key",
            "solution": "Check Bearer token format and API key validity",
            "prevention": "Validate API key format before making requests"
          },
          {
            "error": "403 - Access denied",
            "solution": "Verify user permissions for this resource",
            "prevention": "Check user role and permissions before accessing resources"
          },
          {
            "error": "429 - Rate limited",
            "solution": "Implement exponential backoff and reduce request frequency",
            "prevention": "Monitor request rate and implement proper throttling"
          }
        ],
        "debugging": [
          "Log full request and response for error analysis",
          "Check API key permissions and expiration",
          "Verify request format matches API documentation",
          "Test with minimal required parameters first"
        ]
      },
      "workflow": {
        "prerequisites": [
          "Campaign must be active and have traffic",
          "Date range must be valid",
          "Custom metrics must be configured if needed"
        ],
        "followUpActions": [
          "Analyze performance metrics",
          "Identify optimization opportunities",
          "Update campaign settings if needed",
          "Generate performance reports"
        ],
        "relatedEndpoints": [
          "GET /public/api/v1/campaign/{id} - Get campaign details",
          "PUT /public/api/v1/campaign/{id} - Update campaign",
          "GET /public/api/v1/stats/landing - Analyze landing performance"
        ],
        "typicalWorkflow": [
          "1. Get campaign stats to identify performance",
          "2. Drill down to landing/offer level if needed",
          "3. Analyze custom metrics (eCPT, eCPB)",
          "4. Make optimization decisions",
          "5. Update campaign configuration"
        ]
      },
      "testing": {
        "unitTests": [
          "Test with valid parameters",
          "Test with missing required parameters",
          "Test with invalid parameter values",
          "Test authentication failure scenarios"
        ],
        "integrationTests": [
          "Test full workflow with real data",
          "Test error handling and recovery",
          "Test rate limiting behavior",
          "Test response data validation"
        ],
        "testData": {
          "validParams": {
            "datePreset": "last_7_days",
            "timezone": "UTC",
            "limit": 10
          },
          "invalidParams": [
            {
              "error": "missing_datePreset",
              "params": {
                "timezone": "UTC"
              }
            },
            {
              "error": "invalid_datePreset",
              "params": {
                "datePreset": "invalid",
                "timezone": "UTC"
              }
            },
            {
              "error": "missing_timezone",
              "params": {
                "datePreset": "last_7_days"
              }
            }
          ]
        },
        "assertions": [
          "Response status code is 200 for valid requests",
          "Response contains expected data structure",
          "Custom metrics are present when applicable",
          "Error responses contain proper error messages"
        ]
      }
    },
    "GET /public/api/v1/campaign/{id}": {
      "metadata": {
        "method": "GET",
        "path": "/public/api/v1/campaign/{id}",
        "category": "campaign",
        "priority": 2,
        "importance": "CRITICAL",
        "hasCustomMetrics": false,
        "aiUsage": "Необходим для понимания структуры кампании"
      },
      "description": {
        "summary": "Получение полной конфигурации кампании",
        "detailed": "Fetches complete configuration details for a specific campaign including traffic source settings, landing page rotations, \noffer assignments, cost models, and current status. Critical for understanding campaign structure and troubleshooting.\n\nReturns:\n- Campaign basic information (name, status, dates)\n- Traffic source configuration and parameters\n- Landing pages with weights and rotation settings\n- Offers with weights and payout information\n- Cost model and bidding settings\n- Custom tracking parameters and tokens",
        "businessContext": "Campaign management - core functionality for setting up, configuring, and managing traffic tracking campaigns",
        "whenToUse": [
          "Troubleshooting campaign configuration issues",
          "Auditing campaign settings before optimization",
          "Cloning campaign configuration to new campaigns",
          "Verifying traffic source parameter setup",
          "Checking landing page and offer rotation weights"
        ]
      },
      "authentication": {
        "type": "Bearer Token",
        "header": "Authorization: Bearer {binomPublic}",
        "required": true,
        "note": "Use environment variable binomPublic"
      },
      "parameters": {
        "path": [
          {
            "name": "id",
            "type": "integer",
            "required": true,
            "description": "Unique identifier of the campaign",
            "example": 123
          }
        ],
        "query": [],
        "header": [
          {
            "name": "Authorization",
            "type": "string",
            "required": true,
            "description": "Bearer token authentication",
            "example": "Bearer your_api_key_here"
          },
          {
            "name": "Content-Type",
            "type": "string",
            "required": false,
            "description": "Content type for request body",
            "example": "application/json"
          }
        ]
      },
      "requestBody": null,
      "responses": {
        "200": {
          "description": "Success",
          "contentType": "application/json",
          "schema": {
            "type": "object"
          },
          "example": {
            "id": 51,
            "name": "i16 - CAEN - APP - WIFI",
            "status": "active",
            "trafficSourceId": 1,
            "cost": 0.25,
            "currency": "USD",
            "costModel": "CPC",
            "createdAt": "2024-01-15T10:30:00Z",
            "paths": [
              {
                "id": 1,
                "name": "Appstero - app#2",
                "landings": [
                  {
                    "id": 2,
                    "name": "29 vir - Main - NO TOKENS",
                    "weight": 33
                  },
                  {
                    "id": 6,
                    "name": "Old classic - ENG - Browser 14 - Tokens",
                    "weight": 34
                  },
                  {
                    "id": 11,
                    "name": "EN_Grinka3_Adult",
                    "weight": 33
                  }
                ],
                "offers": [
                  {
                    "id": 15,
                    "name": "Appstero iOS",
                    "weight": 100,
                    "payout": 35.0
                  }
                ]
              }
            ]
          }
        },
        "400": {
          "description": "Bad Request - Invalid parameters or missing required fields",
          "contentType": "application/json",
          "schema": {
            "type": "object",
            "properties": {
              "error": {
                "type": "string"
              },
              "message": {
                "type": "string"
              },
              "details": {
                "type": "object"
              }
            }
          },
          "example": {
            "error": "Validation failed",
            "message": "Field 'datePreset' is required for stats endpoints",
            "details": {
              "field": "datePreset",
              "code": "required"
            }
          }
        },
        "401": {
          "description": "Unauthorized - Invalid or missing API key",
          "contentType": "application/json",
          "example": {
            "error": "Unauthorized",
            "message": "Invalid API key or missing Authorization header"
          }
        },
        "403": {
          "description": "Forbidden - Insufficient permissions",
          "contentType": "application/json",
          "example": {
            "error": "Access denied",
            "message": "Insufficient permissions to access this resource"
          }
        },
        "404": {
          "description": "Not Found - Resource does not exist",
          "contentType": "application/json",
          "example": {
            "error": "Not found",
            "message": "Campaign with ID 999 not found"
          }
        },
        "429": {
          "description": "Too Many Requests - Rate limit exceeded",
          "contentType": "application/json",
          "example": {
            "error": "Rate limit exceeded",
            "message": "Too many requests. Please wait before making another request.",
            "retryAfter": 60
          }
        },
        "500": {
          "description": "Internal Server Error",
          "contentType": "application/json",
          "example": {
            "error": "Internal server error",
            "message": "An unexpected error occurred. Please try again later."
          }
        }
      },
      "examples": {
        "python": "import requests\nimport os\nfrom datetime import datetime\n\n# Configuration\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\ndef handle_response(response):\n    \"\"\"Handle API response with proper error handling\"\"\"\n    if response.status_code == 200:\n        return response.json()\n    elif response.status_code == 400:\n        print(f\"Bad Request: {response.json()}\")\n    elif response.status_code == 401:\n        print(\"Unauthorized: Check your API key\")\n    elif response.status_code == 403:\n        print(\"Forbidden: Insufficient permissions\")\n    elif response.status_code == 404:\n        print(\"Not Found: Resource doesn't exist\")\n    elif response.status_code == 429:\n        print(\"Rate Limited: Wait before retrying\")\n    else:\n        print(f\"Error {response.status_code}: {response.text}\")\n    return None\n\n# GET /public/api/v1/campaign/{id}\ndef call_endpoint():\n    \"\"\"Call the GET /public/api/v1/campaign/{id} endpoint\"\"\"\n    \n    params = {'datePreset': 'last_7_days', 'timezone': 'UTC'}\n    \n    response = requests.get(\n        f\"{BASE_URL}/public/api/v1/campaign/123\",\n        headers=headers,\n        params=params\n    )\n    \n    return handle_response(response)\n\n# Usage\nif __name__ == \"__main__\":\n    result = call_endpoint()\n    print(result)\n",
        "curl": "# GET /public/api/v1/campaign/{id}\ncurl -X GET \\\n  \"https://pierdun.com/public/api/v1/public/api/v1/campaign/123\" \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Accept: application/json\"",
        "javascript": "// GET /public/api/v1/campaign/{id}\nconst BINOM_API_KEY = process.env.BINOM_PUBLIC;\nconst BASE_URL = 'https://pierdun.com/public/api/v1';\n\nasync function callBinomAPI() {\n    const config = {\n        method: 'GET',\n        headers: {\n            'Authorization': `Bearer ${BINOM_API_KEY}`,\n            'Accept': 'application/json'\n        }\n    };\n    \n    try {\n        const response = await fetch(`${BASE_URL}/public/api/v1/campaign/123`, config);\n        \n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        \n        const data = await response.json();\n        console.log('Success:', data);\n        return data;\n    } catch (error) {\n        console.error('Error:', error);\n        throw error;\n    }\n}\n\n// Usage\ncallBinomAPI()\n    .then(data => console.log(data))\n    .catch(error => console.error('Failed:', error));"
      },
      "customMetrics": {
        "available": false,
        "note": "This endpoint does not return custom metrics"
      },
      "aiInstructions": {
        "priority": "CRITICAL",
        "complexity": "LOW",
        "keyPoints": [
          "This is a CRITICAL priority endpoint",
          "Category: campaign operations",
          "Custom metrics: Not available",
          "Always use Bearer token authentication",
          "Handle rate limiting with exponential backoff"
        ],
        "beforeUsing": [
          "Verify API key is set in environment variables",
          "Check if datePreset and timezone are required",
          "Validate all required parameters are provided",
          "Ensure proper error handling is implemented"
        ],
        "afterUsing": [
          "Validate response structure matches expected schema",
          "Check for custom metrics if endpoint supports them",
          "Log important metrics for monitoring",
          "Handle pagination if response is truncated"
        ],
        "commonMistakes": [
          "Forgetting datePreset parameter for stats endpoints",
          "Using wrong Bearer token format",
          "Not handling 429 rate limit responses",
          "Ignoring custom metrics in optimization decisions",
          "Not validating response data before processing"
        ],
        "optimization": [
          "Cache responses when appropriate",
          "Use batch operations when available",
          "Implement retry logic with exponential backoff",
          "Monitor API usage to avoid rate limits",
          "Use appropriate date ranges to minimize data transfer"
        ],
        "customMetricsGuidance": {
          "applicable": false,
          "note": "This endpoint does not return custom metrics"
        }
      },
      "errorHandling": {
        "retryStrategy": {
          "429": {
            "action": "Exponential backoff retry",
            "initialDelay": 1,
            "maxRetries": 5,
            "backoffMultiplier": 2
          },
          "500": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 5
          },
          "502": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 10
          }
        },
        "noRetryErrors": [
          400,
          401,
          403,
          404
        ],
        "commonIssues": [
          {
            "error": "400 - Missing datePreset",
            "solution": "Add datePreset and timezone parameters to GET requests",
            "prevention": "Always validate required parameters before sending request"
          },
          {
            "error": "401 - Invalid API key",
            "solution": "Check Bearer token format and API key validity",
            "prevention": "Validate API key format before making requests"
          },
          {
            "error": "403 - Access denied",
            "solution": "Verify user permissions for this resource",
            "prevention": "Check user role and permissions before accessing resources"
          },
          {
            "error": "429 - Rate limited",
            "solution": "Implement exponential backoff and reduce request frequency",
            "prevention": "Monitor request rate and implement proper throttling"
          }
        ],
        "debugging": [
          "Log full request and response for error analysis",
          "Check API key permissions and expiration",
          "Verify request format matches API documentation",
          "Test with minimal required parameters first"
        ]
      },
      "workflow": {
        "prerequisites": [
          "Valid authentication",
          "Proper permissions"
        ],
        "followUpActions": [
          "Process response data",
          "Handle any errors"
        ],
        "relatedEndpoints": [],
        "typicalWorkflow": [
          "Call GET /public/api/v1/campaign/{id} endpoint",
          "Process response"
        ]
      },
      "testing": {
        "unitTests": [
          "Test with valid parameters",
          "Test with missing required parameters",
          "Test with invalid parameter values",
          "Test authentication failure scenarios"
        ],
        "integrationTests": [
          "Test full workflow with real data",
          "Test error handling and recovery",
          "Test rate limiting behavior",
          "Test response data validation"
        ],
        "testData": {
          "validParams": {},
          "invalidParams": []
        },
        "assertions": [
          "Response status code is 200 for valid requests",
          "Response contains expected data structure",
          "Custom metrics are present when applicable",
          "Error responses contain proper error messages"
        ]
      }
    },
    "POST /public/api/v1/campaign": {
      "metadata": {
        "method": "POST",
        "path": "/public/api/v1/campaign",
        "category": "campaign",
        "priority": 3,
        "importance": "CRITICAL",
        "hasCustomMetrics": false,
        "aiUsage": "Основная операция для настройки трекинга"
      },
      "description": {
        "summary": "Создание новых кампаний",
        "detailed": "Creates a new tracking campaign with specified configuration including traffic source, cost model, landing pages, and offers. \nThis is the core operation for setting up traffic tracking infrastructure.\n\nRequired configuration:\n- Traffic source selection and parameters\n- At least one landing page with weight\n- At least one offer with weight and payout\n- Cost model (CPC, CPM, or fixed cost)\n- Campaign name and basic settings",
        "businessContext": "Campaign management - core functionality for setting up, configuring, and managing traffic tracking campaigns",
        "whenToUse": [
          "Setting up new traffic campaigns",
          "Launching new offers or geos",
          "Creating test campaigns for new traffic sources",
          "Implementing new tracking setups",
          "Scaling successful campaign configurations"
        ]
      },
      "authentication": {
        "type": "Bearer Token",
        "header": "Authorization: Bearer {binomPublic}",
        "required": true,
        "note": "Use environment variable binomPublic"
      },
      "parameters": {
        "path": [],
        "query": [],
        "header": [
          {
            "name": "Authorization",
            "type": "string",
            "required": true,
            "description": "Bearer token authentication",
            "example": "Bearer your_api_key_here"
          },
          {
            "name": "Content-Type",
            "type": "string",
            "required": true,
            "description": "Content type for request body",
            "example": "application/json"
          }
        ]
      },
      "requestBody": {
        "required": true,
        "contentType": "application/json",
        "schema": {
          "type": "object",
          "required": [
            "name",
            "trafficSourceId",
            "cost",
            "currency"
          ],
          "properties": {
            "name": {
              "type": "string",
              "description": "Campaign name",
              "example": "Test Campaign - Mobile iOS"
            },
            "trafficSourceId": {
              "type": "integer",
              "description": "ID of traffic source",
              "example": 1
            },
            "cost": {
              "type": "number",
              "description": "Cost per click/impression",
              "example": 0.15
            },
            "currency": {
              "type": "string",
              "description": "Currency code",
              "example": "USD"
            },
            "costModel": {
              "type": "string",
              "enum": [
                "CPC",
                "CPM",
                "FIXED"
              ],
              "description": "Cost model type",
              "example": "CPC"
            },
            "status": {
              "type": "string",
              "enum": [
                "active",
                "paused"
              ],
              "description": "Campaign status",
              "example": "active"
            }
          }
        },
        "example": {
          "name": "iOS Mobile Campaign - Tier 1 GEOs",
          "trafficSourceId": 1,
          "cost": 0.25,
          "currency": "USD",
          "costModel": "CPC",
          "status": "active",
          "description": "High-converting mobile campaign for premium geos"
        }
      },
      "responses": {
        "200": {
          "description": "Success",
          "contentType": "application/json",
          "schema": {
            "type": "object"
          },
          "example": {
            "message": "Success"
          }
        },
        "400": {
          "description": "Bad Request - Invalid parameters or missing required fields",
          "contentType": "application/json",
          "schema": {
            "type": "object",
            "properties": {
              "error": {
                "type": "string"
              },
              "message": {
                "type": "string"
              },
              "details": {
                "type": "object"
              }
            }
          },
          "example": {
            "error": "Validation failed",
            "message": "Field 'datePreset' is required for stats endpoints",
            "details": {
              "field": "datePreset",
              "code": "required"
            }
          }
        },
        "401": {
          "description": "Unauthorized - Invalid or missing API key",
          "contentType": "application/json",
          "example": {
            "error": "Unauthorized",
            "message": "Invalid API key or missing Authorization header"
          }
        },
        "403": {
          "description": "Forbidden - Insufficient permissions",
          "contentType": "application/json",
          "example": {
            "error": "Access denied",
            "message": "Insufficient permissions to access this resource"
          }
        },
        "404": {
          "description": "Not Found - Resource does not exist",
          "contentType": "application/json",
          "example": {
            "error": "Not found",
            "message": "Campaign with ID 999 not found"
          }
        },
        "429": {
          "description": "Too Many Requests - Rate limit exceeded",
          "contentType": "application/json",
          "example": {
            "error": "Rate limit exceeded",
            "message": "Too many requests. Please wait before making another request.",
            "retryAfter": 60
          }
        },
        "500": {
          "description": "Internal Server Error",
          "contentType": "application/json",
          "example": {
            "error": "Internal server error",
            "message": "An unexpected error occurred. Please try again later."
          }
        }
      },
      "examples": {
        "python": "import requests\nimport os\nfrom datetime import datetime\n\n# Configuration\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\ndef handle_response(response):\n    \"\"\"Handle API response with proper error handling\"\"\"\n    if response.status_code == 200:\n        return response.json()\n    elif response.status_code == 400:\n        print(f\"Bad Request: {response.json()}\")\n    elif response.status_code == 401:\n        print(\"Unauthorized: Check your API key\")\n    elif response.status_code == 403:\n        print(\"Forbidden: Insufficient permissions\")\n    elif response.status_code == 404:\n        print(\"Not Found: Resource doesn't exist\")\n    elif response.status_code == 429:\n        print(\"Rate Limited: Wait before retrying\")\n    else:\n        print(f\"Error {response.status_code}: {response.text}\")\n    return None\n\n# Create new campaign\ndef create_campaign(campaign_data):\n    \"\"\"\n    Create a new tracking campaign\n    \n    Args:\n        campaign_data: Dictionary with campaign configuration\n    \"\"\"\n    response = requests.post(\n        f\"{BASE_URL}/campaign\",\n        headers=headers,\n        json=campaign_data\n    )\n    \n    return handle_response(response)\n\n# Usage example\nif __name__ == \"__main__\":\n    new_campaign = {\n        \"name\": \"iOS Mobile Campaign - Premium GEOs\",\n        \"trafficSourceId\": 1,\n        \"cost\": 0.30,\n        \"currency\": \"USD\",\n        \"costModel\": \"CPC\",\n        \"status\": \"active\",\n        \"description\": \"High-converting mobile campaign for tier 1 countries\"\n    }\n    \n    result = create_campaign(new_campaign)\n    if result:\n        print(f\"Campaign created with ID: {result.get('id')}\")\n",
        "curl": "# POST /public/api/v1/campaign\ncurl -X POST \\\n  \"https://pierdun.com/public/api/v1/public/api/v1/campaign\" \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Accept: application/json\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"name\": \"Test Campaign\",\n    \"trafficSourceId\": 1,\n    \"cost\": 0.25,\n    \"currency\": \"USD\",\n    \"costModel\": \"CPC\",\n    \"status\": \"active\"\n  }' ",
        "javascript": "// POST /public/api/v1/campaign\nconst BINOM_API_KEY = process.env.BINOM_PUBLIC;\nconst BASE_URL = 'https://pierdun.com/public/api/v1';\n\nasync function callBinomAPI() {\n    const config = {\n        method: 'POST',\n        headers: {\n            'Authorization': `Bearer ${BINOM_API_KEY}`,\n            'Accept': 'application/json'\n        }\n    };\n    \n    try {\n        const response = await fetch(`${BASE_URL}/public/api/v1/campaign`, config);\n        \n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        \n        const data = await response.json();\n        console.log('Success:', data);\n        return data;\n    } catch (error) {\n        console.error('Error:', error);\n        throw error;\n    }\n}\n\n// Usage\ncallBinomAPI()\n    .then(data => console.log(data))\n    .catch(error => console.error('Failed:', error));"
      },
      "customMetrics": {
        "available": false,
        "note": "This endpoint does not return custom metrics"
      },
      "aiInstructions": {
        "priority": "CRITICAL",
        "complexity": "LOW",
        "keyPoints": [
          "This is a CRITICAL priority endpoint",
          "Category: campaign operations",
          "Custom metrics: Not available",
          "Always use Bearer token authentication",
          "Handle rate limiting with exponential backoff"
        ],
        "beforeUsing": [
          "Verify API key is set in environment variables",
          "Check if datePreset and timezone are required",
          "Validate all required parameters are provided",
          "Ensure proper error handling is implemented"
        ],
        "afterUsing": [
          "Validate response structure matches expected schema",
          "Check for custom metrics if endpoint supports them",
          "Log important metrics for monitoring",
          "Handle pagination if response is truncated"
        ],
        "commonMistakes": [
          "Forgetting datePreset parameter for stats endpoints",
          "Using wrong Bearer token format",
          "Not handling 429 rate limit responses",
          "Ignoring custom metrics in optimization decisions",
          "Not validating response data before processing"
        ],
        "optimization": [
          "Cache responses when appropriate",
          "Use batch operations when available",
          "Implement retry logic with exponential backoff",
          "Monitor API usage to avoid rate limits",
          "Use appropriate date ranges to minimize data transfer"
        ],
        "customMetricsGuidance": {
          "applicable": false,
          "note": "This endpoint does not return custom metrics"
        }
      },
      "errorHandling": {
        "retryStrategy": {
          "429": {
            "action": "Exponential backoff retry",
            "initialDelay": 1,
            "maxRetries": 5,
            "backoffMultiplier": 2
          },
          "500": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 5
          },
          "502": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 10
          }
        },
        "noRetryErrors": [
          400,
          401,
          403,
          404
        ],
        "commonIssues": [
          {
            "error": "400 - Missing datePreset",
            "solution": "Add datePreset and timezone parameters to GET requests",
            "prevention": "Always validate required parameters before sending request"
          },
          {
            "error": "401 - Invalid API key",
            "solution": "Check Bearer token format and API key validity",
            "prevention": "Validate API key format before making requests"
          },
          {
            "error": "403 - Access denied",
            "solution": "Verify user permissions for this resource",
            "prevention": "Check user role and permissions before accessing resources"
          },
          {
            "error": "429 - Rate limited",
            "solution": "Implement exponential backoff and reduce request frequency",
            "prevention": "Monitor request rate and implement proper throttling"
          }
        ],
        "debugging": [
          "Log full request and response for error analysis",
          "Check API key permissions and expiration",
          "Verify request format matches API documentation",
          "Test with minimal required parameters first"
        ]
      },
      "workflow": {
        "prerequisites": [
          "Valid authentication",
          "Proper permissions"
        ],
        "followUpActions": [
          "Process response data",
          "Handle any errors"
        ],
        "relatedEndpoints": [],
        "typicalWorkflow": [
          "Call POST /public/api/v1/campaign endpoint",
          "Process response"
        ]
      },
      "testing": {
        "unitTests": [
          "Test with valid parameters",
          "Test with missing required parameters",
          "Test with invalid parameter values",
          "Test authentication failure scenarios"
        ],
        "integrationTests": [
          "Test full workflow with real data",
          "Test error handling and recovery",
          "Test rate limiting behavior",
          "Test response data validation"
        ],
        "testData": {
          "validParams": {},
          "invalidParams": []
        },
        "assertions": [
          "Response status code is 200 for valid requests",
          "Response contains expected data structure",
          "Custom metrics are present when applicable",
          "Error responses contain proper error messages"
        ]
      }
    },
    "PUT /public/api/v1/campaign/{id}": {
      "metadata": {
        "method": "PUT",
        "path": "/public/api/v1/campaign/{id}",
        "category": "campaign",
        "priority": 4,
        "importance": "CRITICAL",
        "hasCustomMetrics": false,
        "aiUsage": "Критично для оптимизации кампаний"
      },
      "description": {
        "summary": "Обновление конфигурации кампаний",
        "detailed": "Detailed description for PUT /public/api/v1/campaign/{id} - Обновление конфигурации кампаний",
        "businessContext": "Campaign management - core functionality for setting up, configuring, and managing traffic tracking campaigns",
        "whenToUse": [
          "Standard campaign operations"
        ]
      },
      "authentication": {
        "type": "Bearer Token",
        "header": "Authorization: Bearer {binomPublic}",
        "required": true,
        "note": "Use environment variable binomPublic"
      },
      "parameters": {
        "path": [
          {
            "name": "id",
            "type": "integer",
            "required": true,
            "description": "Unique identifier of the campaign",
            "example": 123
          }
        ],
        "query": [],
        "header": [
          {
            "name": "Authorization",
            "type": "string",
            "required": true,
            "description": "Bearer token authentication",
            "example": "Bearer your_api_key_here"
          },
          {
            "name": "Content-Type",
            "type": "string",
            "required": true,
            "description": "Content type for request body",
            "example": "application/json"
          }
        ]
      },
      "requestBody": {
        "required": true,
        "contentType": "application/json",
        "schema": {
          "type": "object"
        },
        "example": {}
      },
      "responses": {
        "200": {
          "description": "Success",
          "contentType": "application/json",
          "schema": {
            "type": "object"
          },
          "example": {
            "message": "Success"
          }
        },
        "400": {
          "description": "Bad Request - Invalid parameters or missing required fields",
          "contentType": "application/json",
          "schema": {
            "type": "object",
            "properties": {
              "error": {
                "type": "string"
              },
              "message": {
                "type": "string"
              },
              "details": {
                "type": "object"
              }
            }
          },
          "example": {
            "error": "Validation failed",
            "message": "Field 'datePreset' is required for stats endpoints",
            "details": {
              "field": "datePreset",
              "code": "required"
            }
          }
        },
        "401": {
          "description": "Unauthorized - Invalid or missing API key",
          "contentType": "application/json",
          "example": {
            "error": "Unauthorized",
            "message": "Invalid API key or missing Authorization header"
          }
        },
        "403": {
          "description": "Forbidden - Insufficient permissions",
          "contentType": "application/json",
          "example": {
            "error": "Access denied",
            "message": "Insufficient permissions to access this resource"
          }
        },
        "404": {
          "description": "Not Found - Resource does not exist",
          "contentType": "application/json",
          "example": {
            "error": "Not found",
            "message": "Campaign with ID 999 not found"
          }
        },
        "429": {
          "description": "Too Many Requests - Rate limit exceeded",
          "contentType": "application/json",
          "example": {
            "error": "Rate limit exceeded",
            "message": "Too many requests. Please wait before making another request.",
            "retryAfter": 60
          }
        },
        "500": {
          "description": "Internal Server Error",
          "contentType": "application/json",
          "example": {
            "error": "Internal server error",
            "message": "An unexpected error occurred. Please try again later."
          }
        }
      },
      "examples": {
        "python": "import requests\nimport os\nfrom datetime import datetime\n\n# Configuration\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\ndef handle_response(response):\n    \"\"\"Handle API response with proper error handling\"\"\"\n    if response.status_code == 200:\n        return response.json()\n    elif response.status_code == 400:\n        print(f\"Bad Request: {response.json()}\")\n    elif response.status_code == 401:\n        print(\"Unauthorized: Check your API key\")\n    elif response.status_code == 403:\n        print(\"Forbidden: Insufficient permissions\")\n    elif response.status_code == 404:\n        print(\"Not Found: Resource doesn't exist\")\n    elif response.status_code == 429:\n        print(\"Rate Limited: Wait before retrying\")\n    else:\n        print(f\"Error {response.status_code}: {response.text}\")\n    return None\n\n# PUT /public/api/v1/campaign/{id}\ndef call_endpoint():\n    \"\"\"Call the PUT /public/api/v1/campaign/{id} endpoint\"\"\"\n    \n    \n    \n    response = requests.put(\n        f\"{BASE_URL}/public/api/v1/campaign/123\",\n        headers=headers\n        \n    )\n    \n    return handle_response(response)\n\n# Usage\nif __name__ == \"__main__\":\n    result = call_endpoint()\n    print(result)\n",
        "curl": "# PUT /public/api/v1/campaign/{id}\ncurl -X PUT \\\n  \"https://pierdun.com/public/api/v1/public/api/v1/campaign/123\" \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Accept: application/json\" \\\n  -H \"Content-Type: application/json\"",
        "javascript": "// PUT /public/api/v1/campaign/{id}\nconst BINOM_API_KEY = process.env.BINOM_PUBLIC;\nconst BASE_URL = 'https://pierdun.com/public/api/v1';\n\nasync function callBinomAPI() {\n    const config = {\n        method: 'PUT',\n        headers: {\n            'Authorization': `Bearer ${BINOM_API_KEY}`,\n            'Accept': 'application/json'\n        }\n    };\n    \n    try {\n        const response = await fetch(`${BASE_URL}/public/api/v1/campaign/123`, config);\n        \n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        \n        const data = await response.json();\n        console.log('Success:', data);\n        return data;\n    } catch (error) {\n        console.error('Error:', error);\n        throw error;\n    }\n}\n\n// Usage\ncallBinomAPI()\n    .then(data => console.log(data))\n    .catch(error => console.error('Failed:', error));"
      },
      "customMetrics": {
        "available": false,
        "note": "This endpoint does not return custom metrics"
      },
      "aiInstructions": {
        "priority": "CRITICAL",
        "complexity": "LOW",
        "keyPoints": [
          "This is a CRITICAL priority endpoint",
          "Category: campaign operations",
          "Custom metrics: Not available",
          "Always use Bearer token authentication",
          "Handle rate limiting with exponential backoff"
        ],
        "beforeUsing": [
          "Verify API key is set in environment variables",
          "Check if datePreset and timezone are required",
          "Validate all required parameters are provided",
          "Ensure proper error handling is implemented"
        ],
        "afterUsing": [
          "Validate response structure matches expected schema",
          "Check for custom metrics if endpoint supports them",
          "Log important metrics for monitoring",
          "Handle pagination if response is truncated"
        ],
        "commonMistakes": [
          "Forgetting datePreset parameter for stats endpoints",
          "Using wrong Bearer token format",
          "Not handling 429 rate limit responses",
          "Ignoring custom metrics in optimization decisions",
          "Not validating response data before processing"
        ],
        "optimization": [
          "Cache responses when appropriate",
          "Use batch operations when available",
          "Implement retry logic with exponential backoff",
          "Monitor API usage to avoid rate limits",
          "Use appropriate date ranges to minimize data transfer"
        ],
        "customMetricsGuidance": {
          "applicable": false,
          "note": "This endpoint does not return custom metrics"
        }
      },
      "errorHandling": {
        "retryStrategy": {
          "429": {
            "action": "Exponential backoff retry",
            "initialDelay": 1,
            "maxRetries": 5,
            "backoffMultiplier": 2
          },
          "500": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 5
          },
          "502": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 10
          }
        },
        "noRetryErrors": [
          400,
          401,
          403,
          404
        ],
        "commonIssues": [
          {
            "error": "400 - Missing datePreset",
            "solution": "Add datePreset and timezone parameters to GET requests",
            "prevention": "Always validate required parameters before sending request"
          },
          {
            "error": "401 - Invalid API key",
            "solution": "Check Bearer token format and API key validity",
            "prevention": "Validate API key format before making requests"
          },
          {
            "error": "403 - Access denied",
            "solution": "Verify user permissions for this resource",
            "prevention": "Check user role and permissions before accessing resources"
          },
          {
            "error": "429 - Rate limited",
            "solution": "Implement exponential backoff and reduce request frequency",
            "prevention": "Monitor request rate and implement proper throttling"
          }
        ],
        "debugging": [
          "Log full request and response for error analysis",
          "Check API key permissions and expiration",
          "Verify request format matches API documentation",
          "Test with minimal required parameters first"
        ]
      },
      "workflow": {
        "prerequisites": [
          "Valid authentication",
          "Proper permissions"
        ],
        "followUpActions": [
          "Process response data",
          "Handle any errors"
        ],
        "relatedEndpoints": [],
        "typicalWorkflow": [
          "Call PUT /public/api/v1/campaign/{id} endpoint",
          "Process response"
        ]
      },
      "testing": {
        "unitTests": [
          "Test with valid parameters",
          "Test with missing required parameters",
          "Test with invalid parameter values",
          "Test authentication failure scenarios"
        ],
        "integrationTests": [
          "Test full workflow with real data",
          "Test error handling and recovery",
          "Test rate limiting behavior",
          "Test response data validation"
        ],
        "testData": {
          "validParams": {},
          "invalidParams": []
        },
        "assertions": [
          "Response status code is 200 for valid requests",
          "Response contains expected data structure",
          "Custom metrics are present when applicable",
          "Error responses contain proper error messages"
        ]
      }
    },
    "GET /public/api/v1/stats/landing": {
      "metadata": {
        "method": "GET",
        "path": "/public/api/v1/stats/landing",
        "category": "stats",
        "priority": 5,
        "importance": "CRITICAL",
        "hasCustomMetrics": true,
        "aiUsage": "Ключевой для оптимизации лендингов"
      },
      "description": {
        "summary": "Анализ производительности лендингов с кастомными метриками",
        "detailed": "Detailed description for GET /public/api/v1/stats/landing - Анализ производительности лендингов с кастомными метриками",
        "businessContext": "Performance analysis and optimization - used for ROI calculations, A/B testing, and campaign optimization decisions",
        "whenToUse": [
          "Standard stats operations"
        ]
      },
      "authentication": {
        "type": "Bearer Token",
        "header": "Authorization: Bearer {binomPublic}",
        "required": true,
        "note": "Use environment variable binomPublic"
      },
      "parameters": {
        "path": [],
        "query": [
          {
            "name": "datePreset",
            "type": "string",
            "required": true,
            "description": "Date range preset for data filtering",
            "enum": [
              "today",
              "yesterday",
              "last_7_days",
              "last_30_days",
              "this_month",
              "last_month",
              "custom_time"
            ],
            "example": "last_7_days"
          },
          {
            "name": "timezone",
            "type": "string",
            "required": true,
            "description": "Timezone for date calculations",
            "example": "UTC"
          },
          {
            "name": "limit",
            "type": "integer",
            "required": false,
            "description": "Maximum number of records to return",
            "example": 100,
            "default": 100
          },
          {
            "name": "offset",
            "type": "integer",
            "required": false,
            "description": "Number of records to skip for pagination",
            "example": 0,
            "default": 0
          },
          {
            "name": "groupBy",
            "type": "string",
            "required": false,
            "description": "Field to group results by",
            "enum": [
              "landingId",
              "offerId",
              "trafficSourceId",
              "campaignId"
            ],
            "example": "landingId"
          },
          {
            "name": "sortColumn",
            "type": "string",
            "required": false,
            "description": "Column to sort results by",
            "example": "clicks"
          },
          {
            "name": "sortType",
            "type": "string",
            "required": false,
            "description": "Sort direction",
            "enum": [
              "asc",
              "desc"
            ],
            "example": "desc"
          }
        ],
        "header": [
          {
            "name": "Authorization",
            "type": "string",
            "required": true,
            "description": "Bearer token authentication",
            "example": "Bearer your_api_key_here"
          },
          {
            "name": "Content-Type",
            "type": "string",
            "required": false,
            "description": "Content type for request body",
            "example": "application/json"
          }
        ]
      },
      "requestBody": null,
      "responses": {
        "200": {
          "description": "Success",
          "contentType": "application/json",
          "schema": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "name": {
                  "type": "string"
                },
                "clicks": {
                  "type": "integer"
                },
                "conversions": {
                  "type": "integer"
                },
                "cost": {
                  "type": "number"
                },
                "revenue": {
                  "type": "number"
                },
                "eCPT": {
                  "type": "number",
                  "description": "Effective Cost Per Trial"
                },
                "eCPB": {
                  "type": "number",
                  "description": "Effective Cost Per Buyout"
                },
                "trials": {
                  "type": "integer",
                  "description": "Number of trial conversions"
                },
                "buyouts": {
                  "type": "integer",
                  "description": "Number of buyout conversions"
                }
              }
            }
          },
          "example": {
            "message": "Success"
          }
        },
        "400": {
          "description": "Bad Request - Invalid parameters or missing required fields",
          "contentType": "application/json",
          "schema": {
            "type": "object",
            "properties": {
              "error": {
                "type": "string"
              },
              "message": {
                "type": "string"
              },
              "details": {
                "type": "object"
              }
            }
          },
          "example": {
            "error": "Validation failed",
            "message": "Field 'datePreset' is required for stats endpoints",
            "details": {
              "field": "datePreset",
              "code": "required"
            }
          }
        },
        "401": {
          "description": "Unauthorized - Invalid or missing API key",
          "contentType": "application/json",
          "example": {
            "error": "Unauthorized",
            "message": "Invalid API key or missing Authorization header"
          }
        },
        "403": {
          "description": "Forbidden - Insufficient permissions",
          "contentType": "application/json",
          "example": {
            "error": "Access denied",
            "message": "Insufficient permissions to access this resource"
          }
        },
        "404": {
          "description": "Not Found - Resource does not exist",
          "contentType": "application/json",
          "example": {
            "error": "Not found",
            "message": "Campaign with ID 999 not found"
          }
        },
        "429": {
          "description": "Too Many Requests - Rate limit exceeded",
          "contentType": "application/json",
          "example": {
            "error": "Rate limit exceeded",
            "message": "Too many requests. Please wait before making another request.",
            "retryAfter": 60
          }
        },
        "500": {
          "description": "Internal Server Error",
          "contentType": "application/json",
          "example": {
            "error": "Internal server error",
            "message": "An unexpected error occurred. Please try again later."
          }
        }
      },
      "examples": {
        "python": "import requests\nimport os\nfrom datetime import datetime\n\n# Configuration\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\ndef handle_response(response):\n    \"\"\"Handle API response with proper error handling\"\"\"\n    if response.status_code == 200:\n        return response.json()\n    elif response.status_code == 400:\n        print(f\"Bad Request: {response.json()}\")\n    elif response.status_code == 401:\n        print(\"Unauthorized: Check your API key\")\n    elif response.status_code == 403:\n        print(\"Forbidden: Insufficient permissions\")\n    elif response.status_code == 404:\n        print(\"Not Found: Resource doesn't exist\")\n    elif response.status_code == 429:\n        print(\"Rate Limited: Wait before retrying\")\n    else:\n        print(f\"Error {response.status_code}: {response.text}\")\n    return None\n\n# Get campaign statistics with custom metrics\ndef get_campaign_stats(date_preset=\"last_7_days\", group_by=None):\n    \"\"\"\n    Get campaign statistics including custom metrics (eCPT, eCPB, trials, buyouts)\n    \n    Args:\n        date_preset: Date range for statistics\n        group_by: Optional grouping field (landingId, offerId, etc.)\n    \"\"\"\n    params = {\n        \"datePreset\": date_preset,\n        \"timezone\": \"UTC\",\n        \"limit\": 100,\n        \"offset\": 0\n    }\n    \n    if group_by:\n        params[\"groupBy\"] = group_by\n    \n    response = requests.get(\n        f\"{BASE_URL}/stats/campaign\",\n        headers=headers,\n        params=params\n    )\n    \n    data = handle_response(response)\n    if data:\n        # Process custom metrics\n        for campaign in data:\n            if 'eCPT' in campaign and campaign['eCPT']:\n                print(f\"Campaign {campaign['name']}: eCPT=${campaign['eCPT']:.2f}\")\n            if 'trials' in campaign:\n                print(f\"  Trials: {campaign['trials']}, Buyouts: {campaign.get('buyouts', 0)}\")\n    \n    return data\n\n# Usage example\nif __name__ == \"__main__\":\n    # Get last 7 days campaign stats\n    stats = get_campaign_stats(\"last_7_days\")\n    \n    # Get stats grouped by landing pages\n    landing_stats = get_campaign_stats(\"last_7_days\", \"landingId\")\n",
        "curl": "# GET /public/api/v1/stats/landing\ncurl -X GET \\\n  \"https://pierdun.com/public/api/v1/public/api/v1/stats/landing?datePreset=last_7_days&timezone=UTC&limit=100\" \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Accept: application/json\"",
        "javascript": "// GET /public/api/v1/stats/landing\nconst BINOM_API_KEY = process.env.BINOM_PUBLIC;\nconst BASE_URL = 'https://pierdun.com/public/api/v1';\n\nasync function callBinomAPI() {\n    const config = {\n        method: 'GET',\n        headers: {\n            'Authorization': `Bearer ${BINOM_API_KEY}`,\n            'Accept': 'application/json'\n        }\n    };\n    \n    try {\n        const response = await fetch(`${BASE_URL}/public/api/v1/stats/landing`, config);\n        \n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        \n        const data = await response.json();\n        console.log('Success:', data);\n        return data;\n    } catch (error) {\n        console.error('Error:', error);\n        throw error;\n    }\n}\n\n// Usage\ncallBinomAPI()\n    .then(data => console.log(data))\n    .catch(error => console.error('Failed:', error));"
      },
      "customMetrics": {
        "available": true,
        "metrics": [
          {
            "name": "eCPT",
            "fullName": "Effective Cost Per Trial",
            "description": "Average cost to acquire one trial subscription",
            "calculation": "total_cost / trials",
            "type": "currency",
            "importance": "CRITICAL",
            "aiNote": "Key metric for trial-based offers optimization. Lower eCPT indicates better campaign efficiency.",
            "troubleshooting": [
              "If eCPT is null, check if trials are configured in campaign",
              "High eCPT may indicate poor traffic quality or landing page issues",
              "Compare eCPT across different traffic sources to identify best performers"
            ]
          },
          {
            "name": "eCPB",
            "fullName": "Effective Cost Per Buyout",
            "description": "Average cost to acquire one full purchase/subscription",
            "calculation": "total_cost / buyouts",
            "type": "currency",
            "importance": "CRITICAL",
            "aiNote": "Primary ROI metric for subscription offers. Must be lower than payout for profitability.",
            "troubleshooting": [
              "If eCPB is null, check if buyouts are configured in campaign",
              "eCPB higher than payout indicates unprofitable campaign",
              "Monitor eCPB trends to detect performance degradation"
            ]
          },
          {
            "name": "trials",
            "fullName": "Trial Conversions",
            "description": "Number of trial subscriptions acquired",
            "type": "integer",
            "importance": "HIGH",
            "aiNote": "Intermediate conversion metric. Higher trials indicate good initial interest.",
            "troubleshooting": [
              "Low trials may indicate traffic quality issues",
              "High trials but low buyouts suggest offer or funnel problems",
              "Track trial-to-buyout conversion rate for optimization"
            ]
          },
          {
            "name": "buyouts",
            "fullName": "Buyout Conversions",
            "description": "Number of full purchases/subscriptions",
            "type": "integer",
            "importance": "CRITICAL",
            "aiNote": "Final conversion metric. Directly impacts revenue and ROI calculations.",
            "troubleshooting": [
              "Zero buyouts indicate serious funnel issues",
              "Low buyout rate from trials suggests billing or offer problems",
              "Monitor buyout trends for early problem detection"
            ]
          }
        ],
        "howToFind": {
          "webInterface": "Settings -> Columns in Binom interface",
          "apiAccess": "Available in stats and report endpoints response",
          "configuration": "Must be configured in campaign postback settings"
        },
        "aiInstructions": {
          "rule": "ALWAYS ask operator for clarification if custom metric values seem unexpected",
          "when": [
            "Custom metric is null or zero unexpectedly",
            "Metric values don't align with campaign performance",
            "Unfamiliar custom metrics appear in response"
          ],
          "howToAsk": "What does [metric_name] represent in your campaign setup?",
          "examples": [
            "If eCPT is $50 but expected $5, ask: 'The eCPT seems high at $50. Is this expected for this campaign type?'",
            "If trials are 0 but clicks are high, ask: 'I see clicks but no trials. Are trial conversions configured correctly?'"
          ]
        }
      },
      "aiInstructions": {
        "priority": "CRITICAL",
        "complexity": "MEDIUM",
        "keyPoints": [
          "This is a CRITICAL priority endpoint",
          "Category: stats operations",
          "Custom metrics: Available",
          "Always use Bearer token authentication",
          "Handle rate limiting with exponential backoff"
        ],
        "beforeUsing": [
          "Verify API key is set in environment variables",
          "Check if datePreset and timezone are required",
          "Validate all required parameters are provided",
          "Ensure proper error handling is implemented"
        ],
        "afterUsing": [
          "Validate response structure matches expected schema",
          "Check for custom metrics if endpoint supports them",
          "Log important metrics for monitoring",
          "Handle pagination if response is truncated"
        ],
        "commonMistakes": [
          "Forgetting datePreset parameter for stats endpoints",
          "Using wrong Bearer token format",
          "Not handling 429 rate limit responses",
          "Ignoring custom metrics in optimization decisions",
          "Not validating response data before processing"
        ],
        "optimization": [
          "Cache responses when appropriate",
          "Use batch operations when available",
          "Implement retry logic with exponential backoff",
          "Monitor API usage to avoid rate limits",
          "Use appropriate date ranges to minimize data transfer"
        ],
        "customMetricsGuidance": {
          "applicable": true,
          "criticalRule": "ALWAYS clarify unknown or unexpected custom metrics with operator",
          "whenToAsk": [
            "Custom metric value is null when data exists",
            "Metric values seem inconsistent with campaign performance",
            "Unfamiliar custom metric names appear",
            "Metric calculations don't match expected formulas"
          ],
          "howToAsk": [
            "Be specific: 'I see eCPT of $X, is this expected for this campaign type?'",
            "Provide context: 'Campaign has Y clicks but Z trials, should I investigate?'",
            "Ask for clarification: 'What does [custom_metric] represent in your setup?'"
          ],
          "neverAssume": [
            "Don't assume metric meanings without confirmation",
            "Don't ignore null values without asking",
            "Don't make optimization decisions on unclear metrics",
            "Don't extrapolate metrics without understanding calculation"
          ],
          "bestPractices": [
            "Document all custom metrics and their meanings",
            "Validate metric values against business logic",
            "Ask for acceptable ranges for each metric",
            "Confirm optimization goals before making changes"
          ]
        }
      },
      "errorHandling": {
        "retryStrategy": {
          "429": {
            "action": "Exponential backoff retry",
            "initialDelay": 1,
            "maxRetries": 5,
            "backoffMultiplier": 2
          },
          "500": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 5
          },
          "502": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 10
          }
        },
        "noRetryErrors": [
          400,
          401,
          403,
          404
        ],
        "commonIssues": [
          {
            "error": "400 - Missing datePreset",
            "solution": "Add datePreset and timezone parameters to GET requests",
            "prevention": "Always validate required parameters before sending request"
          },
          {
            "error": "401 - Invalid API key",
            "solution": "Check Bearer token format and API key validity",
            "prevention": "Validate API key format before making requests"
          },
          {
            "error": "403 - Access denied",
            "solution": "Verify user permissions for this resource",
            "prevention": "Check user role and permissions before accessing resources"
          },
          {
            "error": "429 - Rate limited",
            "solution": "Implement exponential backoff and reduce request frequency",
            "prevention": "Monitor request rate and implement proper throttling"
          }
        ],
        "debugging": [
          "Log full request and response for error analysis",
          "Check API key permissions and expiration",
          "Verify request format matches API documentation",
          "Test with minimal required parameters first"
        ]
      },
      "workflow": {
        "prerequisites": [
          "Valid authentication",
          "Proper permissions"
        ],
        "followUpActions": [
          "Process response data",
          "Handle any errors"
        ],
        "relatedEndpoints": [],
        "typicalWorkflow": [
          "Call GET /public/api/v1/stats/landing endpoint",
          "Process response"
        ]
      },
      "testing": {
        "unitTests": [
          "Test with valid parameters",
          "Test with missing required parameters",
          "Test with invalid parameter values",
          "Test authentication failure scenarios"
        ],
        "integrationTests": [
          "Test full workflow with real data",
          "Test error handling and recovery",
          "Test rate limiting behavior",
          "Test response data validation"
        ],
        "testData": {
          "validParams": {
            "datePreset": "last_7_days",
            "timezone": "UTC",
            "limit": 10
          },
          "invalidParams": [
            {
              "error": "missing_datePreset",
              "params": {
                "timezone": "UTC"
              }
            },
            {
              "error": "invalid_datePreset",
              "params": {
                "datePreset": "invalid",
                "timezone": "UTC"
              }
            },
            {
              "error": "missing_timezone",
              "params": {
                "datePreset": "last_7_days"
              }
            }
          ]
        },
        "assertions": [
          "Response status code is 200 for valid requests",
          "Response contains expected data structure",
          "Custom metrics are present when applicable",
          "Error responses contain proper error messages"
        ]
      }
    },
    "GET /public/api/v1/stats/offer": {
      "metadata": {
        "method": "GET",
        "path": "/public/api/v1/stats/offer",
        "category": "stats",
        "priority": 6,
        "importance": "CRITICAL",
        "hasCustomMetrics": true,
        "aiUsage": "Необходим для оптимизации офферов"
      },
      "description": {
        "summary": "Анализ производительности офферов с кастомными метриками",
        "detailed": "Detailed description for GET /public/api/v1/stats/offer - Анализ производительности офферов с кастомными метриками",
        "businessContext": "Performance analysis and optimization - used for ROI calculations, A/B testing, and campaign optimization decisions",
        "whenToUse": [
          "Standard stats operations"
        ]
      },
      "authentication": {
        "type": "Bearer Token",
        "header": "Authorization: Bearer {binomPublic}",
        "required": true,
        "note": "Use environment variable binomPublic"
      },
      "parameters": {
        "path": [],
        "query": [
          {
            "name": "datePreset",
            "type": "string",
            "required": true,
            "description": "Date range preset for data filtering",
            "enum": [
              "today",
              "yesterday",
              "last_7_days",
              "last_30_days",
              "this_month",
              "last_month",
              "custom_time"
            ],
            "example": "last_7_days"
          },
          {
            "name": "timezone",
            "type": "string",
            "required": true,
            "description": "Timezone for date calculations",
            "example": "UTC"
          },
          {
            "name": "limit",
            "type": "integer",
            "required": false,
            "description": "Maximum number of records to return",
            "example": 100,
            "default": 100
          },
          {
            "name": "offset",
            "type": "integer",
            "required": false,
            "description": "Number of records to skip for pagination",
            "example": 0,
            "default": 0
          },
          {
            "name": "groupBy",
            "type": "string",
            "required": false,
            "description": "Field to group results by",
            "enum": [
              "landingId",
              "offerId",
              "trafficSourceId",
              "campaignId"
            ],
            "example": "landingId"
          },
          {
            "name": "sortColumn",
            "type": "string",
            "required": false,
            "description": "Column to sort results by",
            "example": "clicks"
          },
          {
            "name": "sortType",
            "type": "string",
            "required": false,
            "description": "Sort direction",
            "enum": [
              "asc",
              "desc"
            ],
            "example": "desc"
          }
        ],
        "header": [
          {
            "name": "Authorization",
            "type": "string",
            "required": true,
            "description": "Bearer token authentication",
            "example": "Bearer your_api_key_here"
          },
          {
            "name": "Content-Type",
            "type": "string",
            "required": false,
            "description": "Content type for request body",
            "example": "application/json"
          }
        ]
      },
      "requestBody": null,
      "responses": {
        "200": {
          "description": "Success",
          "contentType": "application/json",
          "schema": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "name": {
                  "type": "string"
                },
                "clicks": {
                  "type": "integer"
                },
                "conversions": {
                  "type": "integer"
                },
                "cost": {
                  "type": "number"
                },
                "revenue": {
                  "type": "number"
                },
                "eCPT": {
                  "type": "number",
                  "description": "Effective Cost Per Trial"
                },
                "eCPB": {
                  "type": "number",
                  "description": "Effective Cost Per Buyout"
                },
                "trials": {
                  "type": "integer",
                  "description": "Number of trial conversions"
                },
                "buyouts": {
                  "type": "integer",
                  "description": "Number of buyout conversions"
                }
              }
            }
          },
          "example": {
            "message": "Success"
          }
        },
        "400": {
          "description": "Bad Request - Invalid parameters or missing required fields",
          "contentType": "application/json",
          "schema": {
            "type": "object",
            "properties": {
              "error": {
                "type": "string"
              },
              "message": {
                "type": "string"
              },
              "details": {
                "type": "object"
              }
            }
          },
          "example": {
            "error": "Validation failed",
            "message": "Field 'datePreset' is required for stats endpoints",
            "details": {
              "field": "datePreset",
              "code": "required"
            }
          }
        },
        "401": {
          "description": "Unauthorized - Invalid or missing API key",
          "contentType": "application/json",
          "example": {
            "error": "Unauthorized",
            "message": "Invalid API key or missing Authorization header"
          }
        },
        "403": {
          "description": "Forbidden - Insufficient permissions",
          "contentType": "application/json",
          "example": {
            "error": "Access denied",
            "message": "Insufficient permissions to access this resource"
          }
        },
        "404": {
          "description": "Not Found - Resource does not exist",
          "contentType": "application/json",
          "example": {
            "error": "Not found",
            "message": "Campaign with ID 999 not found"
          }
        },
        "429": {
          "description": "Too Many Requests - Rate limit exceeded",
          "contentType": "application/json",
          "example": {
            "error": "Rate limit exceeded",
            "message": "Too many requests. Please wait before making another request.",
            "retryAfter": 60
          }
        },
        "500": {
          "description": "Internal Server Error",
          "contentType": "application/json",
          "example": {
            "error": "Internal server error",
            "message": "An unexpected error occurred. Please try again later."
          }
        }
      },
      "examples": {
        "python": "import requests\nimport os\nfrom datetime import datetime\n\n# Configuration\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\ndef handle_response(response):\n    \"\"\"Handle API response with proper error handling\"\"\"\n    if response.status_code == 200:\n        return response.json()\n    elif response.status_code == 400:\n        print(f\"Bad Request: {response.json()}\")\n    elif response.status_code == 401:\n        print(\"Unauthorized: Check your API key\")\n    elif response.status_code == 403:\n        print(\"Forbidden: Insufficient permissions\")\n    elif response.status_code == 404:\n        print(\"Not Found: Resource doesn't exist\")\n    elif response.status_code == 429:\n        print(\"Rate Limited: Wait before retrying\")\n    else:\n        print(f\"Error {response.status_code}: {response.text}\")\n    return None\n\n# Get campaign statistics with custom metrics\ndef get_campaign_stats(date_preset=\"last_7_days\", group_by=None):\n    \"\"\"\n    Get campaign statistics including custom metrics (eCPT, eCPB, trials, buyouts)\n    \n    Args:\n        date_preset: Date range for statistics\n        group_by: Optional grouping field (landingId, offerId, etc.)\n    \"\"\"\n    params = {\n        \"datePreset\": date_preset,\n        \"timezone\": \"UTC\",\n        \"limit\": 100,\n        \"offset\": 0\n    }\n    \n    if group_by:\n        params[\"groupBy\"] = group_by\n    \n    response = requests.get(\n        f\"{BASE_URL}/stats/campaign\",\n        headers=headers,\n        params=params\n    )\n    \n    data = handle_response(response)\n    if data:\n        # Process custom metrics\n        for campaign in data:\n            if 'eCPT' in campaign and campaign['eCPT']:\n                print(f\"Campaign {campaign['name']}: eCPT=${campaign['eCPT']:.2f}\")\n            if 'trials' in campaign:\n                print(f\"  Trials: {campaign['trials']}, Buyouts: {campaign.get('buyouts', 0)}\")\n    \n    return data\n\n# Usage example\nif __name__ == \"__main__\":\n    # Get last 7 days campaign stats\n    stats = get_campaign_stats(\"last_7_days\")\n    \n    # Get stats grouped by landing pages\n    landing_stats = get_campaign_stats(\"last_7_days\", \"landingId\")\n",
        "curl": "# GET /public/api/v1/stats/offer\ncurl -X GET \\\n  \"https://pierdun.com/public/api/v1/public/api/v1/stats/offer?datePreset=last_7_days&timezone=UTC&limit=100\" \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Accept: application/json\"",
        "javascript": "// GET /public/api/v1/stats/offer\nconst BINOM_API_KEY = process.env.BINOM_PUBLIC;\nconst BASE_URL = 'https://pierdun.com/public/api/v1';\n\nasync function callBinomAPI() {\n    const config = {\n        method: 'GET',\n        headers: {\n            'Authorization': `Bearer ${BINOM_API_KEY}`,\n            'Accept': 'application/json'\n        }\n    };\n    \n    try {\n        const response = await fetch(`${BASE_URL}/public/api/v1/stats/offer`, config);\n        \n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        \n        const data = await response.json();\n        console.log('Success:', data);\n        return data;\n    } catch (error) {\n        console.error('Error:', error);\n        throw error;\n    }\n}\n\n// Usage\ncallBinomAPI()\n    .then(data => console.log(data))\n    .catch(error => console.error('Failed:', error));"
      },
      "customMetrics": {
        "available": true,
        "metrics": [
          {
            "name": "eCPT",
            "fullName": "Effective Cost Per Trial",
            "description": "Average cost to acquire one trial subscription",
            "calculation": "total_cost / trials",
            "type": "currency",
            "importance": "CRITICAL",
            "aiNote": "Key metric for trial-based offers optimization. Lower eCPT indicates better campaign efficiency.",
            "troubleshooting": [
              "If eCPT is null, check if trials are configured in campaign",
              "High eCPT may indicate poor traffic quality or landing page issues",
              "Compare eCPT across different traffic sources to identify best performers"
            ]
          },
          {
            "name": "eCPB",
            "fullName": "Effective Cost Per Buyout",
            "description": "Average cost to acquire one full purchase/subscription",
            "calculation": "total_cost / buyouts",
            "type": "currency",
            "importance": "CRITICAL",
            "aiNote": "Primary ROI metric for subscription offers. Must be lower than payout for profitability.",
            "troubleshooting": [
              "If eCPB is null, check if buyouts are configured in campaign",
              "eCPB higher than payout indicates unprofitable campaign",
              "Monitor eCPB trends to detect performance degradation"
            ]
          },
          {
            "name": "trials",
            "fullName": "Trial Conversions",
            "description": "Number of trial subscriptions acquired",
            "type": "integer",
            "importance": "HIGH",
            "aiNote": "Intermediate conversion metric. Higher trials indicate good initial interest.",
            "troubleshooting": [
              "Low trials may indicate traffic quality issues",
              "High trials but low buyouts suggest offer or funnel problems",
              "Track trial-to-buyout conversion rate for optimization"
            ]
          },
          {
            "name": "buyouts",
            "fullName": "Buyout Conversions",
            "description": "Number of full purchases/subscriptions",
            "type": "integer",
            "importance": "CRITICAL",
            "aiNote": "Final conversion metric. Directly impacts revenue and ROI calculations.",
            "troubleshooting": [
              "Zero buyouts indicate serious funnel issues",
              "Low buyout rate from trials suggests billing or offer problems",
              "Monitor buyout trends for early problem detection"
            ]
          }
        ],
        "howToFind": {
          "webInterface": "Settings -> Columns in Binom interface",
          "apiAccess": "Available in stats and report endpoints response",
          "configuration": "Must be configured in campaign postback settings"
        },
        "aiInstructions": {
          "rule": "ALWAYS ask operator for clarification if custom metric values seem unexpected",
          "when": [
            "Custom metric is null or zero unexpectedly",
            "Metric values don't align with campaign performance",
            "Unfamiliar custom metrics appear in response"
          ],
          "howToAsk": "What does [metric_name] represent in your campaign setup?",
          "examples": [
            "If eCPT is $50 but expected $5, ask: 'The eCPT seems high at $50. Is this expected for this campaign type?'",
            "If trials are 0 but clicks are high, ask: 'I see clicks but no trials. Are trial conversions configured correctly?'"
          ]
        }
      },
      "aiInstructions": {
        "priority": "CRITICAL",
        "complexity": "MEDIUM",
        "keyPoints": [
          "This is a CRITICAL priority endpoint",
          "Category: stats operations",
          "Custom metrics: Available",
          "Always use Bearer token authentication",
          "Handle rate limiting with exponential backoff"
        ],
        "beforeUsing": [
          "Verify API key is set in environment variables",
          "Check if datePreset and timezone are required",
          "Validate all required parameters are provided",
          "Ensure proper error handling is implemented"
        ],
        "afterUsing": [
          "Validate response structure matches expected schema",
          "Check for custom metrics if endpoint supports them",
          "Log important metrics for monitoring",
          "Handle pagination if response is truncated"
        ],
        "commonMistakes": [
          "Forgetting datePreset parameter for stats endpoints",
          "Using wrong Bearer token format",
          "Not handling 429 rate limit responses",
          "Ignoring custom metrics in optimization decisions",
          "Not validating response data before processing"
        ],
        "optimization": [
          "Cache responses when appropriate",
          "Use batch operations when available",
          "Implement retry logic with exponential backoff",
          "Monitor API usage to avoid rate limits",
          "Use appropriate date ranges to minimize data transfer"
        ],
        "customMetricsGuidance": {
          "applicable": true,
          "criticalRule": "ALWAYS clarify unknown or unexpected custom metrics with operator",
          "whenToAsk": [
            "Custom metric value is null when data exists",
            "Metric values seem inconsistent with campaign performance",
            "Unfamiliar custom metric names appear",
            "Metric calculations don't match expected formulas"
          ],
          "howToAsk": [
            "Be specific: 'I see eCPT of $X, is this expected for this campaign type?'",
            "Provide context: 'Campaign has Y clicks but Z trials, should I investigate?'",
            "Ask for clarification: 'What does [custom_metric] represent in your setup?'"
          ],
          "neverAssume": [
            "Don't assume metric meanings without confirmation",
            "Don't ignore null values without asking",
            "Don't make optimization decisions on unclear metrics",
            "Don't extrapolate metrics without understanding calculation"
          ],
          "bestPractices": [
            "Document all custom metrics and their meanings",
            "Validate metric values against business logic",
            "Ask for acceptable ranges for each metric",
            "Confirm optimization goals before making changes"
          ]
        }
      },
      "errorHandling": {
        "retryStrategy": {
          "429": {
            "action": "Exponential backoff retry",
            "initialDelay": 1,
            "maxRetries": 5,
            "backoffMultiplier": 2
          },
          "500": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 5
          },
          "502": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 10
          }
        },
        "noRetryErrors": [
          400,
          401,
          403,
          404
        ],
        "commonIssues": [
          {
            "error": "400 - Missing datePreset",
            "solution": "Add datePreset and timezone parameters to GET requests",
            "prevention": "Always validate required parameters before sending request"
          },
          {
            "error": "401 - Invalid API key",
            "solution": "Check Bearer token format and API key validity",
            "prevention": "Validate API key format before making requests"
          },
          {
            "error": "403 - Access denied",
            "solution": "Verify user permissions for this resource",
            "prevention": "Check user role and permissions before accessing resources"
          },
          {
            "error": "429 - Rate limited",
            "solution": "Implement exponential backoff and reduce request frequency",
            "prevention": "Monitor request rate and implement proper throttling"
          }
        ],
        "debugging": [
          "Log full request and response for error analysis",
          "Check API key permissions and expiration",
          "Verify request format matches API documentation",
          "Test with minimal required parameters first"
        ]
      },
      "workflow": {
        "prerequisites": [
          "Valid authentication",
          "Proper permissions"
        ],
        "followUpActions": [
          "Process response data",
          "Handle any errors"
        ],
        "relatedEndpoints": [],
        "typicalWorkflow": [
          "Call GET /public/api/v1/stats/offer endpoint",
          "Process response"
        ]
      },
      "testing": {
        "unitTests": [
          "Test with valid parameters",
          "Test with missing required parameters",
          "Test with invalid parameter values",
          "Test authentication failure scenarios"
        ],
        "integrationTests": [
          "Test full workflow with real data",
          "Test error handling and recovery",
          "Test rate limiting behavior",
          "Test response data validation"
        ],
        "testData": {
          "validParams": {
            "datePreset": "last_7_days",
            "timezone": "UTC",
            "limit": 10
          },
          "invalidParams": [
            {
              "error": "missing_datePreset",
              "params": {
                "timezone": "UTC"
              }
            },
            {
              "error": "invalid_datePreset",
              "params": {
                "datePreset": "invalid",
                "timezone": "UTC"
              }
            },
            {
              "error": "missing_timezone",
              "params": {
                "datePreset": "last_7_days"
              }
            }
          ]
        },
        "assertions": [
          "Response status code is 200 for valid requests",
          "Response contains expected data structure",
          "Custom metrics are present when applicable",
          "Error responses contain proper error messages"
        ]
      }
    },
    "GET /public/api/v1/stats/traffic_source": {
      "metadata": {
        "method": "GET",
        "path": "/public/api/v1/stats/traffic_source",
        "category": "stats",
        "priority": 7,
        "importance": "CRITICAL",
        "hasCustomMetrics": true,
        "aiUsage": "Критично для анализа источников трафика"
      },
      "description": {
        "summary": "Анализ производительности трафиксорсов",
        "detailed": "Detailed description for GET /public/api/v1/stats/traffic_source - Анализ производительности трафиксорсов",
        "businessContext": "Performance analysis and optimization - used for ROI calculations, A/B testing, and campaign optimization decisions",
        "whenToUse": [
          "Standard stats operations"
        ]
      },
      "authentication": {
        "type": "Bearer Token",
        "header": "Authorization: Bearer {binomPublic}",
        "required": true,
        "note": "Use environment variable binomPublic"
      },
      "parameters": {
        "path": [],
        "query": [
          {
            "name": "datePreset",
            "type": "string",
            "required": true,
            "description": "Date range preset for data filtering",
            "enum": [
              "today",
              "yesterday",
              "last_7_days",
              "last_30_days",
              "this_month",
              "last_month",
              "custom_time"
            ],
            "example": "last_7_days"
          },
          {
            "name": "timezone",
            "type": "string",
            "required": true,
            "description": "Timezone for date calculations",
            "example": "UTC"
          },
          {
            "name": "limit",
            "type": "integer",
            "required": false,
            "description": "Maximum number of records to return",
            "example": 100,
            "default": 100
          },
          {
            "name": "offset",
            "type": "integer",
            "required": false,
            "description": "Number of records to skip for pagination",
            "example": 0,
            "default": 0
          },
          {
            "name": "groupBy",
            "type": "string",
            "required": false,
            "description": "Field to group results by",
            "enum": [
              "landingId",
              "offerId",
              "trafficSourceId",
              "campaignId"
            ],
            "example": "landingId"
          },
          {
            "name": "sortColumn",
            "type": "string",
            "required": false,
            "description": "Column to sort results by",
            "example": "clicks"
          },
          {
            "name": "sortType",
            "type": "string",
            "required": false,
            "description": "Sort direction",
            "enum": [
              "asc",
              "desc"
            ],
            "example": "desc"
          }
        ],
        "header": [
          {
            "name": "Authorization",
            "type": "string",
            "required": true,
            "description": "Bearer token authentication",
            "example": "Bearer your_api_key_here"
          },
          {
            "name": "Content-Type",
            "type": "string",
            "required": false,
            "description": "Content type for request body",
            "example": "application/json"
          }
        ]
      },
      "requestBody": null,
      "responses": {
        "200": {
          "description": "Success",
          "contentType": "application/json",
          "schema": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "name": {
                  "type": "string"
                },
                "clicks": {
                  "type": "integer"
                },
                "conversions": {
                  "type": "integer"
                },
                "cost": {
                  "type": "number"
                },
                "revenue": {
                  "type": "number"
                },
                "eCPT": {
                  "type": "number",
                  "description": "Effective Cost Per Trial"
                },
                "eCPB": {
                  "type": "number",
                  "description": "Effective Cost Per Buyout"
                },
                "trials": {
                  "type": "integer",
                  "description": "Number of trial conversions"
                },
                "buyouts": {
                  "type": "integer",
                  "description": "Number of buyout conversions"
                }
              }
            }
          },
          "example": {
            "message": "Success"
          }
        },
        "400": {
          "description": "Bad Request - Invalid parameters or missing required fields",
          "contentType": "application/json",
          "schema": {
            "type": "object",
            "properties": {
              "error": {
                "type": "string"
              },
              "message": {
                "type": "string"
              },
              "details": {
                "type": "object"
              }
            }
          },
          "example": {
            "error": "Validation failed",
            "message": "Field 'datePreset' is required for stats endpoints",
            "details": {
              "field": "datePreset",
              "code": "required"
            }
          }
        },
        "401": {
          "description": "Unauthorized - Invalid or missing API key",
          "contentType": "application/json",
          "example": {
            "error": "Unauthorized",
            "message": "Invalid API key or missing Authorization header"
          }
        },
        "403": {
          "description": "Forbidden - Insufficient permissions",
          "contentType": "application/json",
          "example": {
            "error": "Access denied",
            "message": "Insufficient permissions to access this resource"
          }
        },
        "404": {
          "description": "Not Found - Resource does not exist",
          "contentType": "application/json",
          "example": {
            "error": "Not found",
            "message": "Campaign with ID 999 not found"
          }
        },
        "429": {
          "description": "Too Many Requests - Rate limit exceeded",
          "contentType": "application/json",
          "example": {
            "error": "Rate limit exceeded",
            "message": "Too many requests. Please wait before making another request.",
            "retryAfter": 60
          }
        },
        "500": {
          "description": "Internal Server Error",
          "contentType": "application/json",
          "example": {
            "error": "Internal server error",
            "message": "An unexpected error occurred. Please try again later."
          }
        }
      },
      "examples": {
        "python": "import requests\nimport os\nfrom datetime import datetime\n\n# Configuration\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\ndef handle_response(response):\n    \"\"\"Handle API response with proper error handling\"\"\"\n    if response.status_code == 200:\n        return response.json()\n    elif response.status_code == 400:\n        print(f\"Bad Request: {response.json()}\")\n    elif response.status_code == 401:\n        print(\"Unauthorized: Check your API key\")\n    elif response.status_code == 403:\n        print(\"Forbidden: Insufficient permissions\")\n    elif response.status_code == 404:\n        print(\"Not Found: Resource doesn't exist\")\n    elif response.status_code == 429:\n        print(\"Rate Limited: Wait before retrying\")\n    else:\n        print(f\"Error {response.status_code}: {response.text}\")\n    return None\n\n# Get campaign statistics with custom metrics\ndef get_campaign_stats(date_preset=\"last_7_days\", group_by=None):\n    \"\"\"\n    Get campaign statistics including custom metrics (eCPT, eCPB, trials, buyouts)\n    \n    Args:\n        date_preset: Date range for statistics\n        group_by: Optional grouping field (landingId, offerId, etc.)\n    \"\"\"\n    params = {\n        \"datePreset\": date_preset,\n        \"timezone\": \"UTC\",\n        \"limit\": 100,\n        \"offset\": 0\n    }\n    \n    if group_by:\n        params[\"groupBy\"] = group_by\n    \n    response = requests.get(\n        f\"{BASE_URL}/stats/campaign\",\n        headers=headers,\n        params=params\n    )\n    \n    data = handle_response(response)\n    if data:\n        # Process custom metrics\n        for campaign in data:\n            if 'eCPT' in campaign and campaign['eCPT']:\n                print(f\"Campaign {campaign['name']}: eCPT=${campaign['eCPT']:.2f}\")\n            if 'trials' in campaign:\n                print(f\"  Trials: {campaign['trials']}, Buyouts: {campaign.get('buyouts', 0)}\")\n    \n    return data\n\n# Usage example\nif __name__ == \"__main__\":\n    # Get last 7 days campaign stats\n    stats = get_campaign_stats(\"last_7_days\")\n    \n    # Get stats grouped by landing pages\n    landing_stats = get_campaign_stats(\"last_7_days\", \"landingId\")\n",
        "curl": "# GET /public/api/v1/stats/traffic_source\ncurl -X GET \\\n  \"https://pierdun.com/public/api/v1/public/api/v1/stats/traffic_source?datePreset=last_7_days&timezone=UTC&limit=100\" \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Accept: application/json\"",
        "javascript": "// GET /public/api/v1/stats/traffic_source\nconst BINOM_API_KEY = process.env.BINOM_PUBLIC;\nconst BASE_URL = 'https://pierdun.com/public/api/v1';\n\nasync function callBinomAPI() {\n    const config = {\n        method: 'GET',\n        headers: {\n            'Authorization': `Bearer ${BINOM_API_KEY}`,\n            'Accept': 'application/json'\n        }\n    };\n    \n    try {\n        const response = await fetch(`${BASE_URL}/public/api/v1/stats/traffic_source`, config);\n        \n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        \n        const data = await response.json();\n        console.log('Success:', data);\n        return data;\n    } catch (error) {\n        console.error('Error:', error);\n        throw error;\n    }\n}\n\n// Usage\ncallBinomAPI()\n    .then(data => console.log(data))\n    .catch(error => console.error('Failed:', error));"
      },
      "customMetrics": {
        "available": true,
        "metrics": [
          {
            "name": "eCPT",
            "fullName": "Effective Cost Per Trial",
            "description": "Average cost to acquire one trial subscription",
            "calculation": "total_cost / trials",
            "type": "currency",
            "importance": "CRITICAL",
            "aiNote": "Key metric for trial-based offers optimization. Lower eCPT indicates better campaign efficiency.",
            "troubleshooting": [
              "If eCPT is null, check if trials are configured in campaign",
              "High eCPT may indicate poor traffic quality or landing page issues",
              "Compare eCPT across different traffic sources to identify best performers"
            ]
          },
          {
            "name": "eCPB",
            "fullName": "Effective Cost Per Buyout",
            "description": "Average cost to acquire one full purchase/subscription",
            "calculation": "total_cost / buyouts",
            "type": "currency",
            "importance": "CRITICAL",
            "aiNote": "Primary ROI metric for subscription offers. Must be lower than payout for profitability.",
            "troubleshooting": [
              "If eCPB is null, check if buyouts are configured in campaign",
              "eCPB higher than payout indicates unprofitable campaign",
              "Monitor eCPB trends to detect performance degradation"
            ]
          },
          {
            "name": "trials",
            "fullName": "Trial Conversions",
            "description": "Number of trial subscriptions acquired",
            "type": "integer",
            "importance": "HIGH",
            "aiNote": "Intermediate conversion metric. Higher trials indicate good initial interest.",
            "troubleshooting": [
              "Low trials may indicate traffic quality issues",
              "High trials but low buyouts suggest offer or funnel problems",
              "Track trial-to-buyout conversion rate for optimization"
            ]
          },
          {
            "name": "buyouts",
            "fullName": "Buyout Conversions",
            "description": "Number of full purchases/subscriptions",
            "type": "integer",
            "importance": "CRITICAL",
            "aiNote": "Final conversion metric. Directly impacts revenue and ROI calculations.",
            "troubleshooting": [
              "Zero buyouts indicate serious funnel issues",
              "Low buyout rate from trials suggests billing or offer problems",
              "Monitor buyout trends for early problem detection"
            ]
          }
        ],
        "howToFind": {
          "webInterface": "Settings -> Columns in Binom interface",
          "apiAccess": "Available in stats and report endpoints response",
          "configuration": "Must be configured in campaign postback settings"
        },
        "aiInstructions": {
          "rule": "ALWAYS ask operator for clarification if custom metric values seem unexpected",
          "when": [
            "Custom metric is null or zero unexpectedly",
            "Metric values don't align with campaign performance",
            "Unfamiliar custom metrics appear in response"
          ],
          "howToAsk": "What does [metric_name] represent in your campaign setup?",
          "examples": [
            "If eCPT is $50 but expected $5, ask: 'The eCPT seems high at $50. Is this expected for this campaign type?'",
            "If trials are 0 but clicks are high, ask: 'I see clicks but no trials. Are trial conversions configured correctly?'"
          ]
        }
      },
      "aiInstructions": {
        "priority": "CRITICAL",
        "complexity": "MEDIUM",
        "keyPoints": [
          "This is a CRITICAL priority endpoint",
          "Category: stats operations",
          "Custom metrics: Available",
          "Always use Bearer token authentication",
          "Handle rate limiting with exponential backoff"
        ],
        "beforeUsing": [
          "Verify API key is set in environment variables",
          "Check if datePreset and timezone are required",
          "Validate all required parameters are provided",
          "Ensure proper error handling is implemented"
        ],
        "afterUsing": [
          "Validate response structure matches expected schema",
          "Check for custom metrics if endpoint supports them",
          "Log important metrics for monitoring",
          "Handle pagination if response is truncated"
        ],
        "commonMistakes": [
          "Forgetting datePreset parameter for stats endpoints",
          "Using wrong Bearer token format",
          "Not handling 429 rate limit responses",
          "Ignoring custom metrics in optimization decisions",
          "Not validating response data before processing"
        ],
        "optimization": [
          "Cache responses when appropriate",
          "Use batch operations when available",
          "Implement retry logic with exponential backoff",
          "Monitor API usage to avoid rate limits",
          "Use appropriate date ranges to minimize data transfer"
        ],
        "customMetricsGuidance": {
          "applicable": true,
          "criticalRule": "ALWAYS clarify unknown or unexpected custom metrics with operator",
          "whenToAsk": [
            "Custom metric value is null when data exists",
            "Metric values seem inconsistent with campaign performance",
            "Unfamiliar custom metric names appear",
            "Metric calculations don't match expected formulas"
          ],
          "howToAsk": [
            "Be specific: 'I see eCPT of $X, is this expected for this campaign type?'",
            "Provide context: 'Campaign has Y clicks but Z trials, should I investigate?'",
            "Ask for clarification: 'What does [custom_metric] represent in your setup?'"
          ],
          "neverAssume": [
            "Don't assume metric meanings without confirmation",
            "Don't ignore null values without asking",
            "Don't make optimization decisions on unclear metrics",
            "Don't extrapolate metrics without understanding calculation"
          ],
          "bestPractices": [
            "Document all custom metrics and their meanings",
            "Validate metric values against business logic",
            "Ask for acceptable ranges for each metric",
            "Confirm optimization goals before making changes"
          ]
        }
      },
      "errorHandling": {
        "retryStrategy": {
          "429": {
            "action": "Exponential backoff retry",
            "initialDelay": 1,
            "maxRetries": 5,
            "backoffMultiplier": 2
          },
          "500": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 5
          },
          "502": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 10
          }
        },
        "noRetryErrors": [
          400,
          401,
          403,
          404
        ],
        "commonIssues": [
          {
            "error": "400 - Missing datePreset",
            "solution": "Add datePreset and timezone parameters to GET requests",
            "prevention": "Always validate required parameters before sending request"
          },
          {
            "error": "401 - Invalid API key",
            "solution": "Check Bearer token format and API key validity",
            "prevention": "Validate API key format before making requests"
          },
          {
            "error": "403 - Access denied",
            "solution": "Verify user permissions for this resource",
            "prevention": "Check user role and permissions before accessing resources"
          },
          {
            "error": "429 - Rate limited",
            "solution": "Implement exponential backoff and reduce request frequency",
            "prevention": "Monitor request rate and implement proper throttling"
          }
        ],
        "debugging": [
          "Log full request and response for error analysis",
          "Check API key permissions and expiration",
          "Verify request format matches API documentation",
          "Test with minimal required parameters first"
        ]
      },
      "workflow": {
        "prerequisites": [
          "Valid authentication",
          "Proper permissions"
        ],
        "followUpActions": [
          "Process response data",
          "Handle any errors"
        ],
        "relatedEndpoints": [],
        "typicalWorkflow": [
          "Call GET /public/api/v1/stats/traffic_source endpoint",
          "Process response"
        ]
      },
      "testing": {
        "unitTests": [
          "Test with valid parameters",
          "Test with missing required parameters",
          "Test with invalid parameter values",
          "Test authentication failure scenarios"
        ],
        "integrationTests": [
          "Test full workflow with real data",
          "Test error handling and recovery",
          "Test rate limiting behavior",
          "Test response data validation"
        ],
        "testData": {
          "validParams": {
            "datePreset": "last_7_days",
            "timezone": "UTC",
            "limit": 10
          },
          "invalidParams": [
            {
              "error": "missing_datePreset",
              "params": {
                "timezone": "UTC"
              }
            },
            {
              "error": "invalid_datePreset",
              "params": {
                "datePreset": "invalid",
                "timezone": "UTC"
              }
            },
            {
              "error": "missing_timezone",
              "params": {
                "datePreset": "last_7_days"
              }
            }
          ]
        },
        "assertions": [
          "Response status code is 200 for valid requests",
          "Response contains expected data structure",
          "Custom metrics are present when applicable",
          "Error responses contain proper error messages"
        ]
      }
    },
    "GET /public/api/v1/info/campaign": {
      "metadata": {
        "method": "GET",
        "path": "/public/api/v1/info/campaign",
        "category": "info",
        "priority": 8,
        "importance": "CRITICAL",
        "hasCustomMetrics": false,
        "aiUsage": "Базовая операция для работы с кампаниями"
      },
      "description": {
        "summary": "Получение списка кампаний",
        "detailed": "Detailed description for GET /public/api/v1/info/campaign - Получение списка кампаний",
        "businessContext": "Reference data retrieval - provides lists and details of available resources for campaign configuration",
        "whenToUse": [
          "Standard info operations"
        ]
      },
      "authentication": {
        "type": "Bearer Token",
        "header": "Authorization: Bearer {binomPublic}",
        "required": true,
        "note": "Use environment variable binomPublic"
      },
      "parameters": {
        "path": [],
        "query": [
          {
            "name": "datePreset",
            "type": "string",
            "required": true,
            "description": "Date range preset for data filtering",
            "enum": [
              "today",
              "yesterday",
              "last_7_days",
              "last_30_days",
              "this_month",
              "last_month",
              "custom_time"
            ],
            "example": "last_7_days"
          },
          {
            "name": "timezone",
            "type": "string",
            "required": true,
            "description": "Timezone for date calculations",
            "example": "UTC"
          },
          {
            "name": "limit",
            "type": "integer",
            "required": false,
            "description": "Maximum number of records to return",
            "example": 100,
            "default": 100
          },
          {
            "name": "offset",
            "type": "integer",
            "required": false,
            "description": "Number of records to skip for pagination",
            "example": 0,
            "default": 0
          }
        ],
        "header": [
          {
            "name": "Authorization",
            "type": "string",
            "required": true,
            "description": "Bearer token authentication",
            "example": "Bearer your_api_key_here"
          },
          {
            "name": "Content-Type",
            "type": "string",
            "required": false,
            "description": "Content type for request body",
            "example": "application/json"
          }
        ]
      },
      "requestBody": null,
      "responses": {
        "200": {
          "description": "Success",
          "contentType": "application/json",
          "schema": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "example": {
            "message": "Success"
          }
        },
        "400": {
          "description": "Bad Request - Invalid parameters or missing required fields",
          "contentType": "application/json",
          "schema": {
            "type": "object",
            "properties": {
              "error": {
                "type": "string"
              },
              "message": {
                "type": "string"
              },
              "details": {
                "type": "object"
              }
            }
          },
          "example": {
            "error": "Validation failed",
            "message": "Field 'datePreset' is required for stats endpoints",
            "details": {
              "field": "datePreset",
              "code": "required"
            }
          }
        },
        "401": {
          "description": "Unauthorized - Invalid or missing API key",
          "contentType": "application/json",
          "example": {
            "error": "Unauthorized",
            "message": "Invalid API key or missing Authorization header"
          }
        },
        "403": {
          "description": "Forbidden - Insufficient permissions",
          "contentType": "application/json",
          "example": {
            "error": "Access denied",
            "message": "Insufficient permissions to access this resource"
          }
        },
        "404": {
          "description": "Not Found - Resource does not exist",
          "contentType": "application/json",
          "example": {
            "error": "Not found",
            "message": "Campaign with ID 999 not found"
          }
        },
        "429": {
          "description": "Too Many Requests - Rate limit exceeded",
          "contentType": "application/json",
          "example": {
            "error": "Rate limit exceeded",
            "message": "Too many requests. Please wait before making another request.",
            "retryAfter": 60
          }
        },
        "500": {
          "description": "Internal Server Error",
          "contentType": "application/json",
          "example": {
            "error": "Internal server error",
            "message": "An unexpected error occurred. Please try again later."
          }
        }
      },
      "examples": {
        "python": "import requests\nimport os\nfrom datetime import datetime\n\n# Configuration\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\ndef handle_response(response):\n    \"\"\"Handle API response with proper error handling\"\"\"\n    if response.status_code == 200:\n        return response.json()\n    elif response.status_code == 400:\n        print(f\"Bad Request: {response.json()}\")\n    elif response.status_code == 401:\n        print(\"Unauthorized: Check your API key\")\n    elif response.status_code == 403:\n        print(\"Forbidden: Insufficient permissions\")\n    elif response.status_code == 404:\n        print(\"Not Found: Resource doesn't exist\")\n    elif response.status_code == 429:\n        print(\"Rate Limited: Wait before retrying\")\n    else:\n        print(f\"Error {response.status_code}: {response.text}\")\n    return None\n\n# GET /public/api/v1/info/campaign\ndef call_endpoint():\n    \"\"\"Call the GET /public/api/v1/info/campaign endpoint\"\"\"\n    \n    params = {'datePreset': 'last_7_days', 'timezone': 'UTC'}\n    \n    response = requests.get(\n        f\"{BASE_URL}/public/api/v1/info/campaign\",\n        headers=headers,\n        params=params\n    )\n    \n    return handle_response(response)\n\n# Usage\nif __name__ == \"__main__\":\n    result = call_endpoint()\n    print(result)\n",
        "curl": "# GET /public/api/v1/info/campaign\ncurl -X GET \\\n  \"https://pierdun.com/public/api/v1/public/api/v1/info/campaign\" \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Accept: application/json\"",
        "javascript": "// GET /public/api/v1/info/campaign\nconst BINOM_API_KEY = process.env.BINOM_PUBLIC;\nconst BASE_URL = 'https://pierdun.com/public/api/v1';\n\nasync function callBinomAPI() {\n    const config = {\n        method: 'GET',\n        headers: {\n            'Authorization': `Bearer ${BINOM_API_KEY}`,\n            'Accept': 'application/json'\n        }\n    };\n    \n    try {\n        const response = await fetch(`${BASE_URL}/public/api/v1/info/campaign`, config);\n        \n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        \n        const data = await response.json();\n        console.log('Success:', data);\n        return data;\n    } catch (error) {\n        console.error('Error:', error);\n        throw error;\n    }\n}\n\n// Usage\ncallBinomAPI()\n    .then(data => console.log(data))\n    .catch(error => console.error('Failed:', error));"
      },
      "customMetrics": {
        "available": false,
        "note": "This endpoint does not return custom metrics"
      },
      "aiInstructions": {
        "priority": "CRITICAL",
        "complexity": "LOW",
        "keyPoints": [
          "This is a CRITICAL priority endpoint",
          "Category: info operations",
          "Custom metrics: Not available",
          "Always use Bearer token authentication",
          "Handle rate limiting with exponential backoff"
        ],
        "beforeUsing": [
          "Verify API key is set in environment variables",
          "Check if datePreset and timezone are required",
          "Validate all required parameters are provided",
          "Ensure proper error handling is implemented"
        ],
        "afterUsing": [
          "Validate response structure matches expected schema",
          "Check for custom metrics if endpoint supports them",
          "Log important metrics for monitoring",
          "Handle pagination if response is truncated"
        ],
        "commonMistakes": [
          "Forgetting datePreset parameter for stats endpoints",
          "Using wrong Bearer token format",
          "Not handling 429 rate limit responses",
          "Ignoring custom metrics in optimization decisions",
          "Not validating response data before processing"
        ],
        "optimization": [
          "Cache responses when appropriate",
          "Use batch operations when available",
          "Implement retry logic with exponential backoff",
          "Monitor API usage to avoid rate limits",
          "Use appropriate date ranges to minimize data transfer"
        ],
        "customMetricsGuidance": {
          "applicable": false,
          "note": "This endpoint does not return custom metrics"
        }
      },
      "errorHandling": {
        "retryStrategy": {
          "429": {
            "action": "Exponential backoff retry",
            "initialDelay": 1,
            "maxRetries": 5,
            "backoffMultiplier": 2
          },
          "500": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 5
          },
          "502": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 10
          }
        },
        "noRetryErrors": [
          400,
          401,
          403,
          404
        ],
        "commonIssues": [
          {
            "error": "400 - Missing datePreset",
            "solution": "Add datePreset and timezone parameters to GET requests",
            "prevention": "Always validate required parameters before sending request"
          },
          {
            "error": "401 - Invalid API key",
            "solution": "Check Bearer token format and API key validity",
            "prevention": "Validate API key format before making requests"
          },
          {
            "error": "403 - Access denied",
            "solution": "Verify user permissions for this resource",
            "prevention": "Check user role and permissions before accessing resources"
          },
          {
            "error": "429 - Rate limited",
            "solution": "Implement exponential backoff and reduce request frequency",
            "prevention": "Monitor request rate and implement proper throttling"
          }
        ],
        "debugging": [
          "Log full request and response for error analysis",
          "Check API key permissions and expiration",
          "Verify request format matches API documentation",
          "Test with minimal required parameters first"
        ]
      },
      "workflow": {
        "prerequisites": [
          "Valid authentication",
          "Proper permissions"
        ],
        "followUpActions": [
          "Process response data",
          "Handle any errors"
        ],
        "relatedEndpoints": [],
        "typicalWorkflow": [
          "Call GET /public/api/v1/info/campaign endpoint",
          "Process response"
        ]
      },
      "testing": {
        "unitTests": [
          "Test with valid parameters",
          "Test with missing required parameters",
          "Test with invalid parameter values",
          "Test authentication failure scenarios"
        ],
        "integrationTests": [
          "Test full workflow with real data",
          "Test error handling and recovery",
          "Test rate limiting behavior",
          "Test response data validation"
        ],
        "testData": {
          "validParams": {},
          "invalidParams": []
        },
        "assertions": [
          "Response status code is 200 for valid requests",
          "Response contains expected data structure",
          "Custom metrics are present when applicable",
          "Error responses contain proper error messages"
        ]
      }
    },
    "GET /public/api/v1/info/offer": {
      "metadata": {
        "method": "GET",
        "path": "/public/api/v1/info/offer",
        "category": "info",
        "priority": 9,
        "importance": "CRITICAL",
        "hasCustomMetrics": false,
        "aiUsage": "Необходим для настройки кампаний"
      },
      "description": {
        "summary": "Получение списка офферов",
        "detailed": "Detailed description for GET /public/api/v1/info/offer - Получение списка офферов",
        "businessContext": "Reference data retrieval - provides lists and details of available resources for campaign configuration",
        "whenToUse": [
          "Standard info operations"
        ]
      },
      "authentication": {
        "type": "Bearer Token",
        "header": "Authorization: Bearer {binomPublic}",
        "required": true,
        "note": "Use environment variable binomPublic"
      },
      "parameters": {
        "path": [],
        "query": [
          {
            "name": "datePreset",
            "type": "string",
            "required": true,
            "description": "Date range preset for data filtering",
            "enum": [
              "today",
              "yesterday",
              "last_7_days",
              "last_30_days",
              "this_month",
              "last_month",
              "custom_time"
            ],
            "example": "last_7_days"
          },
          {
            "name": "timezone",
            "type": "string",
            "required": true,
            "description": "Timezone for date calculations",
            "example": "UTC"
          },
          {
            "name": "limit",
            "type": "integer",
            "required": false,
            "description": "Maximum number of records to return",
            "example": 100,
            "default": 100
          },
          {
            "name": "offset",
            "type": "integer",
            "required": false,
            "description": "Number of records to skip for pagination",
            "example": 0,
            "default": 0
          }
        ],
        "header": [
          {
            "name": "Authorization",
            "type": "string",
            "required": true,
            "description": "Bearer token authentication",
            "example": "Bearer your_api_key_here"
          },
          {
            "name": "Content-Type",
            "type": "string",
            "required": false,
            "description": "Content type for request body",
            "example": "application/json"
          }
        ]
      },
      "requestBody": null,
      "responses": {
        "200": {
          "description": "Success",
          "contentType": "application/json",
          "schema": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "example": {
            "message": "Success"
          }
        },
        "400": {
          "description": "Bad Request - Invalid parameters or missing required fields",
          "contentType": "application/json",
          "schema": {
            "type": "object",
            "properties": {
              "error": {
                "type": "string"
              },
              "message": {
                "type": "string"
              },
              "details": {
                "type": "object"
              }
            }
          },
          "example": {
            "error": "Validation failed",
            "message": "Field 'datePreset' is required for stats endpoints",
            "details": {
              "field": "datePreset",
              "code": "required"
            }
          }
        },
        "401": {
          "description": "Unauthorized - Invalid or missing API key",
          "contentType": "application/json",
          "example": {
            "error": "Unauthorized",
            "message": "Invalid API key or missing Authorization header"
          }
        },
        "403": {
          "description": "Forbidden - Insufficient permissions",
          "contentType": "application/json",
          "example": {
            "error": "Access denied",
            "message": "Insufficient permissions to access this resource"
          }
        },
        "404": {
          "description": "Not Found - Resource does not exist",
          "contentType": "application/json",
          "example": {
            "error": "Not found",
            "message": "Campaign with ID 999 not found"
          }
        },
        "429": {
          "description": "Too Many Requests - Rate limit exceeded",
          "contentType": "application/json",
          "example": {
            "error": "Rate limit exceeded",
            "message": "Too many requests. Please wait before making another request.",
            "retryAfter": 60
          }
        },
        "500": {
          "description": "Internal Server Error",
          "contentType": "application/json",
          "example": {
            "error": "Internal server error",
            "message": "An unexpected error occurred. Please try again later."
          }
        }
      },
      "examples": {
        "python": "import requests\nimport os\nfrom datetime import datetime\n\n# Configuration\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\ndef handle_response(response):\n    \"\"\"Handle API response with proper error handling\"\"\"\n    if response.status_code == 200:\n        return response.json()\n    elif response.status_code == 400:\n        print(f\"Bad Request: {response.json()}\")\n    elif response.status_code == 401:\n        print(\"Unauthorized: Check your API key\")\n    elif response.status_code == 403:\n        print(\"Forbidden: Insufficient permissions\")\n    elif response.status_code == 404:\n        print(\"Not Found: Resource doesn't exist\")\n    elif response.status_code == 429:\n        print(\"Rate Limited: Wait before retrying\")\n    else:\n        print(f\"Error {response.status_code}: {response.text}\")\n    return None\n\n# GET /public/api/v1/info/offer\ndef call_endpoint():\n    \"\"\"Call the GET /public/api/v1/info/offer endpoint\"\"\"\n    \n    params = {'datePreset': 'last_7_days', 'timezone': 'UTC'}\n    \n    response = requests.get(\n        f\"{BASE_URL}/public/api/v1/info/offer\",\n        headers=headers,\n        params=params\n    )\n    \n    return handle_response(response)\n\n# Usage\nif __name__ == \"__main__\":\n    result = call_endpoint()\n    print(result)\n",
        "curl": "# GET /public/api/v1/info/offer\ncurl -X GET \\\n  \"https://pierdun.com/public/api/v1/public/api/v1/info/offer\" \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Accept: application/json\"",
        "javascript": "// GET /public/api/v1/info/offer\nconst BINOM_API_KEY = process.env.BINOM_PUBLIC;\nconst BASE_URL = 'https://pierdun.com/public/api/v1';\n\nasync function callBinomAPI() {\n    const config = {\n        method: 'GET',\n        headers: {\n            'Authorization': `Bearer ${BINOM_API_KEY}`,\n            'Accept': 'application/json'\n        }\n    };\n    \n    try {\n        const response = await fetch(`${BASE_URL}/public/api/v1/info/offer`, config);\n        \n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        \n        const data = await response.json();\n        console.log('Success:', data);\n        return data;\n    } catch (error) {\n        console.error('Error:', error);\n        throw error;\n    }\n}\n\n// Usage\ncallBinomAPI()\n    .then(data => console.log(data))\n    .catch(error => console.error('Failed:', error));"
      },
      "customMetrics": {
        "available": false,
        "note": "This endpoint does not return custom metrics"
      },
      "aiInstructions": {
        "priority": "CRITICAL",
        "complexity": "LOW",
        "keyPoints": [
          "This is a CRITICAL priority endpoint",
          "Category: info operations",
          "Custom metrics: Not available",
          "Always use Bearer token authentication",
          "Handle rate limiting with exponential backoff"
        ],
        "beforeUsing": [
          "Verify API key is set in environment variables",
          "Check if datePreset and timezone are required",
          "Validate all required parameters are provided",
          "Ensure proper error handling is implemented"
        ],
        "afterUsing": [
          "Validate response structure matches expected schema",
          "Check for custom metrics if endpoint supports them",
          "Log important metrics for monitoring",
          "Handle pagination if response is truncated"
        ],
        "commonMistakes": [
          "Forgetting datePreset parameter for stats endpoints",
          "Using wrong Bearer token format",
          "Not handling 429 rate limit responses",
          "Ignoring custom metrics in optimization decisions",
          "Not validating response data before processing"
        ],
        "optimization": [
          "Cache responses when appropriate",
          "Use batch operations when available",
          "Implement retry logic with exponential backoff",
          "Monitor API usage to avoid rate limits",
          "Use appropriate date ranges to minimize data transfer"
        ],
        "customMetricsGuidance": {
          "applicable": false,
          "note": "This endpoint does not return custom metrics"
        }
      },
      "errorHandling": {
        "retryStrategy": {
          "429": {
            "action": "Exponential backoff retry",
            "initialDelay": 1,
            "maxRetries": 5,
            "backoffMultiplier": 2
          },
          "500": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 5
          },
          "502": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 10
          }
        },
        "noRetryErrors": [
          400,
          401,
          403,
          404
        ],
        "commonIssues": [
          {
            "error": "400 - Missing datePreset",
            "solution": "Add datePreset and timezone parameters to GET requests",
            "prevention": "Always validate required parameters before sending request"
          },
          {
            "error": "401 - Invalid API key",
            "solution": "Check Bearer token format and API key validity",
            "prevention": "Validate API key format before making requests"
          },
          {
            "error": "403 - Access denied",
            "solution": "Verify user permissions for this resource",
            "prevention": "Check user role and permissions before accessing resources"
          },
          {
            "error": "429 - Rate limited",
            "solution": "Implement exponential backoff and reduce request frequency",
            "prevention": "Monitor request rate and implement proper throttling"
          }
        ],
        "debugging": [
          "Log full request and response for error analysis",
          "Check API key permissions and expiration",
          "Verify request format matches API documentation",
          "Test with minimal required parameters first"
        ]
      },
      "workflow": {
        "prerequisites": [
          "Valid authentication",
          "Proper permissions"
        ],
        "followUpActions": [
          "Process response data",
          "Handle any errors"
        ],
        "relatedEndpoints": [],
        "typicalWorkflow": [
          "Call GET /public/api/v1/info/offer endpoint",
          "Process response"
        ]
      },
      "testing": {
        "unitTests": [
          "Test with valid parameters",
          "Test with missing required parameters",
          "Test with invalid parameter values",
          "Test authentication failure scenarios"
        ],
        "integrationTests": [
          "Test full workflow with real data",
          "Test error handling and recovery",
          "Test rate limiting behavior",
          "Test response data validation"
        ],
        "testData": {
          "validParams": {},
          "invalidParams": []
        },
        "assertions": [
          "Response status code is 200 for valid requests",
          "Response contains expected data structure",
          "Custom metrics are present when applicable",
          "Error responses contain proper error messages"
        ]
      }
    },
    "GET /public/api/v1/info/landing": {
      "metadata": {
        "method": "GET",
        "path": "/public/api/v1/info/landing",
        "category": "info",
        "priority": 10,
        "importance": "CRITICAL",
        "hasCustomMetrics": false,
        "aiUsage": "Необходим для настройки кампаний"
      },
      "description": {
        "summary": "Получение списка лендингов",
        "detailed": "Detailed description for GET /public/api/v1/info/landing - Получение списка лендингов",
        "businessContext": "Reference data retrieval - provides lists and details of available resources for campaign configuration",
        "whenToUse": [
          "Standard info operations"
        ]
      },
      "authentication": {
        "type": "Bearer Token",
        "header": "Authorization: Bearer {binomPublic}",
        "required": true,
        "note": "Use environment variable binomPublic"
      },
      "parameters": {
        "path": [],
        "query": [
          {
            "name": "datePreset",
            "type": "string",
            "required": true,
            "description": "Date range preset for data filtering",
            "enum": [
              "today",
              "yesterday",
              "last_7_days",
              "last_30_days",
              "this_month",
              "last_month",
              "custom_time"
            ],
            "example": "last_7_days"
          },
          {
            "name": "timezone",
            "type": "string",
            "required": true,
            "description": "Timezone for date calculations",
            "example": "UTC"
          },
          {
            "name": "limit",
            "type": "integer",
            "required": false,
            "description": "Maximum number of records to return",
            "example": 100,
            "default": 100
          },
          {
            "name": "offset",
            "type": "integer",
            "required": false,
            "description": "Number of records to skip for pagination",
            "example": 0,
            "default": 0
          }
        ],
        "header": [
          {
            "name": "Authorization",
            "type": "string",
            "required": true,
            "description": "Bearer token authentication",
            "example": "Bearer your_api_key_here"
          },
          {
            "name": "Content-Type",
            "type": "string",
            "required": false,
            "description": "Content type for request body",
            "example": "application/json"
          }
        ]
      },
      "requestBody": null,
      "responses": {
        "200": {
          "description": "Success",
          "contentType": "application/json",
          "schema": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "example": {
            "message": "Success"
          }
        },
        "400": {
          "description": "Bad Request - Invalid parameters or missing required fields",
          "contentType": "application/json",
          "schema": {
            "type": "object",
            "properties": {
              "error": {
                "type": "string"
              },
              "message": {
                "type": "string"
              },
              "details": {
                "type": "object"
              }
            }
          },
          "example": {
            "error": "Validation failed",
            "message": "Field 'datePreset' is required for stats endpoints",
            "details": {
              "field": "datePreset",
              "code": "required"
            }
          }
        },
        "401": {
          "description": "Unauthorized - Invalid or missing API key",
          "contentType": "application/json",
          "example": {
            "error": "Unauthorized",
            "message": "Invalid API key or missing Authorization header"
          }
        },
        "403": {
          "description": "Forbidden - Insufficient permissions",
          "contentType": "application/json",
          "example": {
            "error": "Access denied",
            "message": "Insufficient permissions to access this resource"
          }
        },
        "404": {
          "description": "Not Found - Resource does not exist",
          "contentType": "application/json",
          "example": {
            "error": "Not found",
            "message": "Campaign with ID 999 not found"
          }
        },
        "429": {
          "description": "Too Many Requests - Rate limit exceeded",
          "contentType": "application/json",
          "example": {
            "error": "Rate limit exceeded",
            "message": "Too many requests. Please wait before making another request.",
            "retryAfter": 60
          }
        },
        "500": {
          "description": "Internal Server Error",
          "contentType": "application/json",
          "example": {
            "error": "Internal server error",
            "message": "An unexpected error occurred. Please try again later."
          }
        }
      },
      "examples": {
        "python": "import requests\nimport os\nfrom datetime import datetime\n\n# Configuration\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\ndef handle_response(response):\n    \"\"\"Handle API response with proper error handling\"\"\"\n    if response.status_code == 200:\n        return response.json()\n    elif response.status_code == 400:\n        print(f\"Bad Request: {response.json()}\")\n    elif response.status_code == 401:\n        print(\"Unauthorized: Check your API key\")\n    elif response.status_code == 403:\n        print(\"Forbidden: Insufficient permissions\")\n    elif response.status_code == 404:\n        print(\"Not Found: Resource doesn't exist\")\n    elif response.status_code == 429:\n        print(\"Rate Limited: Wait before retrying\")\n    else:\n        print(f\"Error {response.status_code}: {response.text}\")\n    return None\n\n# GET /public/api/v1/info/landing\ndef call_endpoint():\n    \"\"\"Call the GET /public/api/v1/info/landing endpoint\"\"\"\n    \n    params = {'datePreset': 'last_7_days', 'timezone': 'UTC'}\n    \n    response = requests.get(\n        f\"{BASE_URL}/public/api/v1/info/landing\",\n        headers=headers,\n        params=params\n    )\n    \n    return handle_response(response)\n\n# Usage\nif __name__ == \"__main__\":\n    result = call_endpoint()\n    print(result)\n",
        "curl": "# GET /public/api/v1/info/landing\ncurl -X GET \\\n  \"https://pierdun.com/public/api/v1/public/api/v1/info/landing\" \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Accept: application/json\"",
        "javascript": "// GET /public/api/v1/info/landing\nconst BINOM_API_KEY = process.env.BINOM_PUBLIC;\nconst BASE_URL = 'https://pierdun.com/public/api/v1';\n\nasync function callBinomAPI() {\n    const config = {\n        method: 'GET',\n        headers: {\n            'Authorization': `Bearer ${BINOM_API_KEY}`,\n            'Accept': 'application/json'\n        }\n    };\n    \n    try {\n        const response = await fetch(`${BASE_URL}/public/api/v1/info/landing`, config);\n        \n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        \n        const data = await response.json();\n        console.log('Success:', data);\n        return data;\n    } catch (error) {\n        console.error('Error:', error);\n        throw error;\n    }\n}\n\n// Usage\ncallBinomAPI()\n    .then(data => console.log(data))\n    .catch(error => console.error('Failed:', error));"
      },
      "customMetrics": {
        "available": false,
        "note": "This endpoint does not return custom metrics"
      },
      "aiInstructions": {
        "priority": "CRITICAL",
        "complexity": "LOW",
        "keyPoints": [
          "This is a CRITICAL priority endpoint",
          "Category: info operations",
          "Custom metrics: Not available",
          "Always use Bearer token authentication",
          "Handle rate limiting with exponential backoff"
        ],
        "beforeUsing": [
          "Verify API key is set in environment variables",
          "Check if datePreset and timezone are required",
          "Validate all required parameters are provided",
          "Ensure proper error handling is implemented"
        ],
        "afterUsing": [
          "Validate response structure matches expected schema",
          "Check for custom metrics if endpoint supports them",
          "Log important metrics for monitoring",
          "Handle pagination if response is truncated"
        ],
        "commonMistakes": [
          "Forgetting datePreset parameter for stats endpoints",
          "Using wrong Bearer token format",
          "Not handling 429 rate limit responses",
          "Ignoring custom metrics in optimization decisions",
          "Not validating response data before processing"
        ],
        "optimization": [
          "Cache responses when appropriate",
          "Use batch operations when available",
          "Implement retry logic with exponential backoff",
          "Monitor API usage to avoid rate limits",
          "Use appropriate date ranges to minimize data transfer"
        ],
        "customMetricsGuidance": {
          "applicable": false,
          "note": "This endpoint does not return custom metrics"
        }
      },
      "errorHandling": {
        "retryStrategy": {
          "429": {
            "action": "Exponential backoff retry",
            "initialDelay": 1,
            "maxRetries": 5,
            "backoffMultiplier": 2
          },
          "500": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 5
          },
          "502": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 10
          }
        },
        "noRetryErrors": [
          400,
          401,
          403,
          404
        ],
        "commonIssues": [
          {
            "error": "400 - Missing datePreset",
            "solution": "Add datePreset and timezone parameters to GET requests",
            "prevention": "Always validate required parameters before sending request"
          },
          {
            "error": "401 - Invalid API key",
            "solution": "Check Bearer token format and API key validity",
            "prevention": "Validate API key format before making requests"
          },
          {
            "error": "403 - Access denied",
            "solution": "Verify user permissions for this resource",
            "prevention": "Check user role and permissions before accessing resources"
          },
          {
            "error": "429 - Rate limited",
            "solution": "Implement exponential backoff and reduce request frequency",
            "prevention": "Monitor request rate and implement proper throttling"
          }
        ],
        "debugging": [
          "Log full request and response for error analysis",
          "Check API key permissions and expiration",
          "Verify request format matches API documentation",
          "Test with minimal required parameters first"
        ]
      },
      "workflow": {
        "prerequisites": [
          "Valid authentication",
          "Proper permissions"
        ],
        "followUpActions": [
          "Process response data",
          "Handle any errors"
        ],
        "relatedEndpoints": [],
        "typicalWorkflow": [
          "Call GET /public/api/v1/info/landing endpoint",
          "Process response"
        ]
      },
      "testing": {
        "unitTests": [
          "Test with valid parameters",
          "Test with missing required parameters",
          "Test with invalid parameter values",
          "Test authentication failure scenarios"
        ],
        "integrationTests": [
          "Test full workflow with real data",
          "Test error handling and recovery",
          "Test rate limiting behavior",
          "Test response data validation"
        ],
        "testData": {
          "validParams": {},
          "invalidParams": []
        },
        "assertions": [
          "Response status code is 200 for valid requests",
          "Response contains expected data structure",
          "Custom metrics are present when applicable",
          "Error responses contain proper error messages"
        ]
      }
    },
    "GET /public/api/v1/info/traffic_source": {
      "metadata": {
        "method": "GET",
        "path": "/public/api/v1/info/traffic_source",
        "category": "info",
        "priority": 11,
        "importance": "CRITICAL",
        "hasCustomMetrics": false,
        "aiUsage": "Базовая операция для настройки"
      },
      "description": {
        "summary": "Получение списка трафиксорсов",
        "detailed": "Detailed description for GET /public/api/v1/info/traffic_source - Получение списка трафиксорсов",
        "businessContext": "Reference data retrieval - provides lists and details of available resources for campaign configuration",
        "whenToUse": [
          "Standard info operations"
        ]
      },
      "authentication": {
        "type": "Bearer Token",
        "header": "Authorization: Bearer {binomPublic}",
        "required": true,
        "note": "Use environment variable binomPublic"
      },
      "parameters": {
        "path": [],
        "query": [
          {
            "name": "datePreset",
            "type": "string",
            "required": true,
            "description": "Date range preset for data filtering",
            "enum": [
              "today",
              "yesterday",
              "last_7_days",
              "last_30_days",
              "this_month",
              "last_month",
              "custom_time"
            ],
            "example": "last_7_days"
          },
          {
            "name": "timezone",
            "type": "string",
            "required": true,
            "description": "Timezone for date calculations",
            "example": "UTC"
          },
          {
            "name": "limit",
            "type": "integer",
            "required": false,
            "description": "Maximum number of records to return",
            "example": 100,
            "default": 100
          },
          {
            "name": "offset",
            "type": "integer",
            "required": false,
            "description": "Number of records to skip for pagination",
            "example": 0,
            "default": 0
          }
        ],
        "header": [
          {
            "name": "Authorization",
            "type": "string",
            "required": true,
            "description": "Bearer token authentication",
            "example": "Bearer your_api_key_here"
          },
          {
            "name": "Content-Type",
            "type": "string",
            "required": false,
            "description": "Content type for request body",
            "example": "application/json"
          }
        ]
      },
      "requestBody": null,
      "responses": {
        "200": {
          "description": "Success",
          "contentType": "application/json",
          "schema": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "example": {
            "message": "Success"
          }
        },
        "400": {
          "description": "Bad Request - Invalid parameters or missing required fields",
          "contentType": "application/json",
          "schema": {
            "type": "object",
            "properties": {
              "error": {
                "type": "string"
              },
              "message": {
                "type": "string"
              },
              "details": {
                "type": "object"
              }
            }
          },
          "example": {
            "error": "Validation failed",
            "message": "Field 'datePreset' is required for stats endpoints",
            "details": {
              "field": "datePreset",
              "code": "required"
            }
          }
        },
        "401": {
          "description": "Unauthorized - Invalid or missing API key",
          "contentType": "application/json",
          "example": {
            "error": "Unauthorized",
            "message": "Invalid API key or missing Authorization header"
          }
        },
        "403": {
          "description": "Forbidden - Insufficient permissions",
          "contentType": "application/json",
          "example": {
            "error": "Access denied",
            "message": "Insufficient permissions to access this resource"
          }
        },
        "404": {
          "description": "Not Found - Resource does not exist",
          "contentType": "application/json",
          "example": {
            "error": "Not found",
            "message": "Campaign with ID 999 not found"
          }
        },
        "429": {
          "description": "Too Many Requests - Rate limit exceeded",
          "contentType": "application/json",
          "example": {
            "error": "Rate limit exceeded",
            "message": "Too many requests. Please wait before making another request.",
            "retryAfter": 60
          }
        },
        "500": {
          "description": "Internal Server Error",
          "contentType": "application/json",
          "example": {
            "error": "Internal server error",
            "message": "An unexpected error occurred. Please try again later."
          }
        }
      },
      "examples": {
        "python": "import requests\nimport os\nfrom datetime import datetime\n\n# Configuration\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\ndef handle_response(response):\n    \"\"\"Handle API response with proper error handling\"\"\"\n    if response.status_code == 200:\n        return response.json()\n    elif response.status_code == 400:\n        print(f\"Bad Request: {response.json()}\")\n    elif response.status_code == 401:\n        print(\"Unauthorized: Check your API key\")\n    elif response.status_code == 403:\n        print(\"Forbidden: Insufficient permissions\")\n    elif response.status_code == 404:\n        print(\"Not Found: Resource doesn't exist\")\n    elif response.status_code == 429:\n        print(\"Rate Limited: Wait before retrying\")\n    else:\n        print(f\"Error {response.status_code}: {response.text}\")\n    return None\n\n# GET /public/api/v1/info/traffic_source\ndef call_endpoint():\n    \"\"\"Call the GET /public/api/v1/info/traffic_source endpoint\"\"\"\n    \n    params = {'datePreset': 'last_7_days', 'timezone': 'UTC'}\n    \n    response = requests.get(\n        f\"{BASE_URL}/public/api/v1/info/traffic_source\",\n        headers=headers,\n        params=params\n    )\n    \n    return handle_response(response)\n\n# Usage\nif __name__ == \"__main__\":\n    result = call_endpoint()\n    print(result)\n",
        "curl": "# GET /public/api/v1/info/traffic_source\ncurl -X GET \\\n  \"https://pierdun.com/public/api/v1/public/api/v1/info/traffic_source\" \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Accept: application/json\"",
        "javascript": "// GET /public/api/v1/info/traffic_source\nconst BINOM_API_KEY = process.env.BINOM_PUBLIC;\nconst BASE_URL = 'https://pierdun.com/public/api/v1';\n\nasync function callBinomAPI() {\n    const config = {\n        method: 'GET',\n        headers: {\n            'Authorization': `Bearer ${BINOM_API_KEY}`,\n            'Accept': 'application/json'\n        }\n    };\n    \n    try {\n        const response = await fetch(`${BASE_URL}/public/api/v1/info/traffic_source`, config);\n        \n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        \n        const data = await response.json();\n        console.log('Success:', data);\n        return data;\n    } catch (error) {\n        console.error('Error:', error);\n        throw error;\n    }\n}\n\n// Usage\ncallBinomAPI()\n    .then(data => console.log(data))\n    .catch(error => console.error('Failed:', error));"
      },
      "customMetrics": {
        "available": false,
        "note": "This endpoint does not return custom metrics"
      },
      "aiInstructions": {
        "priority": "CRITICAL",
        "complexity": "LOW",
        "keyPoints": [
          "This is a CRITICAL priority endpoint",
          "Category: info operations",
          "Custom metrics: Not available",
          "Always use Bearer token authentication",
          "Handle rate limiting with exponential backoff"
        ],
        "beforeUsing": [
          "Verify API key is set in environment variables",
          "Check if datePreset and timezone are required",
          "Validate all required parameters are provided",
          "Ensure proper error handling is implemented"
        ],
        "afterUsing": [
          "Validate response structure matches expected schema",
          "Check for custom metrics if endpoint supports them",
          "Log important metrics for monitoring",
          "Handle pagination if response is truncated"
        ],
        "commonMistakes": [
          "Forgetting datePreset parameter for stats endpoints",
          "Using wrong Bearer token format",
          "Not handling 429 rate limit responses",
          "Ignoring custom metrics in optimization decisions",
          "Not validating response data before processing"
        ],
        "optimization": [
          "Cache responses when appropriate",
          "Use batch operations when available",
          "Implement retry logic with exponential backoff",
          "Monitor API usage to avoid rate limits",
          "Use appropriate date ranges to minimize data transfer"
        ],
        "customMetricsGuidance": {
          "applicable": false,
          "note": "This endpoint does not return custom metrics"
        }
      },
      "errorHandling": {
        "retryStrategy": {
          "429": {
            "action": "Exponential backoff retry",
            "initialDelay": 1,
            "maxRetries": 5,
            "backoffMultiplier": 2
          },
          "500": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 5
          },
          "502": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 10
          }
        },
        "noRetryErrors": [
          400,
          401,
          403,
          404
        ],
        "commonIssues": [
          {
            "error": "400 - Missing datePreset",
            "solution": "Add datePreset and timezone parameters to GET requests",
            "prevention": "Always validate required parameters before sending request"
          },
          {
            "error": "401 - Invalid API key",
            "solution": "Check Bearer token format and API key validity",
            "prevention": "Validate API key format before making requests"
          },
          {
            "error": "403 - Access denied",
            "solution": "Verify user permissions for this resource",
            "prevention": "Check user role and permissions before accessing resources"
          },
          {
            "error": "429 - Rate limited",
            "solution": "Implement exponential backoff and reduce request frequency",
            "prevention": "Monitor request rate and implement proper throttling"
          }
        ],
        "debugging": [
          "Log full request and response for error analysis",
          "Check API key permissions and expiration",
          "Verify request format matches API documentation",
          "Test with minimal required parameters first"
        ]
      },
      "workflow": {
        "prerequisites": [
          "Valid authentication",
          "Proper permissions"
        ],
        "followUpActions": [
          "Process response data",
          "Handle any errors"
        ],
        "relatedEndpoints": [],
        "typicalWorkflow": [
          "Call GET /public/api/v1/info/traffic_source endpoint",
          "Process response"
        ]
      },
      "testing": {
        "unitTests": [
          "Test with valid parameters",
          "Test with missing required parameters",
          "Test with invalid parameter values",
          "Test authentication failure scenarios"
        ],
        "integrationTests": [
          "Test full workflow with real data",
          "Test error handling and recovery",
          "Test rate limiting behavior",
          "Test response data validation"
        ],
        "testData": {
          "validParams": {},
          "invalidParams": []
        },
        "assertions": [
          "Response status code is 200 for valid requests",
          "Response contains expected data structure",
          "Custom metrics are present when applicable",
          "Error responses contain proper error messages"
        ]
      }
    },
    "GET /public/api/v1/report/{page}": {
      "metadata": {
        "method": "GET",
        "path": "/public/api/v1/report/{page}",
        "category": "report",
        "priority": 12,
        "importance": "CRITICAL",
        "hasCustomMetrics": true,
        "aiUsage": "Ключевой для детального анализа"
      },
      "description": {
        "summary": "Основной эндпоинт для создания отчетов",
        "detailed": "Detailed description for GET /public/api/v1/report/{page} - Основной эндпоинт для создания отчетов",
        "businessContext": "Advanced analytics - creates detailed reports with custom groupings and filtering for business intelligence",
        "whenToUse": [
          "Standard report operations"
        ]
      },
      "authentication": {
        "type": "Bearer Token",
        "header": "Authorization: Bearer {binomPublic}",
        "required": true,
        "note": "Use environment variable binomPublic"
      },
      "parameters": {
        "path": [],
        "query": [
          {
            "name": "datePreset",
            "type": "string",
            "required": true,
            "description": "Date range preset for data filtering",
            "enum": [
              "today",
              "yesterday",
              "last_7_days",
              "last_30_days",
              "this_month",
              "last_month",
              "custom_time"
            ],
            "example": "last_7_days"
          },
          {
            "name": "timezone",
            "type": "string",
            "required": true,
            "description": "Timezone for date calculations",
            "example": "UTC"
          },
          {
            "name": "limit",
            "type": "integer",
            "required": false,
            "description": "Maximum number of records to return",
            "example": 100,
            "default": 100
          },
          {
            "name": "offset",
            "type": "integer",
            "required": false,
            "description": "Number of records to skip for pagination",
            "example": 0,
            "default": 0
          }
        ],
        "header": [
          {
            "name": "Authorization",
            "type": "string",
            "required": true,
            "description": "Bearer token authentication",
            "example": "Bearer your_api_key_here"
          },
          {
            "name": "Content-Type",
            "type": "string",
            "required": false,
            "description": "Content type for request body",
            "example": "application/json"
          }
        ]
      },
      "requestBody": null,
      "responses": {
        "200": {
          "description": "Success",
          "contentType": "application/json",
          "schema": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "example": {
            "message": "Success"
          }
        },
        "400": {
          "description": "Bad Request - Invalid parameters or missing required fields",
          "contentType": "application/json",
          "schema": {
            "type": "object",
            "properties": {
              "error": {
                "type": "string"
              },
              "message": {
                "type": "string"
              },
              "details": {
                "type": "object"
              }
            }
          },
          "example": {
            "error": "Validation failed",
            "message": "Field 'datePreset' is required for stats endpoints",
            "details": {
              "field": "datePreset",
              "code": "required"
            }
          }
        },
        "401": {
          "description": "Unauthorized - Invalid or missing API key",
          "contentType": "application/json",
          "example": {
            "error": "Unauthorized",
            "message": "Invalid API key or missing Authorization header"
          }
        },
        "403": {
          "description": "Forbidden - Insufficient permissions",
          "contentType": "application/json",
          "example": {
            "error": "Access denied",
            "message": "Insufficient permissions to access this resource"
          }
        },
        "404": {
          "description": "Not Found - Resource does not exist",
          "contentType": "application/json",
          "example": {
            "error": "Not found",
            "message": "Campaign with ID 999 not found"
          }
        },
        "429": {
          "description": "Too Many Requests - Rate limit exceeded",
          "contentType": "application/json",
          "example": {
            "error": "Rate limit exceeded",
            "message": "Too many requests. Please wait before making another request.",
            "retryAfter": 60
          }
        },
        "500": {
          "description": "Internal Server Error",
          "contentType": "application/json",
          "example": {
            "error": "Internal server error",
            "message": "An unexpected error occurred. Please try again later."
          }
        }
      },
      "examples": {
        "python": "import requests\nimport os\nfrom datetime import datetime\n\n# Configuration\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\ndef handle_response(response):\n    \"\"\"Handle API response with proper error handling\"\"\"\n    if response.status_code == 200:\n        return response.json()\n    elif response.status_code == 400:\n        print(f\"Bad Request: {response.json()}\")\n    elif response.status_code == 401:\n        print(\"Unauthorized: Check your API key\")\n    elif response.status_code == 403:\n        print(\"Forbidden: Insufficient permissions\")\n    elif response.status_code == 404:\n        print(\"Not Found: Resource doesn't exist\")\n    elif response.status_code == 429:\n        print(\"Rate Limited: Wait before retrying\")\n    else:\n        print(f\"Error {response.status_code}: {response.text}\")\n    return None\n\n# GET /public/api/v1/report/{page}\ndef call_endpoint():\n    \"\"\"Call the GET /public/api/v1/report/{page} endpoint\"\"\"\n    \n    params = {'datePreset': 'last_7_days', 'timezone': 'UTC'}\n    \n    response = requests.get(\n        f\"{BASE_URL}/public/api/v1/report/{page}\",\n        headers=headers,\n        params=params\n    )\n    \n    return handle_response(response)\n\n# Usage\nif __name__ == \"__main__\":\n    result = call_endpoint()\n    print(result)\n",
        "curl": "# GET /public/api/v1/report/{page}\ncurl -X GET \\\n  \"https://pierdun.com/public/api/v1/public/api/v1/report/{page}\" \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Accept: application/json\"",
        "javascript": "// GET /public/api/v1/report/{page}\nconst BINOM_API_KEY = process.env.BINOM_PUBLIC;\nconst BASE_URL = 'https://pierdun.com/public/api/v1';\n\nasync function callBinomAPI() {\n    const config = {\n        method: 'GET',\n        headers: {\n            'Authorization': `Bearer ${BINOM_API_KEY}`,\n            'Accept': 'application/json'\n        }\n    };\n    \n    try {\n        const response = await fetch(`${BASE_URL}/public/api/v1/report/{page}`, config);\n        \n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        \n        const data = await response.json();\n        console.log('Success:', data);\n        return data;\n    } catch (error) {\n        console.error('Error:', error);\n        throw error;\n    }\n}\n\n// Usage\ncallBinomAPI()\n    .then(data => console.log(data))\n    .catch(error => console.error('Failed:', error));"
      },
      "customMetrics": {
        "available": true,
        "metrics": [
          {
            "name": "eCPT",
            "fullName": "Effective Cost Per Trial",
            "description": "Average cost to acquire one trial subscription",
            "calculation": "total_cost / trials",
            "type": "currency",
            "importance": "CRITICAL",
            "aiNote": "Key metric for trial-based offers optimization. Lower eCPT indicates better campaign efficiency.",
            "troubleshooting": [
              "If eCPT is null, check if trials are configured in campaign",
              "High eCPT may indicate poor traffic quality or landing page issues",
              "Compare eCPT across different traffic sources to identify best performers"
            ]
          },
          {
            "name": "eCPB",
            "fullName": "Effective Cost Per Buyout",
            "description": "Average cost to acquire one full purchase/subscription",
            "calculation": "total_cost / buyouts",
            "type": "currency",
            "importance": "CRITICAL",
            "aiNote": "Primary ROI metric for subscription offers. Must be lower than payout for profitability.",
            "troubleshooting": [
              "If eCPB is null, check if buyouts are configured in campaign",
              "eCPB higher than payout indicates unprofitable campaign",
              "Monitor eCPB trends to detect performance degradation"
            ]
          },
          {
            "name": "trials",
            "fullName": "Trial Conversions",
            "description": "Number of trial subscriptions acquired",
            "type": "integer",
            "importance": "HIGH",
            "aiNote": "Intermediate conversion metric. Higher trials indicate good initial interest.",
            "troubleshooting": [
              "Low trials may indicate traffic quality issues",
              "High trials but low buyouts suggest offer or funnel problems",
              "Track trial-to-buyout conversion rate for optimization"
            ]
          },
          {
            "name": "buyouts",
            "fullName": "Buyout Conversions",
            "description": "Number of full purchases/subscriptions",
            "type": "integer",
            "importance": "CRITICAL",
            "aiNote": "Final conversion metric. Directly impacts revenue and ROI calculations.",
            "troubleshooting": [
              "Zero buyouts indicate serious funnel issues",
              "Low buyout rate from trials suggests billing or offer problems",
              "Monitor buyout trends for early problem detection"
            ]
          }
        ],
        "howToFind": {
          "webInterface": "Settings -> Columns in Binom interface",
          "apiAccess": "Available in stats and report endpoints response",
          "configuration": "Must be configured in campaign postback settings"
        },
        "aiInstructions": {
          "rule": "ALWAYS ask operator for clarification if custom metric values seem unexpected",
          "when": [
            "Custom metric is null or zero unexpectedly",
            "Metric values don't align with campaign performance",
            "Unfamiliar custom metrics appear in response"
          ],
          "howToAsk": "What does [metric_name] represent in your campaign setup?",
          "examples": [
            "If eCPT is $50 but expected $5, ask: 'The eCPT seems high at $50. Is this expected for this campaign type?'",
            "If trials are 0 but clicks are high, ask: 'I see clicks but no trials. Are trial conversions configured correctly?'"
          ]
        }
      },
      "aiInstructions": {
        "priority": "CRITICAL",
        "complexity": "MEDIUM",
        "keyPoints": [
          "This is a CRITICAL priority endpoint",
          "Category: report operations",
          "Custom metrics: Available",
          "Always use Bearer token authentication",
          "Handle rate limiting with exponential backoff"
        ],
        "beforeUsing": [
          "Verify API key is set in environment variables",
          "Check if datePreset and timezone are required",
          "Validate all required parameters are provided",
          "Ensure proper error handling is implemented"
        ],
        "afterUsing": [
          "Validate response structure matches expected schema",
          "Check for custom metrics if endpoint supports them",
          "Log important metrics for monitoring",
          "Handle pagination if response is truncated"
        ],
        "commonMistakes": [
          "Forgetting datePreset parameter for stats endpoints",
          "Using wrong Bearer token format",
          "Not handling 429 rate limit responses",
          "Ignoring custom metrics in optimization decisions",
          "Not validating response data before processing"
        ],
        "optimization": [
          "Cache responses when appropriate",
          "Use batch operations when available",
          "Implement retry logic with exponential backoff",
          "Monitor API usage to avoid rate limits",
          "Use appropriate date ranges to minimize data transfer"
        ],
        "customMetricsGuidance": {
          "applicable": true,
          "criticalRule": "ALWAYS clarify unknown or unexpected custom metrics with operator",
          "whenToAsk": [
            "Custom metric value is null when data exists",
            "Metric values seem inconsistent with campaign performance",
            "Unfamiliar custom metric names appear",
            "Metric calculations don't match expected formulas"
          ],
          "howToAsk": [
            "Be specific: 'I see eCPT of $X, is this expected for this campaign type?'",
            "Provide context: 'Campaign has Y clicks but Z trials, should I investigate?'",
            "Ask for clarification: 'What does [custom_metric] represent in your setup?'"
          ],
          "neverAssume": [
            "Don't assume metric meanings without confirmation",
            "Don't ignore null values without asking",
            "Don't make optimization decisions on unclear metrics",
            "Don't extrapolate metrics without understanding calculation"
          ],
          "bestPractices": [
            "Document all custom metrics and their meanings",
            "Validate metric values against business logic",
            "Ask for acceptable ranges for each metric",
            "Confirm optimization goals before making changes"
          ]
        }
      },
      "errorHandling": {
        "retryStrategy": {
          "429": {
            "action": "Exponential backoff retry",
            "initialDelay": 1,
            "maxRetries": 5,
            "backoffMultiplier": 2
          },
          "500": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 5
          },
          "502": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 10
          }
        },
        "noRetryErrors": [
          400,
          401,
          403,
          404
        ],
        "commonIssues": [
          {
            "error": "400 - Missing datePreset",
            "solution": "Add datePreset and timezone parameters to GET requests",
            "prevention": "Always validate required parameters before sending request"
          },
          {
            "error": "401 - Invalid API key",
            "solution": "Check Bearer token format and API key validity",
            "prevention": "Validate API key format before making requests"
          },
          {
            "error": "403 - Access denied",
            "solution": "Verify user permissions for this resource",
            "prevention": "Check user role and permissions before accessing resources"
          },
          {
            "error": "429 - Rate limited",
            "solution": "Implement exponential backoff and reduce request frequency",
            "prevention": "Monitor request rate and implement proper throttling"
          }
        ],
        "debugging": [
          "Log full request and response for error analysis",
          "Check API key permissions and expiration",
          "Verify request format matches API documentation",
          "Test with minimal required parameters first"
        ]
      },
      "workflow": {
        "prerequisites": [
          "Valid authentication",
          "Proper permissions"
        ],
        "followUpActions": [
          "Process response data",
          "Handle any errors"
        ],
        "relatedEndpoints": [],
        "typicalWorkflow": [
          "Call GET /public/api/v1/report/{page} endpoint",
          "Process response"
        ]
      },
      "testing": {
        "unitTests": [
          "Test with valid parameters",
          "Test with missing required parameters",
          "Test with invalid parameter values",
          "Test authentication failure scenarios"
        ],
        "integrationTests": [
          "Test full workflow with real data",
          "Test error handling and recovery",
          "Test rate limiting behavior",
          "Test response data validation"
        ],
        "testData": {
          "validParams": {},
          "invalidParams": []
        },
        "assertions": [
          "Response status code is 200 for valid requests",
          "Response contains expected data structure",
          "Custom metrics are present when applicable",
          "Error responses contain proper error messages"
        ]
      }
    },
    "POST /public/api/v1/affiliate_network": {
      "metadata": {
        "method": "POST",
        "path": "/public/api/v1/affiliate_network",
        "category": "affiliate_network",
        "priority": 13,
        "importance": "CRITICAL",
        "hasCustomMetrics": false,
        "aiUsage": "Первый шаг настройки трекинга"
      },
      "description": {
        "summary": "Создание партнерских сетей",
        "detailed": "Detailed description for POST /public/api/v1/affiliate_network - Создание партнерских сетей",
        "businessContext": "Partner network management - handles postback URLs, payout configurations, and network integrations",
        "whenToUse": [
          "Standard affiliate_network operations"
        ]
      },
      "authentication": {
        "type": "Bearer Token",
        "header": "Authorization: Bearer {binomPublic}",
        "required": true,
        "note": "Use environment variable binomPublic"
      },
      "parameters": {
        "path": [],
        "query": [],
        "header": [
          {
            "name": "Authorization",
            "type": "string",
            "required": true,
            "description": "Bearer token authentication",
            "example": "Bearer your_api_key_here"
          },
          {
            "name": "Content-Type",
            "type": "string",
            "required": true,
            "description": "Content type for request body",
            "example": "application/json"
          }
        ]
      },
      "requestBody": {
        "required": true,
        "contentType": "application/json",
        "schema": {
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "type": "string",
              "description": "Affiliate network name",
              "example": "Premium Network"
            },
            "offerUrlTemplate": {
              "type": "string",
              "description": "Template for offer URLs",
              "example": "https://network.com/offer?id={offer_id}&sub1={click_id}"
            },
            "postbackUrl": {
              "type": "string",
              "description": "Postback URL for conversions",
              "example": "https://binom.com/postback?campaign_id={campaign_id}&payout={payout}"
            },
            "postbackIpWhitelist": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "IP addresses allowed for postbacks",
              "example": [
                "192.168.1.1",
                "10.0.0.1"
              ]
            }
          }
        },
        "example": {
          "name": "MaxBounty Network",
          "offerUrlTemplate": "https://maxbounty.com/click.php?id={offer_id}&sub1={click_id}",
          "postbackUrl": "https://binom.com/postback?campaign_id={campaign_id}&payout={payout}",
          "postbackIpWhitelist": [
            "192.168.1.100",
            "10.0.0.50"
          ]
        }
      },
      "responses": {
        "200": {
          "description": "Success",
          "contentType": "application/json",
          "schema": {
            "type": "object"
          },
          "example": {
            "message": "Success"
          }
        },
        "400": {
          "description": "Bad Request - Invalid parameters or missing required fields",
          "contentType": "application/json",
          "schema": {
            "type": "object",
            "properties": {
              "error": {
                "type": "string"
              },
              "message": {
                "type": "string"
              },
              "details": {
                "type": "object"
              }
            }
          },
          "example": {
            "error": "Validation failed",
            "message": "Field 'datePreset' is required for stats endpoints",
            "details": {
              "field": "datePreset",
              "code": "required"
            }
          }
        },
        "401": {
          "description": "Unauthorized - Invalid or missing API key",
          "contentType": "application/json",
          "example": {
            "error": "Unauthorized",
            "message": "Invalid API key or missing Authorization header"
          }
        },
        "403": {
          "description": "Forbidden - Insufficient permissions",
          "contentType": "application/json",
          "example": {
            "error": "Access denied",
            "message": "Insufficient permissions to access this resource"
          }
        },
        "404": {
          "description": "Not Found - Resource does not exist",
          "contentType": "application/json",
          "example": {
            "error": "Not found",
            "message": "Campaign with ID 999 not found"
          }
        },
        "429": {
          "description": "Too Many Requests - Rate limit exceeded",
          "contentType": "application/json",
          "example": {
            "error": "Rate limit exceeded",
            "message": "Too many requests. Please wait before making another request.",
            "retryAfter": 60
          }
        },
        "500": {
          "description": "Internal Server Error",
          "contentType": "application/json",
          "example": {
            "error": "Internal server error",
            "message": "An unexpected error occurred. Please try again later."
          }
        }
      },
      "examples": {
        "python": "import requests\nimport os\nfrom datetime import datetime\n\n# Configuration\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\ndef handle_response(response):\n    \"\"\"Handle API response with proper error handling\"\"\"\n    if response.status_code == 200:\n        return response.json()\n    elif response.status_code == 400:\n        print(f\"Bad Request: {response.json()}\")\n    elif response.status_code == 401:\n        print(\"Unauthorized: Check your API key\")\n    elif response.status_code == 403:\n        print(\"Forbidden: Insufficient permissions\")\n    elif response.status_code == 404:\n        print(\"Not Found: Resource doesn't exist\")\n    elif response.status_code == 429:\n        print(\"Rate Limited: Wait before retrying\")\n    else:\n        print(f\"Error {response.status_code}: {response.text}\")\n    return None\n\n# POST /public/api/v1/affiliate_network\ndef call_endpoint():\n    \"\"\"Call the POST /public/api/v1/affiliate_network endpoint\"\"\"\n    \n    \n    \n    response = requests.post(\n        f\"{BASE_URL}/public/api/v1/affiliate_network\",\n        headers=headers\n        \n    )\n    \n    return handle_response(response)\n\n# Usage\nif __name__ == \"__main__\":\n    result = call_endpoint()\n    print(result)\n",
        "curl": "# POST /public/api/v1/affiliate_network\ncurl -X POST \\\n  \"https://pierdun.com/public/api/v1/public/api/v1/affiliate_network\" \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Accept: application/json\" \\\n  -H \"Content-Type: application/json\"",
        "javascript": "// POST /public/api/v1/affiliate_network\nconst BINOM_API_KEY = process.env.BINOM_PUBLIC;\nconst BASE_URL = 'https://pierdun.com/public/api/v1';\n\nasync function callBinomAPI() {\n    const config = {\n        method: 'POST',\n        headers: {\n            'Authorization': `Bearer ${BINOM_API_KEY}`,\n            'Accept': 'application/json'\n        }\n    };\n    \n    try {\n        const response = await fetch(`${BASE_URL}/public/api/v1/affiliate_network`, config);\n        \n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        \n        const data = await response.json();\n        console.log('Success:', data);\n        return data;\n    } catch (error) {\n        console.error('Error:', error);\n        throw error;\n    }\n}\n\n// Usage\ncallBinomAPI()\n    .then(data => console.log(data))\n    .catch(error => console.error('Failed:', error));"
      },
      "customMetrics": {
        "available": false,
        "note": "This endpoint does not return custom metrics"
      },
      "aiInstructions": {
        "priority": "CRITICAL",
        "complexity": "LOW",
        "keyPoints": [
          "This is a CRITICAL priority endpoint",
          "Category: affiliate_network operations",
          "Custom metrics: Not available",
          "Always use Bearer token authentication",
          "Handle rate limiting with exponential backoff"
        ],
        "beforeUsing": [
          "Verify API key is set in environment variables",
          "Check if datePreset and timezone are required",
          "Validate all required parameters are provided",
          "Ensure proper error handling is implemented"
        ],
        "afterUsing": [
          "Validate response structure matches expected schema",
          "Check for custom metrics if endpoint supports them",
          "Log important metrics for monitoring",
          "Handle pagination if response is truncated"
        ],
        "commonMistakes": [
          "Forgetting datePreset parameter for stats endpoints",
          "Using wrong Bearer token format",
          "Not handling 429 rate limit responses",
          "Ignoring custom metrics in optimization decisions",
          "Not validating response data before processing"
        ],
        "optimization": [
          "Cache responses when appropriate",
          "Use batch operations when available",
          "Implement retry logic with exponential backoff",
          "Monitor API usage to avoid rate limits",
          "Use appropriate date ranges to minimize data transfer"
        ],
        "customMetricsGuidance": {
          "applicable": false,
          "note": "This endpoint does not return custom metrics"
        }
      },
      "errorHandling": {
        "retryStrategy": {
          "429": {
            "action": "Exponential backoff retry",
            "initialDelay": 1,
            "maxRetries": 5,
            "backoffMultiplier": 2
          },
          "500": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 5
          },
          "502": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 10
          }
        },
        "noRetryErrors": [
          400,
          401,
          403,
          404
        ],
        "commonIssues": [
          {
            "error": "400 - Missing datePreset",
            "solution": "Add datePreset and timezone parameters to GET requests",
            "prevention": "Always validate required parameters before sending request"
          },
          {
            "error": "401 - Invalid API key",
            "solution": "Check Bearer token format and API key validity",
            "prevention": "Validate API key format before making requests"
          },
          {
            "error": "403 - Access denied",
            "solution": "Verify user permissions for this resource",
            "prevention": "Check user role and permissions before accessing resources"
          },
          {
            "error": "429 - Rate limited",
            "solution": "Implement exponential backoff and reduce request frequency",
            "prevention": "Monitor request rate and implement proper throttling"
          }
        ],
        "debugging": [
          "Log full request and response for error analysis",
          "Check API key permissions and expiration",
          "Verify request format matches API documentation",
          "Test with minimal required parameters first"
        ]
      },
      "workflow": {
        "prerequisites": [
          "Valid authentication",
          "Proper permissions"
        ],
        "followUpActions": [
          "Process response data",
          "Handle any errors"
        ],
        "relatedEndpoints": [],
        "typicalWorkflow": [
          "Call POST /public/api/v1/affiliate_network endpoint",
          "Process response"
        ]
      },
      "testing": {
        "unitTests": [
          "Test with valid parameters",
          "Test with missing required parameters",
          "Test with invalid parameter values",
          "Test authentication failure scenarios"
        ],
        "integrationTests": [
          "Test full workflow with real data",
          "Test error handling and recovery",
          "Test rate limiting behavior",
          "Test response data validation"
        ],
        "testData": {
          "validParams": {},
          "invalidParams": []
        },
        "assertions": [
          "Response status code is 200 for valid requests",
          "Response contains expected data structure",
          "Custom metrics are present when applicable",
          "Error responses contain proper error messages"
        ]
      }
    },
    "GET /public/api/v1/affiliate_network/{id}": {
      "metadata": {
        "method": "GET",
        "path": "/public/api/v1/affiliate_network/{id}",
        "category": "affiliate_network",
        "priority": 14,
        "importance": "CRITICAL",
        "hasCustomMetrics": false,
        "aiUsage": "Необходим для управления сетями"
      },
      "description": {
        "summary": "Получение конфигурации партнерской сети",
        "detailed": "Detailed description for GET /public/api/v1/affiliate_network/{id} - Получение конфигурации партнерской сети",
        "businessContext": "Partner network management - handles postback URLs, payout configurations, and network integrations",
        "whenToUse": [
          "Standard affiliate_network operations"
        ]
      },
      "authentication": {
        "type": "Bearer Token",
        "header": "Authorization: Bearer {binomPublic}",
        "required": true,
        "note": "Use environment variable binomPublic"
      },
      "parameters": {
        "path": [
          {
            "name": "id",
            "type": "integer",
            "required": true,
            "description": "Unique identifier of the affiliate_network",
            "example": 123
          }
        ],
        "query": [],
        "header": [
          {
            "name": "Authorization",
            "type": "string",
            "required": true,
            "description": "Bearer token authentication",
            "example": "Bearer your_api_key_here"
          },
          {
            "name": "Content-Type",
            "type": "string",
            "required": false,
            "description": "Content type for request body",
            "example": "application/json"
          }
        ]
      },
      "requestBody": null,
      "responses": {
        "200": {
          "description": "Success",
          "contentType": "application/json",
          "schema": {
            "type": "object"
          },
          "example": {
            "message": "Success"
          }
        },
        "400": {
          "description": "Bad Request - Invalid parameters or missing required fields",
          "contentType": "application/json",
          "schema": {
            "type": "object",
            "properties": {
              "error": {
                "type": "string"
              },
              "message": {
                "type": "string"
              },
              "details": {
                "type": "object"
              }
            }
          },
          "example": {
            "error": "Validation failed",
            "message": "Field 'datePreset' is required for stats endpoints",
            "details": {
              "field": "datePreset",
              "code": "required"
            }
          }
        },
        "401": {
          "description": "Unauthorized - Invalid or missing API key",
          "contentType": "application/json",
          "example": {
            "error": "Unauthorized",
            "message": "Invalid API key or missing Authorization header"
          }
        },
        "403": {
          "description": "Forbidden - Insufficient permissions",
          "contentType": "application/json",
          "example": {
            "error": "Access denied",
            "message": "Insufficient permissions to access this resource"
          }
        },
        "404": {
          "description": "Not Found - Resource does not exist",
          "contentType": "application/json",
          "example": {
            "error": "Not found",
            "message": "Campaign with ID 999 not found"
          }
        },
        "429": {
          "description": "Too Many Requests - Rate limit exceeded",
          "contentType": "application/json",
          "example": {
            "error": "Rate limit exceeded",
            "message": "Too many requests. Please wait before making another request.",
            "retryAfter": 60
          }
        },
        "500": {
          "description": "Internal Server Error",
          "contentType": "application/json",
          "example": {
            "error": "Internal server error",
            "message": "An unexpected error occurred. Please try again later."
          }
        }
      },
      "examples": {
        "python": "import requests\nimport os\nfrom datetime import datetime\n\n# Configuration\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\ndef handle_response(response):\n    \"\"\"Handle API response with proper error handling\"\"\"\n    if response.status_code == 200:\n        return response.json()\n    elif response.status_code == 400:\n        print(f\"Bad Request: {response.json()}\")\n    elif response.status_code == 401:\n        print(\"Unauthorized: Check your API key\")\n    elif response.status_code == 403:\n        print(\"Forbidden: Insufficient permissions\")\n    elif response.status_code == 404:\n        print(\"Not Found: Resource doesn't exist\")\n    elif response.status_code == 429:\n        print(\"Rate Limited: Wait before retrying\")\n    else:\n        print(f\"Error {response.status_code}: {response.text}\")\n    return None\n\n# GET /public/api/v1/affiliate_network/{id}\ndef call_endpoint():\n    \"\"\"Call the GET /public/api/v1/affiliate_network/{id} endpoint\"\"\"\n    \n    params = {'datePreset': 'last_7_days', 'timezone': 'UTC'}\n    \n    response = requests.get(\n        f\"{BASE_URL}/public/api/v1/affiliate_network/123\",\n        headers=headers,\n        params=params\n    )\n    \n    return handle_response(response)\n\n# Usage\nif __name__ == \"__main__\":\n    result = call_endpoint()\n    print(result)\n",
        "curl": "# GET /public/api/v1/affiliate_network/{id}\ncurl -X GET \\\n  \"https://pierdun.com/public/api/v1/public/api/v1/affiliate_network/123\" \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Accept: application/json\"",
        "javascript": "// GET /public/api/v1/affiliate_network/{id}\nconst BINOM_API_KEY = process.env.BINOM_PUBLIC;\nconst BASE_URL = 'https://pierdun.com/public/api/v1';\n\nasync function callBinomAPI() {\n    const config = {\n        method: 'GET',\n        headers: {\n            'Authorization': `Bearer ${BINOM_API_KEY}`,\n            'Accept': 'application/json'\n        }\n    };\n    \n    try {\n        const response = await fetch(`${BASE_URL}/public/api/v1/affiliate_network/123`, config);\n        \n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        \n        const data = await response.json();\n        console.log('Success:', data);\n        return data;\n    } catch (error) {\n        console.error('Error:', error);\n        throw error;\n    }\n}\n\n// Usage\ncallBinomAPI()\n    .then(data => console.log(data))\n    .catch(error => console.error('Failed:', error));"
      },
      "customMetrics": {
        "available": false,
        "note": "This endpoint does not return custom metrics"
      },
      "aiInstructions": {
        "priority": "CRITICAL",
        "complexity": "LOW",
        "keyPoints": [
          "This is a CRITICAL priority endpoint",
          "Category: affiliate_network operations",
          "Custom metrics: Not available",
          "Always use Bearer token authentication",
          "Handle rate limiting with exponential backoff"
        ],
        "beforeUsing": [
          "Verify API key is set in environment variables",
          "Check if datePreset and timezone are required",
          "Validate all required parameters are provided",
          "Ensure proper error handling is implemented"
        ],
        "afterUsing": [
          "Validate response structure matches expected schema",
          "Check for custom metrics if endpoint supports them",
          "Log important metrics for monitoring",
          "Handle pagination if response is truncated"
        ],
        "commonMistakes": [
          "Forgetting datePreset parameter for stats endpoints",
          "Using wrong Bearer token format",
          "Not handling 429 rate limit responses",
          "Ignoring custom metrics in optimization decisions",
          "Not validating response data before processing"
        ],
        "optimization": [
          "Cache responses when appropriate",
          "Use batch operations when available",
          "Implement retry logic with exponential backoff",
          "Monitor API usage to avoid rate limits",
          "Use appropriate date ranges to minimize data transfer"
        ],
        "customMetricsGuidance": {
          "applicable": false,
          "note": "This endpoint does not return custom metrics"
        }
      },
      "errorHandling": {
        "retryStrategy": {
          "429": {
            "action": "Exponential backoff retry",
            "initialDelay": 1,
            "maxRetries": 5,
            "backoffMultiplier": 2
          },
          "500": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 5
          },
          "502": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 10
          }
        },
        "noRetryErrors": [
          400,
          401,
          403,
          404
        ],
        "commonIssues": [
          {
            "error": "400 - Missing datePreset",
            "solution": "Add datePreset and timezone parameters to GET requests",
            "prevention": "Always validate required parameters before sending request"
          },
          {
            "error": "401 - Invalid API key",
            "solution": "Check Bearer token format and API key validity",
            "prevention": "Validate API key format before making requests"
          },
          {
            "error": "403 - Access denied",
            "solution": "Verify user permissions for this resource",
            "prevention": "Check user role and permissions before accessing resources"
          },
          {
            "error": "429 - Rate limited",
            "solution": "Implement exponential backoff and reduce request frequency",
            "prevention": "Monitor request rate and implement proper throttling"
          }
        ],
        "debugging": [
          "Log full request and response for error analysis",
          "Check API key permissions and expiration",
          "Verify request format matches API documentation",
          "Test with minimal required parameters first"
        ]
      },
      "workflow": {
        "prerequisites": [
          "Valid authentication",
          "Proper permissions"
        ],
        "followUpActions": [
          "Process response data",
          "Handle any errors"
        ],
        "relatedEndpoints": [],
        "typicalWorkflow": [
          "Call GET /public/api/v1/affiliate_network/{id} endpoint",
          "Process response"
        ]
      },
      "testing": {
        "unitTests": [
          "Test with valid parameters",
          "Test with missing required parameters",
          "Test with invalid parameter values",
          "Test authentication failure scenarios"
        ],
        "integrationTests": [
          "Test full workflow with real data",
          "Test error handling and recovery",
          "Test rate limiting behavior",
          "Test response data validation"
        ],
        "testData": {
          "validParams": {},
          "invalidParams": []
        },
        "assertions": [
          "Response status code is 200 for valid requests",
          "Response contains expected data structure",
          "Custom metrics are present when applicable",
          "Error responses contain proper error messages"
        ]
      }
    },
    "GET /public/api/v1/campaign/{id}/link": {
      "metadata": {
        "method": "GET",
        "path": "/public/api/v1/campaign/{id}/link",
        "category": "campaign",
        "priority": 15,
        "importance": "CRITICAL",
        "hasCustomMetrics": false,
        "aiUsage": "Критично для запуска трафика"
      },
      "description": {
        "summary": "Получение ссылки кампании для трафика",
        "detailed": "Detailed description for GET /public/api/v1/campaign/{id}/link - Получение ссылки кампании для трафика",
        "businessContext": "Campaign management - core functionality for setting up, configuring, and managing traffic tracking campaigns",
        "whenToUse": [
          "Standard campaign operations"
        ]
      },
      "authentication": {
        "type": "Bearer Token",
        "header": "Authorization: Bearer {binomPublic}",
        "required": true,
        "note": "Use environment variable binomPublic"
      },
      "parameters": {
        "path": [
          {
            "name": "id",
            "type": "integer",
            "required": true,
            "description": "Unique identifier of the campaign",
            "example": 123
          }
        ],
        "query": [],
        "header": [
          {
            "name": "Authorization",
            "type": "string",
            "required": true,
            "description": "Bearer token authentication",
            "example": "Bearer your_api_key_here"
          },
          {
            "name": "Content-Type",
            "type": "string",
            "required": false,
            "description": "Content type for request body",
            "example": "application/json"
          }
        ]
      },
      "requestBody": null,
      "responses": {
        "200": {
          "description": "Success",
          "contentType": "application/json",
          "schema": {
            "type": "object"
          },
          "example": {
            "message": "Success"
          }
        },
        "400": {
          "description": "Bad Request - Invalid parameters or missing required fields",
          "contentType": "application/json",
          "schema": {
            "type": "object",
            "properties": {
              "error": {
                "type": "string"
              },
              "message": {
                "type": "string"
              },
              "details": {
                "type": "object"
              }
            }
          },
          "example": {
            "error": "Validation failed",
            "message": "Field 'datePreset' is required for stats endpoints",
            "details": {
              "field": "datePreset",
              "code": "required"
            }
          }
        },
        "401": {
          "description": "Unauthorized - Invalid or missing API key",
          "contentType": "application/json",
          "example": {
            "error": "Unauthorized",
            "message": "Invalid API key or missing Authorization header"
          }
        },
        "403": {
          "description": "Forbidden - Insufficient permissions",
          "contentType": "application/json",
          "example": {
            "error": "Access denied",
            "message": "Insufficient permissions to access this resource"
          }
        },
        "404": {
          "description": "Not Found - Resource does not exist",
          "contentType": "application/json",
          "example": {
            "error": "Not found",
            "message": "Campaign with ID 999 not found"
          }
        },
        "429": {
          "description": "Too Many Requests - Rate limit exceeded",
          "contentType": "application/json",
          "example": {
            "error": "Rate limit exceeded",
            "message": "Too many requests. Please wait before making another request.",
            "retryAfter": 60
          }
        },
        "500": {
          "description": "Internal Server Error",
          "contentType": "application/json",
          "example": {
            "error": "Internal server error",
            "message": "An unexpected error occurred. Please try again later."
          }
        }
      },
      "examples": {
        "python": "import requests\nimport os\nfrom datetime import datetime\n\n# Configuration\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\ndef handle_response(response):\n    \"\"\"Handle API response with proper error handling\"\"\"\n    if response.status_code == 200:\n        return response.json()\n    elif response.status_code == 400:\n        print(f\"Bad Request: {response.json()}\")\n    elif response.status_code == 401:\n        print(\"Unauthorized: Check your API key\")\n    elif response.status_code == 403:\n        print(\"Forbidden: Insufficient permissions\")\n    elif response.status_code == 404:\n        print(\"Not Found: Resource doesn't exist\")\n    elif response.status_code == 429:\n        print(\"Rate Limited: Wait before retrying\")\n    else:\n        print(f\"Error {response.status_code}: {response.text}\")\n    return None\n\n# GET /public/api/v1/campaign/{id}/link\ndef call_endpoint():\n    \"\"\"Call the GET /public/api/v1/campaign/{id}/link endpoint\"\"\"\n    \n    params = {'datePreset': 'last_7_days', 'timezone': 'UTC'}\n    \n    response = requests.get(\n        f\"{BASE_URL}/public/api/v1/campaign/123/link\",\n        headers=headers,\n        params=params\n    )\n    \n    return handle_response(response)\n\n# Usage\nif __name__ == \"__main__\":\n    result = call_endpoint()\n    print(result)\n",
        "curl": "# GET /public/api/v1/campaign/{id}/link\ncurl -X GET \\\n  \"https://pierdun.com/public/api/v1/public/api/v1/campaign/123/link\" \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Accept: application/json\"",
        "javascript": "// GET /public/api/v1/campaign/{id}/link\nconst BINOM_API_KEY = process.env.BINOM_PUBLIC;\nconst BASE_URL = 'https://pierdun.com/public/api/v1';\n\nasync function callBinomAPI() {\n    const config = {\n        method: 'GET',\n        headers: {\n            'Authorization': `Bearer ${BINOM_API_KEY}`,\n            'Accept': 'application/json'\n        }\n    };\n    \n    try {\n        const response = await fetch(`${BASE_URL}/public/api/v1/campaign/123/link`, config);\n        \n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        \n        const data = await response.json();\n        console.log('Success:', data);\n        return data;\n    } catch (error) {\n        console.error('Error:', error);\n        throw error;\n    }\n}\n\n// Usage\ncallBinomAPI()\n    .then(data => console.log(data))\n    .catch(error => console.error('Failed:', error));"
      },
      "customMetrics": {
        "available": false,
        "note": "This endpoint does not return custom metrics"
      },
      "aiInstructions": {
        "priority": "CRITICAL",
        "complexity": "LOW",
        "keyPoints": [
          "This is a CRITICAL priority endpoint",
          "Category: campaign operations",
          "Custom metrics: Not available",
          "Always use Bearer token authentication",
          "Handle rate limiting with exponential backoff"
        ],
        "beforeUsing": [
          "Verify API key is set in environment variables",
          "Check if datePreset and timezone are required",
          "Validate all required parameters are provided",
          "Ensure proper error handling is implemented"
        ],
        "afterUsing": [
          "Validate response structure matches expected schema",
          "Check for custom metrics if endpoint supports them",
          "Log important metrics for monitoring",
          "Handle pagination if response is truncated"
        ],
        "commonMistakes": [
          "Forgetting datePreset parameter for stats endpoints",
          "Using wrong Bearer token format",
          "Not handling 429 rate limit responses",
          "Ignoring custom metrics in optimization decisions",
          "Not validating response data before processing"
        ],
        "optimization": [
          "Cache responses when appropriate",
          "Use batch operations when available",
          "Implement retry logic with exponential backoff",
          "Monitor API usage to avoid rate limits",
          "Use appropriate date ranges to minimize data transfer"
        ],
        "customMetricsGuidance": {
          "applicable": false,
          "note": "This endpoint does not return custom metrics"
        }
      },
      "errorHandling": {
        "retryStrategy": {
          "429": {
            "action": "Exponential backoff retry",
            "initialDelay": 1,
            "maxRetries": 5,
            "backoffMultiplier": 2
          },
          "500": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 5
          },
          "502": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 10
          }
        },
        "noRetryErrors": [
          400,
          401,
          403,
          404
        ],
        "commonIssues": [
          {
            "error": "400 - Missing datePreset",
            "solution": "Add datePreset and timezone parameters to GET requests",
            "prevention": "Always validate required parameters before sending request"
          },
          {
            "error": "401 - Invalid API key",
            "solution": "Check Bearer token format and API key validity",
            "prevention": "Validate API key format before making requests"
          },
          {
            "error": "403 - Access denied",
            "solution": "Verify user permissions for this resource",
            "prevention": "Check user role and permissions before accessing resources"
          },
          {
            "error": "429 - Rate limited",
            "solution": "Implement exponential backoff and reduce request frequency",
            "prevention": "Monitor request rate and implement proper throttling"
          }
        ],
        "debugging": [
          "Log full request and response for error analysis",
          "Check API key permissions and expiration",
          "Verify request format matches API documentation",
          "Test with minimal required parameters first"
        ]
      },
      "workflow": {
        "prerequisites": [
          "Valid authentication",
          "Proper permissions"
        ],
        "followUpActions": [
          "Process response data",
          "Handle any errors"
        ],
        "relatedEndpoints": [],
        "typicalWorkflow": [
          "Call GET /public/api/v1/campaign/{id}/link endpoint",
          "Process response"
        ]
      },
      "testing": {
        "unitTests": [
          "Test with valid parameters",
          "Test with missing required parameters",
          "Test with invalid parameter values",
          "Test authentication failure scenarios"
        ],
        "integrationTests": [
          "Test full workflow with real data",
          "Test error handling and recovery",
          "Test rate limiting behavior",
          "Test response data validation"
        ],
        "testData": {
          "validParams": {},
          "invalidParams": []
        },
        "assertions": [
          "Response status code is 200 for valid requests",
          "Response contains expected data structure",
          "Custom metrics are present when applicable",
          "Error responses contain proper error messages"
        ]
      }
    },
    "GET /public/api/v1/stats/affiliate_network": {
      "metadata": {
        "method": "GET",
        "path": "/public/api/v1/stats/affiliate_network",
        "category": "stats",
        "priority": 16,
        "importance": "HIGH",
        "hasCustomMetrics": true,
        "aiUsage": "Анализ производительности сетей"
      },
      "description": {
        "summary": "Статистика партнерских сетей",
        "detailed": "Detailed description for GET /public/api/v1/stats/affiliate_network - Статистика партнерских сетей",
        "businessContext": "Performance analysis and optimization - used for ROI calculations, A/B testing, and campaign optimization decisions",
        "whenToUse": [
          "Standard stats operations"
        ]
      },
      "authentication": {
        "type": "Bearer Token",
        "header": "Authorization: Bearer {binomPublic}",
        "required": true,
        "note": "Use environment variable binomPublic"
      },
      "parameters": {
        "path": [],
        "query": [
          {
            "name": "datePreset",
            "type": "string",
            "required": true,
            "description": "Date range preset for data filtering",
            "enum": [
              "today",
              "yesterday",
              "last_7_days",
              "last_30_days",
              "this_month",
              "last_month",
              "custom_time"
            ],
            "example": "last_7_days"
          },
          {
            "name": "timezone",
            "type": "string",
            "required": true,
            "description": "Timezone for date calculations",
            "example": "UTC"
          },
          {
            "name": "limit",
            "type": "integer",
            "required": false,
            "description": "Maximum number of records to return",
            "example": 100,
            "default": 100
          },
          {
            "name": "offset",
            "type": "integer",
            "required": false,
            "description": "Number of records to skip for pagination",
            "example": 0,
            "default": 0
          },
          {
            "name": "groupBy",
            "type": "string",
            "required": false,
            "description": "Field to group results by",
            "enum": [
              "landingId",
              "offerId",
              "trafficSourceId",
              "campaignId"
            ],
            "example": "landingId"
          },
          {
            "name": "sortColumn",
            "type": "string",
            "required": false,
            "description": "Column to sort results by",
            "example": "clicks"
          },
          {
            "name": "sortType",
            "type": "string",
            "required": false,
            "description": "Sort direction",
            "enum": [
              "asc",
              "desc"
            ],
            "example": "desc"
          }
        ],
        "header": [
          {
            "name": "Authorization",
            "type": "string",
            "required": true,
            "description": "Bearer token authentication",
            "example": "Bearer your_api_key_here"
          },
          {
            "name": "Content-Type",
            "type": "string",
            "required": false,
            "description": "Content type for request body",
            "example": "application/json"
          }
        ]
      },
      "requestBody": null,
      "responses": {
        "200": {
          "description": "Success",
          "contentType": "application/json",
          "schema": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "name": {
                  "type": "string"
                },
                "clicks": {
                  "type": "integer"
                },
                "conversions": {
                  "type": "integer"
                },
                "cost": {
                  "type": "number"
                },
                "revenue": {
                  "type": "number"
                },
                "eCPT": {
                  "type": "number",
                  "description": "Effective Cost Per Trial"
                },
                "eCPB": {
                  "type": "number",
                  "description": "Effective Cost Per Buyout"
                },
                "trials": {
                  "type": "integer",
                  "description": "Number of trial conversions"
                },
                "buyouts": {
                  "type": "integer",
                  "description": "Number of buyout conversions"
                }
              }
            }
          },
          "example": {
            "message": "Success"
          }
        },
        "400": {
          "description": "Bad Request - Invalid parameters or missing required fields",
          "contentType": "application/json",
          "schema": {
            "type": "object",
            "properties": {
              "error": {
                "type": "string"
              },
              "message": {
                "type": "string"
              },
              "details": {
                "type": "object"
              }
            }
          },
          "example": {
            "error": "Validation failed",
            "message": "Field 'datePreset' is required for stats endpoints",
            "details": {
              "field": "datePreset",
              "code": "required"
            }
          }
        },
        "401": {
          "description": "Unauthorized - Invalid or missing API key",
          "contentType": "application/json",
          "example": {
            "error": "Unauthorized",
            "message": "Invalid API key or missing Authorization header"
          }
        },
        "403": {
          "description": "Forbidden - Insufficient permissions",
          "contentType": "application/json",
          "example": {
            "error": "Access denied",
            "message": "Insufficient permissions to access this resource"
          }
        },
        "404": {
          "description": "Not Found - Resource does not exist",
          "contentType": "application/json",
          "example": {
            "error": "Not found",
            "message": "Campaign with ID 999 not found"
          }
        },
        "429": {
          "description": "Too Many Requests - Rate limit exceeded",
          "contentType": "application/json",
          "example": {
            "error": "Rate limit exceeded",
            "message": "Too many requests. Please wait before making another request.",
            "retryAfter": 60
          }
        },
        "500": {
          "description": "Internal Server Error",
          "contentType": "application/json",
          "example": {
            "error": "Internal server error",
            "message": "An unexpected error occurred. Please try again later."
          }
        }
      },
      "examples": {
        "python": "import requests\nimport os\nfrom datetime import datetime\n\n# Configuration\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\ndef handle_response(response):\n    \"\"\"Handle API response with proper error handling\"\"\"\n    if response.status_code == 200:\n        return response.json()\n    elif response.status_code == 400:\n        print(f\"Bad Request: {response.json()}\")\n    elif response.status_code == 401:\n        print(\"Unauthorized: Check your API key\")\n    elif response.status_code == 403:\n        print(\"Forbidden: Insufficient permissions\")\n    elif response.status_code == 404:\n        print(\"Not Found: Resource doesn't exist\")\n    elif response.status_code == 429:\n        print(\"Rate Limited: Wait before retrying\")\n    else:\n        print(f\"Error {response.status_code}: {response.text}\")\n    return None\n\n# Get campaign statistics with custom metrics\ndef get_campaign_stats(date_preset=\"last_7_days\", group_by=None):\n    \"\"\"\n    Get campaign statistics including custom metrics (eCPT, eCPB, trials, buyouts)\n    \n    Args:\n        date_preset: Date range for statistics\n        group_by: Optional grouping field (landingId, offerId, etc.)\n    \"\"\"\n    params = {\n        \"datePreset\": date_preset,\n        \"timezone\": \"UTC\",\n        \"limit\": 100,\n        \"offset\": 0\n    }\n    \n    if group_by:\n        params[\"groupBy\"] = group_by\n    \n    response = requests.get(\n        f\"{BASE_URL}/stats/campaign\",\n        headers=headers,\n        params=params\n    )\n    \n    data = handle_response(response)\n    if data:\n        # Process custom metrics\n        for campaign in data:\n            if 'eCPT' in campaign and campaign['eCPT']:\n                print(f\"Campaign {campaign['name']}: eCPT=${campaign['eCPT']:.2f}\")\n            if 'trials' in campaign:\n                print(f\"  Trials: {campaign['trials']}, Buyouts: {campaign.get('buyouts', 0)}\")\n    \n    return data\n\n# Usage example\nif __name__ == \"__main__\":\n    # Get last 7 days campaign stats\n    stats = get_campaign_stats(\"last_7_days\")\n    \n    # Get stats grouped by landing pages\n    landing_stats = get_campaign_stats(\"last_7_days\", \"landingId\")\n",
        "curl": "# GET /public/api/v1/stats/affiliate_network\ncurl -X GET \\\n  \"https://pierdun.com/public/api/v1/public/api/v1/stats/affiliate_network?datePreset=last_7_days&timezone=UTC&limit=100\" \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Accept: application/json\"",
        "javascript": "// GET /public/api/v1/stats/affiliate_network\nconst BINOM_API_KEY = process.env.BINOM_PUBLIC;\nconst BASE_URL = 'https://pierdun.com/public/api/v1';\n\nasync function callBinomAPI() {\n    const config = {\n        method: 'GET',\n        headers: {\n            'Authorization': `Bearer ${BINOM_API_KEY}`,\n            'Accept': 'application/json'\n        }\n    };\n    \n    try {\n        const response = await fetch(`${BASE_URL}/public/api/v1/stats/affiliate_network`, config);\n        \n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        \n        const data = await response.json();\n        console.log('Success:', data);\n        return data;\n    } catch (error) {\n        console.error('Error:', error);\n        throw error;\n    }\n}\n\n// Usage\ncallBinomAPI()\n    .then(data => console.log(data))\n    .catch(error => console.error('Failed:', error));"
      },
      "customMetrics": {
        "available": true,
        "metrics": [
          {
            "name": "eCPT",
            "fullName": "Effective Cost Per Trial",
            "description": "Average cost to acquire one trial subscription",
            "calculation": "total_cost / trials",
            "type": "currency",
            "importance": "CRITICAL",
            "aiNote": "Key metric for trial-based offers optimization. Lower eCPT indicates better campaign efficiency.",
            "troubleshooting": [
              "If eCPT is null, check if trials are configured in campaign",
              "High eCPT may indicate poor traffic quality or landing page issues",
              "Compare eCPT across different traffic sources to identify best performers"
            ]
          },
          {
            "name": "eCPB",
            "fullName": "Effective Cost Per Buyout",
            "description": "Average cost to acquire one full purchase/subscription",
            "calculation": "total_cost / buyouts",
            "type": "currency",
            "importance": "CRITICAL",
            "aiNote": "Primary ROI metric for subscription offers. Must be lower than payout for profitability.",
            "troubleshooting": [
              "If eCPB is null, check if buyouts are configured in campaign",
              "eCPB higher than payout indicates unprofitable campaign",
              "Monitor eCPB trends to detect performance degradation"
            ]
          },
          {
            "name": "trials",
            "fullName": "Trial Conversions",
            "description": "Number of trial subscriptions acquired",
            "type": "integer",
            "importance": "HIGH",
            "aiNote": "Intermediate conversion metric. Higher trials indicate good initial interest.",
            "troubleshooting": [
              "Low trials may indicate traffic quality issues",
              "High trials but low buyouts suggest offer or funnel problems",
              "Track trial-to-buyout conversion rate for optimization"
            ]
          },
          {
            "name": "buyouts",
            "fullName": "Buyout Conversions",
            "description": "Number of full purchases/subscriptions",
            "type": "integer",
            "importance": "CRITICAL",
            "aiNote": "Final conversion metric. Directly impacts revenue and ROI calculations.",
            "troubleshooting": [
              "Zero buyouts indicate serious funnel issues",
              "Low buyout rate from trials suggests billing or offer problems",
              "Monitor buyout trends for early problem detection"
            ]
          }
        ],
        "howToFind": {
          "webInterface": "Settings -> Columns in Binom interface",
          "apiAccess": "Available in stats and report endpoints response",
          "configuration": "Must be configured in campaign postback settings"
        },
        "aiInstructions": {
          "rule": "ALWAYS ask operator for clarification if custom metric values seem unexpected",
          "when": [
            "Custom metric is null or zero unexpectedly",
            "Metric values don't align with campaign performance",
            "Unfamiliar custom metrics appear in response"
          ],
          "howToAsk": "What does [metric_name] represent in your campaign setup?",
          "examples": [
            "If eCPT is $50 but expected $5, ask: 'The eCPT seems high at $50. Is this expected for this campaign type?'",
            "If trials are 0 but clicks are high, ask: 'I see clicks but no trials. Are trial conversions configured correctly?'"
          ]
        }
      },
      "aiInstructions": {
        "priority": "HIGH",
        "complexity": "MEDIUM",
        "keyPoints": [
          "This is a HIGH priority endpoint",
          "Category: stats operations",
          "Custom metrics: Available",
          "Always use Bearer token authentication",
          "Handle rate limiting with exponential backoff"
        ],
        "beforeUsing": [
          "Verify API key is set in environment variables",
          "Check if datePreset and timezone are required",
          "Validate all required parameters are provided",
          "Ensure proper error handling is implemented"
        ],
        "afterUsing": [
          "Validate response structure matches expected schema",
          "Check for custom metrics if endpoint supports them",
          "Log important metrics for monitoring",
          "Handle pagination if response is truncated"
        ],
        "commonMistakes": [
          "Forgetting datePreset parameter for stats endpoints",
          "Using wrong Bearer token format",
          "Not handling 429 rate limit responses",
          "Ignoring custom metrics in optimization decisions",
          "Not validating response data before processing"
        ],
        "optimization": [
          "Cache responses when appropriate",
          "Use batch operations when available",
          "Implement retry logic with exponential backoff",
          "Monitor API usage to avoid rate limits",
          "Use appropriate date ranges to minimize data transfer"
        ],
        "customMetricsGuidance": {
          "applicable": true,
          "criticalRule": "ALWAYS clarify unknown or unexpected custom metrics with operator",
          "whenToAsk": [
            "Custom metric value is null when data exists",
            "Metric values seem inconsistent with campaign performance",
            "Unfamiliar custom metric names appear",
            "Metric calculations don't match expected formulas"
          ],
          "howToAsk": [
            "Be specific: 'I see eCPT of $X, is this expected for this campaign type?'",
            "Provide context: 'Campaign has Y clicks but Z trials, should I investigate?'",
            "Ask for clarification: 'What does [custom_metric] represent in your setup?'"
          ],
          "neverAssume": [
            "Don't assume metric meanings without confirmation",
            "Don't ignore null values without asking",
            "Don't make optimization decisions on unclear metrics",
            "Don't extrapolate metrics without understanding calculation"
          ],
          "bestPractices": [
            "Document all custom metrics and their meanings",
            "Validate metric values against business logic",
            "Ask for acceptable ranges for each metric",
            "Confirm optimization goals before making changes"
          ]
        }
      },
      "errorHandling": {
        "retryStrategy": {
          "429": {
            "action": "Exponential backoff retry",
            "initialDelay": 1,
            "maxRetries": 5,
            "backoffMultiplier": 2
          },
          "500": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 5
          },
          "502": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 10
          }
        },
        "noRetryErrors": [
          400,
          401,
          403,
          404
        ],
        "commonIssues": [
          {
            "error": "400 - Missing datePreset",
            "solution": "Add datePreset and timezone parameters to GET requests",
            "prevention": "Always validate required parameters before sending request"
          },
          {
            "error": "401 - Invalid API key",
            "solution": "Check Bearer token format and API key validity",
            "prevention": "Validate API key format before making requests"
          },
          {
            "error": "403 - Access denied",
            "solution": "Verify user permissions for this resource",
            "prevention": "Check user role and permissions before accessing resources"
          },
          {
            "error": "429 - Rate limited",
            "solution": "Implement exponential backoff and reduce request frequency",
            "prevention": "Monitor request rate and implement proper throttling"
          }
        ],
        "debugging": [
          "Log full request and response for error analysis",
          "Check API key permissions and expiration",
          "Verify request format matches API documentation",
          "Test with minimal required parameters first"
        ]
      },
      "workflow": {
        "prerequisites": [
          "Valid authentication",
          "Proper permissions"
        ],
        "followUpActions": [
          "Process response data",
          "Handle any errors"
        ],
        "relatedEndpoints": [],
        "typicalWorkflow": [
          "Call GET /public/api/v1/stats/affiliate_network endpoint",
          "Process response"
        ]
      },
      "testing": {
        "unitTests": [
          "Test with valid parameters",
          "Test with missing required parameters",
          "Test with invalid parameter values",
          "Test authentication failure scenarios"
        ],
        "integrationTests": [
          "Test full workflow with real data",
          "Test error handling and recovery",
          "Test rate limiting behavior",
          "Test response data validation"
        ],
        "testData": {
          "validParams": {
            "datePreset": "last_7_days",
            "timezone": "UTC",
            "limit": 10
          },
          "invalidParams": [
            {
              "error": "missing_datePreset",
              "params": {
                "timezone": "UTC"
              }
            },
            {
              "error": "invalid_datePreset",
              "params": {
                "datePreset": "invalid",
                "timezone": "UTC"
              }
            },
            {
              "error": "missing_timezone",
              "params": {
                "datePreset": "last_7_days"
              }
            }
          ]
        },
        "assertions": [
          "Response status code is 200 for valid requests",
          "Response contains expected data structure",
          "Custom metrics are present when applicable",
          "Error responses contain proper error messages"
        ]
      }
    },
    "GET /public/api/v1/stats/rotation": {
      "metadata": {
        "method": "GET",
        "path": "/public/api/v1/stats/rotation",
        "category": "stats",
        "priority": 17,
        "importance": "HIGH",
        "hasCustomMetrics": true,
        "aiUsage": "Оптимизация ротаций"
      },
      "description": {
        "summary": "Статистика ротаций",
        "detailed": "Detailed description for GET /public/api/v1/stats/rotation - Статистика ротаций",
        "businessContext": "Performance analysis and optimization - used for ROI calculations, A/B testing, and campaign optimization decisions",
        "whenToUse": [
          "Standard stats operations"
        ]
      },
      "authentication": {
        "type": "Bearer Token",
        "header": "Authorization: Bearer {binomPublic}",
        "required": true,
        "note": "Use environment variable binomPublic"
      },
      "parameters": {
        "path": [],
        "query": [
          {
            "name": "datePreset",
            "type": "string",
            "required": true,
            "description": "Date range preset for data filtering",
            "enum": [
              "today",
              "yesterday",
              "last_7_days",
              "last_30_days",
              "this_month",
              "last_month",
              "custom_time"
            ],
            "example": "last_7_days"
          },
          {
            "name": "timezone",
            "type": "string",
            "required": true,
            "description": "Timezone for date calculations",
            "example": "UTC"
          },
          {
            "name": "limit",
            "type": "integer",
            "required": false,
            "description": "Maximum number of records to return",
            "example": 100,
            "default": 100
          },
          {
            "name": "offset",
            "type": "integer",
            "required": false,
            "description": "Number of records to skip for pagination",
            "example": 0,
            "default": 0
          },
          {
            "name": "groupBy",
            "type": "string",
            "required": false,
            "description": "Field to group results by",
            "enum": [
              "landingId",
              "offerId",
              "trafficSourceId",
              "campaignId"
            ],
            "example": "landingId"
          },
          {
            "name": "sortColumn",
            "type": "string",
            "required": false,
            "description": "Column to sort results by",
            "example": "clicks"
          },
          {
            "name": "sortType",
            "type": "string",
            "required": false,
            "description": "Sort direction",
            "enum": [
              "asc",
              "desc"
            ],
            "example": "desc"
          }
        ],
        "header": [
          {
            "name": "Authorization",
            "type": "string",
            "required": true,
            "description": "Bearer token authentication",
            "example": "Bearer your_api_key_here"
          },
          {
            "name": "Content-Type",
            "type": "string",
            "required": false,
            "description": "Content type for request body",
            "example": "application/json"
          }
        ]
      },
      "requestBody": null,
      "responses": {
        "200": {
          "description": "Success",
          "contentType": "application/json",
          "schema": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "name": {
                  "type": "string"
                },
                "clicks": {
                  "type": "integer"
                },
                "conversions": {
                  "type": "integer"
                },
                "cost": {
                  "type": "number"
                },
                "revenue": {
                  "type": "number"
                },
                "eCPT": {
                  "type": "number",
                  "description": "Effective Cost Per Trial"
                },
                "eCPB": {
                  "type": "number",
                  "description": "Effective Cost Per Buyout"
                },
                "trials": {
                  "type": "integer",
                  "description": "Number of trial conversions"
                },
                "buyouts": {
                  "type": "integer",
                  "description": "Number of buyout conversions"
                }
              }
            }
          },
          "example": {
            "message": "Success"
          }
        },
        "400": {
          "description": "Bad Request - Invalid parameters or missing required fields",
          "contentType": "application/json",
          "schema": {
            "type": "object",
            "properties": {
              "error": {
                "type": "string"
              },
              "message": {
                "type": "string"
              },
              "details": {
                "type": "object"
              }
            }
          },
          "example": {
            "error": "Validation failed",
            "message": "Field 'datePreset' is required for stats endpoints",
            "details": {
              "field": "datePreset",
              "code": "required"
            }
          }
        },
        "401": {
          "description": "Unauthorized - Invalid or missing API key",
          "contentType": "application/json",
          "example": {
            "error": "Unauthorized",
            "message": "Invalid API key or missing Authorization header"
          }
        },
        "403": {
          "description": "Forbidden - Insufficient permissions",
          "contentType": "application/json",
          "example": {
            "error": "Access denied",
            "message": "Insufficient permissions to access this resource"
          }
        },
        "404": {
          "description": "Not Found - Resource does not exist",
          "contentType": "application/json",
          "example": {
            "error": "Not found",
            "message": "Campaign with ID 999 not found"
          }
        },
        "429": {
          "description": "Too Many Requests - Rate limit exceeded",
          "contentType": "application/json",
          "example": {
            "error": "Rate limit exceeded",
            "message": "Too many requests. Please wait before making another request.",
            "retryAfter": 60
          }
        },
        "500": {
          "description": "Internal Server Error",
          "contentType": "application/json",
          "example": {
            "error": "Internal server error",
            "message": "An unexpected error occurred. Please try again later."
          }
        }
      },
      "examples": {
        "python": "import requests\nimport os\nfrom datetime import datetime\n\n# Configuration\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\ndef handle_response(response):\n    \"\"\"Handle API response with proper error handling\"\"\"\n    if response.status_code == 200:\n        return response.json()\n    elif response.status_code == 400:\n        print(f\"Bad Request: {response.json()}\")\n    elif response.status_code == 401:\n        print(\"Unauthorized: Check your API key\")\n    elif response.status_code == 403:\n        print(\"Forbidden: Insufficient permissions\")\n    elif response.status_code == 404:\n        print(\"Not Found: Resource doesn't exist\")\n    elif response.status_code == 429:\n        print(\"Rate Limited: Wait before retrying\")\n    else:\n        print(f\"Error {response.status_code}: {response.text}\")\n    return None\n\n# Get campaign statistics with custom metrics\ndef get_campaign_stats(date_preset=\"last_7_days\", group_by=None):\n    \"\"\"\n    Get campaign statistics including custom metrics (eCPT, eCPB, trials, buyouts)\n    \n    Args:\n        date_preset: Date range for statistics\n        group_by: Optional grouping field (landingId, offerId, etc.)\n    \"\"\"\n    params = {\n        \"datePreset\": date_preset,\n        \"timezone\": \"UTC\",\n        \"limit\": 100,\n        \"offset\": 0\n    }\n    \n    if group_by:\n        params[\"groupBy\"] = group_by\n    \n    response = requests.get(\n        f\"{BASE_URL}/stats/campaign\",\n        headers=headers,\n        params=params\n    )\n    \n    data = handle_response(response)\n    if data:\n        # Process custom metrics\n        for campaign in data:\n            if 'eCPT' in campaign and campaign['eCPT']:\n                print(f\"Campaign {campaign['name']}: eCPT=${campaign['eCPT']:.2f}\")\n            if 'trials' in campaign:\n                print(f\"  Trials: {campaign['trials']}, Buyouts: {campaign.get('buyouts', 0)}\")\n    \n    return data\n\n# Usage example\nif __name__ == \"__main__\":\n    # Get last 7 days campaign stats\n    stats = get_campaign_stats(\"last_7_days\")\n    \n    # Get stats grouped by landing pages\n    landing_stats = get_campaign_stats(\"last_7_days\", \"landingId\")\n",
        "curl": "# GET /public/api/v1/stats/rotation\ncurl -X GET \\\n  \"https://pierdun.com/public/api/v1/public/api/v1/stats/rotation?datePreset=last_7_days&timezone=UTC&limit=100\" \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Accept: application/json\"",
        "javascript": "// GET /public/api/v1/stats/rotation\nconst BINOM_API_KEY = process.env.BINOM_PUBLIC;\nconst BASE_URL = 'https://pierdun.com/public/api/v1';\n\nasync function callBinomAPI() {\n    const config = {\n        method: 'GET',\n        headers: {\n            'Authorization': `Bearer ${BINOM_API_KEY}`,\n            'Accept': 'application/json'\n        }\n    };\n    \n    try {\n        const response = await fetch(`${BASE_URL}/public/api/v1/stats/rotation`, config);\n        \n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        \n        const data = await response.json();\n        console.log('Success:', data);\n        return data;\n    } catch (error) {\n        console.error('Error:', error);\n        throw error;\n    }\n}\n\n// Usage\ncallBinomAPI()\n    .then(data => console.log(data))\n    .catch(error => console.error('Failed:', error));"
      },
      "customMetrics": {
        "available": true,
        "metrics": [
          {
            "name": "eCPT",
            "fullName": "Effective Cost Per Trial",
            "description": "Average cost to acquire one trial subscription",
            "calculation": "total_cost / trials",
            "type": "currency",
            "importance": "CRITICAL",
            "aiNote": "Key metric for trial-based offers optimization. Lower eCPT indicates better campaign efficiency.",
            "troubleshooting": [
              "If eCPT is null, check if trials are configured in campaign",
              "High eCPT may indicate poor traffic quality or landing page issues",
              "Compare eCPT across different traffic sources to identify best performers"
            ]
          },
          {
            "name": "eCPB",
            "fullName": "Effective Cost Per Buyout",
            "description": "Average cost to acquire one full purchase/subscription",
            "calculation": "total_cost / buyouts",
            "type": "currency",
            "importance": "CRITICAL",
            "aiNote": "Primary ROI metric for subscription offers. Must be lower than payout for profitability.",
            "troubleshooting": [
              "If eCPB is null, check if buyouts are configured in campaign",
              "eCPB higher than payout indicates unprofitable campaign",
              "Monitor eCPB trends to detect performance degradation"
            ]
          },
          {
            "name": "trials",
            "fullName": "Trial Conversions",
            "description": "Number of trial subscriptions acquired",
            "type": "integer",
            "importance": "HIGH",
            "aiNote": "Intermediate conversion metric. Higher trials indicate good initial interest.",
            "troubleshooting": [
              "Low trials may indicate traffic quality issues",
              "High trials but low buyouts suggest offer or funnel problems",
              "Track trial-to-buyout conversion rate for optimization"
            ]
          },
          {
            "name": "buyouts",
            "fullName": "Buyout Conversions",
            "description": "Number of full purchases/subscriptions",
            "type": "integer",
            "importance": "CRITICAL",
            "aiNote": "Final conversion metric. Directly impacts revenue and ROI calculations.",
            "troubleshooting": [
              "Zero buyouts indicate serious funnel issues",
              "Low buyout rate from trials suggests billing or offer problems",
              "Monitor buyout trends for early problem detection"
            ]
          }
        ],
        "howToFind": {
          "webInterface": "Settings -> Columns in Binom interface",
          "apiAccess": "Available in stats and report endpoints response",
          "configuration": "Must be configured in campaign postback settings"
        },
        "aiInstructions": {
          "rule": "ALWAYS ask operator for clarification if custom metric values seem unexpected",
          "when": [
            "Custom metric is null or zero unexpectedly",
            "Metric values don't align with campaign performance",
            "Unfamiliar custom metrics appear in response"
          ],
          "howToAsk": "What does [metric_name] represent in your campaign setup?",
          "examples": [
            "If eCPT is $50 but expected $5, ask: 'The eCPT seems high at $50. Is this expected for this campaign type?'",
            "If trials are 0 but clicks are high, ask: 'I see clicks but no trials. Are trial conversions configured correctly?'"
          ]
        }
      },
      "aiInstructions": {
        "priority": "HIGH",
        "complexity": "MEDIUM",
        "keyPoints": [
          "This is a HIGH priority endpoint",
          "Category: stats operations",
          "Custom metrics: Available",
          "Always use Bearer token authentication",
          "Handle rate limiting with exponential backoff"
        ],
        "beforeUsing": [
          "Verify API key is set in environment variables",
          "Check if datePreset and timezone are required",
          "Validate all required parameters are provided",
          "Ensure proper error handling is implemented"
        ],
        "afterUsing": [
          "Validate response structure matches expected schema",
          "Check for custom metrics if endpoint supports them",
          "Log important metrics for monitoring",
          "Handle pagination if response is truncated"
        ],
        "commonMistakes": [
          "Forgetting datePreset parameter for stats endpoints",
          "Using wrong Bearer token format",
          "Not handling 429 rate limit responses",
          "Ignoring custom metrics in optimization decisions",
          "Not validating response data before processing"
        ],
        "optimization": [
          "Cache responses when appropriate",
          "Use batch operations when available",
          "Implement retry logic with exponential backoff",
          "Monitor API usage to avoid rate limits",
          "Use appropriate date ranges to minimize data transfer"
        ],
        "customMetricsGuidance": {
          "applicable": true,
          "criticalRule": "ALWAYS clarify unknown or unexpected custom metrics with operator",
          "whenToAsk": [
            "Custom metric value is null when data exists",
            "Metric values seem inconsistent with campaign performance",
            "Unfamiliar custom metric names appear",
            "Metric calculations don't match expected formulas"
          ],
          "howToAsk": [
            "Be specific: 'I see eCPT of $X, is this expected for this campaign type?'",
            "Provide context: 'Campaign has Y clicks but Z trials, should I investigate?'",
            "Ask for clarification: 'What does [custom_metric] represent in your setup?'"
          ],
          "neverAssume": [
            "Don't assume metric meanings without confirmation",
            "Don't ignore null values without asking",
            "Don't make optimization decisions on unclear metrics",
            "Don't extrapolate metrics without understanding calculation"
          ],
          "bestPractices": [
            "Document all custom metrics and their meanings",
            "Validate metric values against business logic",
            "Ask for acceptable ranges for each metric",
            "Confirm optimization goals before making changes"
          ]
        }
      },
      "errorHandling": {
        "retryStrategy": {
          "429": {
            "action": "Exponential backoff retry",
            "initialDelay": 1,
            "maxRetries": 5,
            "backoffMultiplier": 2
          },
          "500": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 5
          },
          "502": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 10
          }
        },
        "noRetryErrors": [
          400,
          401,
          403,
          404
        ],
        "commonIssues": [
          {
            "error": "400 - Missing datePreset",
            "solution": "Add datePreset and timezone parameters to GET requests",
            "prevention": "Always validate required parameters before sending request"
          },
          {
            "error": "401 - Invalid API key",
            "solution": "Check Bearer token format and API key validity",
            "prevention": "Validate API key format before making requests"
          },
          {
            "error": "403 - Access denied",
            "solution": "Verify user permissions for this resource",
            "prevention": "Check user role and permissions before accessing resources"
          },
          {
            "error": "429 - Rate limited",
            "solution": "Implement exponential backoff and reduce request frequency",
            "prevention": "Monitor request rate and implement proper throttling"
          }
        ],
        "debugging": [
          "Log full request and response for error analysis",
          "Check API key permissions and expiration",
          "Verify request format matches API documentation",
          "Test with minimal required parameters first"
        ]
      },
      "workflow": {
        "prerequisites": [
          "Valid authentication",
          "Proper permissions"
        ],
        "followUpActions": [
          "Process response data",
          "Handle any errors"
        ],
        "relatedEndpoints": [],
        "typicalWorkflow": [
          "Call GET /public/api/v1/stats/rotation endpoint",
          "Process response"
        ]
      },
      "testing": {
        "unitTests": [
          "Test with valid parameters",
          "Test with missing required parameters",
          "Test with invalid parameter values",
          "Test authentication failure scenarios"
        ],
        "integrationTests": [
          "Test full workflow with real data",
          "Test error handling and recovery",
          "Test rate limiting behavior",
          "Test response data validation"
        ],
        "testData": {
          "validParams": {
            "datePreset": "last_7_days",
            "timezone": "UTC",
            "limit": 10
          },
          "invalidParams": [
            {
              "error": "missing_datePreset",
              "params": {
                "timezone": "UTC"
              }
            },
            {
              "error": "invalid_datePreset",
              "params": {
                "datePreset": "invalid",
                "timezone": "UTC"
              }
            },
            {
              "error": "missing_timezone",
              "params": {
                "datePreset": "last_7_days"
              }
            }
          ]
        },
        "assertions": [
          "Response status code is 200 for valid requests",
          "Response contains expected data structure",
          "Custom metrics are present when applicable",
          "Error responses contain proper error messages"
        ]
      }
    },
    "PUT /public/api/v1/affiliate_network/{id}": {
      "metadata": {
        "method": "PUT",
        "path": "/public/api/v1/affiliate_network/{id}",
        "category": "affiliate_network",
        "priority": 18,
        "importance": "HIGH",
        "hasCustomMetrics": false,
        "aiUsage": "Управление конфигурацией сетей"
      },
      "description": {
        "summary": "Обновление партнерских сетей",
        "detailed": "Detailed description for PUT /public/api/v1/affiliate_network/{id} - Обновление партнерских сетей",
        "businessContext": "Partner network management - handles postback URLs, payout configurations, and network integrations",
        "whenToUse": [
          "Standard affiliate_network operations"
        ]
      },
      "authentication": {
        "type": "Bearer Token",
        "header": "Authorization: Bearer {binomPublic}",
        "required": true,
        "note": "Use environment variable binomPublic"
      },
      "parameters": {
        "path": [
          {
            "name": "id",
            "type": "integer",
            "required": true,
            "description": "Unique identifier of the affiliate_network",
            "example": 123
          }
        ],
        "query": [],
        "header": [
          {
            "name": "Authorization",
            "type": "string",
            "required": true,
            "description": "Bearer token authentication",
            "example": "Bearer your_api_key_here"
          },
          {
            "name": "Content-Type",
            "type": "string",
            "required": true,
            "description": "Content type for request body",
            "example": "application/json"
          }
        ]
      },
      "requestBody": {
        "required": true,
        "contentType": "application/json",
        "schema": {
          "type": "object"
        },
        "example": {}
      },
      "responses": {
        "200": {
          "description": "Success",
          "contentType": "application/json",
          "schema": {
            "type": "object"
          },
          "example": {
            "message": "Success"
          }
        },
        "400": {
          "description": "Bad Request - Invalid parameters or missing required fields",
          "contentType": "application/json",
          "schema": {
            "type": "object",
            "properties": {
              "error": {
                "type": "string"
              },
              "message": {
                "type": "string"
              },
              "details": {
                "type": "object"
              }
            }
          },
          "example": {
            "error": "Validation failed",
            "message": "Field 'datePreset' is required for stats endpoints",
            "details": {
              "field": "datePreset",
              "code": "required"
            }
          }
        },
        "401": {
          "description": "Unauthorized - Invalid or missing API key",
          "contentType": "application/json",
          "example": {
            "error": "Unauthorized",
            "message": "Invalid API key or missing Authorization header"
          }
        },
        "403": {
          "description": "Forbidden - Insufficient permissions",
          "contentType": "application/json",
          "example": {
            "error": "Access denied",
            "message": "Insufficient permissions to access this resource"
          }
        },
        "404": {
          "description": "Not Found - Resource does not exist",
          "contentType": "application/json",
          "example": {
            "error": "Not found",
            "message": "Campaign with ID 999 not found"
          }
        },
        "429": {
          "description": "Too Many Requests - Rate limit exceeded",
          "contentType": "application/json",
          "example": {
            "error": "Rate limit exceeded",
            "message": "Too many requests. Please wait before making another request.",
            "retryAfter": 60
          }
        },
        "500": {
          "description": "Internal Server Error",
          "contentType": "application/json",
          "example": {
            "error": "Internal server error",
            "message": "An unexpected error occurred. Please try again later."
          }
        }
      },
      "examples": {
        "python": "import requests\nimport os\nfrom datetime import datetime\n\n# Configuration\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\ndef handle_response(response):\n    \"\"\"Handle API response with proper error handling\"\"\"\n    if response.status_code == 200:\n        return response.json()\n    elif response.status_code == 400:\n        print(f\"Bad Request: {response.json()}\")\n    elif response.status_code == 401:\n        print(\"Unauthorized: Check your API key\")\n    elif response.status_code == 403:\n        print(\"Forbidden: Insufficient permissions\")\n    elif response.status_code == 404:\n        print(\"Not Found: Resource doesn't exist\")\n    elif response.status_code == 429:\n        print(\"Rate Limited: Wait before retrying\")\n    else:\n        print(f\"Error {response.status_code}: {response.text}\")\n    return None\n\n# PUT /public/api/v1/affiliate_network/{id}\ndef call_endpoint():\n    \"\"\"Call the PUT /public/api/v1/affiliate_network/{id} endpoint\"\"\"\n    \n    \n    \n    response = requests.put(\n        f\"{BASE_URL}/public/api/v1/affiliate_network/123\",\n        headers=headers\n        \n    )\n    \n    return handle_response(response)\n\n# Usage\nif __name__ == \"__main__\":\n    result = call_endpoint()\n    print(result)\n",
        "curl": "# PUT /public/api/v1/affiliate_network/{id}\ncurl -X PUT \\\n  \"https://pierdun.com/public/api/v1/public/api/v1/affiliate_network/123\" \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Accept: application/json\" \\\n  -H \"Content-Type: application/json\"",
        "javascript": "// PUT /public/api/v1/affiliate_network/{id}\nconst BINOM_API_KEY = process.env.BINOM_PUBLIC;\nconst BASE_URL = 'https://pierdun.com/public/api/v1';\n\nasync function callBinomAPI() {\n    const config = {\n        method: 'PUT',\n        headers: {\n            'Authorization': `Bearer ${BINOM_API_KEY}`,\n            'Accept': 'application/json'\n        }\n    };\n    \n    try {\n        const response = await fetch(`${BASE_URL}/public/api/v1/affiliate_network/123`, config);\n        \n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        \n        const data = await response.json();\n        console.log('Success:', data);\n        return data;\n    } catch (error) {\n        console.error('Error:', error);\n        throw error;\n    }\n}\n\n// Usage\ncallBinomAPI()\n    .then(data => console.log(data))\n    .catch(error => console.error('Failed:', error));"
      },
      "customMetrics": {
        "available": false,
        "note": "This endpoint does not return custom metrics"
      },
      "aiInstructions": {
        "priority": "HIGH",
        "complexity": "LOW",
        "keyPoints": [
          "This is a HIGH priority endpoint",
          "Category: affiliate_network operations",
          "Custom metrics: Not available",
          "Always use Bearer token authentication",
          "Handle rate limiting with exponential backoff"
        ],
        "beforeUsing": [
          "Verify API key is set in environment variables",
          "Check if datePreset and timezone are required",
          "Validate all required parameters are provided",
          "Ensure proper error handling is implemented"
        ],
        "afterUsing": [
          "Validate response structure matches expected schema",
          "Check for custom metrics if endpoint supports them",
          "Log important metrics for monitoring",
          "Handle pagination if response is truncated"
        ],
        "commonMistakes": [
          "Forgetting datePreset parameter for stats endpoints",
          "Using wrong Bearer token format",
          "Not handling 429 rate limit responses",
          "Ignoring custom metrics in optimization decisions",
          "Not validating response data before processing"
        ],
        "optimization": [
          "Cache responses when appropriate",
          "Use batch operations when available",
          "Implement retry logic with exponential backoff",
          "Monitor API usage to avoid rate limits",
          "Use appropriate date ranges to minimize data transfer"
        ],
        "customMetricsGuidance": {
          "applicable": false,
          "note": "This endpoint does not return custom metrics"
        }
      },
      "errorHandling": {
        "retryStrategy": {
          "429": {
            "action": "Exponential backoff retry",
            "initialDelay": 1,
            "maxRetries": 5,
            "backoffMultiplier": 2
          },
          "500": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 5
          },
          "502": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 10
          }
        },
        "noRetryErrors": [
          400,
          401,
          403,
          404
        ],
        "commonIssues": [
          {
            "error": "400 - Missing datePreset",
            "solution": "Add datePreset and timezone parameters to GET requests",
            "prevention": "Always validate required parameters before sending request"
          },
          {
            "error": "401 - Invalid API key",
            "solution": "Check Bearer token format and API key validity",
            "prevention": "Validate API key format before making requests"
          },
          {
            "error": "403 - Access denied",
            "solution": "Verify user permissions for this resource",
            "prevention": "Check user role and permissions before accessing resources"
          },
          {
            "error": "429 - Rate limited",
            "solution": "Implement exponential backoff and reduce request frequency",
            "prevention": "Monitor request rate and implement proper throttling"
          }
        ],
        "debugging": [
          "Log full request and response for error analysis",
          "Check API key permissions and expiration",
          "Verify request format matches API documentation",
          "Test with minimal required parameters first"
        ]
      },
      "workflow": {
        "prerequisites": [
          "Valid authentication",
          "Proper permissions"
        ],
        "followUpActions": [
          "Process response data",
          "Handle any errors"
        ],
        "relatedEndpoints": [],
        "typicalWorkflow": [
          "Call PUT /public/api/v1/affiliate_network/{id} endpoint",
          "Process response"
        ]
      },
      "testing": {
        "unitTests": [
          "Test with valid parameters",
          "Test with missing required parameters",
          "Test with invalid parameter values",
          "Test authentication failure scenarios"
        ],
        "integrationTests": [
          "Test full workflow with real data",
          "Test error handling and recovery",
          "Test rate limiting behavior",
          "Test response data validation"
        ],
        "testData": {
          "validParams": {},
          "invalidParams": []
        },
        "assertions": [
          "Response status code is 200 for valid requests",
          "Response contains expected data structure",
          "Custom metrics are present when applicable",
          "Error responses contain proper error messages"
        ]
      }
    },
    "GET /public/api/v1/campaign/list/filtered": {
      "metadata": {
        "method": "GET",
        "path": "/public/api/v1/campaign/list/filtered",
        "category": "campaign",
        "priority": 19,
        "importance": "HIGH",
        "hasCustomMetrics": false,
        "aiUsage": "Поиск и фильтрация кампаний"
      },
      "description": {
        "summary": "Фильтрованный список кампаний",
        "detailed": "Detailed description for GET /public/api/v1/campaign/list/filtered - Фильтрованный список кампаний",
        "businessContext": "Campaign management - core functionality for setting up, configuring, and managing traffic tracking campaigns",
        "whenToUse": [
          "Standard campaign operations"
        ]
      },
      "authentication": {
        "type": "Bearer Token",
        "header": "Authorization: Bearer {binomPublic}",
        "required": true,
        "note": "Use environment variable binomPublic"
      },
      "parameters": {
        "path": [],
        "query": [],
        "header": [
          {
            "name": "Authorization",
            "type": "string",
            "required": true,
            "description": "Bearer token authentication",
            "example": "Bearer your_api_key_here"
          },
          {
            "name": "Content-Type",
            "type": "string",
            "required": false,
            "description": "Content type for request body",
            "example": "application/json"
          }
        ]
      },
      "requestBody": null,
      "responses": {
        "200": {
          "description": "Success",
          "contentType": "application/json",
          "schema": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "example": {
            "message": "Success"
          }
        },
        "400": {
          "description": "Bad Request - Invalid parameters or missing required fields",
          "contentType": "application/json",
          "schema": {
            "type": "object",
            "properties": {
              "error": {
                "type": "string"
              },
              "message": {
                "type": "string"
              },
              "details": {
                "type": "object"
              }
            }
          },
          "example": {
            "error": "Validation failed",
            "message": "Field 'datePreset' is required for stats endpoints",
            "details": {
              "field": "datePreset",
              "code": "required"
            }
          }
        },
        "401": {
          "description": "Unauthorized - Invalid or missing API key",
          "contentType": "application/json",
          "example": {
            "error": "Unauthorized",
            "message": "Invalid API key or missing Authorization header"
          }
        },
        "403": {
          "description": "Forbidden - Insufficient permissions",
          "contentType": "application/json",
          "example": {
            "error": "Access denied",
            "message": "Insufficient permissions to access this resource"
          }
        },
        "404": {
          "description": "Not Found - Resource does not exist",
          "contentType": "application/json",
          "example": {
            "error": "Not found",
            "message": "Campaign with ID 999 not found"
          }
        },
        "429": {
          "description": "Too Many Requests - Rate limit exceeded",
          "contentType": "application/json",
          "example": {
            "error": "Rate limit exceeded",
            "message": "Too many requests. Please wait before making another request.",
            "retryAfter": 60
          }
        },
        "500": {
          "description": "Internal Server Error",
          "contentType": "application/json",
          "example": {
            "error": "Internal server error",
            "message": "An unexpected error occurred. Please try again later."
          }
        }
      },
      "examples": {
        "python": "import requests\nimport os\nfrom datetime import datetime\n\n# Configuration\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\ndef handle_response(response):\n    \"\"\"Handle API response with proper error handling\"\"\"\n    if response.status_code == 200:\n        return response.json()\n    elif response.status_code == 400:\n        print(f\"Bad Request: {response.json()}\")\n    elif response.status_code == 401:\n        print(\"Unauthorized: Check your API key\")\n    elif response.status_code == 403:\n        print(\"Forbidden: Insufficient permissions\")\n    elif response.status_code == 404:\n        print(\"Not Found: Resource doesn't exist\")\n    elif response.status_code == 429:\n        print(\"Rate Limited: Wait before retrying\")\n    else:\n        print(f\"Error {response.status_code}: {response.text}\")\n    return None\n\n# GET /public/api/v1/campaign/list/filtered\ndef call_endpoint():\n    \"\"\"Call the GET /public/api/v1/campaign/list/filtered endpoint\"\"\"\n    \n    params = {'datePreset': 'last_7_days', 'timezone': 'UTC'}\n    \n    response = requests.get(\n        f\"{BASE_URL}/public/api/v1/campaign/list/filtered\",\n        headers=headers,\n        params=params\n    )\n    \n    return handle_response(response)\n\n# Usage\nif __name__ == \"__main__\":\n    result = call_endpoint()\n    print(result)\n",
        "curl": "# GET /public/api/v1/campaign/list/filtered\ncurl -X GET \\\n  \"https://pierdun.com/public/api/v1/public/api/v1/campaign/list/filtered\" \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Accept: application/json\"",
        "javascript": "// GET /public/api/v1/campaign/list/filtered\nconst BINOM_API_KEY = process.env.BINOM_PUBLIC;\nconst BASE_URL = 'https://pierdun.com/public/api/v1';\n\nasync function callBinomAPI() {\n    const config = {\n        method: 'GET',\n        headers: {\n            'Authorization': `Bearer ${BINOM_API_KEY}`,\n            'Accept': 'application/json'\n        }\n    };\n    \n    try {\n        const response = await fetch(`${BASE_URL}/public/api/v1/campaign/list/filtered`, config);\n        \n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        \n        const data = await response.json();\n        console.log('Success:', data);\n        return data;\n    } catch (error) {\n        console.error('Error:', error);\n        throw error;\n    }\n}\n\n// Usage\ncallBinomAPI()\n    .then(data => console.log(data))\n    .catch(error => console.error('Failed:', error));"
      },
      "customMetrics": {
        "available": false,
        "note": "This endpoint does not return custom metrics"
      },
      "aiInstructions": {
        "priority": "HIGH",
        "complexity": "LOW",
        "keyPoints": [
          "This is a HIGH priority endpoint",
          "Category: campaign operations",
          "Custom metrics: Not available",
          "Always use Bearer token authentication",
          "Handle rate limiting with exponential backoff"
        ],
        "beforeUsing": [
          "Verify API key is set in environment variables",
          "Check if datePreset and timezone are required",
          "Validate all required parameters are provided",
          "Ensure proper error handling is implemented"
        ],
        "afterUsing": [
          "Validate response structure matches expected schema",
          "Check for custom metrics if endpoint supports them",
          "Log important metrics for monitoring",
          "Handle pagination if response is truncated"
        ],
        "commonMistakes": [
          "Forgetting datePreset parameter for stats endpoints",
          "Using wrong Bearer token format",
          "Not handling 429 rate limit responses",
          "Ignoring custom metrics in optimization decisions",
          "Not validating response data before processing"
        ],
        "optimization": [
          "Cache responses when appropriate",
          "Use batch operations when available",
          "Implement retry logic with exponential backoff",
          "Monitor API usage to avoid rate limits",
          "Use appropriate date ranges to minimize data transfer"
        ],
        "customMetricsGuidance": {
          "applicable": false,
          "note": "This endpoint does not return custom metrics"
        }
      },
      "errorHandling": {
        "retryStrategy": {
          "429": {
            "action": "Exponential backoff retry",
            "initialDelay": 1,
            "maxRetries": 5,
            "backoffMultiplier": 2
          },
          "500": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 5
          },
          "502": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 10
          }
        },
        "noRetryErrors": [
          400,
          401,
          403,
          404
        ],
        "commonIssues": [
          {
            "error": "400 - Missing datePreset",
            "solution": "Add datePreset and timezone parameters to GET requests",
            "prevention": "Always validate required parameters before sending request"
          },
          {
            "error": "401 - Invalid API key",
            "solution": "Check Bearer token format and API key validity",
            "prevention": "Validate API key format before making requests"
          },
          {
            "error": "403 - Access denied",
            "solution": "Verify user permissions for this resource",
            "prevention": "Check user role and permissions before accessing resources"
          },
          {
            "error": "429 - Rate limited",
            "solution": "Implement exponential backoff and reduce request frequency",
            "prevention": "Monitor request rate and implement proper throttling"
          }
        ],
        "debugging": [
          "Log full request and response for error analysis",
          "Check API key permissions and expiration",
          "Verify request format matches API documentation",
          "Test with minimal required parameters first"
        ]
      },
      "workflow": {
        "prerequisites": [
          "Valid authentication",
          "Proper permissions"
        ],
        "followUpActions": [
          "Process response data",
          "Handle any errors"
        ],
        "relatedEndpoints": [],
        "typicalWorkflow": [
          "Call GET /public/api/v1/campaign/list/filtered endpoint",
          "Process response"
        ]
      },
      "testing": {
        "unitTests": [
          "Test with valid parameters",
          "Test with missing required parameters",
          "Test with invalid parameter values",
          "Test authentication failure scenarios"
        ],
        "integrationTests": [
          "Test full workflow with real data",
          "Test error handling and recovery",
          "Test rate limiting behavior",
          "Test response data validation"
        ],
        "testData": {
          "validParams": {},
          "invalidParams": []
        },
        "assertions": [
          "Response status code is 200 for valid requests",
          "Response contains expected data structure",
          "Custom metrics are present when applicable",
          "Error responses contain proper error messages"
        ]
      }
    },
    "PATCH /public/api/v1/campaign/modify/{id}": {
      "metadata": {
        "method": "PATCH",
        "path": "/public/api/v1/campaign/modify/{id}",
        "category": "campaign",
        "priority": 20,
        "importance": "HIGH",
        "hasCustomMetrics": false,
        "aiUsage": "Быстрые изменения конфигурации"
      },
      "description": {
        "summary": "Частичное обновление кампании",
        "detailed": "Detailed description for PATCH /public/api/v1/campaign/modify/{id} - Частичное обновление кампании",
        "businessContext": "Campaign management - core functionality for setting up, configuring, and managing traffic tracking campaigns",
        "whenToUse": [
          "Standard campaign operations"
        ]
      },
      "authentication": {
        "type": "Bearer Token",
        "header": "Authorization: Bearer {binomPublic}",
        "required": true,
        "note": "Use environment variable binomPublic"
      },
      "parameters": {
        "path": [
          {
            "name": "id",
            "type": "integer",
            "required": true,
            "description": "Unique identifier of the campaign",
            "example": 123
          }
        ],
        "query": [],
        "header": [
          {
            "name": "Authorization",
            "type": "string",
            "required": true,
            "description": "Bearer token authentication",
            "example": "Bearer your_api_key_here"
          },
          {
            "name": "Content-Type",
            "type": "string",
            "required": true,
            "description": "Content type for request body",
            "example": "application/json"
          }
        ]
      },
      "requestBody": {
        "required": true,
        "contentType": "application/json",
        "schema": {
          "type": "object"
        },
        "example": {}
      },
      "responses": {
        "200": {
          "description": "Success",
          "contentType": "application/json",
          "schema": {
            "type": "object"
          },
          "example": {
            "message": "Success"
          }
        },
        "400": {
          "description": "Bad Request - Invalid parameters or missing required fields",
          "contentType": "application/json",
          "schema": {
            "type": "object",
            "properties": {
              "error": {
                "type": "string"
              },
              "message": {
                "type": "string"
              },
              "details": {
                "type": "object"
              }
            }
          },
          "example": {
            "error": "Validation failed",
            "message": "Field 'datePreset' is required for stats endpoints",
            "details": {
              "field": "datePreset",
              "code": "required"
            }
          }
        },
        "401": {
          "description": "Unauthorized - Invalid or missing API key",
          "contentType": "application/json",
          "example": {
            "error": "Unauthorized",
            "message": "Invalid API key or missing Authorization header"
          }
        },
        "403": {
          "description": "Forbidden - Insufficient permissions",
          "contentType": "application/json",
          "example": {
            "error": "Access denied",
            "message": "Insufficient permissions to access this resource"
          }
        },
        "404": {
          "description": "Not Found - Resource does not exist",
          "contentType": "application/json",
          "example": {
            "error": "Not found",
            "message": "Campaign with ID 999 not found"
          }
        },
        "429": {
          "description": "Too Many Requests - Rate limit exceeded",
          "contentType": "application/json",
          "example": {
            "error": "Rate limit exceeded",
            "message": "Too many requests. Please wait before making another request.",
            "retryAfter": 60
          }
        },
        "500": {
          "description": "Internal Server Error",
          "contentType": "application/json",
          "example": {
            "error": "Internal server error",
            "message": "An unexpected error occurred. Please try again later."
          }
        }
      },
      "examples": {
        "python": "import requests\nimport os\nfrom datetime import datetime\n\n# Configuration\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\ndef handle_response(response):\n    \"\"\"Handle API response with proper error handling\"\"\"\n    if response.status_code == 200:\n        return response.json()\n    elif response.status_code == 400:\n        print(f\"Bad Request: {response.json()}\")\n    elif response.status_code == 401:\n        print(\"Unauthorized: Check your API key\")\n    elif response.status_code == 403:\n        print(\"Forbidden: Insufficient permissions\")\n    elif response.status_code == 404:\n        print(\"Not Found: Resource doesn't exist\")\n    elif response.status_code == 429:\n        print(\"Rate Limited: Wait before retrying\")\n    else:\n        print(f\"Error {response.status_code}: {response.text}\")\n    return None\n\n# PATCH /public/api/v1/campaign/modify/{id}\ndef call_endpoint():\n    \"\"\"Call the PATCH /public/api/v1/campaign/modify/{id} endpoint\"\"\"\n    \n    \n    \n    response = requests.patch(\n        f\"{BASE_URL}/public/api/v1/campaign/modify/123\",\n        headers=headers\n        \n    )\n    \n    return handle_response(response)\n\n# Usage\nif __name__ == \"__main__\":\n    result = call_endpoint()\n    print(result)\n",
        "curl": "# PATCH /public/api/v1/campaign/modify/{id}\ncurl -X PATCH \\\n  \"https://pierdun.com/public/api/v1/public/api/v1/campaign/modify/123\" \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Accept: application/json\" \\\n  -H \"Content-Type: application/json\"",
        "javascript": "// PATCH /public/api/v1/campaign/modify/{id}\nconst BINOM_API_KEY = process.env.BINOM_PUBLIC;\nconst BASE_URL = 'https://pierdun.com/public/api/v1';\n\nasync function callBinomAPI() {\n    const config = {\n        method: 'PATCH',\n        headers: {\n            'Authorization': `Bearer ${BINOM_API_KEY}`,\n            'Accept': 'application/json'\n        }\n    };\n    \n    try {\n        const response = await fetch(`${BASE_URL}/public/api/v1/campaign/modify/123`, config);\n        \n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        \n        const data = await response.json();\n        console.log('Success:', data);\n        return data;\n    } catch (error) {\n        console.error('Error:', error);\n        throw error;\n    }\n}\n\n// Usage\ncallBinomAPI()\n    .then(data => console.log(data))\n    .catch(error => console.error('Failed:', error));"
      },
      "customMetrics": {
        "available": false,
        "note": "This endpoint does not return custom metrics"
      },
      "aiInstructions": {
        "priority": "HIGH",
        "complexity": "LOW",
        "keyPoints": [
          "This is a HIGH priority endpoint",
          "Category: campaign operations",
          "Custom metrics: Not available",
          "Always use Bearer token authentication",
          "Handle rate limiting with exponential backoff"
        ],
        "beforeUsing": [
          "Verify API key is set in environment variables",
          "Check if datePreset and timezone are required",
          "Validate all required parameters are provided",
          "Ensure proper error handling is implemented"
        ],
        "afterUsing": [
          "Validate response structure matches expected schema",
          "Check for custom metrics if endpoint supports them",
          "Log important metrics for monitoring",
          "Handle pagination if response is truncated"
        ],
        "commonMistakes": [
          "Forgetting datePreset parameter for stats endpoints",
          "Using wrong Bearer token format",
          "Not handling 429 rate limit responses",
          "Ignoring custom metrics in optimization decisions",
          "Not validating response data before processing"
        ],
        "optimization": [
          "Cache responses when appropriate",
          "Use batch operations when available",
          "Implement retry logic with exponential backoff",
          "Monitor API usage to avoid rate limits",
          "Use appropriate date ranges to minimize data transfer"
        ],
        "customMetricsGuidance": {
          "applicable": false,
          "note": "This endpoint does not return custom metrics"
        }
      },
      "errorHandling": {
        "retryStrategy": {
          "429": {
            "action": "Exponential backoff retry",
            "initialDelay": 1,
            "maxRetries": 5,
            "backoffMultiplier": 2
          },
          "500": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 5
          },
          "502": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 10
          }
        },
        "noRetryErrors": [
          400,
          401,
          403,
          404
        ],
        "commonIssues": [
          {
            "error": "400 - Missing datePreset",
            "solution": "Add datePreset and timezone parameters to GET requests",
            "prevention": "Always validate required parameters before sending request"
          },
          {
            "error": "401 - Invalid API key",
            "solution": "Check Bearer token format and API key validity",
            "prevention": "Validate API key format before making requests"
          },
          {
            "error": "403 - Access denied",
            "solution": "Verify user permissions for this resource",
            "prevention": "Check user role and permissions before accessing resources"
          },
          {
            "error": "429 - Rate limited",
            "solution": "Implement exponential backoff and reduce request frequency",
            "prevention": "Monitor request rate and implement proper throttling"
          }
        ],
        "debugging": [
          "Log full request and response for error analysis",
          "Check API key permissions and expiration",
          "Verify request format matches API documentation",
          "Test with minimal required parameters first"
        ]
      },
      "workflow": {
        "prerequisites": [
          "Valid authentication",
          "Proper permissions"
        ],
        "followUpActions": [
          "Process response data",
          "Handle any errors"
        ],
        "relatedEndpoints": [],
        "typicalWorkflow": [
          "Call PATCH /public/api/v1/campaign/modify/{id} endpoint",
          "Process response"
        ]
      },
      "testing": {
        "unitTests": [
          "Test with valid parameters",
          "Test with missing required parameters",
          "Test with invalid parameter values",
          "Test authentication failure scenarios"
        ],
        "integrationTests": [
          "Test full workflow with real data",
          "Test error handling and recovery",
          "Test rate limiting behavior",
          "Test response data validation"
        ],
        "testData": {
          "validParams": {},
          "invalidParams": []
        },
        "assertions": [
          "Response status code is 200 for valid requests",
          "Response contains expected data structure",
          "Custom metrics are present when applicable",
          "Error responses contain proper error messages"
        ]
      }
    },
    "GET /public/api/v1/campaign/short/info": {
      "metadata": {
        "method": "GET",
        "path": "/public/api/v1/campaign/short/info",
        "category": "campaign",
        "priority": 21,
        "importance": "HIGH",
        "hasCustomMetrics": false,
        "aiUsage": "Быстрый обзор кампаний"
      },
      "description": {
        "summary": "Краткая информация о кампаниях",
        "detailed": "Detailed description for GET /public/api/v1/campaign/short/info - Краткая информация о кампаниях",
        "businessContext": "Campaign management - core functionality for setting up, configuring, and managing traffic tracking campaigns",
        "whenToUse": [
          "Standard campaign operations"
        ]
      },
      "authentication": {
        "type": "Bearer Token",
        "header": "Authorization: Bearer {binomPublic}",
        "required": true,
        "note": "Use environment variable binomPublic"
      },
      "parameters": {
        "path": [],
        "query": [],
        "header": [
          {
            "name": "Authorization",
            "type": "string",
            "required": true,
            "description": "Bearer token authentication",
            "example": "Bearer your_api_key_here"
          },
          {
            "name": "Content-Type",
            "type": "string",
            "required": false,
            "description": "Content type for request body",
            "example": "application/json"
          }
        ]
      },
      "requestBody": null,
      "responses": {
        "200": {
          "description": "Success",
          "contentType": "application/json",
          "schema": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "example": {
            "message": "Success"
          }
        },
        "400": {
          "description": "Bad Request - Invalid parameters or missing required fields",
          "contentType": "application/json",
          "schema": {
            "type": "object",
            "properties": {
              "error": {
                "type": "string"
              },
              "message": {
                "type": "string"
              },
              "details": {
                "type": "object"
              }
            }
          },
          "example": {
            "error": "Validation failed",
            "message": "Field 'datePreset' is required for stats endpoints",
            "details": {
              "field": "datePreset",
              "code": "required"
            }
          }
        },
        "401": {
          "description": "Unauthorized - Invalid or missing API key",
          "contentType": "application/json",
          "example": {
            "error": "Unauthorized",
            "message": "Invalid API key or missing Authorization header"
          }
        },
        "403": {
          "description": "Forbidden - Insufficient permissions",
          "contentType": "application/json",
          "example": {
            "error": "Access denied",
            "message": "Insufficient permissions to access this resource"
          }
        },
        "404": {
          "description": "Not Found - Resource does not exist",
          "contentType": "application/json",
          "example": {
            "error": "Not found",
            "message": "Campaign with ID 999 not found"
          }
        },
        "429": {
          "description": "Too Many Requests - Rate limit exceeded",
          "contentType": "application/json",
          "example": {
            "error": "Rate limit exceeded",
            "message": "Too many requests. Please wait before making another request.",
            "retryAfter": 60
          }
        },
        "500": {
          "description": "Internal Server Error",
          "contentType": "application/json",
          "example": {
            "error": "Internal server error",
            "message": "An unexpected error occurred. Please try again later."
          }
        }
      },
      "examples": {
        "python": "import requests\nimport os\nfrom datetime import datetime\n\n# Configuration\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\ndef handle_response(response):\n    \"\"\"Handle API response with proper error handling\"\"\"\n    if response.status_code == 200:\n        return response.json()\n    elif response.status_code == 400:\n        print(f\"Bad Request: {response.json()}\")\n    elif response.status_code == 401:\n        print(\"Unauthorized: Check your API key\")\n    elif response.status_code == 403:\n        print(\"Forbidden: Insufficient permissions\")\n    elif response.status_code == 404:\n        print(\"Not Found: Resource doesn't exist\")\n    elif response.status_code == 429:\n        print(\"Rate Limited: Wait before retrying\")\n    else:\n        print(f\"Error {response.status_code}: {response.text}\")\n    return None\n\n# GET /public/api/v1/campaign/short/info\ndef call_endpoint():\n    \"\"\"Call the GET /public/api/v1/campaign/short/info endpoint\"\"\"\n    \n    params = {'datePreset': 'last_7_days', 'timezone': 'UTC'}\n    \n    response = requests.get(\n        f\"{BASE_URL}/public/api/v1/campaign/short/info\",\n        headers=headers,\n        params=params\n    )\n    \n    return handle_response(response)\n\n# Usage\nif __name__ == \"__main__\":\n    result = call_endpoint()\n    print(result)\n",
        "curl": "# GET /public/api/v1/campaign/short/info\ncurl -X GET \\\n  \"https://pierdun.com/public/api/v1/public/api/v1/campaign/short/info\" \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Accept: application/json\"",
        "javascript": "// GET /public/api/v1/campaign/short/info\nconst BINOM_API_KEY = process.env.BINOM_PUBLIC;\nconst BASE_URL = 'https://pierdun.com/public/api/v1';\n\nasync function callBinomAPI() {\n    const config = {\n        method: 'GET',\n        headers: {\n            'Authorization': `Bearer ${BINOM_API_KEY}`,\n            'Accept': 'application/json'\n        }\n    };\n    \n    try {\n        const response = await fetch(`${BASE_URL}/public/api/v1/campaign/short/info`, config);\n        \n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        \n        const data = await response.json();\n        console.log('Success:', data);\n        return data;\n    } catch (error) {\n        console.error('Error:', error);\n        throw error;\n    }\n}\n\n// Usage\ncallBinomAPI()\n    .then(data => console.log(data))\n    .catch(error => console.error('Failed:', error));"
      },
      "customMetrics": {
        "available": false,
        "note": "This endpoint does not return custom metrics"
      },
      "aiInstructions": {
        "priority": "HIGH",
        "complexity": "LOW",
        "keyPoints": [
          "This is a HIGH priority endpoint",
          "Category: campaign operations",
          "Custom metrics: Not available",
          "Always use Bearer token authentication",
          "Handle rate limiting with exponential backoff"
        ],
        "beforeUsing": [
          "Verify API key is set in environment variables",
          "Check if datePreset and timezone are required",
          "Validate all required parameters are provided",
          "Ensure proper error handling is implemented"
        ],
        "afterUsing": [
          "Validate response structure matches expected schema",
          "Check for custom metrics if endpoint supports them",
          "Log important metrics for monitoring",
          "Handle pagination if response is truncated"
        ],
        "commonMistakes": [
          "Forgetting datePreset parameter for stats endpoints",
          "Using wrong Bearer token format",
          "Not handling 429 rate limit responses",
          "Ignoring custom metrics in optimization decisions",
          "Not validating response data before processing"
        ],
        "optimization": [
          "Cache responses when appropriate",
          "Use batch operations when available",
          "Implement retry logic with exponential backoff",
          "Monitor API usage to avoid rate limits",
          "Use appropriate date ranges to minimize data transfer"
        ],
        "customMetricsGuidance": {
          "applicable": false,
          "note": "This endpoint does not return custom metrics"
        }
      },
      "errorHandling": {
        "retryStrategy": {
          "429": {
            "action": "Exponential backoff retry",
            "initialDelay": 1,
            "maxRetries": 5,
            "backoffMultiplier": 2
          },
          "500": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 5
          },
          "502": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 10
          }
        },
        "noRetryErrors": [
          400,
          401,
          403,
          404
        ],
        "commonIssues": [
          {
            "error": "400 - Missing datePreset",
            "solution": "Add datePreset and timezone parameters to GET requests",
            "prevention": "Always validate required parameters before sending request"
          },
          {
            "error": "401 - Invalid API key",
            "solution": "Check Bearer token format and API key validity",
            "prevention": "Validate API key format before making requests"
          },
          {
            "error": "403 - Access denied",
            "solution": "Verify user permissions for this resource",
            "prevention": "Check user role and permissions before accessing resources"
          },
          {
            "error": "429 - Rate limited",
            "solution": "Implement exponential backoff and reduce request frequency",
            "prevention": "Monitor request rate and implement proper throttling"
          }
        ],
        "debugging": [
          "Log full request and response for error analysis",
          "Check API key permissions and expiration",
          "Verify request format matches API documentation",
          "Test with minimal required parameters first"
        ]
      },
      "workflow": {
        "prerequisites": [
          "Valid authentication",
          "Proper permissions"
        ],
        "followUpActions": [
          "Process response data",
          "Handle any errors"
        ],
        "relatedEndpoints": [],
        "typicalWorkflow": [
          "Call GET /public/api/v1/campaign/short/info endpoint",
          "Process response"
        ]
      },
      "testing": {
        "unitTests": [
          "Test with valid parameters",
          "Test with missing required parameters",
          "Test with invalid parameter values",
          "Test authentication failure scenarios"
        ],
        "integrationTests": [
          "Test full workflow with real data",
          "Test error handling and recovery",
          "Test rate limiting behavior",
          "Test response data validation"
        ],
        "testData": {
          "validParams": {},
          "invalidParams": []
        },
        "assertions": [
          "Response status code is 200 for valid requests",
          "Response contains expected data structure",
          "Custom metrics are present when applicable",
          "Error responses contain proper error messages"
        ]
      }
    },
    "DELETE /public/api/v1/campaign/{id}": {
      "metadata": {
        "method": "DELETE",
        "path": "/public/api/v1/campaign/{id}",
        "category": "campaign",
        "priority": 22,
        "importance": "HIGH",
        "hasCustomMetrics": false,
        "aiUsage": "Управление жизненным циклом"
      },
      "description": {
        "summary": "Удаление кампаний",
        "detailed": "Detailed description for DELETE /public/api/v1/campaign/{id} - Удаление кампаний",
        "businessContext": "Campaign management - core functionality for setting up, configuring, and managing traffic tracking campaigns",
        "whenToUse": [
          "Standard campaign operations"
        ]
      },
      "authentication": {
        "type": "Bearer Token",
        "header": "Authorization: Bearer {binomPublic}",
        "required": true,
        "note": "Use environment variable binomPublic"
      },
      "parameters": {
        "path": [
          {
            "name": "id",
            "type": "integer",
            "required": true,
            "description": "Unique identifier of the campaign",
            "example": 123
          }
        ],
        "query": [],
        "header": [
          {
            "name": "Authorization",
            "type": "string",
            "required": true,
            "description": "Bearer token authentication",
            "example": "Bearer your_api_key_here"
          },
          {
            "name": "Content-Type",
            "type": "string",
            "required": false,
            "description": "Content type for request body",
            "example": "application/json"
          }
        ]
      },
      "requestBody": null,
      "responses": {
        "200": {
          "description": "Success",
          "contentType": "application/json",
          "schema": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "example": {
            "message": "Success"
          }
        },
        "400": {
          "description": "Bad Request - Invalid parameters or missing required fields",
          "contentType": "application/json",
          "schema": {
            "type": "object",
            "properties": {
              "error": {
                "type": "string"
              },
              "message": {
                "type": "string"
              },
              "details": {
                "type": "object"
              }
            }
          },
          "example": {
            "error": "Validation failed",
            "message": "Field 'datePreset' is required for stats endpoints",
            "details": {
              "field": "datePreset",
              "code": "required"
            }
          }
        },
        "401": {
          "description": "Unauthorized - Invalid or missing API key",
          "contentType": "application/json",
          "example": {
            "error": "Unauthorized",
            "message": "Invalid API key or missing Authorization header"
          }
        },
        "403": {
          "description": "Forbidden - Insufficient permissions",
          "contentType": "application/json",
          "example": {
            "error": "Access denied",
            "message": "Insufficient permissions to access this resource"
          }
        },
        "404": {
          "description": "Not Found - Resource does not exist",
          "contentType": "application/json",
          "example": {
            "error": "Not found",
            "message": "Campaign with ID 999 not found"
          }
        },
        "429": {
          "description": "Too Many Requests - Rate limit exceeded",
          "contentType": "application/json",
          "example": {
            "error": "Rate limit exceeded",
            "message": "Too many requests. Please wait before making another request.",
            "retryAfter": 60
          }
        },
        "500": {
          "description": "Internal Server Error",
          "contentType": "application/json",
          "example": {
            "error": "Internal server error",
            "message": "An unexpected error occurred. Please try again later."
          }
        }
      },
      "examples": {
        "python": "import requests\nimport os\nfrom datetime import datetime\n\n# Configuration\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\ndef handle_response(response):\n    \"\"\"Handle API response with proper error handling\"\"\"\n    if response.status_code == 200:\n        return response.json()\n    elif response.status_code == 400:\n        print(f\"Bad Request: {response.json()}\")\n    elif response.status_code == 401:\n        print(\"Unauthorized: Check your API key\")\n    elif response.status_code == 403:\n        print(\"Forbidden: Insufficient permissions\")\n    elif response.status_code == 404:\n        print(\"Not Found: Resource doesn't exist\")\n    elif response.status_code == 429:\n        print(\"Rate Limited: Wait before retrying\")\n    else:\n        print(f\"Error {response.status_code}: {response.text}\")\n    return None\n\n# DELETE /public/api/v1/campaign/{id}\ndef call_endpoint():\n    \"\"\"Call the DELETE /public/api/v1/campaign/{id} endpoint\"\"\"\n    \n    \n    \n    response = requests.delete(\n        f\"{BASE_URL}/public/api/v1/campaign/123\",\n        headers=headers\n        \n    )\n    \n    return handle_response(response)\n\n# Usage\nif __name__ == \"__main__\":\n    result = call_endpoint()\n    print(result)\n",
        "curl": "# DELETE /public/api/v1/campaign/{id}\ncurl -X DELETE \\\n  \"https://pierdun.com/public/api/v1/public/api/v1/campaign/123\" \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Accept: application/json\"",
        "javascript": "// DELETE /public/api/v1/campaign/{id}\nconst BINOM_API_KEY = process.env.BINOM_PUBLIC;\nconst BASE_URL = 'https://pierdun.com/public/api/v1';\n\nasync function callBinomAPI() {\n    const config = {\n        method: 'DELETE',\n        headers: {\n            'Authorization': `Bearer ${BINOM_API_KEY}`,\n            'Accept': 'application/json'\n        }\n    };\n    \n    try {\n        const response = await fetch(`${BASE_URL}/public/api/v1/campaign/123`, config);\n        \n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        \n        const data = await response.json();\n        console.log('Success:', data);\n        return data;\n    } catch (error) {\n        console.error('Error:', error);\n        throw error;\n    }\n}\n\n// Usage\ncallBinomAPI()\n    .then(data => console.log(data))\n    .catch(error => console.error('Failed:', error));"
      },
      "customMetrics": {
        "available": false,
        "note": "This endpoint does not return custom metrics"
      },
      "aiInstructions": {
        "priority": "HIGH",
        "complexity": "LOW",
        "keyPoints": [
          "This is a HIGH priority endpoint",
          "Category: campaign operations",
          "Custom metrics: Not available",
          "Always use Bearer token authentication",
          "Handle rate limiting with exponential backoff"
        ],
        "beforeUsing": [
          "Verify API key is set in environment variables",
          "Check if datePreset and timezone are required",
          "Validate all required parameters are provided",
          "Ensure proper error handling is implemented"
        ],
        "afterUsing": [
          "Validate response structure matches expected schema",
          "Check for custom metrics if endpoint supports them",
          "Log important metrics for monitoring",
          "Handle pagination if response is truncated"
        ],
        "commonMistakes": [
          "Forgetting datePreset parameter for stats endpoints",
          "Using wrong Bearer token format",
          "Not handling 429 rate limit responses",
          "Ignoring custom metrics in optimization decisions",
          "Not validating response data before processing"
        ],
        "optimization": [
          "Cache responses when appropriate",
          "Use batch operations when available",
          "Implement retry logic with exponential backoff",
          "Monitor API usage to avoid rate limits",
          "Use appropriate date ranges to minimize data transfer"
        ],
        "customMetricsGuidance": {
          "applicable": false,
          "note": "This endpoint does not return custom metrics"
        }
      },
      "errorHandling": {
        "retryStrategy": {
          "429": {
            "action": "Exponential backoff retry",
            "initialDelay": 1,
            "maxRetries": 5,
            "backoffMultiplier": 2
          },
          "500": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 5
          },
          "502": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 10
          }
        },
        "noRetryErrors": [
          400,
          401,
          403,
          404
        ],
        "commonIssues": [
          {
            "error": "400 - Missing datePreset",
            "solution": "Add datePreset and timezone parameters to GET requests",
            "prevention": "Always validate required parameters before sending request"
          },
          {
            "error": "401 - Invalid API key",
            "solution": "Check Bearer token format and API key validity",
            "prevention": "Validate API key format before making requests"
          },
          {
            "error": "403 - Access denied",
            "solution": "Verify user permissions for this resource",
            "prevention": "Check user role and permissions before accessing resources"
          },
          {
            "error": "429 - Rate limited",
            "solution": "Implement exponential backoff and reduce request frequency",
            "prevention": "Monitor request rate and implement proper throttling"
          }
        ],
        "debugging": [
          "Log full request and response for error analysis",
          "Check API key permissions and expiration",
          "Verify request format matches API documentation",
          "Test with minimal required parameters first"
        ]
      },
      "workflow": {
        "prerequisites": [
          "Valid authentication",
          "Proper permissions"
        ],
        "followUpActions": [
          "Process response data",
          "Handle any errors"
        ],
        "relatedEndpoints": [],
        "typicalWorkflow": [
          "Call DELETE /public/api/v1/campaign/{id} endpoint",
          "Process response"
        ]
      },
      "testing": {
        "unitTests": [
          "Test with valid parameters",
          "Test with missing required parameters",
          "Test with invalid parameter values",
          "Test authentication failure scenarios"
        ],
        "integrationTests": [
          "Test full workflow with real data",
          "Test error handling and recovery",
          "Test rate limiting behavior",
          "Test response data validation"
        ],
        "testData": {
          "validParams": {},
          "invalidParams": []
        },
        "assertions": [
          "Response status code is 200 for valid requests",
          "Response contains expected data structure",
          "Custom metrics are present when applicable",
          "Error responses contain proper error messages"
        ]
      }
    },
    "GET /public/api/v1/campaign/{id}/clone": {
      "metadata": {
        "method": "GET",
        "path": "/public/api/v1/campaign/{id}/clone",
        "category": "campaign",
        "priority": 23,
        "importance": "HIGH",
        "hasCustomMetrics": false,
        "aiUsage": "Быстрое создание похожих кампаний"
      },
      "description": {
        "summary": "Клонирование кампаний",
        "detailed": "Detailed description for GET /public/api/v1/campaign/{id}/clone - Клонирование кампаний",
        "businessContext": "Campaign management - core functionality for setting up, configuring, and managing traffic tracking campaigns",
        "whenToUse": [
          "Standard campaign operations"
        ]
      },
      "authentication": {
        "type": "Bearer Token",
        "header": "Authorization: Bearer {binomPublic}",
        "required": true,
        "note": "Use environment variable binomPublic"
      },
      "parameters": {
        "path": [
          {
            "name": "id",
            "type": "integer",
            "required": true,
            "description": "Unique identifier of the campaign",
            "example": 123
          }
        ],
        "query": [],
        "header": [
          {
            "name": "Authorization",
            "type": "string",
            "required": true,
            "description": "Bearer token authentication",
            "example": "Bearer your_api_key_here"
          },
          {
            "name": "Content-Type",
            "type": "string",
            "required": false,
            "description": "Content type for request body",
            "example": "application/json"
          }
        ]
      },
      "requestBody": null,
      "responses": {
        "200": {
          "description": "Success",
          "contentType": "application/json",
          "schema": {
            "type": "object"
          },
          "example": {
            "message": "Success"
          }
        },
        "400": {
          "description": "Bad Request - Invalid parameters or missing required fields",
          "contentType": "application/json",
          "schema": {
            "type": "object",
            "properties": {
              "error": {
                "type": "string"
              },
              "message": {
                "type": "string"
              },
              "details": {
                "type": "object"
              }
            }
          },
          "example": {
            "error": "Validation failed",
            "message": "Field 'datePreset' is required for stats endpoints",
            "details": {
              "field": "datePreset",
              "code": "required"
            }
          }
        },
        "401": {
          "description": "Unauthorized - Invalid or missing API key",
          "contentType": "application/json",
          "example": {
            "error": "Unauthorized",
            "message": "Invalid API key or missing Authorization header"
          }
        },
        "403": {
          "description": "Forbidden - Insufficient permissions",
          "contentType": "application/json",
          "example": {
            "error": "Access denied",
            "message": "Insufficient permissions to access this resource"
          }
        },
        "404": {
          "description": "Not Found - Resource does not exist",
          "contentType": "application/json",
          "example": {
            "error": "Not found",
            "message": "Campaign with ID 999 not found"
          }
        },
        "429": {
          "description": "Too Many Requests - Rate limit exceeded",
          "contentType": "application/json",
          "example": {
            "error": "Rate limit exceeded",
            "message": "Too many requests. Please wait before making another request.",
            "retryAfter": 60
          }
        },
        "500": {
          "description": "Internal Server Error",
          "contentType": "application/json",
          "example": {
            "error": "Internal server error",
            "message": "An unexpected error occurred. Please try again later."
          }
        }
      },
      "examples": {
        "python": "import requests\nimport os\nfrom datetime import datetime\n\n# Configuration\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\ndef handle_response(response):\n    \"\"\"Handle API response with proper error handling\"\"\"\n    if response.status_code == 200:\n        return response.json()\n    elif response.status_code == 400:\n        print(f\"Bad Request: {response.json()}\")\n    elif response.status_code == 401:\n        print(\"Unauthorized: Check your API key\")\n    elif response.status_code == 403:\n        print(\"Forbidden: Insufficient permissions\")\n    elif response.status_code == 404:\n        print(\"Not Found: Resource doesn't exist\")\n    elif response.status_code == 429:\n        print(\"Rate Limited: Wait before retrying\")\n    else:\n        print(f\"Error {response.status_code}: {response.text}\")\n    return None\n\n# GET /public/api/v1/campaign/{id}/clone\ndef call_endpoint():\n    \"\"\"Call the GET /public/api/v1/campaign/{id}/clone endpoint\"\"\"\n    \n    params = {'datePreset': 'last_7_days', 'timezone': 'UTC'}\n    \n    response = requests.get(\n        f\"{BASE_URL}/public/api/v1/campaign/123/clone\",\n        headers=headers,\n        params=params\n    )\n    \n    return handle_response(response)\n\n# Usage\nif __name__ == \"__main__\":\n    result = call_endpoint()\n    print(result)\n",
        "curl": "# GET /public/api/v1/campaign/{id}/clone\ncurl -X GET \\\n  \"https://pierdun.com/public/api/v1/public/api/v1/campaign/123/clone\" \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Accept: application/json\"",
        "javascript": "// GET /public/api/v1/campaign/{id}/clone\nconst BINOM_API_KEY = process.env.BINOM_PUBLIC;\nconst BASE_URL = 'https://pierdun.com/public/api/v1';\n\nasync function callBinomAPI() {\n    const config = {\n        method: 'GET',\n        headers: {\n            'Authorization': `Bearer ${BINOM_API_KEY}`,\n            'Accept': 'application/json'\n        }\n    };\n    \n    try {\n        const response = await fetch(`${BASE_URL}/public/api/v1/campaign/123/clone`, config);\n        \n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        \n        const data = await response.json();\n        console.log('Success:', data);\n        return data;\n    } catch (error) {\n        console.error('Error:', error);\n        throw error;\n    }\n}\n\n// Usage\ncallBinomAPI()\n    .then(data => console.log(data))\n    .catch(error => console.error('Failed:', error));"
      },
      "customMetrics": {
        "available": false,
        "note": "This endpoint does not return custom metrics"
      },
      "aiInstructions": {
        "priority": "HIGH",
        "complexity": "LOW",
        "keyPoints": [
          "This is a HIGH priority endpoint",
          "Category: campaign operations",
          "Custom metrics: Not available",
          "Always use Bearer token authentication",
          "Handle rate limiting with exponential backoff"
        ],
        "beforeUsing": [
          "Verify API key is set in environment variables",
          "Check if datePreset and timezone are required",
          "Validate all required parameters are provided",
          "Ensure proper error handling is implemented"
        ],
        "afterUsing": [
          "Validate response structure matches expected schema",
          "Check for custom metrics if endpoint supports them",
          "Log important metrics for monitoring",
          "Handle pagination if response is truncated"
        ],
        "commonMistakes": [
          "Forgetting datePreset parameter for stats endpoints",
          "Using wrong Bearer token format",
          "Not handling 429 rate limit responses",
          "Ignoring custom metrics in optimization decisions",
          "Not validating response data before processing"
        ],
        "optimization": [
          "Cache responses when appropriate",
          "Use batch operations when available",
          "Implement retry logic with exponential backoff",
          "Monitor API usage to avoid rate limits",
          "Use appropriate date ranges to minimize data transfer"
        ],
        "customMetricsGuidance": {
          "applicable": false,
          "note": "This endpoint does not return custom metrics"
        }
      },
      "errorHandling": {
        "retryStrategy": {
          "429": {
            "action": "Exponential backoff retry",
            "initialDelay": 1,
            "maxRetries": 5,
            "backoffMultiplier": 2
          },
          "500": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 5
          },
          "502": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 10
          }
        },
        "noRetryErrors": [
          400,
          401,
          403,
          404
        ],
        "commonIssues": [
          {
            "error": "400 - Missing datePreset",
            "solution": "Add datePreset and timezone parameters to GET requests",
            "prevention": "Always validate required parameters before sending request"
          },
          {
            "error": "401 - Invalid API key",
            "solution": "Check Bearer token format and API key validity",
            "prevention": "Validate API key format before making requests"
          },
          {
            "error": "403 - Access denied",
            "solution": "Verify user permissions for this resource",
            "prevention": "Check user role and permissions before accessing resources"
          },
          {
            "error": "429 - Rate limited",
            "solution": "Implement exponential backoff and reduce request frequency",
            "prevention": "Monitor request rate and implement proper throttling"
          }
        ],
        "debugging": [
          "Log full request and response for error analysis",
          "Check API key permissions and expiration",
          "Verify request format matches API documentation",
          "Test with minimal required parameters first"
        ]
      },
      "workflow": {
        "prerequisites": [
          "Valid authentication",
          "Proper permissions"
        ],
        "followUpActions": [
          "Process response data",
          "Handle any errors"
        ],
        "relatedEndpoints": [],
        "typicalWorkflow": [
          "Call GET /public/api/v1/campaign/{id}/clone endpoint",
          "Process response"
        ]
      },
      "testing": {
        "unitTests": [
          "Test with valid parameters",
          "Test with missing required parameters",
          "Test with invalid parameter values",
          "Test authentication failure scenarios"
        ],
        "integrationTests": [
          "Test full workflow with real data",
          "Test error handling and recovery",
          "Test rate limiting behavior",
          "Test response data validation"
        ],
        "testData": {
          "validParams": {},
          "invalidParams": []
        },
        "assertions": [
          "Response status code is 200 for valid requests",
          "Response contains expected data structure",
          "Custom metrics are present when applicable",
          "Error responses contain proper error messages"
        ]
      }
    },
    "PUT /public/api/v1/clicks/campaign/{id}": {
      "metadata": {
        "method": "PUT",
        "path": "/public/api/v1/clicks/campaign/{id}",
        "category": "clicks",
        "priority": 24,
        "importance": "HIGH",
        "hasCustomMetrics": false,
        "aiUsage": "Управление стоимостью трафика"
      },
      "description": {
        "summary": "Обновление стоимости кликов",
        "detailed": "Detailed description for PUT /public/api/v1/clicks/campaign/{id} - Обновление стоимости кликов",
        "businessContext": "Traffic cost management - handles click cost updates and traffic data cleanup operations",
        "whenToUse": [
          "Standard clicks operations"
        ]
      },
      "authentication": {
        "type": "Bearer Token",
        "header": "Authorization: Bearer {binomPublic}",
        "required": true,
        "note": "Use environment variable binomPublic"
      },
      "parameters": {
        "path": [
          {
            "name": "id",
            "type": "integer",
            "required": true,
            "description": "Unique identifier of the clicks",
            "example": 123
          }
        ],
        "query": [],
        "header": [
          {
            "name": "Authorization",
            "type": "string",
            "required": true,
            "description": "Bearer token authentication",
            "example": "Bearer your_api_key_here"
          },
          {
            "name": "Content-Type",
            "type": "string",
            "required": true,
            "description": "Content type for request body",
            "example": "application/json"
          }
        ]
      },
      "requestBody": {
        "required": true,
        "contentType": "application/json",
        "schema": {
          "type": "object"
        },
        "example": {}
      },
      "responses": {
        "200": {
          "description": "Success",
          "contentType": "application/json",
          "schema": {
            "type": "object"
          },
          "example": {
            "message": "Success"
          }
        },
        "400": {
          "description": "Bad Request - Invalid parameters or missing required fields",
          "contentType": "application/json",
          "schema": {
            "type": "object",
            "properties": {
              "error": {
                "type": "string"
              },
              "message": {
                "type": "string"
              },
              "details": {
                "type": "object"
              }
            }
          },
          "example": {
            "error": "Validation failed",
            "message": "Field 'datePreset' is required for stats endpoints",
            "details": {
              "field": "datePreset",
              "code": "required"
            }
          }
        },
        "401": {
          "description": "Unauthorized - Invalid or missing API key",
          "contentType": "application/json",
          "example": {
            "error": "Unauthorized",
            "message": "Invalid API key or missing Authorization header"
          }
        },
        "403": {
          "description": "Forbidden - Insufficient permissions",
          "contentType": "application/json",
          "example": {
            "error": "Access denied",
            "message": "Insufficient permissions to access this resource"
          }
        },
        "404": {
          "description": "Not Found - Resource does not exist",
          "contentType": "application/json",
          "example": {
            "error": "Not found",
            "message": "Campaign with ID 999 not found"
          }
        },
        "429": {
          "description": "Too Many Requests - Rate limit exceeded",
          "contentType": "application/json",
          "example": {
            "error": "Rate limit exceeded",
            "message": "Too many requests. Please wait before making another request.",
            "retryAfter": 60
          }
        },
        "500": {
          "description": "Internal Server Error",
          "contentType": "application/json",
          "example": {
            "error": "Internal server error",
            "message": "An unexpected error occurred. Please try again later."
          }
        }
      },
      "examples": {
        "python": "import requests\nimport os\nfrom datetime import datetime\n\n# Configuration\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\ndef handle_response(response):\n    \"\"\"Handle API response with proper error handling\"\"\"\n    if response.status_code == 200:\n        return response.json()\n    elif response.status_code == 400:\n        print(f\"Bad Request: {response.json()}\")\n    elif response.status_code == 401:\n        print(\"Unauthorized: Check your API key\")\n    elif response.status_code == 403:\n        print(\"Forbidden: Insufficient permissions\")\n    elif response.status_code == 404:\n        print(\"Not Found: Resource doesn't exist\")\n    elif response.status_code == 429:\n        print(\"Rate Limited: Wait before retrying\")\n    else:\n        print(f\"Error {response.status_code}: {response.text}\")\n    return None\n\n# PUT /public/api/v1/clicks/campaign/{id}\ndef call_endpoint():\n    \"\"\"Call the PUT /public/api/v1/clicks/campaign/{id} endpoint\"\"\"\n    \n    \n    \n    response = requests.put(\n        f\"{BASE_URL}/public/api/v1/clicks/campaign/123\",\n        headers=headers\n        \n    )\n    \n    return handle_response(response)\n\n# Usage\nif __name__ == \"__main__\":\n    result = call_endpoint()\n    print(result)\n",
        "curl": "# PUT /public/api/v1/clicks/campaign/{id}\ncurl -X PUT \\\n  \"https://pierdun.com/public/api/v1/public/api/v1/clicks/campaign/123\" \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Accept: application/json\" \\\n  -H \"Content-Type: application/json\"",
        "javascript": "// PUT /public/api/v1/clicks/campaign/{id}\nconst BINOM_API_KEY = process.env.BINOM_PUBLIC;\nconst BASE_URL = 'https://pierdun.com/public/api/v1';\n\nasync function callBinomAPI() {\n    const config = {\n        method: 'PUT',\n        headers: {\n            'Authorization': `Bearer ${BINOM_API_KEY}`,\n            'Accept': 'application/json'\n        }\n    };\n    \n    try {\n        const response = await fetch(`${BASE_URL}/public/api/v1/clicks/campaign/123`, config);\n        \n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        \n        const data = await response.json();\n        console.log('Success:', data);\n        return data;\n    } catch (error) {\n        console.error('Error:', error);\n        throw error;\n    }\n}\n\n// Usage\ncallBinomAPI()\n    .then(data => console.log(data))\n    .catch(error => console.error('Failed:', error));"
      },
      "customMetrics": {
        "available": false,
        "note": "This endpoint does not return custom metrics"
      },
      "aiInstructions": {
        "priority": "HIGH",
        "complexity": "LOW",
        "keyPoints": [
          "This is a HIGH priority endpoint",
          "Category: clicks operations",
          "Custom metrics: Not available",
          "Always use Bearer token authentication",
          "Handle rate limiting with exponential backoff"
        ],
        "beforeUsing": [
          "Verify API key is set in environment variables",
          "Check if datePreset and timezone are required",
          "Validate all required parameters are provided",
          "Ensure proper error handling is implemented"
        ],
        "afterUsing": [
          "Validate response structure matches expected schema",
          "Check for custom metrics if endpoint supports them",
          "Log important metrics for monitoring",
          "Handle pagination if response is truncated"
        ],
        "commonMistakes": [
          "Forgetting datePreset parameter for stats endpoints",
          "Using wrong Bearer token format",
          "Not handling 429 rate limit responses",
          "Ignoring custom metrics in optimization decisions",
          "Not validating response data before processing"
        ],
        "optimization": [
          "Cache responses when appropriate",
          "Use batch operations when available",
          "Implement retry logic with exponential backoff",
          "Monitor API usage to avoid rate limits",
          "Use appropriate date ranges to minimize data transfer"
        ],
        "customMetricsGuidance": {
          "applicable": false,
          "note": "This endpoint does not return custom metrics"
        }
      },
      "errorHandling": {
        "retryStrategy": {
          "429": {
            "action": "Exponential backoff retry",
            "initialDelay": 1,
            "maxRetries": 5,
            "backoffMultiplier": 2
          },
          "500": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 5
          },
          "502": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 10
          }
        },
        "noRetryErrors": [
          400,
          401,
          403,
          404
        ],
        "commonIssues": [
          {
            "error": "400 - Missing datePreset",
            "solution": "Add datePreset and timezone parameters to GET requests",
            "prevention": "Always validate required parameters before sending request"
          },
          {
            "error": "401 - Invalid API key",
            "solution": "Check Bearer token format and API key validity",
            "prevention": "Validate API key format before making requests"
          },
          {
            "error": "403 - Access denied",
            "solution": "Verify user permissions for this resource",
            "prevention": "Check user role and permissions before accessing resources"
          },
          {
            "error": "429 - Rate limited",
            "solution": "Implement exponential backoff and reduce request frequency",
            "prevention": "Monitor request rate and implement proper throttling"
          }
        ],
        "debugging": [
          "Log full request and response for error analysis",
          "Check API key permissions and expiration",
          "Verify request format matches API documentation",
          "Test with minimal required parameters first"
        ]
      },
      "workflow": {
        "prerequisites": [
          "Valid authentication",
          "Proper permissions"
        ],
        "followUpActions": [
          "Process response data",
          "Handle any errors"
        ],
        "relatedEndpoints": [],
        "typicalWorkflow": [
          "Call PUT /public/api/v1/clicks/campaign/{id} endpoint",
          "Process response"
        ]
      },
      "testing": {
        "unitTests": [
          "Test with valid parameters",
          "Test with missing required parameters",
          "Test with invalid parameter values",
          "Test authentication failure scenarios"
        ],
        "integrationTests": [
          "Test full workflow with real data",
          "Test error handling and recovery",
          "Test rate limiting behavior",
          "Test response data validation"
        ],
        "testData": {
          "validParams": {},
          "invalidParams": []
        },
        "assertions": [
          "Response status code is 200 for valid requests",
          "Response contains expected data structure",
          "Custom metrics are present when applicable",
          "Error responses contain proper error messages"
        ]
      }
    },
    "DELETE /public/api/v1/clicks/campaign/{id}": {
      "metadata": {
        "method": "DELETE",
        "path": "/public/api/v1/clicks/campaign/{id}",
        "category": "clicks",
        "priority": 25,
        "importance": "HIGH",
        "hasCustomMetrics": false,
        "aiUsage": "Очистка данных кампании"
      },
      "description": {
        "summary": "Удаление кликов кампании",
        "detailed": "Detailed description for DELETE /public/api/v1/clicks/campaign/{id} - Удаление кликов кампании",
        "businessContext": "Traffic cost management - handles click cost updates and traffic data cleanup operations",
        "whenToUse": [
          "Standard clicks operations"
        ]
      },
      "authentication": {
        "type": "Bearer Token",
        "header": "Authorization: Bearer {binomPublic}",
        "required": true,
        "note": "Use environment variable binomPublic"
      },
      "parameters": {
        "path": [
          {
            "name": "id",
            "type": "integer",
            "required": true,
            "description": "Unique identifier of the clicks",
            "example": 123
          }
        ],
        "query": [],
        "header": [
          {
            "name": "Authorization",
            "type": "string",
            "required": true,
            "description": "Bearer token authentication",
            "example": "Bearer your_api_key_here"
          },
          {
            "name": "Content-Type",
            "type": "string",
            "required": false,
            "description": "Content type for request body",
            "example": "application/json"
          }
        ]
      },
      "requestBody": null,
      "responses": {
        "200": {
          "description": "Success",
          "contentType": "application/json",
          "schema": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "example": {
            "message": "Success"
          }
        },
        "400": {
          "description": "Bad Request - Invalid parameters or missing required fields",
          "contentType": "application/json",
          "schema": {
            "type": "object",
            "properties": {
              "error": {
                "type": "string"
              },
              "message": {
                "type": "string"
              },
              "details": {
                "type": "object"
              }
            }
          },
          "example": {
            "error": "Validation failed",
            "message": "Field 'datePreset' is required for stats endpoints",
            "details": {
              "field": "datePreset",
              "code": "required"
            }
          }
        },
        "401": {
          "description": "Unauthorized - Invalid or missing API key",
          "contentType": "application/json",
          "example": {
            "error": "Unauthorized",
            "message": "Invalid API key or missing Authorization header"
          }
        },
        "403": {
          "description": "Forbidden - Insufficient permissions",
          "contentType": "application/json",
          "example": {
            "error": "Access denied",
            "message": "Insufficient permissions to access this resource"
          }
        },
        "404": {
          "description": "Not Found - Resource does not exist",
          "contentType": "application/json",
          "example": {
            "error": "Not found",
            "message": "Campaign with ID 999 not found"
          }
        },
        "429": {
          "description": "Too Many Requests - Rate limit exceeded",
          "contentType": "application/json",
          "example": {
            "error": "Rate limit exceeded",
            "message": "Too many requests. Please wait before making another request.",
            "retryAfter": 60
          }
        },
        "500": {
          "description": "Internal Server Error",
          "contentType": "application/json",
          "example": {
            "error": "Internal server error",
            "message": "An unexpected error occurred. Please try again later."
          }
        }
      },
      "examples": {
        "python": "import requests\nimport os\nfrom datetime import datetime\n\n# Configuration\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\ndef handle_response(response):\n    \"\"\"Handle API response with proper error handling\"\"\"\n    if response.status_code == 200:\n        return response.json()\n    elif response.status_code == 400:\n        print(f\"Bad Request: {response.json()}\")\n    elif response.status_code == 401:\n        print(\"Unauthorized: Check your API key\")\n    elif response.status_code == 403:\n        print(\"Forbidden: Insufficient permissions\")\n    elif response.status_code == 404:\n        print(\"Not Found: Resource doesn't exist\")\n    elif response.status_code == 429:\n        print(\"Rate Limited: Wait before retrying\")\n    else:\n        print(f\"Error {response.status_code}: {response.text}\")\n    return None\n\n# DELETE /public/api/v1/clicks/campaign/{id}\ndef call_endpoint():\n    \"\"\"Call the DELETE /public/api/v1/clicks/campaign/{id} endpoint\"\"\"\n    \n    \n    \n    response = requests.delete(\n        f\"{BASE_URL}/public/api/v1/clicks/campaign/123\",\n        headers=headers\n        \n    )\n    \n    return handle_response(response)\n\n# Usage\nif __name__ == \"__main__\":\n    result = call_endpoint()\n    print(result)\n",
        "curl": "# DELETE /public/api/v1/clicks/campaign/{id}\ncurl -X DELETE \\\n  \"https://pierdun.com/public/api/v1/public/api/v1/clicks/campaign/123\" \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Accept: application/json\"",
        "javascript": "// DELETE /public/api/v1/clicks/campaign/{id}\nconst BINOM_API_KEY = process.env.BINOM_PUBLIC;\nconst BASE_URL = 'https://pierdun.com/public/api/v1';\n\nasync function callBinomAPI() {\n    const config = {\n        method: 'DELETE',\n        headers: {\n            'Authorization': `Bearer ${BINOM_API_KEY}`,\n            'Accept': 'application/json'\n        }\n    };\n    \n    try {\n        const response = await fetch(`${BASE_URL}/public/api/v1/clicks/campaign/123`, config);\n        \n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        \n        const data = await response.json();\n        console.log('Success:', data);\n        return data;\n    } catch (error) {\n        console.error('Error:', error);\n        throw error;\n    }\n}\n\n// Usage\ncallBinomAPI()\n    .then(data => console.log(data))\n    .catch(error => console.error('Failed:', error));"
      },
      "customMetrics": {
        "available": false,
        "note": "This endpoint does not return custom metrics"
      },
      "aiInstructions": {
        "priority": "HIGH",
        "complexity": "LOW",
        "keyPoints": [
          "This is a HIGH priority endpoint",
          "Category: clicks operations",
          "Custom metrics: Not available",
          "Always use Bearer token authentication",
          "Handle rate limiting with exponential backoff"
        ],
        "beforeUsing": [
          "Verify API key is set in environment variables",
          "Check if datePreset and timezone are required",
          "Validate all required parameters are provided",
          "Ensure proper error handling is implemented"
        ],
        "afterUsing": [
          "Validate response structure matches expected schema",
          "Check for custom metrics if endpoint supports them",
          "Log important metrics for monitoring",
          "Handle pagination if response is truncated"
        ],
        "commonMistakes": [
          "Forgetting datePreset parameter for stats endpoints",
          "Using wrong Bearer token format",
          "Not handling 429 rate limit responses",
          "Ignoring custom metrics in optimization decisions",
          "Not validating response data before processing"
        ],
        "optimization": [
          "Cache responses when appropriate",
          "Use batch operations when available",
          "Implement retry logic with exponential backoff",
          "Monitor API usage to avoid rate limits",
          "Use appropriate date ranges to minimize data transfer"
        ],
        "customMetricsGuidance": {
          "applicable": false,
          "note": "This endpoint does not return custom metrics"
        }
      },
      "errorHandling": {
        "retryStrategy": {
          "429": {
            "action": "Exponential backoff retry",
            "initialDelay": 1,
            "maxRetries": 5,
            "backoffMultiplier": 2
          },
          "500": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 5
          },
          "502": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 10
          }
        },
        "noRetryErrors": [
          400,
          401,
          403,
          404
        ],
        "commonIssues": [
          {
            "error": "400 - Missing datePreset",
            "solution": "Add datePreset and timezone parameters to GET requests",
            "prevention": "Always validate required parameters before sending request"
          },
          {
            "error": "401 - Invalid API key",
            "solution": "Check Bearer token format and API key validity",
            "prevention": "Validate API key format before making requests"
          },
          {
            "error": "403 - Access denied",
            "solution": "Verify user permissions for this resource",
            "prevention": "Check user role and permissions before accessing resources"
          },
          {
            "error": "429 - Rate limited",
            "solution": "Implement exponential backoff and reduce request frequency",
            "prevention": "Monitor request rate and implement proper throttling"
          }
        ],
        "debugging": [
          "Log full request and response for error analysis",
          "Check API key permissions and expiration",
          "Verify request format matches API documentation",
          "Test with minimal required parameters first"
        ]
      },
      "workflow": {
        "prerequisites": [
          "Valid authentication",
          "Proper permissions"
        ],
        "followUpActions": [
          "Process response data",
          "Handle any errors"
        ],
        "relatedEndpoints": [],
        "typicalWorkflow": [
          "Call DELETE /public/api/v1/clicks/campaign/{id} endpoint",
          "Process response"
        ]
      },
      "testing": {
        "unitTests": [
          "Test with valid parameters",
          "Test with missing required parameters",
          "Test with invalid parameter values",
          "Test authentication failure scenarios"
        ],
        "integrationTests": [
          "Test full workflow with real data",
          "Test error handling and recovery",
          "Test rate limiting behavior",
          "Test response data validation"
        ],
        "testData": {
          "validParams": {},
          "invalidParams": []
        },
        "assertions": [
          "Response status code is 200 for valid requests",
          "Response contains expected data structure",
          "Custom metrics are present when applicable",
          "Error responses contain proper error messages"
        ]
      }
    },
    "GET /public/api/v1/info/affiliate_network": {
      "metadata": {
        "method": "GET",
        "path": "/public/api/v1/info/affiliate_network",
        "category": "info",
        "priority": 26,
        "importance": "HIGH",
        "hasCustomMetrics": false,
        "aiUsage": "Базовая информация о сетях"
      },
      "description": {
        "summary": "Список партнерских сетей",
        "detailed": "Detailed description for GET /public/api/v1/info/affiliate_network - Список партнерских сетей",
        "businessContext": "Reference data retrieval - provides lists and details of available resources for campaign configuration",
        "whenToUse": [
          "Standard info operations"
        ]
      },
      "authentication": {
        "type": "Bearer Token",
        "header": "Authorization: Bearer {binomPublic}",
        "required": true,
        "note": "Use environment variable binomPublic"
      },
      "parameters": {
        "path": [],
        "query": [
          {
            "name": "datePreset",
            "type": "string",
            "required": true,
            "description": "Date range preset for data filtering",
            "enum": [
              "today",
              "yesterday",
              "last_7_days",
              "last_30_days",
              "this_month",
              "last_month",
              "custom_time"
            ],
            "example": "last_7_days"
          },
          {
            "name": "timezone",
            "type": "string",
            "required": true,
            "description": "Timezone for date calculations",
            "example": "UTC"
          },
          {
            "name": "limit",
            "type": "integer",
            "required": false,
            "description": "Maximum number of records to return",
            "example": 100,
            "default": 100
          },
          {
            "name": "offset",
            "type": "integer",
            "required": false,
            "description": "Number of records to skip for pagination",
            "example": 0,
            "default": 0
          }
        ],
        "header": [
          {
            "name": "Authorization",
            "type": "string",
            "required": true,
            "description": "Bearer token authentication",
            "example": "Bearer your_api_key_here"
          },
          {
            "name": "Content-Type",
            "type": "string",
            "required": false,
            "description": "Content type for request body",
            "example": "application/json"
          }
        ]
      },
      "requestBody": null,
      "responses": {
        "200": {
          "description": "Success",
          "contentType": "application/json",
          "schema": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "example": {
            "message": "Success"
          }
        },
        "400": {
          "description": "Bad Request - Invalid parameters or missing required fields",
          "contentType": "application/json",
          "schema": {
            "type": "object",
            "properties": {
              "error": {
                "type": "string"
              },
              "message": {
                "type": "string"
              },
              "details": {
                "type": "object"
              }
            }
          },
          "example": {
            "error": "Validation failed",
            "message": "Field 'datePreset' is required for stats endpoints",
            "details": {
              "field": "datePreset",
              "code": "required"
            }
          }
        },
        "401": {
          "description": "Unauthorized - Invalid or missing API key",
          "contentType": "application/json",
          "example": {
            "error": "Unauthorized",
            "message": "Invalid API key or missing Authorization header"
          }
        },
        "403": {
          "description": "Forbidden - Insufficient permissions",
          "contentType": "application/json",
          "example": {
            "error": "Access denied",
            "message": "Insufficient permissions to access this resource"
          }
        },
        "404": {
          "description": "Not Found - Resource does not exist",
          "contentType": "application/json",
          "example": {
            "error": "Not found",
            "message": "Campaign with ID 999 not found"
          }
        },
        "429": {
          "description": "Too Many Requests - Rate limit exceeded",
          "contentType": "application/json",
          "example": {
            "error": "Rate limit exceeded",
            "message": "Too many requests. Please wait before making another request.",
            "retryAfter": 60
          }
        },
        "500": {
          "description": "Internal Server Error",
          "contentType": "application/json",
          "example": {
            "error": "Internal server error",
            "message": "An unexpected error occurred. Please try again later."
          }
        }
      },
      "examples": {
        "python": "import requests\nimport os\nfrom datetime import datetime\n\n# Configuration\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\ndef handle_response(response):\n    \"\"\"Handle API response with proper error handling\"\"\"\n    if response.status_code == 200:\n        return response.json()\n    elif response.status_code == 400:\n        print(f\"Bad Request: {response.json()}\")\n    elif response.status_code == 401:\n        print(\"Unauthorized: Check your API key\")\n    elif response.status_code == 403:\n        print(\"Forbidden: Insufficient permissions\")\n    elif response.status_code == 404:\n        print(\"Not Found: Resource doesn't exist\")\n    elif response.status_code == 429:\n        print(\"Rate Limited: Wait before retrying\")\n    else:\n        print(f\"Error {response.status_code}: {response.text}\")\n    return None\n\n# GET /public/api/v1/info/affiliate_network\ndef call_endpoint():\n    \"\"\"Call the GET /public/api/v1/info/affiliate_network endpoint\"\"\"\n    \n    params = {'datePreset': 'last_7_days', 'timezone': 'UTC'}\n    \n    response = requests.get(\n        f\"{BASE_URL}/public/api/v1/info/affiliate_network\",\n        headers=headers,\n        params=params\n    )\n    \n    return handle_response(response)\n\n# Usage\nif __name__ == \"__main__\":\n    result = call_endpoint()\n    print(result)\n",
        "curl": "# GET /public/api/v1/info/affiliate_network\ncurl -X GET \\\n  \"https://pierdun.com/public/api/v1/public/api/v1/info/affiliate_network\" \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Accept: application/json\"",
        "javascript": "// GET /public/api/v1/info/affiliate_network\nconst BINOM_API_KEY = process.env.BINOM_PUBLIC;\nconst BASE_URL = 'https://pierdun.com/public/api/v1';\n\nasync function callBinomAPI() {\n    const config = {\n        method: 'GET',\n        headers: {\n            'Authorization': `Bearer ${BINOM_API_KEY}`,\n            'Accept': 'application/json'\n        }\n    };\n    \n    try {\n        const response = await fetch(`${BASE_URL}/public/api/v1/info/affiliate_network`, config);\n        \n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        \n        const data = await response.json();\n        console.log('Success:', data);\n        return data;\n    } catch (error) {\n        console.error('Error:', error);\n        throw error;\n    }\n}\n\n// Usage\ncallBinomAPI()\n    .then(data => console.log(data))\n    .catch(error => console.error('Failed:', error));"
      },
      "customMetrics": {
        "available": false,
        "note": "This endpoint does not return custom metrics"
      },
      "aiInstructions": {
        "priority": "HIGH",
        "complexity": "LOW",
        "keyPoints": [
          "This is a HIGH priority endpoint",
          "Category: info operations",
          "Custom metrics: Not available",
          "Always use Bearer token authentication",
          "Handle rate limiting with exponential backoff"
        ],
        "beforeUsing": [
          "Verify API key is set in environment variables",
          "Check if datePreset and timezone are required",
          "Validate all required parameters are provided",
          "Ensure proper error handling is implemented"
        ],
        "afterUsing": [
          "Validate response structure matches expected schema",
          "Check for custom metrics if endpoint supports them",
          "Log important metrics for monitoring",
          "Handle pagination if response is truncated"
        ],
        "commonMistakes": [
          "Forgetting datePreset parameter for stats endpoints",
          "Using wrong Bearer token format",
          "Not handling 429 rate limit responses",
          "Ignoring custom metrics in optimization decisions",
          "Not validating response data before processing"
        ],
        "optimization": [
          "Cache responses when appropriate",
          "Use batch operations when available",
          "Implement retry logic with exponential backoff",
          "Monitor API usage to avoid rate limits",
          "Use appropriate date ranges to minimize data transfer"
        ],
        "customMetricsGuidance": {
          "applicable": false,
          "note": "This endpoint does not return custom metrics"
        }
      },
      "errorHandling": {
        "retryStrategy": {
          "429": {
            "action": "Exponential backoff retry",
            "initialDelay": 1,
            "maxRetries": 5,
            "backoffMultiplier": 2
          },
          "500": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 5
          },
          "502": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 10
          }
        },
        "noRetryErrors": [
          400,
          401,
          403,
          404
        ],
        "commonIssues": [
          {
            "error": "400 - Missing datePreset",
            "solution": "Add datePreset and timezone parameters to GET requests",
            "prevention": "Always validate required parameters before sending request"
          },
          {
            "error": "401 - Invalid API key",
            "solution": "Check Bearer token format and API key validity",
            "prevention": "Validate API key format before making requests"
          },
          {
            "error": "403 - Access denied",
            "solution": "Verify user permissions for this resource",
            "prevention": "Check user role and permissions before accessing resources"
          },
          {
            "error": "429 - Rate limited",
            "solution": "Implement exponential backoff and reduce request frequency",
            "prevention": "Monitor request rate and implement proper throttling"
          }
        ],
        "debugging": [
          "Log full request and response for error analysis",
          "Check API key permissions and expiration",
          "Verify request format matches API documentation",
          "Test with minimal required parameters first"
        ]
      },
      "workflow": {
        "prerequisites": [
          "Valid authentication",
          "Proper permissions"
        ],
        "followUpActions": [
          "Process response data",
          "Handle any errors"
        ],
        "relatedEndpoints": [],
        "typicalWorkflow": [
          "Call GET /public/api/v1/info/affiliate_network endpoint",
          "Process response"
        ]
      },
      "testing": {
        "unitTests": [
          "Test with valid parameters",
          "Test with missing required parameters",
          "Test with invalid parameter values",
          "Test authentication failure scenarios"
        ],
        "integrationTests": [
          "Test full workflow with real data",
          "Test error handling and recovery",
          "Test rate limiting behavior",
          "Test response data validation"
        ],
        "testData": {
          "validParams": {},
          "invalidParams": []
        },
        "assertions": [
          "Response status code is 200 for valid requests",
          "Response contains expected data structure",
          "Custom metrics are present when applicable",
          "Error responses contain proper error messages"
        ]
      }
    },
    "GET /public/api/v1/info/rotation": {
      "metadata": {
        "method": "GET",
        "path": "/public/api/v1/info/rotation",
        "category": "info",
        "priority": 27,
        "importance": "HIGH",
        "hasCustomMetrics": false,
        "aiUsage": "Настройка ротаций"
      },
      "description": {
        "summary": "Информация о ротациях",
        "detailed": "Detailed description for GET /public/api/v1/info/rotation - Информация о ротациях",
        "businessContext": "Reference data retrieval - provides lists and details of available resources for campaign configuration",
        "whenToUse": [
          "Standard info operations"
        ]
      },
      "authentication": {
        "type": "Bearer Token",
        "header": "Authorization: Bearer {binomPublic}",
        "required": true,
        "note": "Use environment variable binomPublic"
      },
      "parameters": {
        "path": [],
        "query": [
          {
            "name": "datePreset",
            "type": "string",
            "required": true,
            "description": "Date range preset for data filtering",
            "enum": [
              "today",
              "yesterday",
              "last_7_days",
              "last_30_days",
              "this_month",
              "last_month",
              "custom_time"
            ],
            "example": "last_7_days"
          },
          {
            "name": "timezone",
            "type": "string",
            "required": true,
            "description": "Timezone for date calculations",
            "example": "UTC"
          },
          {
            "name": "limit",
            "type": "integer",
            "required": false,
            "description": "Maximum number of records to return",
            "example": 100,
            "default": 100
          },
          {
            "name": "offset",
            "type": "integer",
            "required": false,
            "description": "Number of records to skip for pagination",
            "example": 0,
            "default": 0
          }
        ],
        "header": [
          {
            "name": "Authorization",
            "type": "string",
            "required": true,
            "description": "Bearer token authentication",
            "example": "Bearer your_api_key_here"
          },
          {
            "name": "Content-Type",
            "type": "string",
            "required": false,
            "description": "Content type for request body",
            "example": "application/json"
          }
        ]
      },
      "requestBody": null,
      "responses": {
        "200": {
          "description": "Success",
          "contentType": "application/json",
          "schema": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "example": {
            "message": "Success"
          }
        },
        "400": {
          "description": "Bad Request - Invalid parameters or missing required fields",
          "contentType": "application/json",
          "schema": {
            "type": "object",
            "properties": {
              "error": {
                "type": "string"
              },
              "message": {
                "type": "string"
              },
              "details": {
                "type": "object"
              }
            }
          },
          "example": {
            "error": "Validation failed",
            "message": "Field 'datePreset' is required for stats endpoints",
            "details": {
              "field": "datePreset",
              "code": "required"
            }
          }
        },
        "401": {
          "description": "Unauthorized - Invalid or missing API key",
          "contentType": "application/json",
          "example": {
            "error": "Unauthorized",
            "message": "Invalid API key or missing Authorization header"
          }
        },
        "403": {
          "description": "Forbidden - Insufficient permissions",
          "contentType": "application/json",
          "example": {
            "error": "Access denied",
            "message": "Insufficient permissions to access this resource"
          }
        },
        "404": {
          "description": "Not Found - Resource does not exist",
          "contentType": "application/json",
          "example": {
            "error": "Not found",
            "message": "Campaign with ID 999 not found"
          }
        },
        "429": {
          "description": "Too Many Requests - Rate limit exceeded",
          "contentType": "application/json",
          "example": {
            "error": "Rate limit exceeded",
            "message": "Too many requests. Please wait before making another request.",
            "retryAfter": 60
          }
        },
        "500": {
          "description": "Internal Server Error",
          "contentType": "application/json",
          "example": {
            "error": "Internal server error",
            "message": "An unexpected error occurred. Please try again later."
          }
        }
      },
      "examples": {
        "python": "import requests\nimport os\nfrom datetime import datetime\n\n# Configuration\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\ndef handle_response(response):\n    \"\"\"Handle API response with proper error handling\"\"\"\n    if response.status_code == 200:\n        return response.json()\n    elif response.status_code == 400:\n        print(f\"Bad Request: {response.json()}\")\n    elif response.status_code == 401:\n        print(\"Unauthorized: Check your API key\")\n    elif response.status_code == 403:\n        print(\"Forbidden: Insufficient permissions\")\n    elif response.status_code == 404:\n        print(\"Not Found: Resource doesn't exist\")\n    elif response.status_code == 429:\n        print(\"Rate Limited: Wait before retrying\")\n    else:\n        print(f\"Error {response.status_code}: {response.text}\")\n    return None\n\n# GET /public/api/v1/info/rotation\ndef call_endpoint():\n    \"\"\"Call the GET /public/api/v1/info/rotation endpoint\"\"\"\n    \n    params = {'datePreset': 'last_7_days', 'timezone': 'UTC'}\n    \n    response = requests.get(\n        f\"{BASE_URL}/public/api/v1/info/rotation\",\n        headers=headers,\n        params=params\n    )\n    \n    return handle_response(response)\n\n# Usage\nif __name__ == \"__main__\":\n    result = call_endpoint()\n    print(result)\n",
        "curl": "# GET /public/api/v1/info/rotation\ncurl -X GET \\\n  \"https://pierdun.com/public/api/v1/public/api/v1/info/rotation\" \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Accept: application/json\"",
        "javascript": "// GET /public/api/v1/info/rotation\nconst BINOM_API_KEY = process.env.BINOM_PUBLIC;\nconst BASE_URL = 'https://pierdun.com/public/api/v1';\n\nasync function callBinomAPI() {\n    const config = {\n        method: 'GET',\n        headers: {\n            'Authorization': `Bearer ${BINOM_API_KEY}`,\n            'Accept': 'application/json'\n        }\n    };\n    \n    try {\n        const response = await fetch(`${BASE_URL}/public/api/v1/info/rotation`, config);\n        \n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        \n        const data = await response.json();\n        console.log('Success:', data);\n        return data;\n    } catch (error) {\n        console.error('Error:', error);\n        throw error;\n    }\n}\n\n// Usage\ncallBinomAPI()\n    .then(data => console.log(data))\n    .catch(error => console.error('Failed:', error));"
      },
      "customMetrics": {
        "available": false,
        "note": "This endpoint does not return custom metrics"
      },
      "aiInstructions": {
        "priority": "HIGH",
        "complexity": "LOW",
        "keyPoints": [
          "This is a HIGH priority endpoint",
          "Category: info operations",
          "Custom metrics: Not available",
          "Always use Bearer token authentication",
          "Handle rate limiting with exponential backoff"
        ],
        "beforeUsing": [
          "Verify API key is set in environment variables",
          "Check if datePreset and timezone are required",
          "Validate all required parameters are provided",
          "Ensure proper error handling is implemented"
        ],
        "afterUsing": [
          "Validate response structure matches expected schema",
          "Check for custom metrics if endpoint supports them",
          "Log important metrics for monitoring",
          "Handle pagination if response is truncated"
        ],
        "commonMistakes": [
          "Forgetting datePreset parameter for stats endpoints",
          "Using wrong Bearer token format",
          "Not handling 429 rate limit responses",
          "Ignoring custom metrics in optimization decisions",
          "Not validating response data before processing"
        ],
        "optimization": [
          "Cache responses when appropriate",
          "Use batch operations when available",
          "Implement retry logic with exponential backoff",
          "Monitor API usage to avoid rate limits",
          "Use appropriate date ranges to minimize data transfer"
        ],
        "customMetricsGuidance": {
          "applicable": false,
          "note": "This endpoint does not return custom metrics"
        }
      },
      "errorHandling": {
        "retryStrategy": {
          "429": {
            "action": "Exponential backoff retry",
            "initialDelay": 1,
            "maxRetries": 5,
            "backoffMultiplier": 2
          },
          "500": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 5
          },
          "502": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 10
          }
        },
        "noRetryErrors": [
          400,
          401,
          403,
          404
        ],
        "commonIssues": [
          {
            "error": "400 - Missing datePreset",
            "solution": "Add datePreset and timezone parameters to GET requests",
            "prevention": "Always validate required parameters before sending request"
          },
          {
            "error": "401 - Invalid API key",
            "solution": "Check Bearer token format and API key validity",
            "prevention": "Validate API key format before making requests"
          },
          {
            "error": "403 - Access denied",
            "solution": "Verify user permissions for this resource",
            "prevention": "Check user role and permissions before accessing resources"
          },
          {
            "error": "429 - Rate limited",
            "solution": "Implement exponential backoff and reduce request frequency",
            "prevention": "Monitor request rate and implement proper throttling"
          }
        ],
        "debugging": [
          "Log full request and response for error analysis",
          "Check API key permissions and expiration",
          "Verify request format matches API documentation",
          "Test with minimal required parameters first"
        ]
      },
      "workflow": {
        "prerequisites": [
          "Valid authentication",
          "Proper permissions"
        ],
        "followUpActions": [
          "Process response data",
          "Handle any errors"
        ],
        "relatedEndpoints": [],
        "typicalWorkflow": [
          "Call GET /public/api/v1/info/rotation endpoint",
          "Process response"
        ]
      },
      "testing": {
        "unitTests": [
          "Test with valid parameters",
          "Test with missing required parameters",
          "Test with invalid parameter values",
          "Test authentication failure scenarios"
        ],
        "integrationTests": [
          "Test full workflow with real data",
          "Test error handling and recovery",
          "Test rate limiting behavior",
          "Test response data validation"
        ],
        "testData": {
          "validParams": {},
          "invalidParams": []
        },
        "assertions": [
          "Response status code is 200 for valid requests",
          "Response contains expected data structure",
          "Custom metrics are present when applicable",
          "Error responses contain proper error messages"
        ]
      }
    },
    "GET /public/api/v1/report/user/campaign": {
      "metadata": {
        "method": "GET",
        "path": "/public/api/v1/report/user/campaign",
        "category": "report",
        "priority": 28,
        "importance": "HIGH",
        "hasCustomMetrics": true,
        "aiUsage": "Персонализированная аналитика"
      },
      "description": {
        "summary": "Отчет по кампаниям пользователя",
        "detailed": "Detailed description for GET /public/api/v1/report/user/campaign - Отчет по кампаниям пользователя",
        "businessContext": "Advanced analytics - creates detailed reports with custom groupings and filtering for business intelligence",
        "whenToUse": [
          "Standard report operations"
        ]
      },
      "authentication": {
        "type": "Bearer Token",
        "header": "Authorization: Bearer {binomPublic}",
        "required": true,
        "note": "Use environment variable binomPublic"
      },
      "parameters": {
        "path": [],
        "query": [
          {
            "name": "datePreset",
            "type": "string",
            "required": true,
            "description": "Date range preset for data filtering",
            "enum": [
              "today",
              "yesterday",
              "last_7_days",
              "last_30_days",
              "this_month",
              "last_month",
              "custom_time"
            ],
            "example": "last_7_days"
          },
          {
            "name": "timezone",
            "type": "string",
            "required": true,
            "description": "Timezone for date calculations",
            "example": "UTC"
          },
          {
            "name": "limit",
            "type": "integer",
            "required": false,
            "description": "Maximum number of records to return",
            "example": 100,
            "default": 100
          },
          {
            "name": "offset",
            "type": "integer",
            "required": false,
            "description": "Number of records to skip for pagination",
            "example": 0,
            "default": 0
          }
        ],
        "header": [
          {
            "name": "Authorization",
            "type": "string",
            "required": true,
            "description": "Bearer token authentication",
            "example": "Bearer your_api_key_here"
          },
          {
            "name": "Content-Type",
            "type": "string",
            "required": false,
            "description": "Content type for request body",
            "example": "application/json"
          }
        ]
      },
      "requestBody": null,
      "responses": {
        "200": {
          "description": "Success",
          "contentType": "application/json",
          "schema": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "example": {
            "message": "Success"
          }
        },
        "400": {
          "description": "Bad Request - Invalid parameters or missing required fields",
          "contentType": "application/json",
          "schema": {
            "type": "object",
            "properties": {
              "error": {
                "type": "string"
              },
              "message": {
                "type": "string"
              },
              "details": {
                "type": "object"
              }
            }
          },
          "example": {
            "error": "Validation failed",
            "message": "Field 'datePreset' is required for stats endpoints",
            "details": {
              "field": "datePreset",
              "code": "required"
            }
          }
        },
        "401": {
          "description": "Unauthorized - Invalid or missing API key",
          "contentType": "application/json",
          "example": {
            "error": "Unauthorized",
            "message": "Invalid API key or missing Authorization header"
          }
        },
        "403": {
          "description": "Forbidden - Insufficient permissions",
          "contentType": "application/json",
          "example": {
            "error": "Access denied",
            "message": "Insufficient permissions to access this resource"
          }
        },
        "404": {
          "description": "Not Found - Resource does not exist",
          "contentType": "application/json",
          "example": {
            "error": "Not found",
            "message": "Campaign with ID 999 not found"
          }
        },
        "429": {
          "description": "Too Many Requests - Rate limit exceeded",
          "contentType": "application/json",
          "example": {
            "error": "Rate limit exceeded",
            "message": "Too many requests. Please wait before making another request.",
            "retryAfter": 60
          }
        },
        "500": {
          "description": "Internal Server Error",
          "contentType": "application/json",
          "example": {
            "error": "Internal server error",
            "message": "An unexpected error occurred. Please try again later."
          }
        }
      },
      "examples": {
        "python": "import requests\nimport os\nfrom datetime import datetime\n\n# Configuration\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\ndef handle_response(response):\n    \"\"\"Handle API response with proper error handling\"\"\"\n    if response.status_code == 200:\n        return response.json()\n    elif response.status_code == 400:\n        print(f\"Bad Request: {response.json()}\")\n    elif response.status_code == 401:\n        print(\"Unauthorized: Check your API key\")\n    elif response.status_code == 403:\n        print(\"Forbidden: Insufficient permissions\")\n    elif response.status_code == 404:\n        print(\"Not Found: Resource doesn't exist\")\n    elif response.status_code == 429:\n        print(\"Rate Limited: Wait before retrying\")\n    else:\n        print(f\"Error {response.status_code}: {response.text}\")\n    return None\n\n# GET /public/api/v1/report/user/campaign\ndef call_endpoint():\n    \"\"\"Call the GET /public/api/v1/report/user/campaign endpoint\"\"\"\n    \n    params = {'datePreset': 'last_7_days', 'timezone': 'UTC'}\n    \n    response = requests.get(\n        f\"{BASE_URL}/public/api/v1/report/user/campaign\",\n        headers=headers,\n        params=params\n    )\n    \n    return handle_response(response)\n\n# Usage\nif __name__ == \"__main__\":\n    result = call_endpoint()\n    print(result)\n",
        "curl": "# GET /public/api/v1/report/user/campaign\ncurl -X GET \\\n  \"https://pierdun.com/public/api/v1/public/api/v1/report/user/campaign\" \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Accept: application/json\"",
        "javascript": "// GET /public/api/v1/report/user/campaign\nconst BINOM_API_KEY = process.env.BINOM_PUBLIC;\nconst BASE_URL = 'https://pierdun.com/public/api/v1';\n\nasync function callBinomAPI() {\n    const config = {\n        method: 'GET',\n        headers: {\n            'Authorization': `Bearer ${BINOM_API_KEY}`,\n            'Accept': 'application/json'\n        }\n    };\n    \n    try {\n        const response = await fetch(`${BASE_URL}/public/api/v1/report/user/campaign`, config);\n        \n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        \n        const data = await response.json();\n        console.log('Success:', data);\n        return data;\n    } catch (error) {\n        console.error('Error:', error);\n        throw error;\n    }\n}\n\n// Usage\ncallBinomAPI()\n    .then(data => console.log(data))\n    .catch(error => console.error('Failed:', error));"
      },
      "customMetrics": {
        "available": true,
        "metrics": [
          {
            "name": "eCPT",
            "fullName": "Effective Cost Per Trial",
            "description": "Average cost to acquire one trial subscription",
            "calculation": "total_cost / trials",
            "type": "currency",
            "importance": "CRITICAL",
            "aiNote": "Key metric for trial-based offers optimization. Lower eCPT indicates better campaign efficiency.",
            "troubleshooting": [
              "If eCPT is null, check if trials are configured in campaign",
              "High eCPT may indicate poor traffic quality or landing page issues",
              "Compare eCPT across different traffic sources to identify best performers"
            ]
          },
          {
            "name": "eCPB",
            "fullName": "Effective Cost Per Buyout",
            "description": "Average cost to acquire one full purchase/subscription",
            "calculation": "total_cost / buyouts",
            "type": "currency",
            "importance": "CRITICAL",
            "aiNote": "Primary ROI metric for subscription offers. Must be lower than payout for profitability.",
            "troubleshooting": [
              "If eCPB is null, check if buyouts are configured in campaign",
              "eCPB higher than payout indicates unprofitable campaign",
              "Monitor eCPB trends to detect performance degradation"
            ]
          },
          {
            "name": "trials",
            "fullName": "Trial Conversions",
            "description": "Number of trial subscriptions acquired",
            "type": "integer",
            "importance": "HIGH",
            "aiNote": "Intermediate conversion metric. Higher trials indicate good initial interest.",
            "troubleshooting": [
              "Low trials may indicate traffic quality issues",
              "High trials but low buyouts suggest offer or funnel problems",
              "Track trial-to-buyout conversion rate for optimization"
            ]
          },
          {
            "name": "buyouts",
            "fullName": "Buyout Conversions",
            "description": "Number of full purchases/subscriptions",
            "type": "integer",
            "importance": "CRITICAL",
            "aiNote": "Final conversion metric. Directly impacts revenue and ROI calculations.",
            "troubleshooting": [
              "Zero buyouts indicate serious funnel issues",
              "Low buyout rate from trials suggests billing or offer problems",
              "Monitor buyout trends for early problem detection"
            ]
          }
        ],
        "howToFind": {
          "webInterface": "Settings -> Columns in Binom interface",
          "apiAccess": "Available in stats and report endpoints response",
          "configuration": "Must be configured in campaign postback settings"
        },
        "aiInstructions": {
          "rule": "ALWAYS ask operator for clarification if custom metric values seem unexpected",
          "when": [
            "Custom metric is null or zero unexpectedly",
            "Metric values don't align with campaign performance",
            "Unfamiliar custom metrics appear in response"
          ],
          "howToAsk": "What does [metric_name] represent in your campaign setup?",
          "examples": [
            "If eCPT is $50 but expected $5, ask: 'The eCPT seems high at $50. Is this expected for this campaign type?'",
            "If trials are 0 but clicks are high, ask: 'I see clicks but no trials. Are trial conversions configured correctly?'"
          ]
        }
      },
      "aiInstructions": {
        "priority": "HIGH",
        "complexity": "MEDIUM",
        "keyPoints": [
          "This is a HIGH priority endpoint",
          "Category: report operations",
          "Custom metrics: Available",
          "Always use Bearer token authentication",
          "Handle rate limiting with exponential backoff"
        ],
        "beforeUsing": [
          "Verify API key is set in environment variables",
          "Check if datePreset and timezone are required",
          "Validate all required parameters are provided",
          "Ensure proper error handling is implemented"
        ],
        "afterUsing": [
          "Validate response structure matches expected schema",
          "Check for custom metrics if endpoint supports them",
          "Log important metrics for monitoring",
          "Handle pagination if response is truncated"
        ],
        "commonMistakes": [
          "Forgetting datePreset parameter for stats endpoints",
          "Using wrong Bearer token format",
          "Not handling 429 rate limit responses",
          "Ignoring custom metrics in optimization decisions",
          "Not validating response data before processing"
        ],
        "optimization": [
          "Cache responses when appropriate",
          "Use batch operations when available",
          "Implement retry logic with exponential backoff",
          "Monitor API usage to avoid rate limits",
          "Use appropriate date ranges to minimize data transfer"
        ],
        "customMetricsGuidance": {
          "applicable": true,
          "criticalRule": "ALWAYS clarify unknown or unexpected custom metrics with operator",
          "whenToAsk": [
            "Custom metric value is null when data exists",
            "Metric values seem inconsistent with campaign performance",
            "Unfamiliar custom metric names appear",
            "Metric calculations don't match expected formulas"
          ],
          "howToAsk": [
            "Be specific: 'I see eCPT of $X, is this expected for this campaign type?'",
            "Provide context: 'Campaign has Y clicks but Z trials, should I investigate?'",
            "Ask for clarification: 'What does [custom_metric] represent in your setup?'"
          ],
          "neverAssume": [
            "Don't assume metric meanings without confirmation",
            "Don't ignore null values without asking",
            "Don't make optimization decisions on unclear metrics",
            "Don't extrapolate metrics without understanding calculation"
          ],
          "bestPractices": [
            "Document all custom metrics and their meanings",
            "Validate metric values against business logic",
            "Ask for acceptable ranges for each metric",
            "Confirm optimization goals before making changes"
          ]
        }
      },
      "errorHandling": {
        "retryStrategy": {
          "429": {
            "action": "Exponential backoff retry",
            "initialDelay": 1,
            "maxRetries": 5,
            "backoffMultiplier": 2
          },
          "500": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 5
          },
          "502": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 10
          }
        },
        "noRetryErrors": [
          400,
          401,
          403,
          404
        ],
        "commonIssues": [
          {
            "error": "400 - Missing datePreset",
            "solution": "Add datePreset and timezone parameters to GET requests",
            "prevention": "Always validate required parameters before sending request"
          },
          {
            "error": "401 - Invalid API key",
            "solution": "Check Bearer token format and API key validity",
            "prevention": "Validate API key format before making requests"
          },
          {
            "error": "403 - Access denied",
            "solution": "Verify user permissions for this resource",
            "prevention": "Check user role and permissions before accessing resources"
          },
          {
            "error": "429 - Rate limited",
            "solution": "Implement exponential backoff and reduce request frequency",
            "prevention": "Monitor request rate and implement proper throttling"
          }
        ],
        "debugging": [
          "Log full request and response for error analysis",
          "Check API key permissions and expiration",
          "Verify request format matches API documentation",
          "Test with minimal required parameters first"
        ]
      },
      "workflow": {
        "prerequisites": [
          "Valid authentication",
          "Proper permissions"
        ],
        "followUpActions": [
          "Process response data",
          "Handle any errors"
        ],
        "relatedEndpoints": [],
        "typicalWorkflow": [
          "Call GET /public/api/v1/report/user/campaign endpoint",
          "Process response"
        ]
      },
      "testing": {
        "unitTests": [
          "Test with valid parameters",
          "Test with missing required parameters",
          "Test with invalid parameter values",
          "Test authentication failure scenarios"
        ],
        "integrationTests": [
          "Test full workflow with real data",
          "Test error handling and recovery",
          "Test rate limiting behavior",
          "Test response data validation"
        ],
        "testData": {
          "validParams": {},
          "invalidParams": []
        },
        "assertions": [
          "Response status code is 200 for valid requests",
          "Response contains expected data structure",
          "Custom metrics are present when applicable",
          "Error responses contain proper error messages"
        ]
      }
    },
    "GET /public/api/v1/report/campaign/groupings": {
      "metadata": {
        "method": "GET",
        "path": "/public/api/v1/report/campaign/groupings",
        "category": "report",
        "priority": 29,
        "importance": "HIGH",
        "hasCustomMetrics": false,
        "aiUsage": "Настройка детализации отчетов"
      },
      "description": {
        "summary": "Группировки для отчетов по кампаниям",
        "detailed": "Detailed description for GET /public/api/v1/report/campaign/groupings - Группировки для отчетов по кампаниям",
        "businessContext": "Advanced analytics - creates detailed reports with custom groupings and filtering for business intelligence",
        "whenToUse": [
          "Standard report operations"
        ]
      },
      "authentication": {
        "type": "Bearer Token",
        "header": "Authorization: Bearer {binomPublic}",
        "required": true,
        "note": "Use environment variable binomPublic"
      },
      "parameters": {
        "path": [],
        "query": [
          {
            "name": "datePreset",
            "type": "string",
            "required": true,
            "description": "Date range preset for data filtering",
            "enum": [
              "today",
              "yesterday",
              "last_7_days",
              "last_30_days",
              "this_month",
              "last_month",
              "custom_time"
            ],
            "example": "last_7_days"
          },
          {
            "name": "timezone",
            "type": "string",
            "required": true,
            "description": "Timezone for date calculations",
            "example": "UTC"
          },
          {
            "name": "limit",
            "type": "integer",
            "required": false,
            "description": "Maximum number of records to return",
            "example": 100,
            "default": 100
          },
          {
            "name": "offset",
            "type": "integer",
            "required": false,
            "description": "Number of records to skip for pagination",
            "example": 0,
            "default": 0
          }
        ],
        "header": [
          {
            "name": "Authorization",
            "type": "string",
            "required": true,
            "description": "Bearer token authentication",
            "example": "Bearer your_api_key_here"
          },
          {
            "name": "Content-Type",
            "type": "string",
            "required": false,
            "description": "Content type for request body",
            "example": "application/json"
          }
        ]
      },
      "requestBody": null,
      "responses": {
        "200": {
          "description": "Success",
          "contentType": "application/json",
          "schema": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "example": {
            "message": "Success"
          }
        },
        "400": {
          "description": "Bad Request - Invalid parameters or missing required fields",
          "contentType": "application/json",
          "schema": {
            "type": "object",
            "properties": {
              "error": {
                "type": "string"
              },
              "message": {
                "type": "string"
              },
              "details": {
                "type": "object"
              }
            }
          },
          "example": {
            "error": "Validation failed",
            "message": "Field 'datePreset' is required for stats endpoints",
            "details": {
              "field": "datePreset",
              "code": "required"
            }
          }
        },
        "401": {
          "description": "Unauthorized - Invalid or missing API key",
          "contentType": "application/json",
          "example": {
            "error": "Unauthorized",
            "message": "Invalid API key or missing Authorization header"
          }
        },
        "403": {
          "description": "Forbidden - Insufficient permissions",
          "contentType": "application/json",
          "example": {
            "error": "Access denied",
            "message": "Insufficient permissions to access this resource"
          }
        },
        "404": {
          "description": "Not Found - Resource does not exist",
          "contentType": "application/json",
          "example": {
            "error": "Not found",
            "message": "Campaign with ID 999 not found"
          }
        },
        "429": {
          "description": "Too Many Requests - Rate limit exceeded",
          "contentType": "application/json",
          "example": {
            "error": "Rate limit exceeded",
            "message": "Too many requests. Please wait before making another request.",
            "retryAfter": 60
          }
        },
        "500": {
          "description": "Internal Server Error",
          "contentType": "application/json",
          "example": {
            "error": "Internal server error",
            "message": "An unexpected error occurred. Please try again later."
          }
        }
      },
      "examples": {
        "python": "import requests\nimport os\nfrom datetime import datetime\n\n# Configuration\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\ndef handle_response(response):\n    \"\"\"Handle API response with proper error handling\"\"\"\n    if response.status_code == 200:\n        return response.json()\n    elif response.status_code == 400:\n        print(f\"Bad Request: {response.json()}\")\n    elif response.status_code == 401:\n        print(\"Unauthorized: Check your API key\")\n    elif response.status_code == 403:\n        print(\"Forbidden: Insufficient permissions\")\n    elif response.status_code == 404:\n        print(\"Not Found: Resource doesn't exist\")\n    elif response.status_code == 429:\n        print(\"Rate Limited: Wait before retrying\")\n    else:\n        print(f\"Error {response.status_code}: {response.text}\")\n    return None\n\n# GET /public/api/v1/report/campaign/groupings\ndef call_endpoint():\n    \"\"\"Call the GET /public/api/v1/report/campaign/groupings endpoint\"\"\"\n    \n    params = {'datePreset': 'last_7_days', 'timezone': 'UTC'}\n    \n    response = requests.get(\n        f\"{BASE_URL}/public/api/v1/report/campaign/groupings\",\n        headers=headers,\n        params=params\n    )\n    \n    return handle_response(response)\n\n# Usage\nif __name__ == \"__main__\":\n    result = call_endpoint()\n    print(result)\n",
        "curl": "# GET /public/api/v1/report/campaign/groupings\ncurl -X GET \\\n  \"https://pierdun.com/public/api/v1/public/api/v1/report/campaign/groupings\" \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Accept: application/json\"",
        "javascript": "// GET /public/api/v1/report/campaign/groupings\nconst BINOM_API_KEY = process.env.BINOM_PUBLIC;\nconst BASE_URL = 'https://pierdun.com/public/api/v1';\n\nasync function callBinomAPI() {\n    const config = {\n        method: 'GET',\n        headers: {\n            'Authorization': `Bearer ${BINOM_API_KEY}`,\n            'Accept': 'application/json'\n        }\n    };\n    \n    try {\n        const response = await fetch(`${BASE_URL}/public/api/v1/report/campaign/groupings`, config);\n        \n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        \n        const data = await response.json();\n        console.log('Success:', data);\n        return data;\n    } catch (error) {\n        console.error('Error:', error);\n        throw error;\n    }\n}\n\n// Usage\ncallBinomAPI()\n    .then(data => console.log(data))\n    .catch(error => console.error('Failed:', error));"
      },
      "customMetrics": {
        "available": false,
        "note": "This endpoint does not return custom metrics"
      },
      "aiInstructions": {
        "priority": "HIGH",
        "complexity": "LOW",
        "keyPoints": [
          "This is a HIGH priority endpoint",
          "Category: report operations",
          "Custom metrics: Not available",
          "Always use Bearer token authentication",
          "Handle rate limiting with exponential backoff"
        ],
        "beforeUsing": [
          "Verify API key is set in environment variables",
          "Check if datePreset and timezone are required",
          "Validate all required parameters are provided",
          "Ensure proper error handling is implemented"
        ],
        "afterUsing": [
          "Validate response structure matches expected schema",
          "Check for custom metrics if endpoint supports them",
          "Log important metrics for monitoring",
          "Handle pagination if response is truncated"
        ],
        "commonMistakes": [
          "Forgetting datePreset parameter for stats endpoints",
          "Using wrong Bearer token format",
          "Not handling 429 rate limit responses",
          "Ignoring custom metrics in optimization decisions",
          "Not validating response data before processing"
        ],
        "optimization": [
          "Cache responses when appropriate",
          "Use batch operations when available",
          "Implement retry logic with exponential backoff",
          "Monitor API usage to avoid rate limits",
          "Use appropriate date ranges to minimize data transfer"
        ],
        "customMetricsGuidance": {
          "applicable": false,
          "note": "This endpoint does not return custom metrics"
        }
      },
      "errorHandling": {
        "retryStrategy": {
          "429": {
            "action": "Exponential backoff retry",
            "initialDelay": 1,
            "maxRetries": 5,
            "backoffMultiplier": 2
          },
          "500": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 5
          },
          "502": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 10
          }
        },
        "noRetryErrors": [
          400,
          401,
          403,
          404
        ],
        "commonIssues": [
          {
            "error": "400 - Missing datePreset",
            "solution": "Add datePreset and timezone parameters to GET requests",
            "prevention": "Always validate required parameters before sending request"
          },
          {
            "error": "401 - Invalid API key",
            "solution": "Check Bearer token format and API key validity",
            "prevention": "Validate API key format before making requests"
          },
          {
            "error": "403 - Access denied",
            "solution": "Verify user permissions for this resource",
            "prevention": "Check user role and permissions before accessing resources"
          },
          {
            "error": "429 - Rate limited",
            "solution": "Implement exponential backoff and reduce request frequency",
            "prevention": "Monitor request rate and implement proper throttling"
          }
        ],
        "debugging": [
          "Log full request and response for error analysis",
          "Check API key permissions and expiration",
          "Verify request format matches API documentation",
          "Test with minimal required parameters first"
        ]
      },
      "workflow": {
        "prerequisites": [
          "Valid authentication",
          "Proper permissions"
        ],
        "followUpActions": [
          "Process response data",
          "Handle any errors"
        ],
        "relatedEndpoints": [],
        "typicalWorkflow": [
          "Call GET /public/api/v1/report/campaign/groupings endpoint",
          "Process response"
        ]
      },
      "testing": {
        "unitTests": [
          "Test with valid parameters",
          "Test with missing required parameters",
          "Test with invalid parameter values",
          "Test authentication failure scenarios"
        ],
        "integrationTests": [
          "Test full workflow with real data",
          "Test error handling and recovery",
          "Test rate limiting behavior",
          "Test response data validation"
        ],
        "testData": {
          "validParams": {},
          "invalidParams": []
        },
        "assertions": [
          "Response status code is 200 for valid requests",
          "Response contains expected data structure",
          "Custom metrics are present when applicable",
          "Error responses contain proper error messages"
        ]
      }
    },
    "GET /public/api/v1/report/landing/groupings": {
      "metadata": {
        "method": "GET",
        "path": "/public/api/v1/report/landing/groupings",
        "category": "report",
        "priority": 30,
        "importance": "HIGH",
        "hasCustomMetrics": false,
        "aiUsage": "Детализация анализа лендингов"
      },
      "description": {
        "summary": "Группировки для отчетов по лендингам",
        "detailed": "Detailed description for GET /public/api/v1/report/landing/groupings - Группировки для отчетов по лендингам",
        "businessContext": "Advanced analytics - creates detailed reports with custom groupings and filtering for business intelligence",
        "whenToUse": [
          "Standard report operations"
        ]
      },
      "authentication": {
        "type": "Bearer Token",
        "header": "Authorization: Bearer {binomPublic}",
        "required": true,
        "note": "Use environment variable binomPublic"
      },
      "parameters": {
        "path": [],
        "query": [
          {
            "name": "datePreset",
            "type": "string",
            "required": true,
            "description": "Date range preset for data filtering",
            "enum": [
              "today",
              "yesterday",
              "last_7_days",
              "last_30_days",
              "this_month",
              "last_month",
              "custom_time"
            ],
            "example": "last_7_days"
          },
          {
            "name": "timezone",
            "type": "string",
            "required": true,
            "description": "Timezone for date calculations",
            "example": "UTC"
          },
          {
            "name": "limit",
            "type": "integer",
            "required": false,
            "description": "Maximum number of records to return",
            "example": 100,
            "default": 100
          },
          {
            "name": "offset",
            "type": "integer",
            "required": false,
            "description": "Number of records to skip for pagination",
            "example": 0,
            "default": 0
          }
        ],
        "header": [
          {
            "name": "Authorization",
            "type": "string",
            "required": true,
            "description": "Bearer token authentication",
            "example": "Bearer your_api_key_here"
          },
          {
            "name": "Content-Type",
            "type": "string",
            "required": false,
            "description": "Content type for request body",
            "example": "application/json"
          }
        ]
      },
      "requestBody": null,
      "responses": {
        "200": {
          "description": "Success",
          "contentType": "application/json",
          "schema": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "example": {
            "message": "Success"
          }
        },
        "400": {
          "description": "Bad Request - Invalid parameters or missing required fields",
          "contentType": "application/json",
          "schema": {
            "type": "object",
            "properties": {
              "error": {
                "type": "string"
              },
              "message": {
                "type": "string"
              },
              "details": {
                "type": "object"
              }
            }
          },
          "example": {
            "error": "Validation failed",
            "message": "Field 'datePreset' is required for stats endpoints",
            "details": {
              "field": "datePreset",
              "code": "required"
            }
          }
        },
        "401": {
          "description": "Unauthorized - Invalid or missing API key",
          "contentType": "application/json",
          "example": {
            "error": "Unauthorized",
            "message": "Invalid API key or missing Authorization header"
          }
        },
        "403": {
          "description": "Forbidden - Insufficient permissions",
          "contentType": "application/json",
          "example": {
            "error": "Access denied",
            "message": "Insufficient permissions to access this resource"
          }
        },
        "404": {
          "description": "Not Found - Resource does not exist",
          "contentType": "application/json",
          "example": {
            "error": "Not found",
            "message": "Campaign with ID 999 not found"
          }
        },
        "429": {
          "description": "Too Many Requests - Rate limit exceeded",
          "contentType": "application/json",
          "example": {
            "error": "Rate limit exceeded",
            "message": "Too many requests. Please wait before making another request.",
            "retryAfter": 60
          }
        },
        "500": {
          "description": "Internal Server Error",
          "contentType": "application/json",
          "example": {
            "error": "Internal server error",
            "message": "An unexpected error occurred. Please try again later."
          }
        }
      },
      "examples": {
        "python": "import requests\nimport os\nfrom datetime import datetime\n\n# Configuration\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\ndef handle_response(response):\n    \"\"\"Handle API response with proper error handling\"\"\"\n    if response.status_code == 200:\n        return response.json()\n    elif response.status_code == 400:\n        print(f\"Bad Request: {response.json()}\")\n    elif response.status_code == 401:\n        print(\"Unauthorized: Check your API key\")\n    elif response.status_code == 403:\n        print(\"Forbidden: Insufficient permissions\")\n    elif response.status_code == 404:\n        print(\"Not Found: Resource doesn't exist\")\n    elif response.status_code == 429:\n        print(\"Rate Limited: Wait before retrying\")\n    else:\n        print(f\"Error {response.status_code}: {response.text}\")\n    return None\n\n# GET /public/api/v1/report/landing/groupings\ndef call_endpoint():\n    \"\"\"Call the GET /public/api/v1/report/landing/groupings endpoint\"\"\"\n    \n    params = {'datePreset': 'last_7_days', 'timezone': 'UTC'}\n    \n    response = requests.get(\n        f\"{BASE_URL}/public/api/v1/report/landing/groupings\",\n        headers=headers,\n        params=params\n    )\n    \n    return handle_response(response)\n\n# Usage\nif __name__ == \"__main__\":\n    result = call_endpoint()\n    print(result)\n",
        "curl": "# GET /public/api/v1/report/landing/groupings\ncurl -X GET \\\n  \"https://pierdun.com/public/api/v1/public/api/v1/report/landing/groupings\" \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Accept: application/json\"",
        "javascript": "// GET /public/api/v1/report/landing/groupings\nconst BINOM_API_KEY = process.env.BINOM_PUBLIC;\nconst BASE_URL = 'https://pierdun.com/public/api/v1';\n\nasync function callBinomAPI() {\n    const config = {\n        method: 'GET',\n        headers: {\n            'Authorization': `Bearer ${BINOM_API_KEY}`,\n            'Accept': 'application/json'\n        }\n    };\n    \n    try {\n        const response = await fetch(`${BASE_URL}/public/api/v1/report/landing/groupings`, config);\n        \n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        \n        const data = await response.json();\n        console.log('Success:', data);\n        return data;\n    } catch (error) {\n        console.error('Error:', error);\n        throw error;\n    }\n}\n\n// Usage\ncallBinomAPI()\n    .then(data => console.log(data))\n    .catch(error => console.error('Failed:', error));"
      },
      "customMetrics": {
        "available": false,
        "note": "This endpoint does not return custom metrics"
      },
      "aiInstructions": {
        "priority": "HIGH",
        "complexity": "LOW",
        "keyPoints": [
          "This is a HIGH priority endpoint",
          "Category: report operations",
          "Custom metrics: Not available",
          "Always use Bearer token authentication",
          "Handle rate limiting with exponential backoff"
        ],
        "beforeUsing": [
          "Verify API key is set in environment variables",
          "Check if datePreset and timezone are required",
          "Validate all required parameters are provided",
          "Ensure proper error handling is implemented"
        ],
        "afterUsing": [
          "Validate response structure matches expected schema",
          "Check for custom metrics if endpoint supports them",
          "Log important metrics for monitoring",
          "Handle pagination if response is truncated"
        ],
        "commonMistakes": [
          "Forgetting datePreset parameter for stats endpoints",
          "Using wrong Bearer token format",
          "Not handling 429 rate limit responses",
          "Ignoring custom metrics in optimization decisions",
          "Not validating response data before processing"
        ],
        "optimization": [
          "Cache responses when appropriate",
          "Use batch operations when available",
          "Implement retry logic with exponential backoff",
          "Monitor API usage to avoid rate limits",
          "Use appropriate date ranges to minimize data transfer"
        ],
        "customMetricsGuidance": {
          "applicable": false,
          "note": "This endpoint does not return custom metrics"
        }
      },
      "errorHandling": {
        "retryStrategy": {
          "429": {
            "action": "Exponential backoff retry",
            "initialDelay": 1,
            "maxRetries": 5,
            "backoffMultiplier": 2
          },
          "500": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 5
          },
          "502": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 10
          }
        },
        "noRetryErrors": [
          400,
          401,
          403,
          404
        ],
        "commonIssues": [
          {
            "error": "400 - Missing datePreset",
            "solution": "Add datePreset and timezone parameters to GET requests",
            "prevention": "Always validate required parameters before sending request"
          },
          {
            "error": "401 - Invalid API key",
            "solution": "Check Bearer token format and API key validity",
            "prevention": "Validate API key format before making requests"
          },
          {
            "error": "403 - Access denied",
            "solution": "Verify user permissions for this resource",
            "prevention": "Check user role and permissions before accessing resources"
          },
          {
            "error": "429 - Rate limited",
            "solution": "Implement exponential backoff and reduce request frequency",
            "prevention": "Monitor request rate and implement proper throttling"
          }
        ],
        "debugging": [
          "Log full request and response for error analysis",
          "Check API key permissions and expiration",
          "Verify request format matches API documentation",
          "Test with minimal required parameters first"
        ]
      },
      "workflow": {
        "prerequisites": [
          "Valid authentication",
          "Proper permissions"
        ],
        "followUpActions": [
          "Process response data",
          "Handle any errors"
        ],
        "relatedEndpoints": [],
        "typicalWorkflow": [
          "Call GET /public/api/v1/report/landing/groupings endpoint",
          "Process response"
        ]
      },
      "testing": {
        "unitTests": [
          "Test with valid parameters",
          "Test with missing required parameters",
          "Test with invalid parameter values",
          "Test authentication failure scenarios"
        ],
        "integrationTests": [
          "Test full workflow with real data",
          "Test error handling and recovery",
          "Test rate limiting behavior",
          "Test response data validation"
        ],
        "testData": {
          "validParams": {},
          "invalidParams": []
        },
        "assertions": [
          "Response status code is 200 for valid requests",
          "Response contains expected data structure",
          "Custom metrics are present when applicable",
          "Error responses contain proper error messages"
        ]
      }
    },
    "GET /public/api/v1/report/offer/groupings": {
      "metadata": {
        "method": "GET",
        "path": "/public/api/v1/report/offer/groupings",
        "category": "report",
        "priority": 31,
        "importance": "HIGH",
        "hasCustomMetrics": false,
        "aiUsage": "Детализация анализа офферов"
      },
      "description": {
        "summary": "Группировки для отчетов по офферам",
        "detailed": "Detailed description for GET /public/api/v1/report/offer/groupings - Группировки для отчетов по офферам",
        "businessContext": "Advanced analytics - creates detailed reports with custom groupings and filtering for business intelligence",
        "whenToUse": [
          "Standard report operations"
        ]
      },
      "authentication": {
        "type": "Bearer Token",
        "header": "Authorization: Bearer {binomPublic}",
        "required": true,
        "note": "Use environment variable binomPublic"
      },
      "parameters": {
        "path": [],
        "query": [
          {
            "name": "datePreset",
            "type": "string",
            "required": true,
            "description": "Date range preset for data filtering",
            "enum": [
              "today",
              "yesterday",
              "last_7_days",
              "last_30_days",
              "this_month",
              "last_month",
              "custom_time"
            ],
            "example": "last_7_days"
          },
          {
            "name": "timezone",
            "type": "string",
            "required": true,
            "description": "Timezone for date calculations",
            "example": "UTC"
          },
          {
            "name": "limit",
            "type": "integer",
            "required": false,
            "description": "Maximum number of records to return",
            "example": 100,
            "default": 100
          },
          {
            "name": "offset",
            "type": "integer",
            "required": false,
            "description": "Number of records to skip for pagination",
            "example": 0,
            "default": 0
          }
        ],
        "header": [
          {
            "name": "Authorization",
            "type": "string",
            "required": true,
            "description": "Bearer token authentication",
            "example": "Bearer your_api_key_here"
          },
          {
            "name": "Content-Type",
            "type": "string",
            "required": false,
            "description": "Content type for request body",
            "example": "application/json"
          }
        ]
      },
      "requestBody": null,
      "responses": {
        "200": {
          "description": "Success",
          "contentType": "application/json",
          "schema": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "example": {
            "message": "Success"
          }
        },
        "400": {
          "description": "Bad Request - Invalid parameters or missing required fields",
          "contentType": "application/json",
          "schema": {
            "type": "object",
            "properties": {
              "error": {
                "type": "string"
              },
              "message": {
                "type": "string"
              },
              "details": {
                "type": "object"
              }
            }
          },
          "example": {
            "error": "Validation failed",
            "message": "Field 'datePreset' is required for stats endpoints",
            "details": {
              "field": "datePreset",
              "code": "required"
            }
          }
        },
        "401": {
          "description": "Unauthorized - Invalid or missing API key",
          "contentType": "application/json",
          "example": {
            "error": "Unauthorized",
            "message": "Invalid API key or missing Authorization header"
          }
        },
        "403": {
          "description": "Forbidden - Insufficient permissions",
          "contentType": "application/json",
          "example": {
            "error": "Access denied",
            "message": "Insufficient permissions to access this resource"
          }
        },
        "404": {
          "description": "Not Found - Resource does not exist",
          "contentType": "application/json",
          "example": {
            "error": "Not found",
            "message": "Campaign with ID 999 not found"
          }
        },
        "429": {
          "description": "Too Many Requests - Rate limit exceeded",
          "contentType": "application/json",
          "example": {
            "error": "Rate limit exceeded",
            "message": "Too many requests. Please wait before making another request.",
            "retryAfter": 60
          }
        },
        "500": {
          "description": "Internal Server Error",
          "contentType": "application/json",
          "example": {
            "error": "Internal server error",
            "message": "An unexpected error occurred. Please try again later."
          }
        }
      },
      "examples": {
        "python": "import requests\nimport os\nfrom datetime import datetime\n\n# Configuration\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\ndef handle_response(response):\n    \"\"\"Handle API response with proper error handling\"\"\"\n    if response.status_code == 200:\n        return response.json()\n    elif response.status_code == 400:\n        print(f\"Bad Request: {response.json()}\")\n    elif response.status_code == 401:\n        print(\"Unauthorized: Check your API key\")\n    elif response.status_code == 403:\n        print(\"Forbidden: Insufficient permissions\")\n    elif response.status_code == 404:\n        print(\"Not Found: Resource doesn't exist\")\n    elif response.status_code == 429:\n        print(\"Rate Limited: Wait before retrying\")\n    else:\n        print(f\"Error {response.status_code}: {response.text}\")\n    return None\n\n# GET /public/api/v1/report/offer/groupings\ndef call_endpoint():\n    \"\"\"Call the GET /public/api/v1/report/offer/groupings endpoint\"\"\"\n    \n    params = {'datePreset': 'last_7_days', 'timezone': 'UTC'}\n    \n    response = requests.get(\n        f\"{BASE_URL}/public/api/v1/report/offer/groupings\",\n        headers=headers,\n        params=params\n    )\n    \n    return handle_response(response)\n\n# Usage\nif __name__ == \"__main__\":\n    result = call_endpoint()\n    print(result)\n",
        "curl": "# GET /public/api/v1/report/offer/groupings\ncurl -X GET \\\n  \"https://pierdun.com/public/api/v1/public/api/v1/report/offer/groupings\" \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Accept: application/json\"",
        "javascript": "// GET /public/api/v1/report/offer/groupings\nconst BINOM_API_KEY = process.env.BINOM_PUBLIC;\nconst BASE_URL = 'https://pierdun.com/public/api/v1';\n\nasync function callBinomAPI() {\n    const config = {\n        method: 'GET',\n        headers: {\n            'Authorization': `Bearer ${BINOM_API_KEY}`,\n            'Accept': 'application/json'\n        }\n    };\n    \n    try {\n        const response = await fetch(`${BASE_URL}/public/api/v1/report/offer/groupings`, config);\n        \n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        \n        const data = await response.json();\n        console.log('Success:', data);\n        return data;\n    } catch (error) {\n        console.error('Error:', error);\n        throw error;\n    }\n}\n\n// Usage\ncallBinomAPI()\n    .then(data => console.log(data))\n    .catch(error => console.error('Failed:', error));"
      },
      "customMetrics": {
        "available": false,
        "note": "This endpoint does not return custom metrics"
      },
      "aiInstructions": {
        "priority": "HIGH",
        "complexity": "LOW",
        "keyPoints": [
          "This is a HIGH priority endpoint",
          "Category: report operations",
          "Custom metrics: Not available",
          "Always use Bearer token authentication",
          "Handle rate limiting with exponential backoff"
        ],
        "beforeUsing": [
          "Verify API key is set in environment variables",
          "Check if datePreset and timezone are required",
          "Validate all required parameters are provided",
          "Ensure proper error handling is implemented"
        ],
        "afterUsing": [
          "Validate response structure matches expected schema",
          "Check for custom metrics if endpoint supports them",
          "Log important metrics for monitoring",
          "Handle pagination if response is truncated"
        ],
        "commonMistakes": [
          "Forgetting datePreset parameter for stats endpoints",
          "Using wrong Bearer token format",
          "Not handling 429 rate limit responses",
          "Ignoring custom metrics in optimization decisions",
          "Not validating response data before processing"
        ],
        "optimization": [
          "Cache responses when appropriate",
          "Use batch operations when available",
          "Implement retry logic with exponential backoff",
          "Monitor API usage to avoid rate limits",
          "Use appropriate date ranges to minimize data transfer"
        ],
        "customMetricsGuidance": {
          "applicable": false,
          "note": "This endpoint does not return custom metrics"
        }
      },
      "errorHandling": {
        "retryStrategy": {
          "429": {
            "action": "Exponential backoff retry",
            "initialDelay": 1,
            "maxRetries": 5,
            "backoffMultiplier": 2
          },
          "500": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 5
          },
          "502": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 10
          }
        },
        "noRetryErrors": [
          400,
          401,
          403,
          404
        ],
        "commonIssues": [
          {
            "error": "400 - Missing datePreset",
            "solution": "Add datePreset and timezone parameters to GET requests",
            "prevention": "Always validate required parameters before sending request"
          },
          {
            "error": "401 - Invalid API key",
            "solution": "Check Bearer token format and API key validity",
            "prevention": "Validate API key format before making requests"
          },
          {
            "error": "403 - Access denied",
            "solution": "Verify user permissions for this resource",
            "prevention": "Check user role and permissions before accessing resources"
          },
          {
            "error": "429 - Rate limited",
            "solution": "Implement exponential backoff and reduce request frequency",
            "prevention": "Monitor request rate and implement proper throttling"
          }
        ],
        "debugging": [
          "Log full request and response for error analysis",
          "Check API key permissions and expiration",
          "Verify request format matches API documentation",
          "Test with minimal required parameters first"
        ]
      },
      "workflow": {
        "prerequisites": [
          "Valid authentication",
          "Proper permissions"
        ],
        "followUpActions": [
          "Process response data",
          "Handle any errors"
        ],
        "relatedEndpoints": [],
        "typicalWorkflow": [
          "Call GET /public/api/v1/report/offer/groupings endpoint",
          "Process response"
        ]
      },
      "testing": {
        "unitTests": [
          "Test with valid parameters",
          "Test with missing required parameters",
          "Test with invalid parameter values",
          "Test authentication failure scenarios"
        ],
        "integrationTests": [
          "Test full workflow with real data",
          "Test error handling and recovery",
          "Test rate limiting behavior",
          "Test response data validation"
        ],
        "testData": {
          "validParams": {},
          "invalidParams": []
        },
        "assertions": [
          "Response status code is 200 for valid requests",
          "Response contains expected data structure",
          "Custom metrics are present when applicable",
          "Error responses contain proper error messages"
        ]
      }
    },
    "GET /public/api/v1/report/traffic_source/groupings": {
      "metadata": {
        "method": "GET",
        "path": "/public/api/v1/report/traffic_source/groupings",
        "category": "report",
        "priority": 32,
        "importance": "HIGH",
        "hasCustomMetrics": false,
        "aiUsage": "Детализация анализа источников"
      },
      "description": {
        "summary": "Группировки для отчетов по трафиксорсам",
        "detailed": "Detailed description for GET /public/api/v1/report/traffic_source/groupings - Группировки для отчетов по трафиксорсам",
        "businessContext": "Advanced analytics - creates detailed reports with custom groupings and filtering for business intelligence",
        "whenToUse": [
          "Standard report operations"
        ]
      },
      "authentication": {
        "type": "Bearer Token",
        "header": "Authorization: Bearer {binomPublic}",
        "required": true,
        "note": "Use environment variable binomPublic"
      },
      "parameters": {
        "path": [],
        "query": [
          {
            "name": "datePreset",
            "type": "string",
            "required": true,
            "description": "Date range preset for data filtering",
            "enum": [
              "today",
              "yesterday",
              "last_7_days",
              "last_30_days",
              "this_month",
              "last_month",
              "custom_time"
            ],
            "example": "last_7_days"
          },
          {
            "name": "timezone",
            "type": "string",
            "required": true,
            "description": "Timezone for date calculations",
            "example": "UTC"
          },
          {
            "name": "limit",
            "type": "integer",
            "required": false,
            "description": "Maximum number of records to return",
            "example": 100,
            "default": 100
          },
          {
            "name": "offset",
            "type": "integer",
            "required": false,
            "description": "Number of records to skip for pagination",
            "example": 0,
            "default": 0
          }
        ],
        "header": [
          {
            "name": "Authorization",
            "type": "string",
            "required": true,
            "description": "Bearer token authentication",
            "example": "Bearer your_api_key_here"
          },
          {
            "name": "Content-Type",
            "type": "string",
            "required": false,
            "description": "Content type for request body",
            "example": "application/json"
          }
        ]
      },
      "requestBody": null,
      "responses": {
        "200": {
          "description": "Success",
          "contentType": "application/json",
          "schema": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "example": {
            "message": "Success"
          }
        },
        "400": {
          "description": "Bad Request - Invalid parameters or missing required fields",
          "contentType": "application/json",
          "schema": {
            "type": "object",
            "properties": {
              "error": {
                "type": "string"
              },
              "message": {
                "type": "string"
              },
              "details": {
                "type": "object"
              }
            }
          },
          "example": {
            "error": "Validation failed",
            "message": "Field 'datePreset' is required for stats endpoints",
            "details": {
              "field": "datePreset",
              "code": "required"
            }
          }
        },
        "401": {
          "description": "Unauthorized - Invalid or missing API key",
          "contentType": "application/json",
          "example": {
            "error": "Unauthorized",
            "message": "Invalid API key or missing Authorization header"
          }
        },
        "403": {
          "description": "Forbidden - Insufficient permissions",
          "contentType": "application/json",
          "example": {
            "error": "Access denied",
            "message": "Insufficient permissions to access this resource"
          }
        },
        "404": {
          "description": "Not Found - Resource does not exist",
          "contentType": "application/json",
          "example": {
            "error": "Not found",
            "message": "Campaign with ID 999 not found"
          }
        },
        "429": {
          "description": "Too Many Requests - Rate limit exceeded",
          "contentType": "application/json",
          "example": {
            "error": "Rate limit exceeded",
            "message": "Too many requests. Please wait before making another request.",
            "retryAfter": 60
          }
        },
        "500": {
          "description": "Internal Server Error",
          "contentType": "application/json",
          "example": {
            "error": "Internal server error",
            "message": "An unexpected error occurred. Please try again later."
          }
        }
      },
      "examples": {
        "python": "import requests\nimport os\nfrom datetime import datetime\n\n# Configuration\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\ndef handle_response(response):\n    \"\"\"Handle API response with proper error handling\"\"\"\n    if response.status_code == 200:\n        return response.json()\n    elif response.status_code == 400:\n        print(f\"Bad Request: {response.json()}\")\n    elif response.status_code == 401:\n        print(\"Unauthorized: Check your API key\")\n    elif response.status_code == 403:\n        print(\"Forbidden: Insufficient permissions\")\n    elif response.status_code == 404:\n        print(\"Not Found: Resource doesn't exist\")\n    elif response.status_code == 429:\n        print(\"Rate Limited: Wait before retrying\")\n    else:\n        print(f\"Error {response.status_code}: {response.text}\")\n    return None\n\n# GET /public/api/v1/report/traffic_source/groupings\ndef call_endpoint():\n    \"\"\"Call the GET /public/api/v1/report/traffic_source/groupings endpoint\"\"\"\n    \n    params = {'datePreset': 'last_7_days', 'timezone': 'UTC'}\n    \n    response = requests.get(\n        f\"{BASE_URL}/public/api/v1/report/traffic_source/groupings\",\n        headers=headers,\n        params=params\n    )\n    \n    return handle_response(response)\n\n# Usage\nif __name__ == \"__main__\":\n    result = call_endpoint()\n    print(result)\n",
        "curl": "# GET /public/api/v1/report/traffic_source/groupings\ncurl -X GET \\\n  \"https://pierdun.com/public/api/v1/public/api/v1/report/traffic_source/groupings\" \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Accept: application/json\"",
        "javascript": "// GET /public/api/v1/report/traffic_source/groupings\nconst BINOM_API_KEY = process.env.BINOM_PUBLIC;\nconst BASE_URL = 'https://pierdun.com/public/api/v1';\n\nasync function callBinomAPI() {\n    const config = {\n        method: 'GET',\n        headers: {\n            'Authorization': `Bearer ${BINOM_API_KEY}`,\n            'Accept': 'application/json'\n        }\n    };\n    \n    try {\n        const response = await fetch(`${BASE_URL}/public/api/v1/report/traffic_source/groupings`, config);\n        \n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        \n        const data = await response.json();\n        console.log('Success:', data);\n        return data;\n    } catch (error) {\n        console.error('Error:', error);\n        throw error;\n    }\n}\n\n// Usage\ncallBinomAPI()\n    .then(data => console.log(data))\n    .catch(error => console.error('Failed:', error));"
      },
      "customMetrics": {
        "available": false,
        "note": "This endpoint does not return custom metrics"
      },
      "aiInstructions": {
        "priority": "HIGH",
        "complexity": "LOW",
        "keyPoints": [
          "This is a HIGH priority endpoint",
          "Category: report operations",
          "Custom metrics: Not available",
          "Always use Bearer token authentication",
          "Handle rate limiting with exponential backoff"
        ],
        "beforeUsing": [
          "Verify API key is set in environment variables",
          "Check if datePreset and timezone are required",
          "Validate all required parameters are provided",
          "Ensure proper error handling is implemented"
        ],
        "afterUsing": [
          "Validate response structure matches expected schema",
          "Check for custom metrics if endpoint supports them",
          "Log important metrics for monitoring",
          "Handle pagination if response is truncated"
        ],
        "commonMistakes": [
          "Forgetting datePreset parameter for stats endpoints",
          "Using wrong Bearer token format",
          "Not handling 429 rate limit responses",
          "Ignoring custom metrics in optimization decisions",
          "Not validating response data before processing"
        ],
        "optimization": [
          "Cache responses when appropriate",
          "Use batch operations when available",
          "Implement retry logic with exponential backoff",
          "Monitor API usage to avoid rate limits",
          "Use appropriate date ranges to minimize data transfer"
        ],
        "customMetricsGuidance": {
          "applicable": false,
          "note": "This endpoint does not return custom metrics"
        }
      },
      "errorHandling": {
        "retryStrategy": {
          "429": {
            "action": "Exponential backoff retry",
            "initialDelay": 1,
            "maxRetries": 5,
            "backoffMultiplier": 2
          },
          "500": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 5
          },
          "502": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 10
          }
        },
        "noRetryErrors": [
          400,
          401,
          403,
          404
        ],
        "commonIssues": [
          {
            "error": "400 - Missing datePreset",
            "solution": "Add datePreset and timezone parameters to GET requests",
            "prevention": "Always validate required parameters before sending request"
          },
          {
            "error": "401 - Invalid API key",
            "solution": "Check Bearer token format and API key validity",
            "prevention": "Validate API key format before making requests"
          },
          {
            "error": "403 - Access denied",
            "solution": "Verify user permissions for this resource",
            "prevention": "Check user role and permissions before accessing resources"
          },
          {
            "error": "429 - Rate limited",
            "solution": "Implement exponential backoff and reduce request frequency",
            "prevention": "Monitor request rate and implement proper throttling"
          }
        ],
        "debugging": [
          "Log full request and response for error analysis",
          "Check API key permissions and expiration",
          "Verify request format matches API documentation",
          "Test with minimal required parameters first"
        ]
      },
      "workflow": {
        "prerequisites": [
          "Valid authentication",
          "Proper permissions"
        ],
        "followUpActions": [
          "Process response data",
          "Handle any errors"
        ],
        "relatedEndpoints": [],
        "typicalWorkflow": [
          "Call GET /public/api/v1/report/traffic_source/groupings endpoint",
          "Process response"
        ]
      },
      "testing": {
        "unitTests": [
          "Test with valid parameters",
          "Test with missing required parameters",
          "Test with invalid parameter values",
          "Test authentication failure scenarios"
        ],
        "integrationTests": [
          "Test full workflow with real data",
          "Test error handling and recovery",
          "Test rate limiting behavior",
          "Test response data validation"
        ],
        "testData": {
          "validParams": {},
          "invalidParams": []
        },
        "assertions": [
          "Response status code is 200 for valid requests",
          "Response contains expected data structure",
          "Custom metrics are present when applicable",
          "Error responses contain proper error messages"
        ]
      }
    },
    "POST /public/api/v1/campaign/change_cost": {
      "metadata": {
        "method": "POST",
        "path": "/public/api/v1/campaign/change_cost",
        "category": "campaign",
        "priority": 33,
        "importance": "HIGH",
        "hasCustomMetrics": false,
        "aiUsage": "Оптимизация затрат"
      },
      "description": {
        "summary": "Массовое изменение стоимости кампаний",
        "detailed": "Detailed description for POST /public/api/v1/campaign/change_cost - Массовое изменение стоимости кампаний",
        "businessContext": "Campaign management - core functionality for setting up, configuring, and managing traffic tracking campaigns",
        "whenToUse": [
          "Standard campaign operations"
        ]
      },
      "authentication": {
        "type": "Bearer Token",
        "header": "Authorization: Bearer {binomPublic}",
        "required": true,
        "note": "Use environment variable binomPublic"
      },
      "parameters": {
        "path": [],
        "query": [],
        "header": [
          {
            "name": "Authorization",
            "type": "string",
            "required": true,
            "description": "Bearer token authentication",
            "example": "Bearer your_api_key_here"
          },
          {
            "name": "Content-Type",
            "type": "string",
            "required": true,
            "description": "Content type for request body",
            "example": "application/json"
          }
        ]
      },
      "requestBody": {
        "required": true,
        "contentType": "application/json",
        "schema": {
          "type": "object"
        },
        "example": {}
      },
      "responses": {
        "200": {
          "description": "Success",
          "contentType": "application/json",
          "schema": {
            "type": "object"
          },
          "example": {
            "message": "Success"
          }
        },
        "400": {
          "description": "Bad Request - Invalid parameters or missing required fields",
          "contentType": "application/json",
          "schema": {
            "type": "object",
            "properties": {
              "error": {
                "type": "string"
              },
              "message": {
                "type": "string"
              },
              "details": {
                "type": "object"
              }
            }
          },
          "example": {
            "error": "Validation failed",
            "message": "Field 'datePreset' is required for stats endpoints",
            "details": {
              "field": "datePreset",
              "code": "required"
            }
          }
        },
        "401": {
          "description": "Unauthorized - Invalid or missing API key",
          "contentType": "application/json",
          "example": {
            "error": "Unauthorized",
            "message": "Invalid API key or missing Authorization header"
          }
        },
        "403": {
          "description": "Forbidden - Insufficient permissions",
          "contentType": "application/json",
          "example": {
            "error": "Access denied",
            "message": "Insufficient permissions to access this resource"
          }
        },
        "404": {
          "description": "Not Found - Resource does not exist",
          "contentType": "application/json",
          "example": {
            "error": "Not found",
            "message": "Campaign with ID 999 not found"
          }
        },
        "429": {
          "description": "Too Many Requests - Rate limit exceeded",
          "contentType": "application/json",
          "example": {
            "error": "Rate limit exceeded",
            "message": "Too many requests. Please wait before making another request.",
            "retryAfter": 60
          }
        },
        "500": {
          "description": "Internal Server Error",
          "contentType": "application/json",
          "example": {
            "error": "Internal server error",
            "message": "An unexpected error occurred. Please try again later."
          }
        }
      },
      "examples": {
        "python": "import requests\nimport os\nfrom datetime import datetime\n\n# Configuration\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\ndef handle_response(response):\n    \"\"\"Handle API response with proper error handling\"\"\"\n    if response.status_code == 200:\n        return response.json()\n    elif response.status_code == 400:\n        print(f\"Bad Request: {response.json()}\")\n    elif response.status_code == 401:\n        print(\"Unauthorized: Check your API key\")\n    elif response.status_code == 403:\n        print(\"Forbidden: Insufficient permissions\")\n    elif response.status_code == 404:\n        print(\"Not Found: Resource doesn't exist\")\n    elif response.status_code == 429:\n        print(\"Rate Limited: Wait before retrying\")\n    else:\n        print(f\"Error {response.status_code}: {response.text}\")\n    return None\n\n# Create new campaign\ndef create_campaign(campaign_data):\n    \"\"\"\n    Create a new tracking campaign\n    \n    Args:\n        campaign_data: Dictionary with campaign configuration\n    \"\"\"\n    response = requests.post(\n        f\"{BASE_URL}/campaign\",\n        headers=headers,\n        json=campaign_data\n    )\n    \n    return handle_response(response)\n\n# Usage example\nif __name__ == \"__main__\":\n    new_campaign = {\n        \"name\": \"iOS Mobile Campaign - Premium GEOs\",\n        \"trafficSourceId\": 1,\n        \"cost\": 0.30,\n        \"currency\": \"USD\",\n        \"costModel\": \"CPC\",\n        \"status\": \"active\",\n        \"description\": \"High-converting mobile campaign for tier 1 countries\"\n    }\n    \n    result = create_campaign(new_campaign)\n    if result:\n        print(f\"Campaign created with ID: {result.get('id')}\")\n",
        "curl": "# POST /public/api/v1/campaign/change_cost\ncurl -X POST \\\n  \"https://pierdun.com/public/api/v1/public/api/v1/campaign/change_cost\" \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Accept: application/json\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"name\": \"Test Campaign\",\n    \"trafficSourceId\": 1,\n    \"cost\": 0.25,\n    \"currency\": \"USD\",\n    \"costModel\": \"CPC\",\n    \"status\": \"active\"\n  }' ",
        "javascript": "// POST /public/api/v1/campaign/change_cost\nconst BINOM_API_KEY = process.env.BINOM_PUBLIC;\nconst BASE_URL = 'https://pierdun.com/public/api/v1';\n\nasync function callBinomAPI() {\n    const config = {\n        method: 'POST',\n        headers: {\n            'Authorization': `Bearer ${BINOM_API_KEY}`,\n            'Accept': 'application/json'\n        }\n    };\n    \n    try {\n        const response = await fetch(`${BASE_URL}/public/api/v1/campaign/change_cost`, config);\n        \n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        \n        const data = await response.json();\n        console.log('Success:', data);\n        return data;\n    } catch (error) {\n        console.error('Error:', error);\n        throw error;\n    }\n}\n\n// Usage\ncallBinomAPI()\n    .then(data => console.log(data))\n    .catch(error => console.error('Failed:', error));"
      },
      "customMetrics": {
        "available": false,
        "note": "This endpoint does not return custom metrics"
      },
      "aiInstructions": {
        "priority": "HIGH",
        "complexity": "LOW",
        "keyPoints": [
          "This is a HIGH priority endpoint",
          "Category: campaign operations",
          "Custom metrics: Not available",
          "Always use Bearer token authentication",
          "Handle rate limiting with exponential backoff"
        ],
        "beforeUsing": [
          "Verify API key is set in environment variables",
          "Check if datePreset and timezone are required",
          "Validate all required parameters are provided",
          "Ensure proper error handling is implemented"
        ],
        "afterUsing": [
          "Validate response structure matches expected schema",
          "Check for custom metrics if endpoint supports them",
          "Log important metrics for monitoring",
          "Handle pagination if response is truncated"
        ],
        "commonMistakes": [
          "Forgetting datePreset parameter for stats endpoints",
          "Using wrong Bearer token format",
          "Not handling 429 rate limit responses",
          "Ignoring custom metrics in optimization decisions",
          "Not validating response data before processing"
        ],
        "optimization": [
          "Cache responses when appropriate",
          "Use batch operations when available",
          "Implement retry logic with exponential backoff",
          "Monitor API usage to avoid rate limits",
          "Use appropriate date ranges to minimize data transfer"
        ],
        "customMetricsGuidance": {
          "applicable": false,
          "note": "This endpoint does not return custom metrics"
        }
      },
      "errorHandling": {
        "retryStrategy": {
          "429": {
            "action": "Exponential backoff retry",
            "initialDelay": 1,
            "maxRetries": 5,
            "backoffMultiplier": 2
          },
          "500": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 5
          },
          "502": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 10
          }
        },
        "noRetryErrors": [
          400,
          401,
          403,
          404
        ],
        "commonIssues": [
          {
            "error": "400 - Missing datePreset",
            "solution": "Add datePreset and timezone parameters to GET requests",
            "prevention": "Always validate required parameters before sending request"
          },
          {
            "error": "401 - Invalid API key",
            "solution": "Check Bearer token format and API key validity",
            "prevention": "Validate API key format before making requests"
          },
          {
            "error": "403 - Access denied",
            "solution": "Verify user permissions for this resource",
            "prevention": "Check user role and permissions before accessing resources"
          },
          {
            "error": "429 - Rate limited",
            "solution": "Implement exponential backoff and reduce request frequency",
            "prevention": "Monitor request rate and implement proper throttling"
          }
        ],
        "debugging": [
          "Log full request and response for error analysis",
          "Check API key permissions and expiration",
          "Verify request format matches API documentation",
          "Test with minimal required parameters first"
        ]
      },
      "workflow": {
        "prerequisites": [
          "Valid authentication",
          "Proper permissions"
        ],
        "followUpActions": [
          "Process response data",
          "Handle any errors"
        ],
        "relatedEndpoints": [],
        "typicalWorkflow": [
          "Call POST /public/api/v1/campaign/change_cost endpoint",
          "Process response"
        ]
      },
      "testing": {
        "unitTests": [
          "Test with valid parameters",
          "Test with missing required parameters",
          "Test with invalid parameter values",
          "Test authentication failure scenarios"
        ],
        "integrationTests": [
          "Test full workflow with real data",
          "Test error handling and recovery",
          "Test rate limiting behavior",
          "Test response data validation"
        ],
        "testData": {
          "validParams": {},
          "invalidParams": []
        },
        "assertions": [
          "Response status code is 200 for valid requests",
          "Response contains expected data structure",
          "Custom metrics are present when applicable",
          "Error responses contain proper error messages"
        ]
      }
    },
    "POST /public/api/v1/campaign/change_setting": {
      "metadata": {
        "method": "POST",
        "path": "/public/api/v1/campaign/change_setting",
        "category": "campaign",
        "priority": 34,
        "importance": "HIGH",
        "hasCustomMetrics": false,
        "aiUsage": "Групповые операции"
      },
      "description": {
        "summary": "Массовое изменение настроек кампаний",
        "detailed": "Detailed description for POST /public/api/v1/campaign/change_setting - Массовое изменение настроек кампаний",
        "businessContext": "Campaign management - core functionality for setting up, configuring, and managing traffic tracking campaigns",
        "whenToUse": [
          "Standard campaign operations"
        ]
      },
      "authentication": {
        "type": "Bearer Token",
        "header": "Authorization: Bearer {binomPublic}",
        "required": true,
        "note": "Use environment variable binomPublic"
      },
      "parameters": {
        "path": [],
        "query": [],
        "header": [
          {
            "name": "Authorization",
            "type": "string",
            "required": true,
            "description": "Bearer token authentication",
            "example": "Bearer your_api_key_here"
          },
          {
            "name": "Content-Type",
            "type": "string",
            "required": true,
            "description": "Content type for request body",
            "example": "application/json"
          }
        ]
      },
      "requestBody": {
        "required": true,
        "contentType": "application/json",
        "schema": {
          "type": "object"
        },
        "example": {}
      },
      "responses": {
        "200": {
          "description": "Success",
          "contentType": "application/json",
          "schema": {
            "type": "object"
          },
          "example": {
            "message": "Success"
          }
        },
        "400": {
          "description": "Bad Request - Invalid parameters or missing required fields",
          "contentType": "application/json",
          "schema": {
            "type": "object",
            "properties": {
              "error": {
                "type": "string"
              },
              "message": {
                "type": "string"
              },
              "details": {
                "type": "object"
              }
            }
          },
          "example": {
            "error": "Validation failed",
            "message": "Field 'datePreset' is required for stats endpoints",
            "details": {
              "field": "datePreset",
              "code": "required"
            }
          }
        },
        "401": {
          "description": "Unauthorized - Invalid or missing API key",
          "contentType": "application/json",
          "example": {
            "error": "Unauthorized",
            "message": "Invalid API key or missing Authorization header"
          }
        },
        "403": {
          "description": "Forbidden - Insufficient permissions",
          "contentType": "application/json",
          "example": {
            "error": "Access denied",
            "message": "Insufficient permissions to access this resource"
          }
        },
        "404": {
          "description": "Not Found - Resource does not exist",
          "contentType": "application/json",
          "example": {
            "error": "Not found",
            "message": "Campaign with ID 999 not found"
          }
        },
        "429": {
          "description": "Too Many Requests - Rate limit exceeded",
          "contentType": "application/json",
          "example": {
            "error": "Rate limit exceeded",
            "message": "Too many requests. Please wait before making another request.",
            "retryAfter": 60
          }
        },
        "500": {
          "description": "Internal Server Error",
          "contentType": "application/json",
          "example": {
            "error": "Internal server error",
            "message": "An unexpected error occurred. Please try again later."
          }
        }
      },
      "examples": {
        "python": "import requests\nimport os\nfrom datetime import datetime\n\n# Configuration\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\ndef handle_response(response):\n    \"\"\"Handle API response with proper error handling\"\"\"\n    if response.status_code == 200:\n        return response.json()\n    elif response.status_code == 400:\n        print(f\"Bad Request: {response.json()}\")\n    elif response.status_code == 401:\n        print(\"Unauthorized: Check your API key\")\n    elif response.status_code == 403:\n        print(\"Forbidden: Insufficient permissions\")\n    elif response.status_code == 404:\n        print(\"Not Found: Resource doesn't exist\")\n    elif response.status_code == 429:\n        print(\"Rate Limited: Wait before retrying\")\n    else:\n        print(f\"Error {response.status_code}: {response.text}\")\n    return None\n\n# Create new campaign\ndef create_campaign(campaign_data):\n    \"\"\"\n    Create a new tracking campaign\n    \n    Args:\n        campaign_data: Dictionary with campaign configuration\n    \"\"\"\n    response = requests.post(\n        f\"{BASE_URL}/campaign\",\n        headers=headers,\n        json=campaign_data\n    )\n    \n    return handle_response(response)\n\n# Usage example\nif __name__ == \"__main__\":\n    new_campaign = {\n        \"name\": \"iOS Mobile Campaign - Premium GEOs\",\n        \"trafficSourceId\": 1,\n        \"cost\": 0.30,\n        \"currency\": \"USD\",\n        \"costModel\": \"CPC\",\n        \"status\": \"active\",\n        \"description\": \"High-converting mobile campaign for tier 1 countries\"\n    }\n    \n    result = create_campaign(new_campaign)\n    if result:\n        print(f\"Campaign created with ID: {result.get('id')}\")\n",
        "curl": "# POST /public/api/v1/campaign/change_setting\ncurl -X POST \\\n  \"https://pierdun.com/public/api/v1/public/api/v1/campaign/change_setting\" \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Accept: application/json\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"name\": \"Test Campaign\",\n    \"trafficSourceId\": 1,\n    \"cost\": 0.25,\n    \"currency\": \"USD\",\n    \"costModel\": \"CPC\",\n    \"status\": \"active\"\n  }' ",
        "javascript": "// POST /public/api/v1/campaign/change_setting\nconst BINOM_API_KEY = process.env.BINOM_PUBLIC;\nconst BASE_URL = 'https://pierdun.com/public/api/v1';\n\nasync function callBinomAPI() {\n    const config = {\n        method: 'POST',\n        headers: {\n            'Authorization': `Bearer ${BINOM_API_KEY}`,\n            'Accept': 'application/json'\n        }\n    };\n    \n    try {\n        const response = await fetch(`${BASE_URL}/public/api/v1/campaign/change_setting`, config);\n        \n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        \n        const data = await response.json();\n        console.log('Success:', data);\n        return data;\n    } catch (error) {\n        console.error('Error:', error);\n        throw error;\n    }\n}\n\n// Usage\ncallBinomAPI()\n    .then(data => console.log(data))\n    .catch(error => console.error('Failed:', error));"
      },
      "customMetrics": {
        "available": false,
        "note": "This endpoint does not return custom metrics"
      },
      "aiInstructions": {
        "priority": "HIGH",
        "complexity": "LOW",
        "keyPoints": [
          "This is a HIGH priority endpoint",
          "Category: campaign operations",
          "Custom metrics: Not available",
          "Always use Bearer token authentication",
          "Handle rate limiting with exponential backoff"
        ],
        "beforeUsing": [
          "Verify API key is set in environment variables",
          "Check if datePreset and timezone are required",
          "Validate all required parameters are provided",
          "Ensure proper error handling is implemented"
        ],
        "afterUsing": [
          "Validate response structure matches expected schema",
          "Check for custom metrics if endpoint supports them",
          "Log important metrics for monitoring",
          "Handle pagination if response is truncated"
        ],
        "commonMistakes": [
          "Forgetting datePreset parameter for stats endpoints",
          "Using wrong Bearer token format",
          "Not handling 429 rate limit responses",
          "Ignoring custom metrics in optimization decisions",
          "Not validating response data before processing"
        ],
        "optimization": [
          "Cache responses when appropriate",
          "Use batch operations when available",
          "Implement retry logic with exponential backoff",
          "Monitor API usage to avoid rate limits",
          "Use appropriate date ranges to minimize data transfer"
        ],
        "customMetricsGuidance": {
          "applicable": false,
          "note": "This endpoint does not return custom metrics"
        }
      },
      "errorHandling": {
        "retryStrategy": {
          "429": {
            "action": "Exponential backoff retry",
            "initialDelay": 1,
            "maxRetries": 5,
            "backoffMultiplier": 2
          },
          "500": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 5
          },
          "502": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 10
          }
        },
        "noRetryErrors": [
          400,
          401,
          403,
          404
        ],
        "commonIssues": [
          {
            "error": "400 - Missing datePreset",
            "solution": "Add datePreset and timezone parameters to GET requests",
            "prevention": "Always validate required parameters before sending request"
          },
          {
            "error": "401 - Invalid API key",
            "solution": "Check Bearer token format and API key validity",
            "prevention": "Validate API key format before making requests"
          },
          {
            "error": "403 - Access denied",
            "solution": "Verify user permissions for this resource",
            "prevention": "Check user role and permissions before accessing resources"
          },
          {
            "error": "429 - Rate limited",
            "solution": "Implement exponential backoff and reduce request frequency",
            "prevention": "Monitor request rate and implement proper throttling"
          }
        ],
        "debugging": [
          "Log full request and response for error analysis",
          "Check API key permissions and expiration",
          "Verify request format matches API documentation",
          "Test with minimal required parameters first"
        ]
      },
      "workflow": {
        "prerequisites": [
          "Valid authentication",
          "Proper permissions"
        ],
        "followUpActions": [
          "Process response data",
          "Handle any errors"
        ],
        "relatedEndpoints": [],
        "typicalWorkflow": [
          "Call POST /public/api/v1/campaign/change_setting endpoint",
          "Process response"
        ]
      },
      "testing": {
        "unitTests": [
          "Test with valid parameters",
          "Test with missing required parameters",
          "Test with invalid parameter values",
          "Test authentication failure scenarios"
        ],
        "integrationTests": [
          "Test full workflow with real data",
          "Test error handling and recovery",
          "Test rate limiting behavior",
          "Test response data validation"
        ],
        "testData": {
          "validParams": {},
          "invalidParams": []
        },
        "assertions": [
          "Response status code is 200 for valid requests",
          "Response contains expected data structure",
          "Custom metrics are present when applicable",
          "Error responses contain proper error messages"
        ]
      }
    },
    "PUT /public/api/v1/campaign/landing/pause": {
      "metadata": {
        "method": "PUT",
        "path": "/public/api/v1/campaign/landing/pause",
        "category": "campaign",
        "priority": 35,
        "importance": "HIGH",
        "hasCustomMetrics": false,
        "aiUsage": "Управление ротациями"
      },
      "description": {
        "summary": "Пауза лендинга в кампании",
        "detailed": "Detailed description for PUT /public/api/v1/campaign/landing/pause - Пауза лендинга в кампании",
        "businessContext": "Campaign management - core functionality for setting up, configuring, and managing traffic tracking campaigns",
        "whenToUse": [
          "Standard campaign operations"
        ]
      },
      "authentication": {
        "type": "Bearer Token",
        "header": "Authorization: Bearer {binomPublic}",
        "required": true,
        "note": "Use environment variable binomPublic"
      },
      "parameters": {
        "path": [],
        "query": [],
        "header": [
          {
            "name": "Authorization",
            "type": "string",
            "required": true,
            "description": "Bearer token authentication",
            "example": "Bearer your_api_key_here"
          },
          {
            "name": "Content-Type",
            "type": "string",
            "required": true,
            "description": "Content type for request body",
            "example": "application/json"
          }
        ]
      },
      "requestBody": {
        "required": true,
        "contentType": "application/json",
        "schema": {
          "type": "object"
        },
        "example": {}
      },
      "responses": {
        "200": {
          "description": "Success",
          "contentType": "application/json",
          "schema": {
            "type": "object"
          },
          "example": {
            "message": "Success"
          }
        },
        "400": {
          "description": "Bad Request - Invalid parameters or missing required fields",
          "contentType": "application/json",
          "schema": {
            "type": "object",
            "properties": {
              "error": {
                "type": "string"
              },
              "message": {
                "type": "string"
              },
              "details": {
                "type": "object"
              }
            }
          },
          "example": {
            "error": "Validation failed",
            "message": "Field 'datePreset' is required for stats endpoints",
            "details": {
              "field": "datePreset",
              "code": "required"
            }
          }
        },
        "401": {
          "description": "Unauthorized - Invalid or missing API key",
          "contentType": "application/json",
          "example": {
            "error": "Unauthorized",
            "message": "Invalid API key or missing Authorization header"
          }
        },
        "403": {
          "description": "Forbidden - Insufficient permissions",
          "contentType": "application/json",
          "example": {
            "error": "Access denied",
            "message": "Insufficient permissions to access this resource"
          }
        },
        "404": {
          "description": "Not Found - Resource does not exist",
          "contentType": "application/json",
          "example": {
            "error": "Not found",
            "message": "Campaign with ID 999 not found"
          }
        },
        "429": {
          "description": "Too Many Requests - Rate limit exceeded",
          "contentType": "application/json",
          "example": {
            "error": "Rate limit exceeded",
            "message": "Too many requests. Please wait before making another request.",
            "retryAfter": 60
          }
        },
        "500": {
          "description": "Internal Server Error",
          "contentType": "application/json",
          "example": {
            "error": "Internal server error",
            "message": "An unexpected error occurred. Please try again later."
          }
        }
      },
      "examples": {
        "python": "import requests\nimport os\nfrom datetime import datetime\n\n# Configuration\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\ndef handle_response(response):\n    \"\"\"Handle API response with proper error handling\"\"\"\n    if response.status_code == 200:\n        return response.json()\n    elif response.status_code == 400:\n        print(f\"Bad Request: {response.json()}\")\n    elif response.status_code == 401:\n        print(\"Unauthorized: Check your API key\")\n    elif response.status_code == 403:\n        print(\"Forbidden: Insufficient permissions\")\n    elif response.status_code == 404:\n        print(\"Not Found: Resource doesn't exist\")\n    elif response.status_code == 429:\n        print(\"Rate Limited: Wait before retrying\")\n    else:\n        print(f\"Error {response.status_code}: {response.text}\")\n    return None\n\n# PUT /public/api/v1/campaign/landing/pause\ndef call_endpoint():\n    \"\"\"Call the PUT /public/api/v1/campaign/landing/pause endpoint\"\"\"\n    \n    \n    \n    response = requests.put(\n        f\"{BASE_URL}/public/api/v1/campaign/landing/pause\",\n        headers=headers\n        \n    )\n    \n    return handle_response(response)\n\n# Usage\nif __name__ == \"__main__\":\n    result = call_endpoint()\n    print(result)\n",
        "curl": "# PUT /public/api/v1/campaign/landing/pause\ncurl -X PUT \\\n  \"https://pierdun.com/public/api/v1/public/api/v1/campaign/landing/pause\" \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Accept: application/json\" \\\n  -H \"Content-Type: application/json\"",
        "javascript": "// PUT /public/api/v1/campaign/landing/pause\nconst BINOM_API_KEY = process.env.BINOM_PUBLIC;\nconst BASE_URL = 'https://pierdun.com/public/api/v1';\n\nasync function callBinomAPI() {\n    const config = {\n        method: 'PUT',\n        headers: {\n            'Authorization': `Bearer ${BINOM_API_KEY}`,\n            'Accept': 'application/json'\n        }\n    };\n    \n    try {\n        const response = await fetch(`${BASE_URL}/public/api/v1/campaign/landing/pause`, config);\n        \n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        \n        const data = await response.json();\n        console.log('Success:', data);\n        return data;\n    } catch (error) {\n        console.error('Error:', error);\n        throw error;\n    }\n}\n\n// Usage\ncallBinomAPI()\n    .then(data => console.log(data))\n    .catch(error => console.error('Failed:', error));"
      },
      "customMetrics": {
        "available": false,
        "note": "This endpoint does not return custom metrics"
      },
      "aiInstructions": {
        "priority": "HIGH",
        "complexity": "LOW",
        "keyPoints": [
          "This is a HIGH priority endpoint",
          "Category: campaign operations",
          "Custom metrics: Not available",
          "Always use Bearer token authentication",
          "Handle rate limiting with exponential backoff"
        ],
        "beforeUsing": [
          "Verify API key is set in environment variables",
          "Check if datePreset and timezone are required",
          "Validate all required parameters are provided",
          "Ensure proper error handling is implemented"
        ],
        "afterUsing": [
          "Validate response structure matches expected schema",
          "Check for custom metrics if endpoint supports them",
          "Log important metrics for monitoring",
          "Handle pagination if response is truncated"
        ],
        "commonMistakes": [
          "Forgetting datePreset parameter for stats endpoints",
          "Using wrong Bearer token format",
          "Not handling 429 rate limit responses",
          "Ignoring custom metrics in optimization decisions",
          "Not validating response data before processing"
        ],
        "optimization": [
          "Cache responses when appropriate",
          "Use batch operations when available",
          "Implement retry logic with exponential backoff",
          "Monitor API usage to avoid rate limits",
          "Use appropriate date ranges to minimize data transfer"
        ],
        "customMetricsGuidance": {
          "applicable": false,
          "note": "This endpoint does not return custom metrics"
        }
      },
      "errorHandling": {
        "retryStrategy": {
          "429": {
            "action": "Exponential backoff retry",
            "initialDelay": 1,
            "maxRetries": 5,
            "backoffMultiplier": 2
          },
          "500": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 5
          },
          "502": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 10
          }
        },
        "noRetryErrors": [
          400,
          401,
          403,
          404
        ],
        "commonIssues": [
          {
            "error": "400 - Missing datePreset",
            "solution": "Add datePreset and timezone parameters to GET requests",
            "prevention": "Always validate required parameters before sending request"
          },
          {
            "error": "401 - Invalid API key",
            "solution": "Check Bearer token format and API key validity",
            "prevention": "Validate API key format before making requests"
          },
          {
            "error": "403 - Access denied",
            "solution": "Verify user permissions for this resource",
            "prevention": "Check user role and permissions before accessing resources"
          },
          {
            "error": "429 - Rate limited",
            "solution": "Implement exponential backoff and reduce request frequency",
            "prevention": "Monitor request rate and implement proper throttling"
          }
        ],
        "debugging": [
          "Log full request and response for error analysis",
          "Check API key permissions and expiration",
          "Verify request format matches API documentation",
          "Test with minimal required parameters first"
        ]
      },
      "workflow": {
        "prerequisites": [
          "Valid authentication",
          "Proper permissions"
        ],
        "followUpActions": [
          "Process response data",
          "Handle any errors"
        ],
        "relatedEndpoints": [],
        "typicalWorkflow": [
          "Call PUT /public/api/v1/campaign/landing/pause endpoint",
          "Process response"
        ]
      },
      "testing": {
        "unitTests": [
          "Test with valid parameters",
          "Test with missing required parameters",
          "Test with invalid parameter values",
          "Test authentication failure scenarios"
        ],
        "integrationTests": [
          "Test full workflow with real data",
          "Test error handling and recovery",
          "Test rate limiting behavior",
          "Test response data validation"
        ],
        "testData": {
          "validParams": {},
          "invalidParams": []
        },
        "assertions": [
          "Response status code is 200 for valid requests",
          "Response contains expected data structure",
          "Custom metrics are present when applicable",
          "Error responses contain proper error messages"
        ]
      }
    },
    "PUT /public/api/v1/campaign/offer/pause": {
      "metadata": {
        "method": "PUT",
        "path": "/public/api/v1/campaign/offer/pause",
        "category": "campaign",
        "priority": 36,
        "importance": "MEDIUM",
        "hasCustomMetrics": false,
        "aiUsage": "Управление ротациями офферов"
      },
      "description": {
        "summary": "Пауза оффера в кампании",
        "detailed": "Detailed description for PUT /public/api/v1/campaign/offer/pause - Пауза оффера в кампании",
        "businessContext": "Campaign management - core functionality for setting up, configuring, and managing traffic tracking campaigns",
        "whenToUse": [
          "Standard campaign operations"
        ]
      },
      "authentication": {
        "type": "Bearer Token",
        "header": "Authorization: Bearer {binomPublic}",
        "required": true,
        "note": "Use environment variable binomPublic"
      },
      "parameters": {
        "path": [],
        "query": [],
        "header": [
          {
            "name": "Authorization",
            "type": "string",
            "required": true,
            "description": "Bearer token authentication",
            "example": "Bearer your_api_key_here"
          },
          {
            "name": "Content-Type",
            "type": "string",
            "required": true,
            "description": "Content type for request body",
            "example": "application/json"
          }
        ]
      },
      "requestBody": {
        "required": true,
        "contentType": "application/json",
        "schema": {
          "type": "object"
        },
        "example": {}
      },
      "responses": {
        "200": {
          "description": "Success",
          "contentType": "application/json",
          "schema": {
            "type": "object"
          },
          "example": {
            "message": "Success"
          }
        },
        "400": {
          "description": "Bad Request - Invalid parameters or missing required fields",
          "contentType": "application/json",
          "schema": {
            "type": "object",
            "properties": {
              "error": {
                "type": "string"
              },
              "message": {
                "type": "string"
              },
              "details": {
                "type": "object"
              }
            }
          },
          "example": {
            "error": "Validation failed",
            "message": "Field 'datePreset' is required for stats endpoints",
            "details": {
              "field": "datePreset",
              "code": "required"
            }
          }
        },
        "401": {
          "description": "Unauthorized - Invalid or missing API key",
          "contentType": "application/json",
          "example": {
            "error": "Unauthorized",
            "message": "Invalid API key or missing Authorization header"
          }
        },
        "403": {
          "description": "Forbidden - Insufficient permissions",
          "contentType": "application/json",
          "example": {
            "error": "Access denied",
            "message": "Insufficient permissions to access this resource"
          }
        },
        "404": {
          "description": "Not Found - Resource does not exist",
          "contentType": "application/json",
          "example": {
            "error": "Not found",
            "message": "Campaign with ID 999 not found"
          }
        },
        "429": {
          "description": "Too Many Requests - Rate limit exceeded",
          "contentType": "application/json",
          "example": {
            "error": "Rate limit exceeded",
            "message": "Too many requests. Please wait before making another request.",
            "retryAfter": 60
          }
        },
        "500": {
          "description": "Internal Server Error",
          "contentType": "application/json",
          "example": {
            "error": "Internal server error",
            "message": "An unexpected error occurred. Please try again later."
          }
        }
      },
      "examples": {
        "python": "import requests\nimport os\nfrom datetime import datetime\n\n# Configuration\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\ndef handle_response(response):\n    \"\"\"Handle API response with proper error handling\"\"\"\n    if response.status_code == 200:\n        return response.json()\n    elif response.status_code == 400:\n        print(f\"Bad Request: {response.json()}\")\n    elif response.status_code == 401:\n        print(\"Unauthorized: Check your API key\")\n    elif response.status_code == 403:\n        print(\"Forbidden: Insufficient permissions\")\n    elif response.status_code == 404:\n        print(\"Not Found: Resource doesn't exist\")\n    elif response.status_code == 429:\n        print(\"Rate Limited: Wait before retrying\")\n    else:\n        print(f\"Error {response.status_code}: {response.text}\")\n    return None\n\n# PUT /public/api/v1/campaign/offer/pause\ndef call_endpoint():\n    \"\"\"Call the PUT /public/api/v1/campaign/offer/pause endpoint\"\"\"\n    \n    \n    \n    response = requests.put(\n        f\"{BASE_URL}/public/api/v1/campaign/offer/pause\",\n        headers=headers\n        \n    )\n    \n    return handle_response(response)\n\n# Usage\nif __name__ == \"__main__\":\n    result = call_endpoint()\n    print(result)\n",
        "curl": "# PUT /public/api/v1/campaign/offer/pause\ncurl -X PUT \\\n  \"https://pierdun.com/public/api/v1/public/api/v1/campaign/offer/pause\" \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Accept: application/json\" \\\n  -H \"Content-Type: application/json\"",
        "javascript": "// PUT /public/api/v1/campaign/offer/pause\nconst BINOM_API_KEY = process.env.BINOM_PUBLIC;\nconst BASE_URL = 'https://pierdun.com/public/api/v1';\n\nasync function callBinomAPI() {\n    const config = {\n        method: 'PUT',\n        headers: {\n            'Authorization': `Bearer ${BINOM_API_KEY}`,\n            'Accept': 'application/json'\n        }\n    };\n    \n    try {\n        const response = await fetch(`${BASE_URL}/public/api/v1/campaign/offer/pause`, config);\n        \n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        \n        const data = await response.json();\n        console.log('Success:', data);\n        return data;\n    } catch (error) {\n        console.error('Error:', error);\n        throw error;\n    }\n}\n\n// Usage\ncallBinomAPI()\n    .then(data => console.log(data))\n    .catch(error => console.error('Failed:', error));"
      },
      "customMetrics": {
        "available": false,
        "note": "This endpoint does not return custom metrics"
      },
      "aiInstructions": {
        "priority": "MEDIUM",
        "complexity": "LOW",
        "keyPoints": [
          "This is a MEDIUM priority endpoint",
          "Category: campaign operations",
          "Custom metrics: Not available",
          "Always use Bearer token authentication",
          "Handle rate limiting with exponential backoff"
        ],
        "beforeUsing": [
          "Verify API key is set in environment variables",
          "Check if datePreset and timezone are required",
          "Validate all required parameters are provided",
          "Ensure proper error handling is implemented"
        ],
        "afterUsing": [
          "Validate response structure matches expected schema",
          "Check for custom metrics if endpoint supports them",
          "Log important metrics for monitoring",
          "Handle pagination if response is truncated"
        ],
        "commonMistakes": [
          "Forgetting datePreset parameter for stats endpoints",
          "Using wrong Bearer token format",
          "Not handling 429 rate limit responses",
          "Ignoring custom metrics in optimization decisions",
          "Not validating response data before processing"
        ],
        "optimization": [
          "Cache responses when appropriate",
          "Use batch operations when available",
          "Implement retry logic with exponential backoff",
          "Monitor API usage to avoid rate limits",
          "Use appropriate date ranges to minimize data transfer"
        ],
        "customMetricsGuidance": {
          "applicable": false,
          "note": "This endpoint does not return custom metrics"
        }
      },
      "errorHandling": {
        "retryStrategy": {
          "429": {
            "action": "Exponential backoff retry",
            "initialDelay": 1,
            "maxRetries": 5,
            "backoffMultiplier": 2
          },
          "500": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 5
          },
          "502": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 10
          }
        },
        "noRetryErrors": [
          400,
          401,
          403,
          404
        ],
        "commonIssues": [
          {
            "error": "400 - Missing datePreset",
            "solution": "Add datePreset and timezone parameters to GET requests",
            "prevention": "Always validate required parameters before sending request"
          },
          {
            "error": "401 - Invalid API key",
            "solution": "Check Bearer token format and API key validity",
            "prevention": "Validate API key format before making requests"
          },
          {
            "error": "403 - Access denied",
            "solution": "Verify user permissions for this resource",
            "prevention": "Check user role and permissions before accessing resources"
          },
          {
            "error": "429 - Rate limited",
            "solution": "Implement exponential backoff and reduce request frequency",
            "prevention": "Monitor request rate and implement proper throttling"
          }
        ],
        "debugging": [
          "Log full request and response for error analysis",
          "Check API key permissions and expiration",
          "Verify request format matches API documentation",
          "Test with minimal required parameters first"
        ]
      },
      "workflow": {
        "prerequisites": [
          "Valid authentication",
          "Proper permissions"
        ],
        "followUpActions": [
          "Process response data",
          "Handle any errors"
        ],
        "relatedEndpoints": [],
        "typicalWorkflow": [
          "Call PUT /public/api/v1/campaign/offer/pause endpoint",
          "Process response"
        ]
      },
      "testing": {
        "unitTests": [
          "Test with valid parameters",
          "Test with missing required parameters",
          "Test with invalid parameter values",
          "Test authentication failure scenarios"
        ],
        "integrationTests": [
          "Test full workflow with real data",
          "Test error handling and recovery",
          "Test rate limiting behavior",
          "Test response data validation"
        ],
        "testData": {
          "validParams": {},
          "invalidParams": []
        },
        "assertions": [
          "Response status code is 200 for valid requests",
          "Response contains expected data structure",
          "Custom metrics are present when applicable",
          "Error responses contain proper error messages"
        ]
      }
    },
    "PUT /public/api/v1/campaign/path/pause": {
      "metadata": {
        "method": "PUT",
        "path": "/public/api/v1/campaign/path/pause",
        "category": "campaign",
        "priority": 37,
        "importance": "MEDIUM",
        "hasCustomMetrics": false,
        "aiUsage": "Управление путями трафика"
      },
      "description": {
        "summary": "Пауза пути в кампании",
        "detailed": "Detailed description for PUT /public/api/v1/campaign/path/pause - Пауза пути в кампании",
        "businessContext": "Campaign management - core functionality for setting up, configuring, and managing traffic tracking campaigns",
        "whenToUse": [
          "Standard campaign operations"
        ]
      },
      "authentication": {
        "type": "Bearer Token",
        "header": "Authorization: Bearer {binomPublic}",
        "required": true,
        "note": "Use environment variable binomPublic"
      },
      "parameters": {
        "path": [],
        "query": [],
        "header": [
          {
            "name": "Authorization",
            "type": "string",
            "required": true,
            "description": "Bearer token authentication",
            "example": "Bearer your_api_key_here"
          },
          {
            "name": "Content-Type",
            "type": "string",
            "required": true,
            "description": "Content type for request body",
            "example": "application/json"
          }
        ]
      },
      "requestBody": {
        "required": true,
        "contentType": "application/json",
        "schema": {
          "type": "object"
        },
        "example": {}
      },
      "responses": {
        "200": {
          "description": "Success",
          "contentType": "application/json",
          "schema": {
            "type": "object"
          },
          "example": {
            "message": "Success"
          }
        },
        "400": {
          "description": "Bad Request - Invalid parameters or missing required fields",
          "contentType": "application/json",
          "schema": {
            "type": "object",
            "properties": {
              "error": {
                "type": "string"
              },
              "message": {
                "type": "string"
              },
              "details": {
                "type": "object"
              }
            }
          },
          "example": {
            "error": "Validation failed",
            "message": "Field 'datePreset' is required for stats endpoints",
            "details": {
              "field": "datePreset",
              "code": "required"
            }
          }
        },
        "401": {
          "description": "Unauthorized - Invalid or missing API key",
          "contentType": "application/json",
          "example": {
            "error": "Unauthorized",
            "message": "Invalid API key or missing Authorization header"
          }
        },
        "403": {
          "description": "Forbidden - Insufficient permissions",
          "contentType": "application/json",
          "example": {
            "error": "Access denied",
            "message": "Insufficient permissions to access this resource"
          }
        },
        "404": {
          "description": "Not Found - Resource does not exist",
          "contentType": "application/json",
          "example": {
            "error": "Not found",
            "message": "Campaign with ID 999 not found"
          }
        },
        "429": {
          "description": "Too Many Requests - Rate limit exceeded",
          "contentType": "application/json",
          "example": {
            "error": "Rate limit exceeded",
            "message": "Too many requests. Please wait before making another request.",
            "retryAfter": 60
          }
        },
        "500": {
          "description": "Internal Server Error",
          "contentType": "application/json",
          "example": {
            "error": "Internal server error",
            "message": "An unexpected error occurred. Please try again later."
          }
        }
      },
      "examples": {
        "python": "import requests\nimport os\nfrom datetime import datetime\n\n# Configuration\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\ndef handle_response(response):\n    \"\"\"Handle API response with proper error handling\"\"\"\n    if response.status_code == 200:\n        return response.json()\n    elif response.status_code == 400:\n        print(f\"Bad Request: {response.json()}\")\n    elif response.status_code == 401:\n        print(\"Unauthorized: Check your API key\")\n    elif response.status_code == 403:\n        print(\"Forbidden: Insufficient permissions\")\n    elif response.status_code == 404:\n        print(\"Not Found: Resource doesn't exist\")\n    elif response.status_code == 429:\n        print(\"Rate Limited: Wait before retrying\")\n    else:\n        print(f\"Error {response.status_code}: {response.text}\")\n    return None\n\n# PUT /public/api/v1/campaign/path/pause\ndef call_endpoint():\n    \"\"\"Call the PUT /public/api/v1/campaign/path/pause endpoint\"\"\"\n    \n    \n    \n    response = requests.put(\n        f\"{BASE_URL}/public/api/v1/campaign/path/pause\",\n        headers=headers\n        \n    )\n    \n    return handle_response(response)\n\n# Usage\nif __name__ == \"__main__\":\n    result = call_endpoint()\n    print(result)\n",
        "curl": "# PUT /public/api/v1/campaign/path/pause\ncurl -X PUT \\\n  \"https://pierdun.com/public/api/v1/public/api/v1/campaign/path/pause\" \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Accept: application/json\" \\\n  -H \"Content-Type: application/json\"",
        "javascript": "// PUT /public/api/v1/campaign/path/pause\nconst BINOM_API_KEY = process.env.BINOM_PUBLIC;\nconst BASE_URL = 'https://pierdun.com/public/api/v1';\n\nasync function callBinomAPI() {\n    const config = {\n        method: 'PUT',\n        headers: {\n            'Authorization': `Bearer ${BINOM_API_KEY}`,\n            'Accept': 'application/json'\n        }\n    };\n    \n    try {\n        const response = await fetch(`${BASE_URL}/public/api/v1/campaign/path/pause`, config);\n        \n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        \n        const data = await response.json();\n        console.log('Success:', data);\n        return data;\n    } catch (error) {\n        console.error('Error:', error);\n        throw error;\n    }\n}\n\n// Usage\ncallBinomAPI()\n    .then(data => console.log(data))\n    .catch(error => console.error('Failed:', error));"
      },
      "customMetrics": {
        "available": false,
        "note": "This endpoint does not return custom metrics"
      },
      "aiInstructions": {
        "priority": "MEDIUM",
        "complexity": "LOW",
        "keyPoints": [
          "This is a MEDIUM priority endpoint",
          "Category: campaign operations",
          "Custom metrics: Not available",
          "Always use Bearer token authentication",
          "Handle rate limiting with exponential backoff"
        ],
        "beforeUsing": [
          "Verify API key is set in environment variables",
          "Check if datePreset and timezone are required",
          "Validate all required parameters are provided",
          "Ensure proper error handling is implemented"
        ],
        "afterUsing": [
          "Validate response structure matches expected schema",
          "Check for custom metrics if endpoint supports them",
          "Log important metrics for monitoring",
          "Handle pagination if response is truncated"
        ],
        "commonMistakes": [
          "Forgetting datePreset parameter for stats endpoints",
          "Using wrong Bearer token format",
          "Not handling 429 rate limit responses",
          "Ignoring custom metrics in optimization decisions",
          "Not validating response data before processing"
        ],
        "optimization": [
          "Cache responses when appropriate",
          "Use batch operations when available",
          "Implement retry logic with exponential backoff",
          "Monitor API usage to avoid rate limits",
          "Use appropriate date ranges to minimize data transfer"
        ],
        "customMetricsGuidance": {
          "applicable": false,
          "note": "This endpoint does not return custom metrics"
        }
      },
      "errorHandling": {
        "retryStrategy": {
          "429": {
            "action": "Exponential backoff retry",
            "initialDelay": 1,
            "maxRetries": 5,
            "backoffMultiplier": 2
          },
          "500": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 5
          },
          "502": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 10
          }
        },
        "noRetryErrors": [
          400,
          401,
          403,
          404
        ],
        "commonIssues": [
          {
            "error": "400 - Missing datePreset",
            "solution": "Add datePreset and timezone parameters to GET requests",
            "prevention": "Always validate required parameters before sending request"
          },
          {
            "error": "401 - Invalid API key",
            "solution": "Check Bearer token format and API key validity",
            "prevention": "Validate API key format before making requests"
          },
          {
            "error": "403 - Access denied",
            "solution": "Verify user permissions for this resource",
            "prevention": "Check user role and permissions before accessing resources"
          },
          {
            "error": "429 - Rate limited",
            "solution": "Implement exponential backoff and reduce request frequency",
            "prevention": "Monitor request rate and implement proper throttling"
          }
        ],
        "debugging": [
          "Log full request and response for error analysis",
          "Check API key permissions and expiration",
          "Verify request format matches API documentation",
          "Test with minimal required parameters first"
        ]
      },
      "workflow": {
        "prerequisites": [
          "Valid authentication",
          "Proper permissions"
        ],
        "followUpActions": [
          "Process response data",
          "Handle any errors"
        ],
        "relatedEndpoints": [],
        "typicalWorkflow": [
          "Call PUT /public/api/v1/campaign/path/pause endpoint",
          "Process response"
        ]
      },
      "testing": {
        "unitTests": [
          "Test with valid parameters",
          "Test with missing required parameters",
          "Test with invalid parameter values",
          "Test authentication failure scenarios"
        ],
        "integrationTests": [
          "Test full workflow with real data",
          "Test error handling and recovery",
          "Test rate limiting behavior",
          "Test response data validation"
        ],
        "testData": {
          "validParams": {},
          "invalidParams": []
        },
        "assertions": [
          "Response status code is 200 for valid requests",
          "Response contains expected data structure",
          "Custom metrics are present when applicable",
          "Error responses contain proper error messages"
        ]
      }
    },
    "DELETE /public/api/v1/affiliate_network/{id}": {
      "metadata": {
        "method": "DELETE",
        "path": "/public/api/v1/affiliate_network/{id}",
        "category": "affiliate_network",
        "priority": 38,
        "importance": "MEDIUM",
        "hasCustomMetrics": false,
        "aiUsage": "Управление жизненным циклом сетей"
      },
      "description": {
        "summary": "Удаление партнерской сети",
        "detailed": "Detailed description for DELETE /public/api/v1/affiliate_network/{id} - Удаление партнерской сети",
        "businessContext": "Partner network management - handles postback URLs, payout configurations, and network integrations",
        "whenToUse": [
          "Standard affiliate_network operations"
        ]
      },
      "authentication": {
        "type": "Bearer Token",
        "header": "Authorization: Bearer {binomPublic}",
        "required": true,
        "note": "Use environment variable binomPublic"
      },
      "parameters": {
        "path": [
          {
            "name": "id",
            "type": "integer",
            "required": true,
            "description": "Unique identifier of the affiliate_network",
            "example": 123
          }
        ],
        "query": [],
        "header": [
          {
            "name": "Authorization",
            "type": "string",
            "required": true,
            "description": "Bearer token authentication",
            "example": "Bearer your_api_key_here"
          },
          {
            "name": "Content-Type",
            "type": "string",
            "required": false,
            "description": "Content type for request body",
            "example": "application/json"
          }
        ]
      },
      "requestBody": null,
      "responses": {
        "200": {
          "description": "Success",
          "contentType": "application/json",
          "schema": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "example": {
            "message": "Success"
          }
        },
        "400": {
          "description": "Bad Request - Invalid parameters or missing required fields",
          "contentType": "application/json",
          "schema": {
            "type": "object",
            "properties": {
              "error": {
                "type": "string"
              },
              "message": {
                "type": "string"
              },
              "details": {
                "type": "object"
              }
            }
          },
          "example": {
            "error": "Validation failed",
            "message": "Field 'datePreset' is required for stats endpoints",
            "details": {
              "field": "datePreset",
              "code": "required"
            }
          }
        },
        "401": {
          "description": "Unauthorized - Invalid or missing API key",
          "contentType": "application/json",
          "example": {
            "error": "Unauthorized",
            "message": "Invalid API key or missing Authorization header"
          }
        },
        "403": {
          "description": "Forbidden - Insufficient permissions",
          "contentType": "application/json",
          "example": {
            "error": "Access denied",
            "message": "Insufficient permissions to access this resource"
          }
        },
        "404": {
          "description": "Not Found - Resource does not exist",
          "contentType": "application/json",
          "example": {
            "error": "Not found",
            "message": "Campaign with ID 999 not found"
          }
        },
        "429": {
          "description": "Too Many Requests - Rate limit exceeded",
          "contentType": "application/json",
          "example": {
            "error": "Rate limit exceeded",
            "message": "Too many requests. Please wait before making another request.",
            "retryAfter": 60
          }
        },
        "500": {
          "description": "Internal Server Error",
          "contentType": "application/json",
          "example": {
            "error": "Internal server error",
            "message": "An unexpected error occurred. Please try again later."
          }
        }
      },
      "examples": {
        "python": "import requests\nimport os\nfrom datetime import datetime\n\n# Configuration\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\ndef handle_response(response):\n    \"\"\"Handle API response with proper error handling\"\"\"\n    if response.status_code == 200:\n        return response.json()\n    elif response.status_code == 400:\n        print(f\"Bad Request: {response.json()}\")\n    elif response.status_code == 401:\n        print(\"Unauthorized: Check your API key\")\n    elif response.status_code == 403:\n        print(\"Forbidden: Insufficient permissions\")\n    elif response.status_code == 404:\n        print(\"Not Found: Resource doesn't exist\")\n    elif response.status_code == 429:\n        print(\"Rate Limited: Wait before retrying\")\n    else:\n        print(f\"Error {response.status_code}: {response.text}\")\n    return None\n\n# DELETE /public/api/v1/affiliate_network/{id}\ndef call_endpoint():\n    \"\"\"Call the DELETE /public/api/v1/affiliate_network/{id} endpoint\"\"\"\n    \n    \n    \n    response = requests.delete(\n        f\"{BASE_URL}/public/api/v1/affiliate_network/123\",\n        headers=headers\n        \n    )\n    \n    return handle_response(response)\n\n# Usage\nif __name__ == \"__main__\":\n    result = call_endpoint()\n    print(result)\n",
        "curl": "# DELETE /public/api/v1/affiliate_network/{id}\ncurl -X DELETE \\\n  \"https://pierdun.com/public/api/v1/public/api/v1/affiliate_network/123\" \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Accept: application/json\"",
        "javascript": "// DELETE /public/api/v1/affiliate_network/{id}\nconst BINOM_API_KEY = process.env.BINOM_PUBLIC;\nconst BASE_URL = 'https://pierdun.com/public/api/v1';\n\nasync function callBinomAPI() {\n    const config = {\n        method: 'DELETE',\n        headers: {\n            'Authorization': `Bearer ${BINOM_API_KEY}`,\n            'Accept': 'application/json'\n        }\n    };\n    \n    try {\n        const response = await fetch(`${BASE_URL}/public/api/v1/affiliate_network/123`, config);\n        \n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        \n        const data = await response.json();\n        console.log('Success:', data);\n        return data;\n    } catch (error) {\n        console.error('Error:', error);\n        throw error;\n    }\n}\n\n// Usage\ncallBinomAPI()\n    .then(data => console.log(data))\n    .catch(error => console.error('Failed:', error));"
      },
      "customMetrics": {
        "available": false,
        "note": "This endpoint does not return custom metrics"
      },
      "aiInstructions": {
        "priority": "MEDIUM",
        "complexity": "LOW",
        "keyPoints": [
          "This is a MEDIUM priority endpoint",
          "Category: affiliate_network operations",
          "Custom metrics: Not available",
          "Always use Bearer token authentication",
          "Handle rate limiting with exponential backoff"
        ],
        "beforeUsing": [
          "Verify API key is set in environment variables",
          "Check if datePreset and timezone are required",
          "Validate all required parameters are provided",
          "Ensure proper error handling is implemented"
        ],
        "afterUsing": [
          "Validate response structure matches expected schema",
          "Check for custom metrics if endpoint supports them",
          "Log important metrics for monitoring",
          "Handle pagination if response is truncated"
        ],
        "commonMistakes": [
          "Forgetting datePreset parameter for stats endpoints",
          "Using wrong Bearer token format",
          "Not handling 429 rate limit responses",
          "Ignoring custom metrics in optimization decisions",
          "Not validating response data before processing"
        ],
        "optimization": [
          "Cache responses when appropriate",
          "Use batch operations when available",
          "Implement retry logic with exponential backoff",
          "Monitor API usage to avoid rate limits",
          "Use appropriate date ranges to minimize data transfer"
        ],
        "customMetricsGuidance": {
          "applicable": false,
          "note": "This endpoint does not return custom metrics"
        }
      },
      "errorHandling": {
        "retryStrategy": {
          "429": {
            "action": "Exponential backoff retry",
            "initialDelay": 1,
            "maxRetries": 5,
            "backoffMultiplier": 2
          },
          "500": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 5
          },
          "502": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 10
          }
        },
        "noRetryErrors": [
          400,
          401,
          403,
          404
        ],
        "commonIssues": [
          {
            "error": "400 - Missing datePreset",
            "solution": "Add datePreset and timezone parameters to GET requests",
            "prevention": "Always validate required parameters before sending request"
          },
          {
            "error": "401 - Invalid API key",
            "solution": "Check Bearer token format and API key validity",
            "prevention": "Validate API key format before making requests"
          },
          {
            "error": "403 - Access denied",
            "solution": "Verify user permissions for this resource",
            "prevention": "Check user role and permissions before accessing resources"
          },
          {
            "error": "429 - Rate limited",
            "solution": "Implement exponential backoff and reduce request frequency",
            "prevention": "Monitor request rate and implement proper throttling"
          }
        ],
        "debugging": [
          "Log full request and response for error analysis",
          "Check API key permissions and expiration",
          "Verify request format matches API documentation",
          "Test with minimal required parameters first"
        ]
      },
      "workflow": {
        "prerequisites": [
          "Valid authentication",
          "Proper permissions"
        ],
        "followUpActions": [
          "Process response data",
          "Handle any errors"
        ],
        "relatedEndpoints": [],
        "typicalWorkflow": [
          "Call DELETE /public/api/v1/affiliate_network/{id} endpoint",
          "Process response"
        ]
      },
      "testing": {
        "unitTests": [
          "Test with valid parameters",
          "Test with missing required parameters",
          "Test with invalid parameter values",
          "Test authentication failure scenarios"
        ],
        "integrationTests": [
          "Test full workflow with real data",
          "Test error handling and recovery",
          "Test rate limiting behavior",
          "Test response data validation"
        ],
        "testData": {
          "validParams": {},
          "invalidParams": []
        },
        "assertions": [
          "Response status code is 200 for valid requests",
          "Response contains expected data structure",
          "Custom metrics are present when applicable",
          "Error responses contain proper error messages"
        ]
      }
    },
    "PATCH /public/api/v1/affiliate_network/{id}": {
      "metadata": {
        "method": "PATCH",
        "path": "/public/api/v1/affiliate_network/{id}",
        "category": "affiliate_network",
        "priority": 39,
        "importance": "MEDIUM",
        "hasCustomMetrics": false,
        "aiUsage": "Восстановление удаленных сетей"
      },
      "description": {
        "summary": "Восстановление партнерской сети",
        "detailed": "Detailed description for PATCH /public/api/v1/affiliate_network/{id} - Восстановление партнерской сети",
        "businessContext": "Partner network management - handles postback URLs, payout configurations, and network integrations",
        "whenToUse": [
          "Standard affiliate_network operations"
        ]
      },
      "authentication": {
        "type": "Bearer Token",
        "header": "Authorization: Bearer {binomPublic}",
        "required": true,
        "note": "Use environment variable binomPublic"
      },
      "parameters": {
        "path": [
          {
            "name": "id",
            "type": "integer",
            "required": true,
            "description": "Unique identifier of the affiliate_network",
            "example": 123
          }
        ],
        "query": [],
        "header": [
          {
            "name": "Authorization",
            "type": "string",
            "required": true,
            "description": "Bearer token authentication",
            "example": "Bearer your_api_key_here"
          },
          {
            "name": "Content-Type",
            "type": "string",
            "required": true,
            "description": "Content type for request body",
            "example": "application/json"
          }
        ]
      },
      "requestBody": {
        "required": true,
        "contentType": "application/json",
        "schema": {
          "type": "object"
        },
        "example": {}
      },
      "responses": {
        "200": {
          "description": "Success",
          "contentType": "application/json",
          "schema": {
            "type": "object"
          },
          "example": {
            "message": "Success"
          }
        },
        "400": {
          "description": "Bad Request - Invalid parameters or missing required fields",
          "contentType": "application/json",
          "schema": {
            "type": "object",
            "properties": {
              "error": {
                "type": "string"
              },
              "message": {
                "type": "string"
              },
              "details": {
                "type": "object"
              }
            }
          },
          "example": {
            "error": "Validation failed",
            "message": "Field 'datePreset' is required for stats endpoints",
            "details": {
              "field": "datePreset",
              "code": "required"
            }
          }
        },
        "401": {
          "description": "Unauthorized - Invalid or missing API key",
          "contentType": "application/json",
          "example": {
            "error": "Unauthorized",
            "message": "Invalid API key or missing Authorization header"
          }
        },
        "403": {
          "description": "Forbidden - Insufficient permissions",
          "contentType": "application/json",
          "example": {
            "error": "Access denied",
            "message": "Insufficient permissions to access this resource"
          }
        },
        "404": {
          "description": "Not Found - Resource does not exist",
          "contentType": "application/json",
          "example": {
            "error": "Not found",
            "message": "Campaign with ID 999 not found"
          }
        },
        "429": {
          "description": "Too Many Requests - Rate limit exceeded",
          "contentType": "application/json",
          "example": {
            "error": "Rate limit exceeded",
            "message": "Too many requests. Please wait before making another request.",
            "retryAfter": 60
          }
        },
        "500": {
          "description": "Internal Server Error",
          "contentType": "application/json",
          "example": {
            "error": "Internal server error",
            "message": "An unexpected error occurred. Please try again later."
          }
        }
      },
      "examples": {
        "python": "import requests\nimport os\nfrom datetime import datetime\n\n# Configuration\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\ndef handle_response(response):\n    \"\"\"Handle API response with proper error handling\"\"\"\n    if response.status_code == 200:\n        return response.json()\n    elif response.status_code == 400:\n        print(f\"Bad Request: {response.json()}\")\n    elif response.status_code == 401:\n        print(\"Unauthorized: Check your API key\")\n    elif response.status_code == 403:\n        print(\"Forbidden: Insufficient permissions\")\n    elif response.status_code == 404:\n        print(\"Not Found: Resource doesn't exist\")\n    elif response.status_code == 429:\n        print(\"Rate Limited: Wait before retrying\")\n    else:\n        print(f\"Error {response.status_code}: {response.text}\")\n    return None\n\n# PATCH /public/api/v1/affiliate_network/{id}\ndef call_endpoint():\n    \"\"\"Call the PATCH /public/api/v1/affiliate_network/{id} endpoint\"\"\"\n    \n    \n    \n    response = requests.patch(\n        f\"{BASE_URL}/public/api/v1/affiliate_network/123\",\n        headers=headers\n        \n    )\n    \n    return handle_response(response)\n\n# Usage\nif __name__ == \"__main__\":\n    result = call_endpoint()\n    print(result)\n",
        "curl": "# PATCH /public/api/v1/affiliate_network/{id}\ncurl -X PATCH \\\n  \"https://pierdun.com/public/api/v1/public/api/v1/affiliate_network/123\" \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Accept: application/json\" \\\n  -H \"Content-Type: application/json\"",
        "javascript": "// PATCH /public/api/v1/affiliate_network/{id}\nconst BINOM_API_KEY = process.env.BINOM_PUBLIC;\nconst BASE_URL = 'https://pierdun.com/public/api/v1';\n\nasync function callBinomAPI() {\n    const config = {\n        method: 'PATCH',\n        headers: {\n            'Authorization': `Bearer ${BINOM_API_KEY}`,\n            'Accept': 'application/json'\n        }\n    };\n    \n    try {\n        const response = await fetch(`${BASE_URL}/public/api/v1/affiliate_network/123`, config);\n        \n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        \n        const data = await response.json();\n        console.log('Success:', data);\n        return data;\n    } catch (error) {\n        console.error('Error:', error);\n        throw error;\n    }\n}\n\n// Usage\ncallBinomAPI()\n    .then(data => console.log(data))\n    .catch(error => console.error('Failed:', error));"
      },
      "customMetrics": {
        "available": false,
        "note": "This endpoint does not return custom metrics"
      },
      "aiInstructions": {
        "priority": "MEDIUM",
        "complexity": "LOW",
        "keyPoints": [
          "This is a MEDIUM priority endpoint",
          "Category: affiliate_network operations",
          "Custom metrics: Not available",
          "Always use Bearer token authentication",
          "Handle rate limiting with exponential backoff"
        ],
        "beforeUsing": [
          "Verify API key is set in environment variables",
          "Check if datePreset and timezone are required",
          "Validate all required parameters are provided",
          "Ensure proper error handling is implemented"
        ],
        "afterUsing": [
          "Validate response structure matches expected schema",
          "Check for custom metrics if endpoint supports them",
          "Log important metrics for monitoring",
          "Handle pagination if response is truncated"
        ],
        "commonMistakes": [
          "Forgetting datePreset parameter for stats endpoints",
          "Using wrong Bearer token format",
          "Not handling 429 rate limit responses",
          "Ignoring custom metrics in optimization decisions",
          "Not validating response data before processing"
        ],
        "optimization": [
          "Cache responses when appropriate",
          "Use batch operations when available",
          "Implement retry logic with exponential backoff",
          "Monitor API usage to avoid rate limits",
          "Use appropriate date ranges to minimize data transfer"
        ],
        "customMetricsGuidance": {
          "applicable": false,
          "note": "This endpoint does not return custom metrics"
        }
      },
      "errorHandling": {
        "retryStrategy": {
          "429": {
            "action": "Exponential backoff retry",
            "initialDelay": 1,
            "maxRetries": 5,
            "backoffMultiplier": 2
          },
          "500": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 5
          },
          "502": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 10
          }
        },
        "noRetryErrors": [
          400,
          401,
          403,
          404
        ],
        "commonIssues": [
          {
            "error": "400 - Missing datePreset",
            "solution": "Add datePreset and timezone parameters to GET requests",
            "prevention": "Always validate required parameters before sending request"
          },
          {
            "error": "401 - Invalid API key",
            "solution": "Check Bearer token format and API key validity",
            "prevention": "Validate API key format before making requests"
          },
          {
            "error": "403 - Access denied",
            "solution": "Verify user permissions for this resource",
            "prevention": "Check user role and permissions before accessing resources"
          },
          {
            "error": "429 - Rate limited",
            "solution": "Implement exponential backoff and reduce request frequency",
            "prevention": "Monitor request rate and implement proper throttling"
          }
        ],
        "debugging": [
          "Log full request and response for error analysis",
          "Check API key permissions and expiration",
          "Verify request format matches API documentation",
          "Test with minimal required parameters first"
        ]
      },
      "workflow": {
        "prerequisites": [
          "Valid authentication",
          "Proper permissions"
        ],
        "followUpActions": [
          "Process response data",
          "Handle any errors"
        ],
        "relatedEndpoints": [],
        "typicalWorkflow": [
          "Call PATCH /public/api/v1/affiliate_network/{id} endpoint",
          "Process response"
        ]
      },
      "testing": {
        "unitTests": [
          "Test with valid parameters",
          "Test with missing required parameters",
          "Test with invalid parameter values",
          "Test authentication failure scenarios"
        ],
        "integrationTests": [
          "Test full workflow with real data",
          "Test error handling and recovery",
          "Test rate limiting behavior",
          "Test response data validation"
        ],
        "testData": {
          "validParams": {},
          "invalidParams": []
        },
        "assertions": [
          "Response status code is 200 for valid requests",
          "Response contains expected data structure",
          "Custom metrics are present when applicable",
          "Error responses contain proper error messages"
        ]
      }
    },
    "GET /public/api/v1/affiliate_network/list/filtered": {
      "metadata": {
        "method": "GET",
        "path": "/public/api/v1/affiliate_network/list/filtered",
        "category": "affiliate_network",
        "priority": 40,
        "importance": "MEDIUM",
        "hasCustomMetrics": false,
        "aiUsage": "Поиск и фильтрация сетей"
      },
      "description": {
        "summary": "Фильтрованный список партнерских сетей",
        "detailed": "Detailed description for GET /public/api/v1/affiliate_network/list/filtered - Фильтрованный список партнерских сетей",
        "businessContext": "Partner network management - handles postback URLs, payout configurations, and network integrations",
        "whenToUse": [
          "Standard affiliate_network operations"
        ]
      },
      "authentication": {
        "type": "Bearer Token",
        "header": "Authorization: Bearer {binomPublic}",
        "required": true,
        "note": "Use environment variable binomPublic"
      },
      "parameters": {
        "path": [],
        "query": [],
        "header": [
          {
            "name": "Authorization",
            "type": "string",
            "required": true,
            "description": "Bearer token authentication",
            "example": "Bearer your_api_key_here"
          },
          {
            "name": "Content-Type",
            "type": "string",
            "required": false,
            "description": "Content type for request body",
            "example": "application/json"
          }
        ]
      },
      "requestBody": null,
      "responses": {
        "200": {
          "description": "Success",
          "contentType": "application/json",
          "schema": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "example": {
            "message": "Success"
          }
        },
        "400": {
          "description": "Bad Request - Invalid parameters or missing required fields",
          "contentType": "application/json",
          "schema": {
            "type": "object",
            "properties": {
              "error": {
                "type": "string"
              },
              "message": {
                "type": "string"
              },
              "details": {
                "type": "object"
              }
            }
          },
          "example": {
            "error": "Validation failed",
            "message": "Field 'datePreset' is required for stats endpoints",
            "details": {
              "field": "datePreset",
              "code": "required"
            }
          }
        },
        "401": {
          "description": "Unauthorized - Invalid or missing API key",
          "contentType": "application/json",
          "example": {
            "error": "Unauthorized",
            "message": "Invalid API key or missing Authorization header"
          }
        },
        "403": {
          "description": "Forbidden - Insufficient permissions",
          "contentType": "application/json",
          "example": {
            "error": "Access denied",
            "message": "Insufficient permissions to access this resource"
          }
        },
        "404": {
          "description": "Not Found - Resource does not exist",
          "contentType": "application/json",
          "example": {
            "error": "Not found",
            "message": "Campaign with ID 999 not found"
          }
        },
        "429": {
          "description": "Too Many Requests - Rate limit exceeded",
          "contentType": "application/json",
          "example": {
            "error": "Rate limit exceeded",
            "message": "Too many requests. Please wait before making another request.",
            "retryAfter": 60
          }
        },
        "500": {
          "description": "Internal Server Error",
          "contentType": "application/json",
          "example": {
            "error": "Internal server error",
            "message": "An unexpected error occurred. Please try again later."
          }
        }
      },
      "examples": {
        "python": "import requests\nimport os\nfrom datetime import datetime\n\n# Configuration\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\ndef handle_response(response):\n    \"\"\"Handle API response with proper error handling\"\"\"\n    if response.status_code == 200:\n        return response.json()\n    elif response.status_code == 400:\n        print(f\"Bad Request: {response.json()}\")\n    elif response.status_code == 401:\n        print(\"Unauthorized: Check your API key\")\n    elif response.status_code == 403:\n        print(\"Forbidden: Insufficient permissions\")\n    elif response.status_code == 404:\n        print(\"Not Found: Resource doesn't exist\")\n    elif response.status_code == 429:\n        print(\"Rate Limited: Wait before retrying\")\n    else:\n        print(f\"Error {response.status_code}: {response.text}\")\n    return None\n\n# GET /public/api/v1/affiliate_network/list/filtered\ndef call_endpoint():\n    \"\"\"Call the GET /public/api/v1/affiliate_network/list/filtered endpoint\"\"\"\n    \n    params = {'datePreset': 'last_7_days', 'timezone': 'UTC'}\n    \n    response = requests.get(\n        f\"{BASE_URL}/public/api/v1/affiliate_network/list/filtered\",\n        headers=headers,\n        params=params\n    )\n    \n    return handle_response(response)\n\n# Usage\nif __name__ == \"__main__\":\n    result = call_endpoint()\n    print(result)\n",
        "curl": "# GET /public/api/v1/affiliate_network/list/filtered\ncurl -X GET \\\n  \"https://pierdun.com/public/api/v1/public/api/v1/affiliate_network/list/filtered\" \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Accept: application/json\"",
        "javascript": "// GET /public/api/v1/affiliate_network/list/filtered\nconst BINOM_API_KEY = process.env.BINOM_PUBLIC;\nconst BASE_URL = 'https://pierdun.com/public/api/v1';\n\nasync function callBinomAPI() {\n    const config = {\n        method: 'GET',\n        headers: {\n            'Authorization': `Bearer ${BINOM_API_KEY}`,\n            'Accept': 'application/json'\n        }\n    };\n    \n    try {\n        const response = await fetch(`${BASE_URL}/public/api/v1/affiliate_network/list/filtered`, config);\n        \n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        \n        const data = await response.json();\n        console.log('Success:', data);\n        return data;\n    } catch (error) {\n        console.error('Error:', error);\n        throw error;\n    }\n}\n\n// Usage\ncallBinomAPI()\n    .then(data => console.log(data))\n    .catch(error => console.error('Failed:', error));"
      },
      "customMetrics": {
        "available": false,
        "note": "This endpoint does not return custom metrics"
      },
      "aiInstructions": {
        "priority": "MEDIUM",
        "complexity": "LOW",
        "keyPoints": [
          "This is a MEDIUM priority endpoint",
          "Category: affiliate_network operations",
          "Custom metrics: Not available",
          "Always use Bearer token authentication",
          "Handle rate limiting with exponential backoff"
        ],
        "beforeUsing": [
          "Verify API key is set in environment variables",
          "Check if datePreset and timezone are required",
          "Validate all required parameters are provided",
          "Ensure proper error handling is implemented"
        ],
        "afterUsing": [
          "Validate response structure matches expected schema",
          "Check for custom metrics if endpoint supports them",
          "Log important metrics for monitoring",
          "Handle pagination if response is truncated"
        ],
        "commonMistakes": [
          "Forgetting datePreset parameter for stats endpoints",
          "Using wrong Bearer token format",
          "Not handling 429 rate limit responses",
          "Ignoring custom metrics in optimization decisions",
          "Not validating response data before processing"
        ],
        "optimization": [
          "Cache responses when appropriate",
          "Use batch operations when available",
          "Implement retry logic with exponential backoff",
          "Monitor API usage to avoid rate limits",
          "Use appropriate date ranges to minimize data transfer"
        ],
        "customMetricsGuidance": {
          "applicable": false,
          "note": "This endpoint does not return custom metrics"
        }
      },
      "errorHandling": {
        "retryStrategy": {
          "429": {
            "action": "Exponential backoff retry",
            "initialDelay": 1,
            "maxRetries": 5,
            "backoffMultiplier": 2
          },
          "500": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 5
          },
          "502": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 10
          }
        },
        "noRetryErrors": [
          400,
          401,
          403,
          404
        ],
        "commonIssues": [
          {
            "error": "400 - Missing datePreset",
            "solution": "Add datePreset and timezone parameters to GET requests",
            "prevention": "Always validate required parameters before sending request"
          },
          {
            "error": "401 - Invalid API key",
            "solution": "Check Bearer token format and API key validity",
            "prevention": "Validate API key format before making requests"
          },
          {
            "error": "403 - Access denied",
            "solution": "Verify user permissions for this resource",
            "prevention": "Check user role and permissions before accessing resources"
          },
          {
            "error": "429 - Rate limited",
            "solution": "Implement exponential backoff and reduce request frequency",
            "prevention": "Monitor request rate and implement proper throttling"
          }
        ],
        "debugging": [
          "Log full request and response for error analysis",
          "Check API key permissions and expiration",
          "Verify request format matches API documentation",
          "Test with minimal required parameters first"
        ]
      },
      "workflow": {
        "prerequisites": [
          "Valid authentication",
          "Proper permissions"
        ],
        "followUpActions": [
          "Process response data",
          "Handle any errors"
        ],
        "relatedEndpoints": [],
        "typicalWorkflow": [
          "Call GET /public/api/v1/affiliate_network/list/filtered endpoint",
          "Process response"
        ]
      },
      "testing": {
        "unitTests": [
          "Test with valid parameters",
          "Test with missing required parameters",
          "Test with invalid parameter values",
          "Test authentication failure scenarios"
        ],
        "integrationTests": [
          "Test full workflow with real data",
          "Test error handling and recovery",
          "Test rate limiting behavior",
          "Test response data validation"
        ],
        "testData": {
          "validParams": {},
          "invalidParams": []
        },
        "assertions": [
          "Response status code is 200 for valid requests",
          "Response contains expected data structure",
          "Custom metrics are present when applicable",
          "Error responses contain proper error messages"
        ]
      }
    },
    "GET /public/api/v1/affiliate_network/list/all": {
      "metadata": {
        "method": "GET",
        "path": "/public/api/v1/affiliate_network/list/all",
        "category": "affiliate_network",
        "priority": 41,
        "importance": "MEDIUM",
        "hasCustomMetrics": false,
        "aiUsage": "Получение всех доступных сетей"
      },
      "description": {
        "summary": "Полный список партнерских сетей",
        "detailed": "Detailed description for GET /public/api/v1/affiliate_network/list/all - Полный список партнерских сетей",
        "businessContext": "Partner network management - handles postback URLs, payout configurations, and network integrations",
        "whenToUse": [
          "Standard affiliate_network operations"
        ]
      },
      "authentication": {
        "type": "Bearer Token",
        "header": "Authorization: Bearer {binomPublic}",
        "required": true,
        "note": "Use environment variable binomPublic"
      },
      "parameters": {
        "path": [],
        "query": [],
        "header": [
          {
            "name": "Authorization",
            "type": "string",
            "required": true,
            "description": "Bearer token authentication",
            "example": "Bearer your_api_key_here"
          },
          {
            "name": "Content-Type",
            "type": "string",
            "required": false,
            "description": "Content type for request body",
            "example": "application/json"
          }
        ]
      },
      "requestBody": null,
      "responses": {
        "200": {
          "description": "Success",
          "contentType": "application/json",
          "schema": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "example": {
            "message": "Success"
          }
        },
        "400": {
          "description": "Bad Request - Invalid parameters or missing required fields",
          "contentType": "application/json",
          "schema": {
            "type": "object",
            "properties": {
              "error": {
                "type": "string"
              },
              "message": {
                "type": "string"
              },
              "details": {
                "type": "object"
              }
            }
          },
          "example": {
            "error": "Validation failed",
            "message": "Field 'datePreset' is required for stats endpoints",
            "details": {
              "field": "datePreset",
              "code": "required"
            }
          }
        },
        "401": {
          "description": "Unauthorized - Invalid or missing API key",
          "contentType": "application/json",
          "example": {
            "error": "Unauthorized",
            "message": "Invalid API key or missing Authorization header"
          }
        },
        "403": {
          "description": "Forbidden - Insufficient permissions",
          "contentType": "application/json",
          "example": {
            "error": "Access denied",
            "message": "Insufficient permissions to access this resource"
          }
        },
        "404": {
          "description": "Not Found - Resource does not exist",
          "contentType": "application/json",
          "example": {
            "error": "Not found",
            "message": "Campaign with ID 999 not found"
          }
        },
        "429": {
          "description": "Too Many Requests - Rate limit exceeded",
          "contentType": "application/json",
          "example": {
            "error": "Rate limit exceeded",
            "message": "Too many requests. Please wait before making another request.",
            "retryAfter": 60
          }
        },
        "500": {
          "description": "Internal Server Error",
          "contentType": "application/json",
          "example": {
            "error": "Internal server error",
            "message": "An unexpected error occurred. Please try again later."
          }
        }
      },
      "examples": {
        "python": "import requests\nimport os\nfrom datetime import datetime\n\n# Configuration\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\ndef handle_response(response):\n    \"\"\"Handle API response with proper error handling\"\"\"\n    if response.status_code == 200:\n        return response.json()\n    elif response.status_code == 400:\n        print(f\"Bad Request: {response.json()}\")\n    elif response.status_code == 401:\n        print(\"Unauthorized: Check your API key\")\n    elif response.status_code == 403:\n        print(\"Forbidden: Insufficient permissions\")\n    elif response.status_code == 404:\n        print(\"Not Found: Resource doesn't exist\")\n    elif response.status_code == 429:\n        print(\"Rate Limited: Wait before retrying\")\n    else:\n        print(f\"Error {response.status_code}: {response.text}\")\n    return None\n\n# GET /public/api/v1/affiliate_network/list/all\ndef call_endpoint():\n    \"\"\"Call the GET /public/api/v1/affiliate_network/list/all endpoint\"\"\"\n    \n    params = {'datePreset': 'last_7_days', 'timezone': 'UTC'}\n    \n    response = requests.get(\n        f\"{BASE_URL}/public/api/v1/affiliate_network/list/all\",\n        headers=headers,\n        params=params\n    )\n    \n    return handle_response(response)\n\n# Usage\nif __name__ == \"__main__\":\n    result = call_endpoint()\n    print(result)\n",
        "curl": "# GET /public/api/v1/affiliate_network/list/all\ncurl -X GET \\\n  \"https://pierdun.com/public/api/v1/public/api/v1/affiliate_network/list/all\" \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Accept: application/json\"",
        "javascript": "// GET /public/api/v1/affiliate_network/list/all\nconst BINOM_API_KEY = process.env.BINOM_PUBLIC;\nconst BASE_URL = 'https://pierdun.com/public/api/v1';\n\nasync function callBinomAPI() {\n    const config = {\n        method: 'GET',\n        headers: {\n            'Authorization': `Bearer ${BINOM_API_KEY}`,\n            'Accept': 'application/json'\n        }\n    };\n    \n    try {\n        const response = await fetch(`${BASE_URL}/public/api/v1/affiliate_network/list/all`, config);\n        \n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        \n        const data = await response.json();\n        console.log('Success:', data);\n        return data;\n    } catch (error) {\n        console.error('Error:', error);\n        throw error;\n    }\n}\n\n// Usage\ncallBinomAPI()\n    .then(data => console.log(data))\n    .catch(error => console.error('Failed:', error));"
      },
      "customMetrics": {
        "available": false,
        "note": "This endpoint does not return custom metrics"
      },
      "aiInstructions": {
        "priority": "MEDIUM",
        "complexity": "LOW",
        "keyPoints": [
          "This is a MEDIUM priority endpoint",
          "Category: affiliate_network operations",
          "Custom metrics: Not available",
          "Always use Bearer token authentication",
          "Handle rate limiting with exponential backoff"
        ],
        "beforeUsing": [
          "Verify API key is set in environment variables",
          "Check if datePreset and timezone are required",
          "Validate all required parameters are provided",
          "Ensure proper error handling is implemented"
        ],
        "afterUsing": [
          "Validate response structure matches expected schema",
          "Check for custom metrics if endpoint supports them",
          "Log important metrics for monitoring",
          "Handle pagination if response is truncated"
        ],
        "commonMistakes": [
          "Forgetting datePreset parameter for stats endpoints",
          "Using wrong Bearer token format",
          "Not handling 429 rate limit responses",
          "Ignoring custom metrics in optimization decisions",
          "Not validating response data before processing"
        ],
        "optimization": [
          "Cache responses when appropriate",
          "Use batch operations when available",
          "Implement retry logic with exponential backoff",
          "Monitor API usage to avoid rate limits",
          "Use appropriate date ranges to minimize data transfer"
        ],
        "customMetricsGuidance": {
          "applicable": false,
          "note": "This endpoint does not return custom metrics"
        }
      },
      "errorHandling": {
        "retryStrategy": {
          "429": {
            "action": "Exponential backoff retry",
            "initialDelay": 1,
            "maxRetries": 5,
            "backoffMultiplier": 2
          },
          "500": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 5
          },
          "502": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 10
          }
        },
        "noRetryErrors": [
          400,
          401,
          403,
          404
        ],
        "commonIssues": [
          {
            "error": "400 - Missing datePreset",
            "solution": "Add datePreset and timezone parameters to GET requests",
            "prevention": "Always validate required parameters before sending request"
          },
          {
            "error": "401 - Invalid API key",
            "solution": "Check Bearer token format and API key validity",
            "prevention": "Validate API key format before making requests"
          },
          {
            "error": "403 - Access denied",
            "solution": "Verify user permissions for this resource",
            "prevention": "Check user role and permissions before accessing resources"
          },
          {
            "error": "429 - Rate limited",
            "solution": "Implement exponential backoff and reduce request frequency",
            "prevention": "Monitor request rate and implement proper throttling"
          }
        ],
        "debugging": [
          "Log full request and response for error analysis",
          "Check API key permissions and expiration",
          "Verify request format matches API documentation",
          "Test with minimal required parameters first"
        ]
      },
      "workflow": {
        "prerequisites": [
          "Valid authentication",
          "Proper permissions"
        ],
        "followUpActions": [
          "Process response data",
          "Handle any errors"
        ],
        "relatedEndpoints": [],
        "typicalWorkflow": [
          "Call GET /public/api/v1/affiliate_network/list/all endpoint",
          "Process response"
        ]
      },
      "testing": {
        "unitTests": [
          "Test with valid parameters",
          "Test with missing required parameters",
          "Test with invalid parameter values",
          "Test authentication failure scenarios"
        ],
        "integrationTests": [
          "Test full workflow with real data",
          "Test error handling and recovery",
          "Test rate limiting behavior",
          "Test response data validation"
        ],
        "testData": {
          "validParams": {},
          "invalidParams": []
        },
        "assertions": [
          "Response status code is 200 for valid requests",
          "Response contains expected data structure",
          "Custom metrics are present when applicable",
          "Error responses contain proper error messages"
        ]
      }
    },
    "PUT /public/api/v1/affiliate_network/{id}/rename": {
      "metadata": {
        "method": "PUT",
        "path": "/public/api/v1/affiliate_network/{id}/rename",
        "category": "affiliate_network",
        "priority": 42,
        "importance": "MEDIUM",
        "hasCustomMetrics": false,
        "aiUsage": "Управление названиями сетей"
      },
      "description": {
        "summary": "Переименование партнерской сети",
        "detailed": "Detailed description for PUT /public/api/v1/affiliate_network/{id}/rename - Переименование партнерской сети",
        "businessContext": "Partner network management - handles postback URLs, payout configurations, and network integrations",
        "whenToUse": [
          "Standard affiliate_network operations"
        ]
      },
      "authentication": {
        "type": "Bearer Token",
        "header": "Authorization: Bearer {binomPublic}",
        "required": true,
        "note": "Use environment variable binomPublic"
      },
      "parameters": {
        "path": [
          {
            "name": "id",
            "type": "integer",
            "required": true,
            "description": "Unique identifier of the affiliate_network",
            "example": 123
          }
        ],
        "query": [],
        "header": [
          {
            "name": "Authorization",
            "type": "string",
            "required": true,
            "description": "Bearer token authentication",
            "example": "Bearer your_api_key_here"
          },
          {
            "name": "Content-Type",
            "type": "string",
            "required": true,
            "description": "Content type for request body",
            "example": "application/json"
          }
        ]
      },
      "requestBody": {
        "required": true,
        "contentType": "application/json",
        "schema": {
          "type": "object"
        },
        "example": {}
      },
      "responses": {
        "200": {
          "description": "Success",
          "contentType": "application/json",
          "schema": {
            "type": "object"
          },
          "example": {
            "message": "Success"
          }
        },
        "400": {
          "description": "Bad Request - Invalid parameters or missing required fields",
          "contentType": "application/json",
          "schema": {
            "type": "object",
            "properties": {
              "error": {
                "type": "string"
              },
              "message": {
                "type": "string"
              },
              "details": {
                "type": "object"
              }
            }
          },
          "example": {
            "error": "Validation failed",
            "message": "Field 'datePreset' is required for stats endpoints",
            "details": {
              "field": "datePreset",
              "code": "required"
            }
          }
        },
        "401": {
          "description": "Unauthorized - Invalid or missing API key",
          "contentType": "application/json",
          "example": {
            "error": "Unauthorized",
            "message": "Invalid API key or missing Authorization header"
          }
        },
        "403": {
          "description": "Forbidden - Insufficient permissions",
          "contentType": "application/json",
          "example": {
            "error": "Access denied",
            "message": "Insufficient permissions to access this resource"
          }
        },
        "404": {
          "description": "Not Found - Resource does not exist",
          "contentType": "application/json",
          "example": {
            "error": "Not found",
            "message": "Campaign with ID 999 not found"
          }
        },
        "429": {
          "description": "Too Many Requests - Rate limit exceeded",
          "contentType": "application/json",
          "example": {
            "error": "Rate limit exceeded",
            "message": "Too many requests. Please wait before making another request.",
            "retryAfter": 60
          }
        },
        "500": {
          "description": "Internal Server Error",
          "contentType": "application/json",
          "example": {
            "error": "Internal server error",
            "message": "An unexpected error occurred. Please try again later."
          }
        }
      },
      "examples": {
        "python": "import requests\nimport os\nfrom datetime import datetime\n\n# Configuration\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\ndef handle_response(response):\n    \"\"\"Handle API response with proper error handling\"\"\"\n    if response.status_code == 200:\n        return response.json()\n    elif response.status_code == 400:\n        print(f\"Bad Request: {response.json()}\")\n    elif response.status_code == 401:\n        print(\"Unauthorized: Check your API key\")\n    elif response.status_code == 403:\n        print(\"Forbidden: Insufficient permissions\")\n    elif response.status_code == 404:\n        print(\"Not Found: Resource doesn't exist\")\n    elif response.status_code == 429:\n        print(\"Rate Limited: Wait before retrying\")\n    else:\n        print(f\"Error {response.status_code}: {response.text}\")\n    return None\n\n# PUT /public/api/v1/affiliate_network/{id}/rename\ndef call_endpoint():\n    \"\"\"Call the PUT /public/api/v1/affiliate_network/{id}/rename endpoint\"\"\"\n    \n    \n    \n    response = requests.put(\n        f\"{BASE_URL}/public/api/v1/affiliate_network/123/rename\",\n        headers=headers\n        \n    )\n    \n    return handle_response(response)\n\n# Usage\nif __name__ == \"__main__\":\n    result = call_endpoint()\n    print(result)\n",
        "curl": "# PUT /public/api/v1/affiliate_network/{id}/rename\ncurl -X PUT \\\n  \"https://pierdun.com/public/api/v1/public/api/v1/affiliate_network/123/rename\" \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Accept: application/json\" \\\n  -H \"Content-Type: application/json\"",
        "javascript": "// PUT /public/api/v1/affiliate_network/{id}/rename\nconst BINOM_API_KEY = process.env.BINOM_PUBLIC;\nconst BASE_URL = 'https://pierdun.com/public/api/v1';\n\nasync function callBinomAPI() {\n    const config = {\n        method: 'PUT',\n        headers: {\n            'Authorization': `Bearer ${BINOM_API_KEY}`,\n            'Accept': 'application/json'\n        }\n    };\n    \n    try {\n        const response = await fetch(`${BASE_URL}/public/api/v1/affiliate_network/123/rename`, config);\n        \n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        \n        const data = await response.json();\n        console.log('Success:', data);\n        return data;\n    } catch (error) {\n        console.error('Error:', error);\n        throw error;\n    }\n}\n\n// Usage\ncallBinomAPI()\n    .then(data => console.log(data))\n    .catch(error => console.error('Failed:', error));"
      },
      "customMetrics": {
        "available": false,
        "note": "This endpoint does not return custom metrics"
      },
      "aiInstructions": {
        "priority": "MEDIUM",
        "complexity": "LOW",
        "keyPoints": [
          "This is a MEDIUM priority endpoint",
          "Category: affiliate_network operations",
          "Custom metrics: Not available",
          "Always use Bearer token authentication",
          "Handle rate limiting with exponential backoff"
        ],
        "beforeUsing": [
          "Verify API key is set in environment variables",
          "Check if datePreset and timezone are required",
          "Validate all required parameters are provided",
          "Ensure proper error handling is implemented"
        ],
        "afterUsing": [
          "Validate response structure matches expected schema",
          "Check for custom metrics if endpoint supports them",
          "Log important metrics for monitoring",
          "Handle pagination if response is truncated"
        ],
        "commonMistakes": [
          "Forgetting datePreset parameter for stats endpoints",
          "Using wrong Bearer token format",
          "Not handling 429 rate limit responses",
          "Ignoring custom metrics in optimization decisions",
          "Not validating response data before processing"
        ],
        "optimization": [
          "Cache responses when appropriate",
          "Use batch operations when available",
          "Implement retry logic with exponential backoff",
          "Monitor API usage to avoid rate limits",
          "Use appropriate date ranges to minimize data transfer"
        ],
        "customMetricsGuidance": {
          "applicable": false,
          "note": "This endpoint does not return custom metrics"
        }
      },
      "errorHandling": {
        "retryStrategy": {
          "429": {
            "action": "Exponential backoff retry",
            "initialDelay": 1,
            "maxRetries": 5,
            "backoffMultiplier": 2
          },
          "500": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 5
          },
          "502": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 10
          }
        },
        "noRetryErrors": [
          400,
          401,
          403,
          404
        ],
        "commonIssues": [
          {
            "error": "400 - Missing datePreset",
            "solution": "Add datePreset and timezone parameters to GET requests",
            "prevention": "Always validate required parameters before sending request"
          },
          {
            "error": "401 - Invalid API key",
            "solution": "Check Bearer token format and API key validity",
            "prevention": "Validate API key format before making requests"
          },
          {
            "error": "403 - Access denied",
            "solution": "Verify user permissions for this resource",
            "prevention": "Check user role and permissions before accessing resources"
          },
          {
            "error": "429 - Rate limited",
            "solution": "Implement exponential backoff and reduce request frequency",
            "prevention": "Monitor request rate and implement proper throttling"
          }
        ],
        "debugging": [
          "Log full request and response for error analysis",
          "Check API key permissions and expiration",
          "Verify request format matches API documentation",
          "Test with minimal required parameters first"
        ]
      },
      "workflow": {
        "prerequisites": [
          "Valid authentication",
          "Proper permissions"
        ],
        "followUpActions": [
          "Process response data",
          "Handle any errors"
        ],
        "relatedEndpoints": [],
        "typicalWorkflow": [
          "Call PUT /public/api/v1/affiliate_network/{id}/rename endpoint",
          "Process response"
        ]
      },
      "testing": {
        "unitTests": [
          "Test with valid parameters",
          "Test with missing required parameters",
          "Test with invalid parameter values",
          "Test authentication failure scenarios"
        ],
        "integrationTests": [
          "Test full workflow with real data",
          "Test error handling and recovery",
          "Test rate limiting behavior",
          "Test response data validation"
        ],
        "testData": {
          "validParams": {},
          "invalidParams": []
        },
        "assertions": [
          "Response status code is 200 for valid requests",
          "Response contains expected data structure",
          "Custom metrics are present when applicable",
          "Error responses contain proper error messages"
        ]
      }
    },
    "GET /public/api/v1/affiliate_network/{id}/clone": {
      "metadata": {
        "method": "GET",
        "path": "/public/api/v1/affiliate_network/{id}/clone",
        "category": "affiliate_network",
        "priority": 43,
        "importance": "MEDIUM",
        "hasCustomMetrics": false,
        "aiUsage": "Быстрое создание похожих сетей"
      },
      "description": {
        "summary": "Клонирование партнерской сети",
        "detailed": "Detailed description for GET /public/api/v1/affiliate_network/{id}/clone - Клонирование партнерской сети",
        "businessContext": "Partner network management - handles postback URLs, payout configurations, and network integrations",
        "whenToUse": [
          "Standard affiliate_network operations"
        ]
      },
      "authentication": {
        "type": "Bearer Token",
        "header": "Authorization: Bearer {binomPublic}",
        "required": true,
        "note": "Use environment variable binomPublic"
      },
      "parameters": {
        "path": [
          {
            "name": "id",
            "type": "integer",
            "required": true,
            "description": "Unique identifier of the affiliate_network",
            "example": 123
          }
        ],
        "query": [],
        "header": [
          {
            "name": "Authorization",
            "type": "string",
            "required": true,
            "description": "Bearer token authentication",
            "example": "Bearer your_api_key_here"
          },
          {
            "name": "Content-Type",
            "type": "string",
            "required": false,
            "description": "Content type for request body",
            "example": "application/json"
          }
        ]
      },
      "requestBody": null,
      "responses": {
        "200": {
          "description": "Success",
          "contentType": "application/json",
          "schema": {
            "type": "object"
          },
          "example": {
            "message": "Success"
          }
        },
        "400": {
          "description": "Bad Request - Invalid parameters or missing required fields",
          "contentType": "application/json",
          "schema": {
            "type": "object",
            "properties": {
              "error": {
                "type": "string"
              },
              "message": {
                "type": "string"
              },
              "details": {
                "type": "object"
              }
            }
          },
          "example": {
            "error": "Validation failed",
            "message": "Field 'datePreset' is required for stats endpoints",
            "details": {
              "field": "datePreset",
              "code": "required"
            }
          }
        },
        "401": {
          "description": "Unauthorized - Invalid or missing API key",
          "contentType": "application/json",
          "example": {
            "error": "Unauthorized",
            "message": "Invalid API key or missing Authorization header"
          }
        },
        "403": {
          "description": "Forbidden - Insufficient permissions",
          "contentType": "application/json",
          "example": {
            "error": "Access denied",
            "message": "Insufficient permissions to access this resource"
          }
        },
        "404": {
          "description": "Not Found - Resource does not exist",
          "contentType": "application/json",
          "example": {
            "error": "Not found",
            "message": "Campaign with ID 999 not found"
          }
        },
        "429": {
          "description": "Too Many Requests - Rate limit exceeded",
          "contentType": "application/json",
          "example": {
            "error": "Rate limit exceeded",
            "message": "Too many requests. Please wait before making another request.",
            "retryAfter": 60
          }
        },
        "500": {
          "description": "Internal Server Error",
          "contentType": "application/json",
          "example": {
            "error": "Internal server error",
            "message": "An unexpected error occurred. Please try again later."
          }
        }
      },
      "examples": {
        "python": "import requests\nimport os\nfrom datetime import datetime\n\n# Configuration\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\ndef handle_response(response):\n    \"\"\"Handle API response with proper error handling\"\"\"\n    if response.status_code == 200:\n        return response.json()\n    elif response.status_code == 400:\n        print(f\"Bad Request: {response.json()}\")\n    elif response.status_code == 401:\n        print(\"Unauthorized: Check your API key\")\n    elif response.status_code == 403:\n        print(\"Forbidden: Insufficient permissions\")\n    elif response.status_code == 404:\n        print(\"Not Found: Resource doesn't exist\")\n    elif response.status_code == 429:\n        print(\"Rate Limited: Wait before retrying\")\n    else:\n        print(f\"Error {response.status_code}: {response.text}\")\n    return None\n\n# GET /public/api/v1/affiliate_network/{id}/clone\ndef call_endpoint():\n    \"\"\"Call the GET /public/api/v1/affiliate_network/{id}/clone endpoint\"\"\"\n    \n    params = {'datePreset': 'last_7_days', 'timezone': 'UTC'}\n    \n    response = requests.get(\n        f\"{BASE_URL}/public/api/v1/affiliate_network/123/clone\",\n        headers=headers,\n        params=params\n    )\n    \n    return handle_response(response)\n\n# Usage\nif __name__ == \"__main__\":\n    result = call_endpoint()\n    print(result)\n",
        "curl": "# GET /public/api/v1/affiliate_network/{id}/clone\ncurl -X GET \\\n  \"https://pierdun.com/public/api/v1/public/api/v1/affiliate_network/123/clone\" \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Accept: application/json\"",
        "javascript": "// GET /public/api/v1/affiliate_network/{id}/clone\nconst BINOM_API_KEY = process.env.BINOM_PUBLIC;\nconst BASE_URL = 'https://pierdun.com/public/api/v1';\n\nasync function callBinomAPI() {\n    const config = {\n        method: 'GET',\n        headers: {\n            'Authorization': `Bearer ${BINOM_API_KEY}`,\n            'Accept': 'application/json'\n        }\n    };\n    \n    try {\n        const response = await fetch(`${BASE_URL}/public/api/v1/affiliate_network/123/clone`, config);\n        \n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        \n        const data = await response.json();\n        console.log('Success:', data);\n        return data;\n    } catch (error) {\n        console.error('Error:', error);\n        throw error;\n    }\n}\n\n// Usage\ncallBinomAPI()\n    .then(data => console.log(data))\n    .catch(error => console.error('Failed:', error));"
      },
      "customMetrics": {
        "available": false,
        "note": "This endpoint does not return custom metrics"
      },
      "aiInstructions": {
        "priority": "MEDIUM",
        "complexity": "LOW",
        "keyPoints": [
          "This is a MEDIUM priority endpoint",
          "Category: affiliate_network operations",
          "Custom metrics: Not available",
          "Always use Bearer token authentication",
          "Handle rate limiting with exponential backoff"
        ],
        "beforeUsing": [
          "Verify API key is set in environment variables",
          "Check if datePreset and timezone are required",
          "Validate all required parameters are provided",
          "Ensure proper error handling is implemented"
        ],
        "afterUsing": [
          "Validate response structure matches expected schema",
          "Check for custom metrics if endpoint supports them",
          "Log important metrics for monitoring",
          "Handle pagination if response is truncated"
        ],
        "commonMistakes": [
          "Forgetting datePreset parameter for stats endpoints",
          "Using wrong Bearer token format",
          "Not handling 429 rate limit responses",
          "Ignoring custom metrics in optimization decisions",
          "Not validating response data before processing"
        ],
        "optimization": [
          "Cache responses when appropriate",
          "Use batch operations when available",
          "Implement retry logic with exponential backoff",
          "Monitor API usage to avoid rate limits",
          "Use appropriate date ranges to minimize data transfer"
        ],
        "customMetricsGuidance": {
          "applicable": false,
          "note": "This endpoint does not return custom metrics"
        }
      },
      "errorHandling": {
        "retryStrategy": {
          "429": {
            "action": "Exponential backoff retry",
            "initialDelay": 1,
            "maxRetries": 5,
            "backoffMultiplier": 2
          },
          "500": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 5
          },
          "502": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 10
          }
        },
        "noRetryErrors": [
          400,
          401,
          403,
          404
        ],
        "commonIssues": [
          {
            "error": "400 - Missing datePreset",
            "solution": "Add datePreset and timezone parameters to GET requests",
            "prevention": "Always validate required parameters before sending request"
          },
          {
            "error": "401 - Invalid API key",
            "solution": "Check Bearer token format and API key validity",
            "prevention": "Validate API key format before making requests"
          },
          {
            "error": "403 - Access denied",
            "solution": "Verify user permissions for this resource",
            "prevention": "Check user role and permissions before accessing resources"
          },
          {
            "error": "429 - Rate limited",
            "solution": "Implement exponential backoff and reduce request frequency",
            "prevention": "Monitor request rate and implement proper throttling"
          }
        ],
        "debugging": [
          "Log full request and response for error analysis",
          "Check API key permissions and expiration",
          "Verify request format matches API documentation",
          "Test with minimal required parameters first"
        ]
      },
      "workflow": {
        "prerequisites": [
          "Valid authentication",
          "Proper permissions"
        ],
        "followUpActions": [
          "Process response data",
          "Handle any errors"
        ],
        "relatedEndpoints": [],
        "typicalWorkflow": [
          "Call GET /public/api/v1/affiliate_network/{id}/clone endpoint",
          "Process response"
        ]
      },
      "testing": {
        "unitTests": [
          "Test with valid parameters",
          "Test with missing required parameters",
          "Test with invalid parameter values",
          "Test authentication failure scenarios"
        ],
        "integrationTests": [
          "Test full workflow with real data",
          "Test error handling and recovery",
          "Test rate limiting behavior",
          "Test response data validation"
        ],
        "testData": {
          "validParams": {},
          "invalidParams": []
        },
        "assertions": [
          "Response status code is 200 for valid requests",
          "Response contains expected data structure",
          "Custom metrics are present when applicable",
          "Error responses contain proper error messages"
        ]
      }
    },
    "PUT /public/api/v1/campaign/{id}/rename": {
      "metadata": {
        "method": "PUT",
        "path": "/public/api/v1/campaign/{id}/rename",
        "category": "campaign",
        "priority": 44,
        "importance": "MEDIUM",
        "hasCustomMetrics": false,
        "aiUsage": "Управление названиями кампаний"
      },
      "description": {
        "summary": "Переименование кампании",
        "detailed": "Detailed description for PUT /public/api/v1/campaign/{id}/rename - Переименование кампании",
        "businessContext": "Campaign management - core functionality for setting up, configuring, and managing traffic tracking campaigns",
        "whenToUse": [
          "Standard campaign operations"
        ]
      },
      "authentication": {
        "type": "Bearer Token",
        "header": "Authorization: Bearer {binomPublic}",
        "required": true,
        "note": "Use environment variable binomPublic"
      },
      "parameters": {
        "path": [
          {
            "name": "id",
            "type": "integer",
            "required": true,
            "description": "Unique identifier of the campaign",
            "example": 123
          }
        ],
        "query": [],
        "header": [
          {
            "name": "Authorization",
            "type": "string",
            "required": true,
            "description": "Bearer token authentication",
            "example": "Bearer your_api_key_here"
          },
          {
            "name": "Content-Type",
            "type": "string",
            "required": true,
            "description": "Content type for request body",
            "example": "application/json"
          }
        ]
      },
      "requestBody": {
        "required": true,
        "contentType": "application/json",
        "schema": {
          "type": "object"
        },
        "example": {}
      },
      "responses": {
        "200": {
          "description": "Success",
          "contentType": "application/json",
          "schema": {
            "type": "object"
          },
          "example": {
            "message": "Success"
          }
        },
        "400": {
          "description": "Bad Request - Invalid parameters or missing required fields",
          "contentType": "application/json",
          "schema": {
            "type": "object",
            "properties": {
              "error": {
                "type": "string"
              },
              "message": {
                "type": "string"
              },
              "details": {
                "type": "object"
              }
            }
          },
          "example": {
            "error": "Validation failed",
            "message": "Field 'datePreset' is required for stats endpoints",
            "details": {
              "field": "datePreset",
              "code": "required"
            }
          }
        },
        "401": {
          "description": "Unauthorized - Invalid or missing API key",
          "contentType": "application/json",
          "example": {
            "error": "Unauthorized",
            "message": "Invalid API key or missing Authorization header"
          }
        },
        "403": {
          "description": "Forbidden - Insufficient permissions",
          "contentType": "application/json",
          "example": {
            "error": "Access denied",
            "message": "Insufficient permissions to access this resource"
          }
        },
        "404": {
          "description": "Not Found - Resource does not exist",
          "contentType": "application/json",
          "example": {
            "error": "Not found",
            "message": "Campaign with ID 999 not found"
          }
        },
        "429": {
          "description": "Too Many Requests - Rate limit exceeded",
          "contentType": "application/json",
          "example": {
            "error": "Rate limit exceeded",
            "message": "Too many requests. Please wait before making another request.",
            "retryAfter": 60
          }
        },
        "500": {
          "description": "Internal Server Error",
          "contentType": "application/json",
          "example": {
            "error": "Internal server error",
            "message": "An unexpected error occurred. Please try again later."
          }
        }
      },
      "examples": {
        "python": "import requests\nimport os\nfrom datetime import datetime\n\n# Configuration\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\ndef handle_response(response):\n    \"\"\"Handle API response with proper error handling\"\"\"\n    if response.status_code == 200:\n        return response.json()\n    elif response.status_code == 400:\n        print(f\"Bad Request: {response.json()}\")\n    elif response.status_code == 401:\n        print(\"Unauthorized: Check your API key\")\n    elif response.status_code == 403:\n        print(\"Forbidden: Insufficient permissions\")\n    elif response.status_code == 404:\n        print(\"Not Found: Resource doesn't exist\")\n    elif response.status_code == 429:\n        print(\"Rate Limited: Wait before retrying\")\n    else:\n        print(f\"Error {response.status_code}: {response.text}\")\n    return None\n\n# PUT /public/api/v1/campaign/{id}/rename\ndef call_endpoint():\n    \"\"\"Call the PUT /public/api/v1/campaign/{id}/rename endpoint\"\"\"\n    \n    \n    \n    response = requests.put(\n        f\"{BASE_URL}/public/api/v1/campaign/123/rename\",\n        headers=headers\n        \n    )\n    \n    return handle_response(response)\n\n# Usage\nif __name__ == \"__main__\":\n    result = call_endpoint()\n    print(result)\n",
        "curl": "# PUT /public/api/v1/campaign/{id}/rename\ncurl -X PUT \\\n  \"https://pierdun.com/public/api/v1/public/api/v1/campaign/123/rename\" \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Accept: application/json\" \\\n  -H \"Content-Type: application/json\"",
        "javascript": "// PUT /public/api/v1/campaign/{id}/rename\nconst BINOM_API_KEY = process.env.BINOM_PUBLIC;\nconst BASE_URL = 'https://pierdun.com/public/api/v1';\n\nasync function callBinomAPI() {\n    const config = {\n        method: 'PUT',\n        headers: {\n            'Authorization': `Bearer ${BINOM_API_KEY}`,\n            'Accept': 'application/json'\n        }\n    };\n    \n    try {\n        const response = await fetch(`${BASE_URL}/public/api/v1/campaign/123/rename`, config);\n        \n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        \n        const data = await response.json();\n        console.log('Success:', data);\n        return data;\n    } catch (error) {\n        console.error('Error:', error);\n        throw error;\n    }\n}\n\n// Usage\ncallBinomAPI()\n    .then(data => console.log(data))\n    .catch(error => console.error('Failed:', error));"
      },
      "customMetrics": {
        "available": false,
        "note": "This endpoint does not return custom metrics"
      },
      "aiInstructions": {
        "priority": "MEDIUM",
        "complexity": "LOW",
        "keyPoints": [
          "This is a MEDIUM priority endpoint",
          "Category: campaign operations",
          "Custom metrics: Not available",
          "Always use Bearer token authentication",
          "Handle rate limiting with exponential backoff"
        ],
        "beforeUsing": [
          "Verify API key is set in environment variables",
          "Check if datePreset and timezone are required",
          "Validate all required parameters are provided",
          "Ensure proper error handling is implemented"
        ],
        "afterUsing": [
          "Validate response structure matches expected schema",
          "Check for custom metrics if endpoint supports them",
          "Log important metrics for monitoring",
          "Handle pagination if response is truncated"
        ],
        "commonMistakes": [
          "Forgetting datePreset parameter for stats endpoints",
          "Using wrong Bearer token format",
          "Not handling 429 rate limit responses",
          "Ignoring custom metrics in optimization decisions",
          "Not validating response data before processing"
        ],
        "optimization": [
          "Cache responses when appropriate",
          "Use batch operations when available",
          "Implement retry logic with exponential backoff",
          "Monitor API usage to avoid rate limits",
          "Use appropriate date ranges to minimize data transfer"
        ],
        "customMetricsGuidance": {
          "applicable": false,
          "note": "This endpoint does not return custom metrics"
        }
      },
      "errorHandling": {
        "retryStrategy": {
          "429": {
            "action": "Exponential backoff retry",
            "initialDelay": 1,
            "maxRetries": 5,
            "backoffMultiplier": 2
          },
          "500": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 5
          },
          "502": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 10
          }
        },
        "noRetryErrors": [
          400,
          401,
          403,
          404
        ],
        "commonIssues": [
          {
            "error": "400 - Missing datePreset",
            "solution": "Add datePreset and timezone parameters to GET requests",
            "prevention": "Always validate required parameters before sending request"
          },
          {
            "error": "401 - Invalid API key",
            "solution": "Check Bearer token format and API key validity",
            "prevention": "Validate API key format before making requests"
          },
          {
            "error": "403 - Access denied",
            "solution": "Verify user permissions for this resource",
            "prevention": "Check user role and permissions before accessing resources"
          },
          {
            "error": "429 - Rate limited",
            "solution": "Implement exponential backoff and reduce request frequency",
            "prevention": "Monitor request rate and implement proper throttling"
          }
        ],
        "debugging": [
          "Log full request and response for error analysis",
          "Check API key permissions and expiration",
          "Verify request format matches API documentation",
          "Test with minimal required parameters first"
        ]
      },
      "workflow": {
        "prerequisites": [
          "Valid authentication",
          "Proper permissions"
        ],
        "followUpActions": [
          "Process response data",
          "Handle any errors"
        ],
        "relatedEndpoints": [],
        "typicalWorkflow": [
          "Call PUT /public/api/v1/campaign/{id}/rename endpoint",
          "Process response"
        ]
      },
      "testing": {
        "unitTests": [
          "Test with valid parameters",
          "Test with missing required parameters",
          "Test with invalid parameter values",
          "Test authentication failure scenarios"
        ],
        "integrationTests": [
          "Test full workflow with real data",
          "Test error handling and recovery",
          "Test rate limiting behavior",
          "Test response data validation"
        ],
        "testData": {
          "validParams": {},
          "invalidParams": []
        },
        "assertions": [
          "Response status code is 200 for valid requests",
          "Response contains expected data structure",
          "Custom metrics are present when applicable",
          "Error responses contain proper error messages"
        ]
      }
    },
    "PATCH /public/api/v1/campaign/{id}": {
      "metadata": {
        "method": "PATCH",
        "path": "/public/api/v1/campaign/{id}",
        "category": "campaign",
        "priority": 45,
        "importance": "MEDIUM",
        "hasCustomMetrics": false,
        "aiUsage": "Восстановление удаленных кампаний"
      },
      "description": {
        "summary": "Восстановление кампании",
        "detailed": "Detailed description for PATCH /public/api/v1/campaign/{id} - Восстановление кампании",
        "businessContext": "Campaign management - core functionality for setting up, configuring, and managing traffic tracking campaigns",
        "whenToUse": [
          "Standard campaign operations"
        ]
      },
      "authentication": {
        "type": "Bearer Token",
        "header": "Authorization: Bearer {binomPublic}",
        "required": true,
        "note": "Use environment variable binomPublic"
      },
      "parameters": {
        "path": [
          {
            "name": "id",
            "type": "integer",
            "required": true,
            "description": "Unique identifier of the campaign",
            "example": 123
          }
        ],
        "query": [],
        "header": [
          {
            "name": "Authorization",
            "type": "string",
            "required": true,
            "description": "Bearer token authentication",
            "example": "Bearer your_api_key_here"
          },
          {
            "name": "Content-Type",
            "type": "string",
            "required": true,
            "description": "Content type for request body",
            "example": "application/json"
          }
        ]
      },
      "requestBody": {
        "required": true,
        "contentType": "application/json",
        "schema": {
          "type": "object"
        },
        "example": {}
      },
      "responses": {
        "200": {
          "description": "Success",
          "contentType": "application/json",
          "schema": {
            "type": "object"
          },
          "example": {
            "message": "Success"
          }
        },
        "400": {
          "description": "Bad Request - Invalid parameters or missing required fields",
          "contentType": "application/json",
          "schema": {
            "type": "object",
            "properties": {
              "error": {
                "type": "string"
              },
              "message": {
                "type": "string"
              },
              "details": {
                "type": "object"
              }
            }
          },
          "example": {
            "error": "Validation failed",
            "message": "Field 'datePreset' is required for stats endpoints",
            "details": {
              "field": "datePreset",
              "code": "required"
            }
          }
        },
        "401": {
          "description": "Unauthorized - Invalid or missing API key",
          "contentType": "application/json",
          "example": {
            "error": "Unauthorized",
            "message": "Invalid API key or missing Authorization header"
          }
        },
        "403": {
          "description": "Forbidden - Insufficient permissions",
          "contentType": "application/json",
          "example": {
            "error": "Access denied",
            "message": "Insufficient permissions to access this resource"
          }
        },
        "404": {
          "description": "Not Found - Resource does not exist",
          "contentType": "application/json",
          "example": {
            "error": "Not found",
            "message": "Campaign with ID 999 not found"
          }
        },
        "429": {
          "description": "Too Many Requests - Rate limit exceeded",
          "contentType": "application/json",
          "example": {
            "error": "Rate limit exceeded",
            "message": "Too many requests. Please wait before making another request.",
            "retryAfter": 60
          }
        },
        "500": {
          "description": "Internal Server Error",
          "contentType": "application/json",
          "example": {
            "error": "Internal server error",
            "message": "An unexpected error occurred. Please try again later."
          }
        }
      },
      "examples": {
        "python": "import requests\nimport os\nfrom datetime import datetime\n\n# Configuration\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\ndef handle_response(response):\n    \"\"\"Handle API response with proper error handling\"\"\"\n    if response.status_code == 200:\n        return response.json()\n    elif response.status_code == 400:\n        print(f\"Bad Request: {response.json()}\")\n    elif response.status_code == 401:\n        print(\"Unauthorized: Check your API key\")\n    elif response.status_code == 403:\n        print(\"Forbidden: Insufficient permissions\")\n    elif response.status_code == 404:\n        print(\"Not Found: Resource doesn't exist\")\n    elif response.status_code == 429:\n        print(\"Rate Limited: Wait before retrying\")\n    else:\n        print(f\"Error {response.status_code}: {response.text}\")\n    return None\n\n# PATCH /public/api/v1/campaign/{id}\ndef call_endpoint():\n    \"\"\"Call the PATCH /public/api/v1/campaign/{id} endpoint\"\"\"\n    \n    \n    \n    response = requests.patch(\n        f\"{BASE_URL}/public/api/v1/campaign/123\",\n        headers=headers\n        \n    )\n    \n    return handle_response(response)\n\n# Usage\nif __name__ == \"__main__\":\n    result = call_endpoint()\n    print(result)\n",
        "curl": "# PATCH /public/api/v1/campaign/{id}\ncurl -X PATCH \\\n  \"https://pierdun.com/public/api/v1/public/api/v1/campaign/123\" \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Accept: application/json\" \\\n  -H \"Content-Type: application/json\"",
        "javascript": "// PATCH /public/api/v1/campaign/{id}\nconst BINOM_API_KEY = process.env.BINOM_PUBLIC;\nconst BASE_URL = 'https://pierdun.com/public/api/v1';\n\nasync function callBinomAPI() {\n    const config = {\n        method: 'PATCH',\n        headers: {\n            'Authorization': `Bearer ${BINOM_API_KEY}`,\n            'Accept': 'application/json'\n        }\n    };\n    \n    try {\n        const response = await fetch(`${BASE_URL}/public/api/v1/campaign/123`, config);\n        \n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        \n        const data = await response.json();\n        console.log('Success:', data);\n        return data;\n    } catch (error) {\n        console.error('Error:', error);\n        throw error;\n    }\n}\n\n// Usage\ncallBinomAPI()\n    .then(data => console.log(data))\n    .catch(error => console.error('Failed:', error));"
      },
      "customMetrics": {
        "available": false,
        "note": "This endpoint does not return custom metrics"
      },
      "aiInstructions": {
        "priority": "MEDIUM",
        "complexity": "LOW",
        "keyPoints": [
          "This is a MEDIUM priority endpoint",
          "Category: campaign operations",
          "Custom metrics: Not available",
          "Always use Bearer token authentication",
          "Handle rate limiting with exponential backoff"
        ],
        "beforeUsing": [
          "Verify API key is set in environment variables",
          "Check if datePreset and timezone are required",
          "Validate all required parameters are provided",
          "Ensure proper error handling is implemented"
        ],
        "afterUsing": [
          "Validate response structure matches expected schema",
          "Check for custom metrics if endpoint supports them",
          "Log important metrics for monitoring",
          "Handle pagination if response is truncated"
        ],
        "commonMistakes": [
          "Forgetting datePreset parameter for stats endpoints",
          "Using wrong Bearer token format",
          "Not handling 429 rate limit responses",
          "Ignoring custom metrics in optimization decisions",
          "Not validating response data before processing"
        ],
        "optimization": [
          "Cache responses when appropriate",
          "Use batch operations when available",
          "Implement retry logic with exponential backoff",
          "Monitor API usage to avoid rate limits",
          "Use appropriate date ranges to minimize data transfer"
        ],
        "customMetricsGuidance": {
          "applicable": false,
          "note": "This endpoint does not return custom metrics"
        }
      },
      "errorHandling": {
        "retryStrategy": {
          "429": {
            "action": "Exponential backoff retry",
            "initialDelay": 1,
            "maxRetries": 5,
            "backoffMultiplier": 2
          },
          "500": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 5
          },
          "502": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 10
          }
        },
        "noRetryErrors": [
          400,
          401,
          403,
          404
        ],
        "commonIssues": [
          {
            "error": "400 - Missing datePreset",
            "solution": "Add datePreset and timezone parameters to GET requests",
            "prevention": "Always validate required parameters before sending request"
          },
          {
            "error": "401 - Invalid API key",
            "solution": "Check Bearer token format and API key validity",
            "prevention": "Validate API key format before making requests"
          },
          {
            "error": "403 - Access denied",
            "solution": "Verify user permissions for this resource",
            "prevention": "Check user role and permissions before accessing resources"
          },
          {
            "error": "429 - Rate limited",
            "solution": "Implement exponential backoff and reduce request frequency",
            "prevention": "Monitor request rate and implement proper throttling"
          }
        ],
        "debugging": [
          "Log full request and response for error analysis",
          "Check API key permissions and expiration",
          "Verify request format matches API documentation",
          "Test with minimal required parameters first"
        ]
      },
      "workflow": {
        "prerequisites": [
          "Valid authentication",
          "Proper permissions"
        ],
        "followUpActions": [
          "Process response data",
          "Handle any errors"
        ],
        "relatedEndpoints": [],
        "typicalWorkflow": [
          "Call PATCH /public/api/v1/campaign/{id} endpoint",
          "Process response"
        ]
      },
      "testing": {
        "unitTests": [
          "Test with valid parameters",
          "Test with missing required parameters",
          "Test with invalid parameter values",
          "Test authentication failure scenarios"
        ],
        "integrationTests": [
          "Test full workflow with real data",
          "Test error handling and recovery",
          "Test rate limiting behavior",
          "Test response data validation"
        ],
        "testData": {
          "validParams": {},
          "invalidParams": []
        },
        "assertions": [
          "Response status code is 200 for valid requests",
          "Response contains expected data structure",
          "Custom metrics are present when applicable",
          "Error responses contain proper error messages"
        ]
      }
    },
    "POST /public/api/v1/campaign/change_domain": {
      "metadata": {
        "method": "POST",
        "path": "/public/api/v1/campaign/change_domain",
        "category": "campaign",
        "priority": 46,
        "importance": "MEDIUM",
        "hasCustomMetrics": false,
        "aiUsage": "Управление доменами"
      },
      "description": {
        "summary": "Массовое изменение домена кампаний",
        "detailed": "Detailed description for POST /public/api/v1/campaign/change_domain - Массовое изменение домена кампаний",
        "businessContext": "Campaign management - core functionality for setting up, configuring, and managing traffic tracking campaigns",
        "whenToUse": [
          "Standard campaign operations"
        ]
      },
      "authentication": {
        "type": "Bearer Token",
        "header": "Authorization: Bearer {binomPublic}",
        "required": true,
        "note": "Use environment variable binomPublic"
      },
      "parameters": {
        "path": [],
        "query": [],
        "header": [
          {
            "name": "Authorization",
            "type": "string",
            "required": true,
            "description": "Bearer token authentication",
            "example": "Bearer your_api_key_here"
          },
          {
            "name": "Content-Type",
            "type": "string",
            "required": true,
            "description": "Content type for request body",
            "example": "application/json"
          }
        ]
      },
      "requestBody": {
        "required": true,
        "contentType": "application/json",
        "schema": {
          "type": "object"
        },
        "example": {}
      },
      "responses": {
        "200": {
          "description": "Success",
          "contentType": "application/json",
          "schema": {
            "type": "object"
          },
          "example": {
            "message": "Success"
          }
        },
        "400": {
          "description": "Bad Request - Invalid parameters or missing required fields",
          "contentType": "application/json",
          "schema": {
            "type": "object",
            "properties": {
              "error": {
                "type": "string"
              },
              "message": {
                "type": "string"
              },
              "details": {
                "type": "object"
              }
            }
          },
          "example": {
            "error": "Validation failed",
            "message": "Field 'datePreset' is required for stats endpoints",
            "details": {
              "field": "datePreset",
              "code": "required"
            }
          }
        },
        "401": {
          "description": "Unauthorized - Invalid or missing API key",
          "contentType": "application/json",
          "example": {
            "error": "Unauthorized",
            "message": "Invalid API key or missing Authorization header"
          }
        },
        "403": {
          "description": "Forbidden - Insufficient permissions",
          "contentType": "application/json",
          "example": {
            "error": "Access denied",
            "message": "Insufficient permissions to access this resource"
          }
        },
        "404": {
          "description": "Not Found - Resource does not exist",
          "contentType": "application/json",
          "example": {
            "error": "Not found",
            "message": "Campaign with ID 999 not found"
          }
        },
        "429": {
          "description": "Too Many Requests - Rate limit exceeded",
          "contentType": "application/json",
          "example": {
            "error": "Rate limit exceeded",
            "message": "Too many requests. Please wait before making another request.",
            "retryAfter": 60
          }
        },
        "500": {
          "description": "Internal Server Error",
          "contentType": "application/json",
          "example": {
            "error": "Internal server error",
            "message": "An unexpected error occurred. Please try again later."
          }
        }
      },
      "examples": {
        "python": "import requests\nimport os\nfrom datetime import datetime\n\n# Configuration\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\ndef handle_response(response):\n    \"\"\"Handle API response with proper error handling\"\"\"\n    if response.status_code == 200:\n        return response.json()\n    elif response.status_code == 400:\n        print(f\"Bad Request: {response.json()}\")\n    elif response.status_code == 401:\n        print(\"Unauthorized: Check your API key\")\n    elif response.status_code == 403:\n        print(\"Forbidden: Insufficient permissions\")\n    elif response.status_code == 404:\n        print(\"Not Found: Resource doesn't exist\")\n    elif response.status_code == 429:\n        print(\"Rate Limited: Wait before retrying\")\n    else:\n        print(f\"Error {response.status_code}: {response.text}\")\n    return None\n\n# Create new campaign\ndef create_campaign(campaign_data):\n    \"\"\"\n    Create a new tracking campaign\n    \n    Args:\n        campaign_data: Dictionary with campaign configuration\n    \"\"\"\n    response = requests.post(\n        f\"{BASE_URL}/campaign\",\n        headers=headers,\n        json=campaign_data\n    )\n    \n    return handle_response(response)\n\n# Usage example\nif __name__ == \"__main__\":\n    new_campaign = {\n        \"name\": \"iOS Mobile Campaign - Premium GEOs\",\n        \"trafficSourceId\": 1,\n        \"cost\": 0.30,\n        \"currency\": \"USD\",\n        \"costModel\": \"CPC\",\n        \"status\": \"active\",\n        \"description\": \"High-converting mobile campaign for tier 1 countries\"\n    }\n    \n    result = create_campaign(new_campaign)\n    if result:\n        print(f\"Campaign created with ID: {result.get('id')}\")\n",
        "curl": "# POST /public/api/v1/campaign/change_domain\ncurl -X POST \\\n  \"https://pierdun.com/public/api/v1/public/api/v1/campaign/change_domain\" \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Accept: application/json\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"name\": \"Test Campaign\",\n    \"trafficSourceId\": 1,\n    \"cost\": 0.25,\n    \"currency\": \"USD\",\n    \"costModel\": \"CPC\",\n    \"status\": \"active\"\n  }' ",
        "javascript": "// POST /public/api/v1/campaign/change_domain\nconst BINOM_API_KEY = process.env.BINOM_PUBLIC;\nconst BASE_URL = 'https://pierdun.com/public/api/v1';\n\nasync function callBinomAPI() {\n    const config = {\n        method: 'POST',\n        headers: {\n            'Authorization': `Bearer ${BINOM_API_KEY}`,\n            'Accept': 'application/json'\n        }\n    };\n    \n    try {\n        const response = await fetch(`${BASE_URL}/public/api/v1/campaign/change_domain`, config);\n        \n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        \n        const data = await response.json();\n        console.log('Success:', data);\n        return data;\n    } catch (error) {\n        console.error('Error:', error);\n        throw error;\n    }\n}\n\n// Usage\ncallBinomAPI()\n    .then(data => console.log(data))\n    .catch(error => console.error('Failed:', error));"
      },
      "customMetrics": {
        "available": false,
        "note": "This endpoint does not return custom metrics"
      },
      "aiInstructions": {
        "priority": "MEDIUM",
        "complexity": "LOW",
        "keyPoints": [
          "This is a MEDIUM priority endpoint",
          "Category: campaign operations",
          "Custom metrics: Not available",
          "Always use Bearer token authentication",
          "Handle rate limiting with exponential backoff"
        ],
        "beforeUsing": [
          "Verify API key is set in environment variables",
          "Check if datePreset and timezone are required",
          "Validate all required parameters are provided",
          "Ensure proper error handling is implemented"
        ],
        "afterUsing": [
          "Validate response structure matches expected schema",
          "Check for custom metrics if endpoint supports them",
          "Log important metrics for monitoring",
          "Handle pagination if response is truncated"
        ],
        "commonMistakes": [
          "Forgetting datePreset parameter for stats endpoints",
          "Using wrong Bearer token format",
          "Not handling 429 rate limit responses",
          "Ignoring custom metrics in optimization decisions",
          "Not validating response data before processing"
        ],
        "optimization": [
          "Cache responses when appropriate",
          "Use batch operations when available",
          "Implement retry logic with exponential backoff",
          "Monitor API usage to avoid rate limits",
          "Use appropriate date ranges to minimize data transfer"
        ],
        "customMetricsGuidance": {
          "applicable": false,
          "note": "This endpoint does not return custom metrics"
        }
      },
      "errorHandling": {
        "retryStrategy": {
          "429": {
            "action": "Exponential backoff retry",
            "initialDelay": 1,
            "maxRetries": 5,
            "backoffMultiplier": 2
          },
          "500": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 5
          },
          "502": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 10
          }
        },
        "noRetryErrors": [
          400,
          401,
          403,
          404
        ],
        "commonIssues": [
          {
            "error": "400 - Missing datePreset",
            "solution": "Add datePreset and timezone parameters to GET requests",
            "prevention": "Always validate required parameters before sending request"
          },
          {
            "error": "401 - Invalid API key",
            "solution": "Check Bearer token format and API key validity",
            "prevention": "Validate API key format before making requests"
          },
          {
            "error": "403 - Access denied",
            "solution": "Verify user permissions for this resource",
            "prevention": "Check user role and permissions before accessing resources"
          },
          {
            "error": "429 - Rate limited",
            "solution": "Implement exponential backoff and reduce request frequency",
            "prevention": "Monitor request rate and implement proper throttling"
          }
        ],
        "debugging": [
          "Log full request and response for error analysis",
          "Check API key permissions and expiration",
          "Verify request format matches API documentation",
          "Test with minimal required parameters first"
        ]
      },
      "workflow": {
        "prerequisites": [
          "Valid authentication",
          "Proper permissions"
        ],
        "followUpActions": [
          "Process response data",
          "Handle any errors"
        ],
        "relatedEndpoints": [],
        "typicalWorkflow": [
          "Call POST /public/api/v1/campaign/change_domain endpoint",
          "Process response"
        ]
      },
      "testing": {
        "unitTests": [
          "Test with valid parameters",
          "Test with missing required parameters",
          "Test with invalid parameter values",
          "Test authentication failure scenarios"
        ],
        "integrationTests": [
          "Test full workflow with real data",
          "Test error handling and recovery",
          "Test rate limiting behavior",
          "Test response data validation"
        ],
        "testData": {
          "validParams": {},
          "invalidParams": []
        },
        "assertions": [
          "Response status code is 200 for valid requests",
          "Response contains expected data structure",
          "Custom metrics are present when applicable",
          "Error responses contain proper error messages"
        ]
      }
    },
    "POST /public/api/v1/campaign/change_group": {
      "metadata": {
        "method": "POST",
        "path": "/public/api/v1/campaign/change_group",
        "category": "campaign",
        "priority": 47,
        "importance": "MEDIUM",
        "hasCustomMetrics": false,
        "aiUsage": "Организация кампаний"
      },
      "description": {
        "summary": "Массовое изменение группы кампаний",
        "detailed": "Detailed description for POST /public/api/v1/campaign/change_group - Массовое изменение группы кампаний",
        "businessContext": "Campaign management - core functionality for setting up, configuring, and managing traffic tracking campaigns",
        "whenToUse": [
          "Standard campaign operations"
        ]
      },
      "authentication": {
        "type": "Bearer Token",
        "header": "Authorization: Bearer {binomPublic}",
        "required": true,
        "note": "Use environment variable binomPublic"
      },
      "parameters": {
        "path": [],
        "query": [],
        "header": [
          {
            "name": "Authorization",
            "type": "string",
            "required": true,
            "description": "Bearer token authentication",
            "example": "Bearer your_api_key_here"
          },
          {
            "name": "Content-Type",
            "type": "string",
            "required": true,
            "description": "Content type for request body",
            "example": "application/json"
          }
        ]
      },
      "requestBody": {
        "required": true,
        "contentType": "application/json",
        "schema": {
          "type": "object"
        },
        "example": {}
      },
      "responses": {
        "200": {
          "description": "Success",
          "contentType": "application/json",
          "schema": {
            "type": "object"
          },
          "example": {
            "message": "Success"
          }
        },
        "400": {
          "description": "Bad Request - Invalid parameters or missing required fields",
          "contentType": "application/json",
          "schema": {
            "type": "object",
            "properties": {
              "error": {
                "type": "string"
              },
              "message": {
                "type": "string"
              },
              "details": {
                "type": "object"
              }
            }
          },
          "example": {
            "error": "Validation failed",
            "message": "Field 'datePreset' is required for stats endpoints",
            "details": {
              "field": "datePreset",
              "code": "required"
            }
          }
        },
        "401": {
          "description": "Unauthorized - Invalid or missing API key",
          "contentType": "application/json",
          "example": {
            "error": "Unauthorized",
            "message": "Invalid API key or missing Authorization header"
          }
        },
        "403": {
          "description": "Forbidden - Insufficient permissions",
          "contentType": "application/json",
          "example": {
            "error": "Access denied",
            "message": "Insufficient permissions to access this resource"
          }
        },
        "404": {
          "description": "Not Found - Resource does not exist",
          "contentType": "application/json",
          "example": {
            "error": "Not found",
            "message": "Campaign with ID 999 not found"
          }
        },
        "429": {
          "description": "Too Many Requests - Rate limit exceeded",
          "contentType": "application/json",
          "example": {
            "error": "Rate limit exceeded",
            "message": "Too many requests. Please wait before making another request.",
            "retryAfter": 60
          }
        },
        "500": {
          "description": "Internal Server Error",
          "contentType": "application/json",
          "example": {
            "error": "Internal server error",
            "message": "An unexpected error occurred. Please try again later."
          }
        }
      },
      "examples": {
        "python": "import requests\nimport os\nfrom datetime import datetime\n\n# Configuration\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\ndef handle_response(response):\n    \"\"\"Handle API response with proper error handling\"\"\"\n    if response.status_code == 200:\n        return response.json()\n    elif response.status_code == 400:\n        print(f\"Bad Request: {response.json()}\")\n    elif response.status_code == 401:\n        print(\"Unauthorized: Check your API key\")\n    elif response.status_code == 403:\n        print(\"Forbidden: Insufficient permissions\")\n    elif response.status_code == 404:\n        print(\"Not Found: Resource doesn't exist\")\n    elif response.status_code == 429:\n        print(\"Rate Limited: Wait before retrying\")\n    else:\n        print(f\"Error {response.status_code}: {response.text}\")\n    return None\n\n# Create new campaign\ndef create_campaign(campaign_data):\n    \"\"\"\n    Create a new tracking campaign\n    \n    Args:\n        campaign_data: Dictionary with campaign configuration\n    \"\"\"\n    response = requests.post(\n        f\"{BASE_URL}/campaign\",\n        headers=headers,\n        json=campaign_data\n    )\n    \n    return handle_response(response)\n\n# Usage example\nif __name__ == \"__main__\":\n    new_campaign = {\n        \"name\": \"iOS Mobile Campaign - Premium GEOs\",\n        \"trafficSourceId\": 1,\n        \"cost\": 0.30,\n        \"currency\": \"USD\",\n        \"costModel\": \"CPC\",\n        \"status\": \"active\",\n        \"description\": \"High-converting mobile campaign for tier 1 countries\"\n    }\n    \n    result = create_campaign(new_campaign)\n    if result:\n        print(f\"Campaign created with ID: {result.get('id')}\")\n",
        "curl": "# POST /public/api/v1/campaign/change_group\ncurl -X POST \\\n  \"https://pierdun.com/public/api/v1/public/api/v1/campaign/change_group\" \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Accept: application/json\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"name\": \"Test Campaign\",\n    \"trafficSourceId\": 1,\n    \"cost\": 0.25,\n    \"currency\": \"USD\",\n    \"costModel\": \"CPC\",\n    \"status\": \"active\"\n  }' ",
        "javascript": "// POST /public/api/v1/campaign/change_group\nconst BINOM_API_KEY = process.env.BINOM_PUBLIC;\nconst BASE_URL = 'https://pierdun.com/public/api/v1';\n\nasync function callBinomAPI() {\n    const config = {\n        method: 'POST',\n        headers: {\n            'Authorization': `Bearer ${BINOM_API_KEY}`,\n            'Accept': 'application/json'\n        }\n    };\n    \n    try {\n        const response = await fetch(`${BASE_URL}/public/api/v1/campaign/change_group`, config);\n        \n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        \n        const data = await response.json();\n        console.log('Success:', data);\n        return data;\n    } catch (error) {\n        console.error('Error:', error);\n        throw error;\n    }\n}\n\n// Usage\ncallBinomAPI()\n    .then(data => console.log(data))\n    .catch(error => console.error('Failed:', error));"
      },
      "customMetrics": {
        "available": false,
        "note": "This endpoint does not return custom metrics"
      },
      "aiInstructions": {
        "priority": "MEDIUM",
        "complexity": "LOW",
        "keyPoints": [
          "This is a MEDIUM priority endpoint",
          "Category: campaign operations",
          "Custom metrics: Not available",
          "Always use Bearer token authentication",
          "Handle rate limiting with exponential backoff"
        ],
        "beforeUsing": [
          "Verify API key is set in environment variables",
          "Check if datePreset and timezone are required",
          "Validate all required parameters are provided",
          "Ensure proper error handling is implemented"
        ],
        "afterUsing": [
          "Validate response structure matches expected schema",
          "Check for custom metrics if endpoint supports them",
          "Log important metrics for monitoring",
          "Handle pagination if response is truncated"
        ],
        "commonMistakes": [
          "Forgetting datePreset parameter for stats endpoints",
          "Using wrong Bearer token format",
          "Not handling 429 rate limit responses",
          "Ignoring custom metrics in optimization decisions",
          "Not validating response data before processing"
        ],
        "optimization": [
          "Cache responses when appropriate",
          "Use batch operations when available",
          "Implement retry logic with exponential backoff",
          "Monitor API usage to avoid rate limits",
          "Use appropriate date ranges to minimize data transfer"
        ],
        "customMetricsGuidance": {
          "applicable": false,
          "note": "This endpoint does not return custom metrics"
        }
      },
      "errorHandling": {
        "retryStrategy": {
          "429": {
            "action": "Exponential backoff retry",
            "initialDelay": 1,
            "maxRetries": 5,
            "backoffMultiplier": 2
          },
          "500": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 5
          },
          "502": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 10
          }
        },
        "noRetryErrors": [
          400,
          401,
          403,
          404
        ],
        "commonIssues": [
          {
            "error": "400 - Missing datePreset",
            "solution": "Add datePreset and timezone parameters to GET requests",
            "prevention": "Always validate required parameters before sending request"
          },
          {
            "error": "401 - Invalid API key",
            "solution": "Check Bearer token format and API key validity",
            "prevention": "Validate API key format before making requests"
          },
          {
            "error": "403 - Access denied",
            "solution": "Verify user permissions for this resource",
            "prevention": "Check user role and permissions before accessing resources"
          },
          {
            "error": "429 - Rate limited",
            "solution": "Implement exponential backoff and reduce request frequency",
            "prevention": "Monitor request rate and implement proper throttling"
          }
        ],
        "debugging": [
          "Log full request and response for error analysis",
          "Check API key permissions and expiration",
          "Verify request format matches API documentation",
          "Test with minimal required parameters first"
        ]
      },
      "workflow": {
        "prerequisites": [
          "Valid authentication",
          "Proper permissions"
        ],
        "followUpActions": [
          "Process response data",
          "Handle any errors"
        ],
        "relatedEndpoints": [],
        "typicalWorkflow": [
          "Call POST /public/api/v1/campaign/change_group endpoint",
          "Process response"
        ]
      },
      "testing": {
        "unitTests": [
          "Test with valid parameters",
          "Test with missing required parameters",
          "Test with invalid parameter values",
          "Test authentication failure scenarios"
        ],
        "integrationTests": [
          "Test full workflow with real data",
          "Test error handling and recovery",
          "Test rate limiting behavior",
          "Test response data validation"
        ],
        "testData": {
          "validParams": {},
          "invalidParams": []
        },
        "assertions": [
          "Response status code is 200 for valid requests",
          "Response contains expected data structure",
          "Custom metrics are present when applicable",
          "Error responses contain proper error messages"
        ]
      }
    },
    "GET /public/api/v1/campaign/traffic_source/list": {
      "metadata": {
        "method": "GET",
        "path": "/public/api/v1/campaign/traffic_source/list",
        "category": "campaign",
        "priority": 48,
        "importance": "MEDIUM",
        "hasCustomMetrics": false,
        "aiUsage": "Анализ связей источников и кампаний"
      },
      "description": {
        "summary": "Список трафиксорсов с кампаниями",
        "detailed": "Detailed description for GET /public/api/v1/campaign/traffic_source/list - Список трафиксорсов с кампаниями",
        "businessContext": "Campaign management - core functionality for setting up, configuring, and managing traffic tracking campaigns",
        "whenToUse": [
          "Standard campaign operations"
        ]
      },
      "authentication": {
        "type": "Bearer Token",
        "header": "Authorization: Bearer {binomPublic}",
        "required": true,
        "note": "Use environment variable binomPublic"
      },
      "parameters": {
        "path": [],
        "query": [],
        "header": [
          {
            "name": "Authorization",
            "type": "string",
            "required": true,
            "description": "Bearer token authentication",
            "example": "Bearer your_api_key_here"
          },
          {
            "name": "Content-Type",
            "type": "string",
            "required": false,
            "description": "Content type for request body",
            "example": "application/json"
          }
        ]
      },
      "requestBody": null,
      "responses": {
        "200": {
          "description": "Success",
          "contentType": "application/json",
          "schema": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "example": {
            "message": "Success"
          }
        },
        "400": {
          "description": "Bad Request - Invalid parameters or missing required fields",
          "contentType": "application/json",
          "schema": {
            "type": "object",
            "properties": {
              "error": {
                "type": "string"
              },
              "message": {
                "type": "string"
              },
              "details": {
                "type": "object"
              }
            }
          },
          "example": {
            "error": "Validation failed",
            "message": "Field 'datePreset' is required for stats endpoints",
            "details": {
              "field": "datePreset",
              "code": "required"
            }
          }
        },
        "401": {
          "description": "Unauthorized - Invalid or missing API key",
          "contentType": "application/json",
          "example": {
            "error": "Unauthorized",
            "message": "Invalid API key or missing Authorization header"
          }
        },
        "403": {
          "description": "Forbidden - Insufficient permissions",
          "contentType": "application/json",
          "example": {
            "error": "Access denied",
            "message": "Insufficient permissions to access this resource"
          }
        },
        "404": {
          "description": "Not Found - Resource does not exist",
          "contentType": "application/json",
          "example": {
            "error": "Not found",
            "message": "Campaign with ID 999 not found"
          }
        },
        "429": {
          "description": "Too Many Requests - Rate limit exceeded",
          "contentType": "application/json",
          "example": {
            "error": "Rate limit exceeded",
            "message": "Too many requests. Please wait before making another request.",
            "retryAfter": 60
          }
        },
        "500": {
          "description": "Internal Server Error",
          "contentType": "application/json",
          "example": {
            "error": "Internal server error",
            "message": "An unexpected error occurred. Please try again later."
          }
        }
      },
      "examples": {
        "python": "import requests\nimport os\nfrom datetime import datetime\n\n# Configuration\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\ndef handle_response(response):\n    \"\"\"Handle API response with proper error handling\"\"\"\n    if response.status_code == 200:\n        return response.json()\n    elif response.status_code == 400:\n        print(f\"Bad Request: {response.json()}\")\n    elif response.status_code == 401:\n        print(\"Unauthorized: Check your API key\")\n    elif response.status_code == 403:\n        print(\"Forbidden: Insufficient permissions\")\n    elif response.status_code == 404:\n        print(\"Not Found: Resource doesn't exist\")\n    elif response.status_code == 429:\n        print(\"Rate Limited: Wait before retrying\")\n    else:\n        print(f\"Error {response.status_code}: {response.text}\")\n    return None\n\n# GET /public/api/v1/campaign/traffic_source/list\ndef call_endpoint():\n    \"\"\"Call the GET /public/api/v1/campaign/traffic_source/list endpoint\"\"\"\n    \n    params = {'datePreset': 'last_7_days', 'timezone': 'UTC'}\n    \n    response = requests.get(\n        f\"{BASE_URL}/public/api/v1/campaign/traffic_source/list\",\n        headers=headers,\n        params=params\n    )\n    \n    return handle_response(response)\n\n# Usage\nif __name__ == \"__main__\":\n    result = call_endpoint()\n    print(result)\n",
        "curl": "# GET /public/api/v1/campaign/traffic_source/list\ncurl -X GET \\\n  \"https://pierdun.com/public/api/v1/public/api/v1/campaign/traffic_source/list\" \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Accept: application/json\"",
        "javascript": "// GET /public/api/v1/campaign/traffic_source/list\nconst BINOM_API_KEY = process.env.BINOM_PUBLIC;\nconst BASE_URL = 'https://pierdun.com/public/api/v1';\n\nasync function callBinomAPI() {\n    const config = {\n        method: 'GET',\n        headers: {\n            'Authorization': `Bearer ${BINOM_API_KEY}`,\n            'Accept': 'application/json'\n        }\n    };\n    \n    try {\n        const response = await fetch(`${BASE_URL}/public/api/v1/campaign/traffic_source/list`, config);\n        \n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        \n        const data = await response.json();\n        console.log('Success:', data);\n        return data;\n    } catch (error) {\n        console.error('Error:', error);\n        throw error;\n    }\n}\n\n// Usage\ncallBinomAPI()\n    .then(data => console.log(data))\n    .catch(error => console.error('Failed:', error));"
      },
      "customMetrics": {
        "available": false,
        "note": "This endpoint does not return custom metrics"
      },
      "aiInstructions": {
        "priority": "MEDIUM",
        "complexity": "LOW",
        "keyPoints": [
          "This is a MEDIUM priority endpoint",
          "Category: campaign operations",
          "Custom metrics: Not available",
          "Always use Bearer token authentication",
          "Handle rate limiting with exponential backoff"
        ],
        "beforeUsing": [
          "Verify API key is set in environment variables",
          "Check if datePreset and timezone are required",
          "Validate all required parameters are provided",
          "Ensure proper error handling is implemented"
        ],
        "afterUsing": [
          "Validate response structure matches expected schema",
          "Check for custom metrics if endpoint supports them",
          "Log important metrics for monitoring",
          "Handle pagination if response is truncated"
        ],
        "commonMistakes": [
          "Forgetting datePreset parameter for stats endpoints",
          "Using wrong Bearer token format",
          "Not handling 429 rate limit responses",
          "Ignoring custom metrics in optimization decisions",
          "Not validating response data before processing"
        ],
        "optimization": [
          "Cache responses when appropriate",
          "Use batch operations when available",
          "Implement retry logic with exponential backoff",
          "Monitor API usage to avoid rate limits",
          "Use appropriate date ranges to minimize data transfer"
        ],
        "customMetricsGuidance": {
          "applicable": false,
          "note": "This endpoint does not return custom metrics"
        }
      },
      "errorHandling": {
        "retryStrategy": {
          "429": {
            "action": "Exponential backoff retry",
            "initialDelay": 1,
            "maxRetries": 5,
            "backoffMultiplier": 2
          },
          "500": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 5
          },
          "502": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 10
          }
        },
        "noRetryErrors": [
          400,
          401,
          403,
          404
        ],
        "commonIssues": [
          {
            "error": "400 - Missing datePreset",
            "solution": "Add datePreset and timezone parameters to GET requests",
            "prevention": "Always validate required parameters before sending request"
          },
          {
            "error": "401 - Invalid API key",
            "solution": "Check Bearer token format and API key validity",
            "prevention": "Validate API key format before making requests"
          },
          {
            "error": "403 - Access denied",
            "solution": "Verify user permissions for this resource",
            "prevention": "Check user role and permissions before accessing resources"
          },
          {
            "error": "429 - Rate limited",
            "solution": "Implement exponential backoff and reduce request frequency",
            "prevention": "Monitor request rate and implement proper throttling"
          }
        ],
        "debugging": [
          "Log full request and response for error analysis",
          "Check API key permissions and expiration",
          "Verify request format matches API documentation",
          "Test with minimal required parameters first"
        ]
      },
      "workflow": {
        "prerequisites": [
          "Valid authentication",
          "Proper permissions"
        ],
        "followUpActions": [
          "Process response data",
          "Handle any errors"
        ],
        "relatedEndpoints": [],
        "typicalWorkflow": [
          "Call GET /public/api/v1/campaign/traffic_source/list endpoint",
          "Process response"
        ]
      },
      "testing": {
        "unitTests": [
          "Test with valid parameters",
          "Test with missing required parameters",
          "Test with invalid parameter values",
          "Test authentication failure scenarios"
        ],
        "integrationTests": [
          "Test full workflow with real data",
          "Test error handling and recovery",
          "Test rate limiting behavior",
          "Test response data validation"
        ],
        "testData": {
          "validParams": {},
          "invalidParams": []
        },
        "assertions": [
          "Response status code is 200 for valid requests",
          "Response contains expected data structure",
          "Custom metrics are present when applicable",
          "Error responses contain proper error messages"
        ]
      }
    },
    "GET /public/api/v1/campaign/by_rotation/{rotationId}/list": {
      "metadata": {
        "method": "GET",
        "path": "/public/api/v1/campaign/by_rotation/{rotationId}/list",
        "category": "campaign",
        "priority": 49,
        "importance": "MEDIUM",
        "hasCustomMetrics": false,
        "aiUsage": "Анализ кампаний в ротации"
      },
      "description": {
        "summary": "Кампании по ID ротации",
        "detailed": "Detailed description for GET /public/api/v1/campaign/by_rotation/{rotationId}/list - Кампании по ID ротации",
        "businessContext": "Campaign management - core functionality for setting up, configuring, and managing traffic tracking campaigns",
        "whenToUse": [
          "Standard campaign operations"
        ]
      },
      "authentication": {
        "type": "Bearer Token",
        "header": "Authorization: Bearer {binomPublic}",
        "required": true,
        "note": "Use environment variable binomPublic"
      },
      "parameters": {
        "path": [],
        "query": [],
        "header": [
          {
            "name": "Authorization",
            "type": "string",
            "required": true,
            "description": "Bearer token authentication",
            "example": "Bearer your_api_key_here"
          },
          {
            "name": "Content-Type",
            "type": "string",
            "required": false,
            "description": "Content type for request body",
            "example": "application/json"
          }
        ]
      },
      "requestBody": null,
      "responses": {
        "200": {
          "description": "Success",
          "contentType": "application/json",
          "schema": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "example": {
            "message": "Success"
          }
        },
        "400": {
          "description": "Bad Request - Invalid parameters or missing required fields",
          "contentType": "application/json",
          "schema": {
            "type": "object",
            "properties": {
              "error": {
                "type": "string"
              },
              "message": {
                "type": "string"
              },
              "details": {
                "type": "object"
              }
            }
          },
          "example": {
            "error": "Validation failed",
            "message": "Field 'datePreset' is required for stats endpoints",
            "details": {
              "field": "datePreset",
              "code": "required"
            }
          }
        },
        "401": {
          "description": "Unauthorized - Invalid or missing API key",
          "contentType": "application/json",
          "example": {
            "error": "Unauthorized",
            "message": "Invalid API key or missing Authorization header"
          }
        },
        "403": {
          "description": "Forbidden - Insufficient permissions",
          "contentType": "application/json",
          "example": {
            "error": "Access denied",
            "message": "Insufficient permissions to access this resource"
          }
        },
        "404": {
          "description": "Not Found - Resource does not exist",
          "contentType": "application/json",
          "example": {
            "error": "Not found",
            "message": "Campaign with ID 999 not found"
          }
        },
        "429": {
          "description": "Too Many Requests - Rate limit exceeded",
          "contentType": "application/json",
          "example": {
            "error": "Rate limit exceeded",
            "message": "Too many requests. Please wait before making another request.",
            "retryAfter": 60
          }
        },
        "500": {
          "description": "Internal Server Error",
          "contentType": "application/json",
          "example": {
            "error": "Internal server error",
            "message": "An unexpected error occurred. Please try again later."
          }
        }
      },
      "examples": {
        "python": "import requests\nimport os\nfrom datetime import datetime\n\n# Configuration\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\ndef handle_response(response):\n    \"\"\"Handle API response with proper error handling\"\"\"\n    if response.status_code == 200:\n        return response.json()\n    elif response.status_code == 400:\n        print(f\"Bad Request: {response.json()}\")\n    elif response.status_code == 401:\n        print(\"Unauthorized: Check your API key\")\n    elif response.status_code == 403:\n        print(\"Forbidden: Insufficient permissions\")\n    elif response.status_code == 404:\n        print(\"Not Found: Resource doesn't exist\")\n    elif response.status_code == 429:\n        print(\"Rate Limited: Wait before retrying\")\n    else:\n        print(f\"Error {response.status_code}: {response.text}\")\n    return None\n\n# GET /public/api/v1/campaign/by_rotation/{rotationId}/list\ndef call_endpoint():\n    \"\"\"Call the GET /public/api/v1/campaign/by_rotation/{rotationId}/list endpoint\"\"\"\n    \n    params = {'datePreset': 'last_7_days', 'timezone': 'UTC'}\n    \n    response = requests.get(\n        f\"{BASE_URL}/public/api/v1/campaign/by_rotation/{rotationId}/list\",\n        headers=headers,\n        params=params\n    )\n    \n    return handle_response(response)\n\n# Usage\nif __name__ == \"__main__\":\n    result = call_endpoint()\n    print(result)\n",
        "curl": "# GET /public/api/v1/campaign/by_rotation/{rotationId}/list\ncurl -X GET \\\n  \"https://pierdun.com/public/api/v1/public/api/v1/campaign/by_rotation/{rotationId}/list\" \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Accept: application/json\"",
        "javascript": "// GET /public/api/v1/campaign/by_rotation/{rotationId}/list\nconst BINOM_API_KEY = process.env.BINOM_PUBLIC;\nconst BASE_URL = 'https://pierdun.com/public/api/v1';\n\nasync function callBinomAPI() {\n    const config = {\n        method: 'GET',\n        headers: {\n            'Authorization': `Bearer ${BINOM_API_KEY}`,\n            'Accept': 'application/json'\n        }\n    };\n    \n    try {\n        const response = await fetch(`${BASE_URL}/public/api/v1/campaign/by_rotation/{rotationId}/list`, config);\n        \n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        \n        const data = await response.json();\n        console.log('Success:', data);\n        return data;\n    } catch (error) {\n        console.error('Error:', error);\n        throw error;\n    }\n}\n\n// Usage\ncallBinomAPI()\n    .then(data => console.log(data))\n    .catch(error => console.error('Failed:', error));"
      },
      "customMetrics": {
        "available": false,
        "note": "This endpoint does not return custom metrics"
      },
      "aiInstructions": {
        "priority": "MEDIUM",
        "complexity": "LOW",
        "keyPoints": [
          "This is a MEDIUM priority endpoint",
          "Category: campaign operations",
          "Custom metrics: Not available",
          "Always use Bearer token authentication",
          "Handle rate limiting with exponential backoff"
        ],
        "beforeUsing": [
          "Verify API key is set in environment variables",
          "Check if datePreset and timezone are required",
          "Validate all required parameters are provided",
          "Ensure proper error handling is implemented"
        ],
        "afterUsing": [
          "Validate response structure matches expected schema",
          "Check for custom metrics if endpoint supports them",
          "Log important metrics for monitoring",
          "Handle pagination if response is truncated"
        ],
        "commonMistakes": [
          "Forgetting datePreset parameter for stats endpoints",
          "Using wrong Bearer token format",
          "Not handling 429 rate limit responses",
          "Ignoring custom metrics in optimization decisions",
          "Not validating response data before processing"
        ],
        "optimization": [
          "Cache responses when appropriate",
          "Use batch operations when available",
          "Implement retry logic with exponential backoff",
          "Monitor API usage to avoid rate limits",
          "Use appropriate date ranges to minimize data transfer"
        ],
        "customMetricsGuidance": {
          "applicable": false,
          "note": "This endpoint does not return custom metrics"
        }
      },
      "errorHandling": {
        "retryStrategy": {
          "429": {
            "action": "Exponential backoff retry",
            "initialDelay": 1,
            "maxRetries": 5,
            "backoffMultiplier": 2
          },
          "500": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 5
          },
          "502": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 10
          }
        },
        "noRetryErrors": [
          400,
          401,
          403,
          404
        ],
        "commonIssues": [
          {
            "error": "400 - Missing datePreset",
            "solution": "Add datePreset and timezone parameters to GET requests",
            "prevention": "Always validate required parameters before sending request"
          },
          {
            "error": "401 - Invalid API key",
            "solution": "Check Bearer token format and API key validity",
            "prevention": "Validate API key format before making requests"
          },
          {
            "error": "403 - Access denied",
            "solution": "Verify user permissions for this resource",
            "prevention": "Check user role and permissions before accessing resources"
          },
          {
            "error": "429 - Rate limited",
            "solution": "Implement exponential backoff and reduce request frequency",
            "prevention": "Monitor request rate and implement proper throttling"
          }
        ],
        "debugging": [
          "Log full request and response for error analysis",
          "Check API key permissions and expiration",
          "Verify request format matches API documentation",
          "Test with minimal required parameters first"
        ]
      },
      "workflow": {
        "prerequisites": [
          "Valid authentication",
          "Proper permissions"
        ],
        "followUpActions": [
          "Process response data",
          "Handle any errors"
        ],
        "relatedEndpoints": [],
        "typicalWorkflow": [
          "Call GET /public/api/v1/campaign/by_rotation/{rotationId}/list endpoint",
          "Process response"
        ]
      },
      "testing": {
        "unitTests": [
          "Test with valid parameters",
          "Test with missing required parameters",
          "Test with invalid parameter values",
          "Test authentication failure scenarios"
        ],
        "integrationTests": [
          "Test full workflow with real data",
          "Test error handling and recovery",
          "Test rate limiting behavior",
          "Test response data validation"
        ],
        "testData": {
          "validParams": {},
          "invalidParams": []
        },
        "assertions": [
          "Response status code is 200 for valid requests",
          "Response contains expected data structure",
          "Custom metrics are present when applicable",
          "Error responses contain proper error messages"
        ]
      }
    },
    "GET /public/api/v1/affiliate_network/preset/catalog": {
      "metadata": {
        "method": "GET",
        "path": "/public/api/v1/affiliate_network/preset/catalog",
        "category": "affiliate_network",
        "priority": 50,
        "importance": "MEDIUM",
        "hasCustomMetrics": false,
        "aiUsage": "Быстрая настройка популярных сетей"
      },
      "description": {
        "summary": "Каталог пресетов партнерских сетей",
        "detailed": "Detailed description for GET /public/api/v1/affiliate_network/preset/catalog - Каталог пресетов партнерских сетей",
        "businessContext": "Partner network management - handles postback URLs, payout configurations, and network integrations",
        "whenToUse": [
          "Standard affiliate_network operations"
        ]
      },
      "authentication": {
        "type": "Bearer Token",
        "header": "Authorization: Bearer {binomPublic}",
        "required": true,
        "note": "Use environment variable binomPublic"
      },
      "parameters": {
        "path": [],
        "query": [],
        "header": [
          {
            "name": "Authorization",
            "type": "string",
            "required": true,
            "description": "Bearer token authentication",
            "example": "Bearer your_api_key_here"
          },
          {
            "name": "Content-Type",
            "type": "string",
            "required": false,
            "description": "Content type for request body",
            "example": "application/json"
          }
        ]
      },
      "requestBody": null,
      "responses": {
        "200": {
          "description": "Success",
          "contentType": "application/json",
          "schema": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "example": {
            "message": "Success"
          }
        },
        "400": {
          "description": "Bad Request - Invalid parameters or missing required fields",
          "contentType": "application/json",
          "schema": {
            "type": "object",
            "properties": {
              "error": {
                "type": "string"
              },
              "message": {
                "type": "string"
              },
              "details": {
                "type": "object"
              }
            }
          },
          "example": {
            "error": "Validation failed",
            "message": "Field 'datePreset' is required for stats endpoints",
            "details": {
              "field": "datePreset",
              "code": "required"
            }
          }
        },
        "401": {
          "description": "Unauthorized - Invalid or missing API key",
          "contentType": "application/json",
          "example": {
            "error": "Unauthorized",
            "message": "Invalid API key or missing Authorization header"
          }
        },
        "403": {
          "description": "Forbidden - Insufficient permissions",
          "contentType": "application/json",
          "example": {
            "error": "Access denied",
            "message": "Insufficient permissions to access this resource"
          }
        },
        "404": {
          "description": "Not Found - Resource does not exist",
          "contentType": "application/json",
          "example": {
            "error": "Not found",
            "message": "Campaign with ID 999 not found"
          }
        },
        "429": {
          "description": "Too Many Requests - Rate limit exceeded",
          "contentType": "application/json",
          "example": {
            "error": "Rate limit exceeded",
            "message": "Too many requests. Please wait before making another request.",
            "retryAfter": 60
          }
        },
        "500": {
          "description": "Internal Server Error",
          "contentType": "application/json",
          "example": {
            "error": "Internal server error",
            "message": "An unexpected error occurred. Please try again later."
          }
        }
      },
      "examples": {
        "python": "import requests\nimport os\nfrom datetime import datetime\n\n# Configuration\nAPI_KEY = os.getenv('binomPublic')\nBASE_URL = \"https://pierdun.com/public/api/v1\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\",\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n}\n\ndef handle_response(response):\n    \"\"\"Handle API response with proper error handling\"\"\"\n    if response.status_code == 200:\n        return response.json()\n    elif response.status_code == 400:\n        print(f\"Bad Request: {response.json()}\")\n    elif response.status_code == 401:\n        print(\"Unauthorized: Check your API key\")\n    elif response.status_code == 403:\n        print(\"Forbidden: Insufficient permissions\")\n    elif response.status_code == 404:\n        print(\"Not Found: Resource doesn't exist\")\n    elif response.status_code == 429:\n        print(\"Rate Limited: Wait before retrying\")\n    else:\n        print(f\"Error {response.status_code}: {response.text}\")\n    return None\n\n# GET /public/api/v1/affiliate_network/preset/catalog\ndef call_endpoint():\n    \"\"\"Call the GET /public/api/v1/affiliate_network/preset/catalog endpoint\"\"\"\n    \n    params = {'datePreset': 'last_7_days', 'timezone': 'UTC'}\n    \n    response = requests.get(\n        f\"{BASE_URL}/public/api/v1/affiliate_network/preset/catalog\",\n        headers=headers,\n        params=params\n    )\n    \n    return handle_response(response)\n\n# Usage\nif __name__ == \"__main__\":\n    result = call_endpoint()\n    print(result)\n",
        "curl": "# GET /public/api/v1/affiliate_network/preset/catalog\ncurl -X GET \\\n  \"https://pierdun.com/public/api/v1/public/api/v1/affiliate_network/preset/catalog\" \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Accept: application/json\"",
        "javascript": "// GET /public/api/v1/affiliate_network/preset/catalog\nconst BINOM_API_KEY = process.env.BINOM_PUBLIC;\nconst BASE_URL = 'https://pierdun.com/public/api/v1';\n\nasync function callBinomAPI() {\n    const config = {\n        method: 'GET',\n        headers: {\n            'Authorization': `Bearer ${BINOM_API_KEY}`,\n            'Accept': 'application/json'\n        }\n    };\n    \n    try {\n        const response = await fetch(`${BASE_URL}/public/api/v1/affiliate_network/preset/catalog`, config);\n        \n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        \n        const data = await response.json();\n        console.log('Success:', data);\n        return data;\n    } catch (error) {\n        console.error('Error:', error);\n        throw error;\n    }\n}\n\n// Usage\ncallBinomAPI()\n    .then(data => console.log(data))\n    .catch(error => console.error('Failed:', error));"
      },
      "customMetrics": {
        "available": false,
        "note": "This endpoint does not return custom metrics"
      },
      "aiInstructions": {
        "priority": "MEDIUM",
        "complexity": "LOW",
        "keyPoints": [
          "This is a MEDIUM priority endpoint",
          "Category: affiliate_network operations",
          "Custom metrics: Not available",
          "Always use Bearer token authentication",
          "Handle rate limiting with exponential backoff"
        ],
        "beforeUsing": [
          "Verify API key is set in environment variables",
          "Check if datePreset and timezone are required",
          "Validate all required parameters are provided",
          "Ensure proper error handling is implemented"
        ],
        "afterUsing": [
          "Validate response structure matches expected schema",
          "Check for custom metrics if endpoint supports them",
          "Log important metrics for monitoring",
          "Handle pagination if response is truncated"
        ],
        "commonMistakes": [
          "Forgetting datePreset parameter for stats endpoints",
          "Using wrong Bearer token format",
          "Not handling 429 rate limit responses",
          "Ignoring custom metrics in optimization decisions",
          "Not validating response data before processing"
        ],
        "optimization": [
          "Cache responses when appropriate",
          "Use batch operations when available",
          "Implement retry logic with exponential backoff",
          "Monitor API usage to avoid rate limits",
          "Use appropriate date ranges to minimize data transfer"
        ],
        "customMetricsGuidance": {
          "applicable": false,
          "note": "This endpoint does not return custom metrics"
        }
      },
      "errorHandling": {
        "retryStrategy": {
          "429": {
            "action": "Exponential backoff retry",
            "initialDelay": 1,
            "maxRetries": 5,
            "backoffMultiplier": 2
          },
          "500": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 5
          },
          "502": {
            "action": "Retry with delay",
            "maxRetries": 3,
            "delay": 10
          }
        },
        "noRetryErrors": [
          400,
          401,
          403,
          404
        ],
        "commonIssues": [
          {
            "error": "400 - Missing datePreset",
            "solution": "Add datePreset and timezone parameters to GET requests",
            "prevention": "Always validate required parameters before sending request"
          },
          {
            "error": "401 - Invalid API key",
            "solution": "Check Bearer token format and API key validity",
            "prevention": "Validate API key format before making requests"
          },
          {
            "error": "403 - Access denied",
            "solution": "Verify user permissions for this resource",
            "prevention": "Check user role and permissions before accessing resources"
          },
          {
            "error": "429 - Rate limited",
            "solution": "Implement exponential backoff and reduce request frequency",
            "prevention": "Monitor request rate and implement proper throttling"
          }
        ],
        "debugging": [
          "Log full request and response for error analysis",
          "Check API key permissions and expiration",
          "Verify request format matches API documentation",
          "Test with minimal required parameters first"
        ]
      },
      "workflow": {
        "prerequisites": [
          "Valid authentication",
          "Proper permissions"
        ],
        "followUpActions": [
          "Process response data",
          "Handle any errors"
        ],
        "relatedEndpoints": [],
        "typicalWorkflow": [
          "Call GET /public/api/v1/affiliate_network/preset/catalog endpoint",
          "Process response"
        ]
      },
      "testing": {
        "unitTests": [
          "Test with valid parameters",
          "Test with missing required parameters",
          "Test with invalid parameter values",
          "Test authentication failure scenarios"
        ],
        "integrationTests": [
          "Test full workflow with real data",
          "Test error handling and recovery",
          "Test rate limiting behavior",
          "Test response data validation"
        ],
        "testData": {
          "validParams": {},
          "invalidParams": []
        },
        "assertions": [
          "Response status code is 200 for valid requests",
          "Response contains expected data structure",
          "Custom metrics are present when applicable",
          "Error responses contain proper error messages"
        ]
      }
    }
  },
  "customMetricsGuide": {
    "overview": {
      "description": "Custom metrics in Binom provide advanced performance insights beyond standard clicks and conversions",
      "importance": "Critical for subscription-based and trial offer optimization",
      "configuration": "Must be configured in campaign postback settings and Binom interface"
    },
    "availableMetrics": {
      "eCPT": {
        "name": "Effective Cost Per Trial",
        "formula": "total_cost / trials",
        "purpose": "Measure cost efficiency for acquiring trial subscriptions",
        "optimization": "Lower eCPT indicates better traffic quality and landing page performance",
        "benchmarks": {
          "excellent": "< $10",
          "good": "$10-25",
          "acceptable": "$25-50",
          "poor": "> $50"
        }
      },
      "eCPB": {
        "name": "Effective Cost Per Buyout",
        "formula": "total_cost / buyouts",
        "purpose": "Measure cost efficiency for acquiring full purchases",
        "optimization": "Must be lower than payout for profitability",
        "benchmarks": {
          "profitable": "< 70% of payout",
          "breakeven": "= payout",
          "unprofitable": "> payout"
        }
      },
      "trials": {
        "name": "Trial Conversions",
        "purpose": "Count of trial subscriptions acquired",
        "optimization": "Higher trials indicate good initial conversion",
        "analysis": "Compare trial rates across traffic sources and landing pages"
      },
      "buyouts": {
        "name": "Buyout Conversions",
        "purpose": "Count of full purchases from trials",
        "optimization": "Primary revenue metric for subscription offers",
        "analysis": "Monitor trial-to-buyout conversion rate"
      }
    },
    "configuration": {
      "webInterface": {
        "location": "Settings -> Columns",
        "steps": [
          "Navigate to Settings -> Columns",
          "Enable desired custom metrics",
          "Configure postback parameters",
          "Test with sample conversions"
        ]
      },
      "apiAccess": {
        "endpoints": [
          "/public/api/v1/stats/campaign",
          "/public/api/v1/stats/landing",
          "/public/api/v1/stats/offer",
          "/public/api/v1/report/{page}"
        ],
        "responseLocation": "Custom metrics appear as additional fields in response objects"
      }
    },
    "aiGuidelines": {
      "criticalRule": "ALWAYS ask operator for clarification when custom metrics are unclear",
      "scenarios": [
        {
          "situation": "Custom metric is null despite having conversions",
          "action": "Ask: 'I see conversions but [metric] is null. Is this metric configured correctly?'"
        },
        {
          "situation": "Metric value seems unusually high or low",
          "action": "Ask: 'The [metric] value of $X seems [high/low]. Is this expected for this campaign?'"
        },
        {
          "situation": "Unknown custom metric appears",
          "action": "Ask: 'I see a custom metric called [name]. What does this represent in your setup?'"
        }
      ],
      "neverAssume": [
        "Don't assume metric meanings without confirmation",
        "Don't ignore null values without investigating",
        "Don't make optimization decisions on unclear data"
      ]
    },
    "troubleshooting": {
      "commonIssues": [
        {
          "issue": "Custom metrics showing as null",
          "causes": [
            "Postback not configured",
            "Metric not enabled in settings",
            "No conversions yet"
          ],
          "solutions": [
            "Check postback configuration",
            "Enable metrics in Settings->Columns",
            "Wait for conversions"
          ]
        },
        {
          "issue": "Metrics seem incorrect",
          "causes": [
            "Wrong postback parameters",
            "Conversion tracking issues",
            "Data sync delays"
          ],
          "solutions": [
            "Verify postback URLs",
            "Test conversion tracking",
            "Allow time for data sync"
          ]
        }
      ]
    }
  },
  "aiInstructions": {
    "overview": {
      "purpose": "Guide AI agents in effectively using Binom API",
      "scope": "Covers authentication, error handling, custom metrics, and optimization",
      "audience": "AI agents with no prior Binom experience"
    },
    "authentication": {
      "method": "Bearer Token",
      "header": "Authorization: Bearer {binomPublic}",
      "environment": "Use binomPublic environment variable",
      "validation": "Test authentication with simple GET request first"
    },
    "requestPatterns": {
      "stats": {
        "required": [
          "datePreset",
          "timezone"
        ],
        "optional": [
          "limit",
          "offset",
          "groupBy",
          "sortColumn"
        ],
        "example": "?datePreset=last_7_days&timezone=UTC&limit=100"
      },
      "crud": {
        "create": "POST with JSON body",
        "read": "GET with path parameters",
        "update": "PUT with JSON body",
        "delete": "DELETE with path parameters"
      }
    },
    "errorHandling": {
      "retryableErrors": [
        429,
        500,
        502,
        503
      ],
      "nonRetryableErrors": [
        400,
        401,
        403,
        404
      ],
      "retryStrategy": "Exponential backoff with max 5 retries",
      "logging": "Always log full request/response for debugging"
    },
    "customMetrics": {
      "importance": "Critical for campaign optimization",
      "clarificationRule": "ALWAYS ask operator when metrics are unclear",
      "commonMetrics": [
        "eCPT",
        "eCPB",
        "trials",
        "buyouts"
      ],
      "validation": "Verify metric values make business sense"
    },
    "optimization": {
      "caching": "Cache responses for repeated requests",
      "batching": "Use batch operations when available",
      "rateLimit": "Monitor request frequency to avoid 429 errors",
      "dataValidation": "Always validate response data structure"
    },
    "bestPractices": [
      "Test with minimal parameters first",
      "Implement proper error handling and retries",
      "Log all API interactions for debugging",
      "Validate custom metrics with operator",
      "Use appropriate date ranges to minimize data transfer",
      "Cache frequently accessed data",
      "Monitor API usage to avoid rate limits"
    ]
  },
  "troubleshooting": {
    "authentication": {
      "401_unauthorized": {
        "causes": [
          "Invalid API key",
          "Missing Authorization header",
          "Wrong token format"
        ],
        "solutions": [
          "Verify API key in environment",
          "Check Bearer token format",
          "Test with curl"
        ],
        "prevention": "Validate API key before making requests"
      },
      "403_forbidden": {
        "causes": [
          "Insufficient permissions",
          "API key expired",
          "Resource access denied"
        ],
        "solutions": [
          "Check user permissions",
          "Renew API key",
          "Verify resource ownership"
        ],
        "prevention": "Regularly audit API key permissions"
      }
    },
    "parameters": {
      "400_bad_request": {
        "causes": [
          "Missing required parameters",
          "Invalid parameter values",
          "Wrong data types"
        ],
        "solutions": [
          "Check required parameters",
          "Validate parameter values",
          "Verify data types"
        ],
        "prevention": "Use parameter validation before requests"
      },
      "missing_datePreset": {
        "error": "datePreset parameter is required for stats endpoints",
        "solution": "Add datePreset and timezone to all stats requests",
        "example": "?datePreset=last_7_days&timezone=UTC"
      }
    },
    "rateLimit": {
      "429_too_many_requests": {
        "causes": [
          "Exceeded API rate limit",
          "Too many concurrent requests"
        ],
        "solutions": [
          "Implement exponential backoff",
          "Reduce request frequency",
          "Use batch operations"
        ],
        "prevention": "Monitor request rate and implement throttling"
      }
    },
    "customMetrics": {
      "null_values": {
        "causes": [
          "Metrics not configured",
          "No conversions yet",
          "Postback issues"
        ],
        "solutions": [
          "Configure metrics in Settings->Columns",
          "Wait for conversions",
          "Check postback URLs"
        ],
        "prevention": "Test metric configuration with sample data"
      },
      "unexpected_values": {
        "causes": [
          "Wrong postback parameters",
          "Data sync delays",
          "Calculation errors"
        ],
        "solutions": [
          "Verify postback configuration",
          "Allow sync time",
          "Ask operator for clarification"
        ],
        "prevention": "Validate metric values against business logic"
      }
    },
    "debugging": {
      "steps": [
        "1. Check API key and authentication",
        "2. Validate all required parameters",
        "3. Test with minimal request first",
        "4. Check response status and headers",
        "5. Log full request/response for analysis",
        "6. Verify data format and structure"
      ],
      "tools": [
        "curl for manual testing",
        "Postman for API exploration",
        "Browser network tab for debugging",
        "API logs for error analysis"
      ]
    }
  }
}