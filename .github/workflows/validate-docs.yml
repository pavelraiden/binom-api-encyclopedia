name: Validate Documentation

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run weekly to check for API changes
    - cron: '0 0 * * 0'

jobs:
  validate-structure:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests jsonschema markdown
    
    - name: Validate JSON files
      run: |
        python -c "
        import json
        import os
        
        json_files = ['categorized_endpoints.json', 'summary_statistics.json']
        
        for file in json_files:
            if os.path.exists(file):
                try:
                    with open(file, 'r') as f:
                        json.load(f)
                    print(f'✅ {file} is valid JSON')
                except json.JSONDecodeError as e:
                    print(f'❌ {file} is invalid JSON: {e}')
                    exit(1)
            else:
                print(f'⚠️ {file} not found')
        "
    
    - name: Validate endpoint count
      run: |
        python -c "
        import json
        
        with open('summary_statistics.json', 'r') as f:
            stats = json.load(f)
        
        total = stats.get('total_endpoints', 0)
        
        if total < 150:
            print(f'❌ Too few endpoints: {total} (expected > 150)')
            exit(1)
        else:
            print(f'✅ Endpoint count OK: {total}')
        "
    
    - name: Check documentation structure
      run: |
        python -c "
        import os
        
        required_dirs = [
            'docs/endpoints',
            'docs/schemas', 
            'docs/examples',
            'code-samples/python',
            'ai-guides'
        ]
        
        for dir_path in required_dirs:
            if os.path.exists(dir_path):
                print(f'✅ {dir_path} exists')
            else:
                print(f'❌ {dir_path} missing')
                exit(1)
        "
    
    - name: Validate README files
      run: |
        find docs/endpoints -name "README.md" | while read file; do
          if [ -s "$file" ]; then
            echo "✅ $file exists and is not empty"
          else
            echo "❌ $file is missing or empty"
            exit 1
          fi
        done

  validate-links:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Check internal links
      run: |
        # Simple link validation for markdown files
        find . -name "*.md" -exec grep -l "\[.*\](" {} \; | while read file; do
          echo "Checking links in $file"
          # Extract markdown links and check if referenced files exist
          grep -o '\[.*\]([^)]*\.md)' "$file" | sed 's/.*(\([^)]*\)).*/\1/' | while read link; do
            if [[ "$link" == http* ]]; then
              continue  # Skip external links
            fi
            
            # Convert relative path to absolute
            dir=$(dirname "$file")
            full_path="$dir/$link"
            
            if [ -f "$full_path" ]; then
              echo "✅ Link OK: $link"
            else
              echo "❌ Broken link: $link in $file"
            fi
          done
        done

  test-code-samples:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        pip install requests
    
    - name: Validate Python code samples
      run: |
        # Check if Python code samples are syntactically correct
        find code-samples/python -name "*.py" | while read file; do
          echo "Validating $file"
          python -m py_compile "$file"
          if [ $? -eq 0 ]; then
            echo "✅ $file syntax OK"
          else
            echo "❌ $file syntax error"
            exit 1
          fi
        done
    
    - name: Test AI guide code snippets
      run: |
        # Extract and test code snippets from AI guide
        python -c "
        import re
        import ast
        
        with open('ai-guides/AI_AGENT_GUIDE.md', 'r') as f:
            content = f.read()
        
        # Extract Python code blocks
        code_blocks = re.findall(r'```python\n(.*?)\n```', content, re.DOTALL)
        
        for i, code in enumerate(code_blocks):
            try:
                # Skip code blocks with placeholders
                if 'YOUR_API_KEY' in code or 'TO BE FILLED' in code:
                    continue
                
                # Try to parse the code
                ast.parse(code)
                print(f'✅ Code block {i+1} syntax OK')
            except SyntaxError as e:
                print(f'❌ Code block {i+1} syntax error: {e}')
                exit(1)
        "

  check-completeness:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Check documentation completeness
      run: |
        python -c "
        import json
        import os
        
        # Load categorized endpoints
        with open('categorized_endpoints.json', 'r') as f:
            categories = json.load(f)
        
        total_endpoints = sum(len(endpoints) for endpoints in categories.values())
        documented_endpoints = 0
        
        # Count documented endpoints
        for category, endpoints in categories.items():
            category_dir = f'docs/endpoints/{category}'
            if os.path.exists(category_dir):
                md_files = [f for f in os.listdir(category_dir) if f.endswith('.md') and f != 'README.md']
                documented_endpoints += len(md_files)
        
        coverage = (documented_endpoints / total_endpoints) * 100
        
        print(f'Documentation coverage: {coverage:.1f}% ({documented_endpoints}/{total_endpoints})')
        
        if coverage < 90:
            print('❌ Documentation coverage too low')
            exit(1)
        else:
            print('✅ Documentation coverage OK')
        "

  generate-report:
    runs-on: ubuntu-latest
    needs: [validate-structure, validate-links, test-code-samples, check-completeness]
    if: always()
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Generate validation report
      run: |
        echo "# Documentation Validation Report" > validation-report.md
        echo "" >> validation-report.md
        echo "**Date**: $(date)" >> validation-report.md
        echo "**Commit**: $GITHUB_SHA" >> validation-report.md
        echo "" >> validation-report.md
        
        # Add job results
        echo "## Job Results" >> validation-report.md
        echo "" >> validation-report.md
        
        if [ "${{ needs.validate-structure.result }}" == "success" ]; then
          echo "✅ Structure validation: PASSED" >> validation-report.md
        else
          echo "❌ Structure validation: FAILED" >> validation-report.md
        fi
        
        if [ "${{ needs.validate-links.result }}" == "success" ]; then
          echo "✅ Link validation: PASSED" >> validation-report.md
        else
          echo "❌ Link validation: FAILED" >> validation-report.md
        fi
        
        if [ "${{ needs.test-code-samples.result }}" == "success" ]; then
          echo "✅ Code samples: PASSED" >> validation-report.md
        else
          echo "❌ Code samples: FAILED" >> validation-report.md
        fi
        
        if [ "${{ needs.check-completeness.result }}" == "success" ]; then
          echo "✅ Completeness check: PASSED" >> validation-report.md
        else
          echo "❌ Completeness check: FAILED" >> validation-report.md
        fi
        
        cat validation-report.md
    
    - name: Upload validation report
      uses: actions/upload-artifact@v3
      with:
        name: validation-report
        path: validation-report.md
