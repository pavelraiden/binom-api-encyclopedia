{
  "GET /public/api/v1/affiliate_network/{id}/clone": {
    "method": "GET",
    "path": "/public/api/v1/affiliate_network/{id}/clone",
    "category": "affiliate_network",
    "summary": "Clone Affiliate Network",
    "description": "Clone Affiliate Network. Retrieves information from the affiliate_network resource with optional filtering and pagination.",
    "parameters": [
      {
        "name": "id",
        "in": "path",
        "required": true,
        "type": "integer",
        "description": "Unique identifier of the resource",
        "example": 123,
        "validation": "Must be a positive integer"
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success - Resource details returned",
        "example": {
          "id": 123,
          "name": "Resource Name",
          "status": "active",
          "createdAt": "2023-12-01T10:00:00Z",
          "updatedAt": "2023-12-01T15:30:00Z"
        }
      },
      "400": {
        "description": "Bad Request - Invalid input data or missing required fields",
        "example": {
          "error": "Validation failed",
          "message": "Field 'name' is required",
          "details": {
            "field": "name",
            "code": "required",
            "value": null
          }
        }
      },
      "401": {
        "description": "Unauthorized - Invalid or missing API key",
        "example": {
          "error": "Unauthorized",
          "message": "Invalid API key or token expired"
        }
      },
      "403": {
        "description": "Forbidden - Access denied or insufficient permissions",
        "example": {
          "error": "Access denied",
          "message": "Insufficient permissions to access this resource"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Not found",
          "message": "Resource with ID 123 not found"
        }
      },
      "429": {
        "description": "Too Many Requests - Rate limit exceeded",
        "example": {
          "error": "Rate limit exceeded",
          "message": "Too many requests, please try again later",
          "retryAfter": 60
        }
      },
      "500": {
        "description": "Internal Server Error - Server-side error",
        "example": {
          "error": "Internal server error",
          "message": "Something went wrong on our end"
        }
      }
    },
    "examples": {
      "python": "import requests\nimport os\nimport time\nfrom typing import Optional, Dict, Any\n\nclass BinomAPIClient:\n    def __init__(self, api_key: str):\n        self.api_key = api_key\n        self.base_url = \"https://pierdun.com/public/api/v1\"\n        self.headers = {\n            \"Authorization\": f\"Bearer {api_key}\",\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json\"\n        }\n    \n    def make_request(self, method: str, endpoint: str, data: Optional[Dict] = None, params: Optional[Dict] = None) -> Dict[Any, Any]:\n        \"\"\"Make API request with error handling and retries\"\"\"\n        url = f\"{self.base_url}{endpoint}\"\n        \n        for attempt in range(3):\n            try:\n                response = requests.request(\n                    method=method,\n                    url=url,\n                    headers=self.headers,\n                    json=data,\n                    params=params,\n                    timeout=30\n                )\n                \n                if response.status_code == 429:\n                    # Rate limit - wait and retry\n                    time.sleep(2 ** attempt)\n                    continue\n                \n                if response.status_code in [200, 201]:\n                    return response.json()\n                else:\n                    raise Exception(f\"API Error {response.status_code}: {response.text}\")\n                    \n            except requests.exceptions.RequestException as e:\n                if attempt == 2:  # Last attempt\n                    raise Exception(f\"Request failed: {str(e)}\")\n                time.sleep(1)\n        \n        raise Exception(\"Max retries exceeded\")\n\n# Usage example\nclient = BinomAPIClient(os.getenv('binomPublic'))\n\ntry:\n    result = client.make_request(\n        method=\"GET\",\n        endpoint=\"/public/api/v1/affiliate_network/{id}/clone\",\n    )\n    \n    print(\"✅ Success:\", result)\n    \nexcept Exception as e:\n    print(f\"❌ Error: {e}\")",
      "curl": "# Basic request\ncurl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\" \\\n  \"https://pierdun.com/public/api/v1/affiliate_network/{id}/clone\"",
      "javascript": "class BinomAPI {\n  constructor(apiKey) {\n    this.apiKey = apiKey;\n    this.baseURL = 'https://pierdun.com/public/api/v1';\n    this.headers = {\n      'Authorization': `Bearer ${apiKey}`,\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    };\n  }\n\n  async makeRequest(method, endpoint, data = null, params = null) {\n    const url = new URL(`${this.baseURL}${endpoint}`);\n    \n    if (params) {\n      Object.keys(params).forEach(key => \n        url.searchParams.append(key, params[key])\n      );\n    }\n\n    const config = {\n      method: method,\n      headers: this.headers\n    };\n\n    if (data) {\n      config.body = JSON.stringify(data);\n    }\n\n    try {\n      const response = await fetch(url.toString(), config);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${await response.text()}`);\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('API Error:', error);\n      throw error;\n    }\n  }\n}\n\n// Usage\nconst api = new BinomAPI(process.env.BINOM_API_KEY);\n\ntry {\n  const result = await api.makeRequest(\n    'GET',\n    '/public/api/v1/affiliate_network/{id}/clone',\n    null,\n    null\n  );\n  \n  console.log('✅ Success:', result);\n} catch (error) {\n  console.error('❌ Error:', error.message);\n}"
    },
    "errorHandling": {
      "commonErrors": [
        {
          "code": 400,
          "cause": "Invalid input data, missing required fields, or malformed JSON",
          "solution": "Validate all input data before sending. Check required fields and data types.",
          "example": "Missing 'name' field in request body"
        },
        {
          "code": 401,
          "cause": "Invalid, expired, or missing API key",
          "solution": "Verify API key is correct and has not expired. Check Authorization header format.",
          "example": "Authorization header: 'Bearer YOUR_API_KEY'"
        },
        {
          "code": 403,
          "cause": "Insufficient permissions or access denied",
          "solution": "Ensure API key has required permissions for this operation.",
          "example": "User lacks permission to modify campaigns"
        },
        {
          "code": 404,
          "cause": "Resource not found or invalid ID",
          "solution": "Verify resource ID exists and is accessible to your account.",
          "example": "Campaign with ID 123 does not exist"
        },
        {
          "code": 429,
          "cause": "Rate limit exceeded",
          "solution": "Implement exponential backoff and retry logic. Reduce request frequency.",
          "example": "Wait 60 seconds before retrying"
        },
        {
          "code": 500,
          "cause": "Internal server error",
          "solution": "Retry request after a delay. Contact support if error persists.",
          "example": "Temporary server issue"
        }
      ],
      "retryStrategy": {
        "maxRetries": 3,
        "backoffMultiplier": 2,
        "initialDelay": 1,
        "retryableStatusCodes": [
          429,
          500,
          502,
          503,
          504
        ]
      },
      "bestPractices": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting",
        "Log errors with sufficient detail for debugging",
        "Set appropriate timeouts for requests",
        "Handle network errors gracefully"
      ]
    },
    "validation": {
      "authentication": {
        "required": true,
        "type": "Bearer token",
        "header": "Authorization: Bearer YOUR_API_KEY",
        "validation": "Token must be valid and not expired"
      },
      "contentType": {
        "required": false,
        "value": "application/json",
        "header": "Content-Type: application/json"
      },
      "rateLimits": {
        "requestsPerMinute": 100,
        "burstLimit": 10,
        "enforcement": "HTTP 429 status code when exceeded"
      },
      "dataValidation": [
        "All required fields must be present and non-empty",
        "Field types must match schema definitions",
        "String fields must not exceed maximum length",
        "Numeric fields must be within specified ranges",
        "Array fields must contain valid items",
        "Date fields must be in correct format (YYYY-MM-DD HH:MM:SS)"
      ],
      "commonValidationErrors": [
        "Missing required field 'name'",
        "Invalid email format",
        "String too long (max 255 characters)",
        "Invalid date format",
        "Negative value not allowed",
        "Invalid enum value"
      ]
    },
    "aiNotes": {
      "keyPoints": [
        "This is a GET endpoint for v1 operations",
        "Requires Bearer token authentication in Authorization header",
        "Returns JSON responses with consistent error format",
        "Supports standard HTTP status codes for success/error indication",
        "Rate limited to 100 requests per minute"
      ],
      "integrationTips": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting (429 errors)",
        "Cache responses when appropriate to reduce API calls",
        "Set reasonable timeouts (30 seconds recommended)",
        "Log requests and responses for debugging"
      ],
      "commonPatterns": [
        "Check authentication before making requests",
        "Validate required parameters are present",
        "Handle pagination for list endpoints",
        "Implement retry logic for transient errors",
        "Parse error responses for detailed error information"
      ],
      "aiSpecificGuidance": [
        "For AI agents: Always check response status before processing data",
        "Implement fallback strategies for API failures",
        "Use structured error handling to provide meaningful feedback",
        "Consider caching strategies for frequently accessed data",
        "Implement request queuing for high-volume operations"
      ]
    },
    "workflow": "Used for: Retrieving network details for campaign setup or auditing",
    "realWorldUsage": [
      "Managing affiliate_network resources in affiliate marketing workflows",
      "Automating affiliate_network operations for campaign optimization",
      "Integrating affiliate_network data with external reporting systems"
    ]
  },
  "POST /public/api/v1/affiliate_network": {
    "method": "POST",
    "path": "/public/api/v1/affiliate_network",
    "category": "affiliate_network",
    "summary": "Create Affiliate Network",
    "description": "Creates a new affiliate network with comprehensive configuration including postback URLs, IP whitelist for security, payout relations mapping, and activation settings. This is typically the first step in setting up affiliate tracking infrastructure.",
    "parameters": [],
    "requestBody": {
      "contentType": "application/json",
      "required": [
        "name"
      ],
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the affiliate network",
            "example": "MaxBounty Network",
            "minLength": 1,
            "maxLength": 255
          },
          "offerUrlTemplate": {
            "type": "string",
            "description": "Template URL for offers with placeholders",
            "example": "https://maxbounty.com/click.php?id={offer_id}&tid={click_id}",
            "pattern": "^https?://.+"
          },
          "postbackUrl": {
            "type": "string",
            "description": "URL for receiving conversion notifications",
            "example": "https://your-domain.com/postback",
            "pattern": "^https?://.+"
          },
          "postbackIpWhitelist": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of allowed IP addresses for postback security",
            "example": [
              "192.168.1.1",
              "10.0.0.1",
              "2001:0db8:85a3::8a2e:370:7334"
            ]
          },
          "statusPayoutRelations": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "conversionStatus": {
                  "type": "string",
                  "example": "approved"
                },
                "payout": {
                  "type": "string",
                  "example": "{payout}"
                }
              }
            },
            "description": "Mapping between conversion statuses and payout values"
          },
          "isPayoutRelationsActive": {
            "type": "boolean",
            "description": "Whether payout relations are enabled",
            "default": true
          }
        }
      },
      "example": {
        "name": "MaxBounty Network",
        "offerUrlTemplate": "https://maxbounty.com/click.php?id={offer_id}&tid={click_id}",
        "postbackUrl": "https://your-domain.com/postback",
        "postbackIpWhitelist": [
          "192.168.1.1",
          "10.0.0.1"
        ],
        "statusPayoutRelations": [
          {
            "conversionStatus": "approved",
            "payout": "{payout}"
          },
          {
            "conversionStatus": "pending",
            "payout": "0"
          }
        ],
        "isPayoutRelationsActive": true
      }
    },
    "responses": {
      "201": {
        "description": "Created - Resource created successfully",
        "example": {
          "id": 123,
          "message": "Resource created successfully",
          "data": {
            "id": 123,
            "name": "New Resource",
            "createdAt": "2023-12-01T10:00:00Z"
          }
        }
      },
      "400": {
        "description": "Bad Request - Invalid input data or missing required fields",
        "example": {
          "error": "Validation failed",
          "message": "Field 'name' is required",
          "details": {
            "field": "name",
            "code": "required",
            "value": null
          }
        }
      },
      "401": {
        "description": "Unauthorized - Invalid or missing API key",
        "example": {
          "error": "Unauthorized",
          "message": "Invalid API key or token expired"
        }
      },
      "403": {
        "description": "Forbidden - Access denied or insufficient permissions",
        "example": {
          "error": "Access denied",
          "message": "Insufficient permissions to access this resource"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Not found",
          "message": "Resource with ID 123 not found"
        }
      },
      "429": {
        "description": "Too Many Requests - Rate limit exceeded",
        "example": {
          "error": "Rate limit exceeded",
          "message": "Too many requests, please try again later",
          "retryAfter": 60
        }
      },
      "500": {
        "description": "Internal Server Error - Server-side error",
        "example": {
          "error": "Internal server error",
          "message": "Something went wrong on our end"
        }
      }
    },
    "examples": {
      "python": "import requests\nimport os\nimport time\nfrom typing import Optional, Dict, Any\n\nclass BinomAPIClient:\n    def __init__(self, api_key: str):\n        self.api_key = api_key\n        self.base_url = \"https://pierdun.com/public/api/v1\"\n        self.headers = {\n            \"Authorization\": f\"Bearer {api_key}\",\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json\"\n        }\n    \n    def make_request(self, method: str, endpoint: str, data: Optional[Dict] = None, params: Optional[Dict] = None) -> Dict[Any, Any]:\n        \"\"\"Make API request with error handling and retries\"\"\"\n        url = f\"{self.base_url}{endpoint}\"\n        \n        for attempt in range(3):\n            try:\n                response = requests.request(\n                    method=method,\n                    url=url,\n                    headers=self.headers,\n                    json=data,\n                    params=params,\n                    timeout=30\n                )\n                \n                if response.status_code == 429:\n                    # Rate limit - wait and retry\n                    time.sleep(2 ** attempt)\n                    continue\n                \n                if response.status_code in [200, 201]:\n                    return response.json()\n                else:\n                    raise Exception(f\"API Error {response.status_code}: {response.text}\")\n                    \n            except requests.exceptions.RequestException as e:\n                if attempt == 2:  # Last attempt\n                    raise Exception(f\"Request failed: {str(e)}\")\n                time.sleep(1)\n        \n        raise Exception(\"Max retries exceeded\")\n\n# Usage example\nclient = BinomAPIClient(os.getenv('binomPublic'))\n\ntry:\n    result = client.make_request(\n        method=\"POST\",\n        endpoint=\"/public/api/v1/affiliate_network\",\n        data={\n        \"name\": \"MaxBounty Network\",\n        \"offerUrlTemplate\": \"https://maxbounty.com/click.php?id={offer_id}&tid={click_id}\",\n        \"postbackUrl\": \"https://your-domain.com/postback\",\n        \"postbackIpWhitelist\": [\n                \"192.168.1.1\",\n                \"10.0.0.1\"\n        ],\n        \"statusPayoutRelations\": [\n                {\n                        \"conversionStatus\": \"approved\",\n                        \"payout\": \"{payout}\"\n                },\n                {\n                        \"conversionStatus\": \"pending\",\n                        \"payout\": \"0\"\n                }\n        ],\n        \"isPayoutRelationsActive\": true\n},\n    )\n    \n    print(\"✅ Success:\", result)\n    \nexcept Exception as e:\n    print(f\"❌ Error: {e}\")",
      "curl": "# Basic request\ncurl -X POST \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\" \\\n  -d '{\"name\":\"MaxBounty Network\",\"offerUrlTemplate\":\"https://maxbounty.com/click.php?id={offer_id}&tid={click_id}\",\"postbackUrl\":\"https://your-domain.com/postback\",\"postbackIpWhitelist\":[\"192.168.1.1\",\"10.0.0.1\"],\"statusPayoutRelations\":[{\"conversionStatus\":\"approved\",\"payout\":\"{payout}\"},{\"conversionStatus\":\"pending\",\"payout\":\"0\"}],\"isPayoutRelationsActive\":true}' \\\n  \"https://pierdun.com/public/api/v1/affiliate_network\"",
      "javascript": "class BinomAPI {\n  constructor(apiKey) {\n    this.apiKey = apiKey;\n    this.baseURL = 'https://pierdun.com/public/api/v1';\n    this.headers = {\n      'Authorization': `Bearer ${apiKey}`,\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    };\n  }\n\n  async makeRequest(method, endpoint, data = null, params = null) {\n    const url = new URL(`${this.baseURL}${endpoint}`);\n    \n    if (params) {\n      Object.keys(params).forEach(key => \n        url.searchParams.append(key, params[key])\n      );\n    }\n\n    const config = {\n      method: method,\n      headers: this.headers\n    };\n\n    if (data) {\n      config.body = JSON.stringify(data);\n    }\n\n    try {\n      const response = await fetch(url.toString(), config);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${await response.text()}`);\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('API Error:', error);\n      throw error;\n    }\n  }\n}\n\n// Usage\nconst api = new BinomAPI(process.env.BINOM_API_KEY);\n\ntry {\n  const result = await api.makeRequest(\n    'POST',\n    '/public/api/v1/affiliate_network',\n    {\n    \"name\": \"MaxBounty Network\",\n    \"offerUrlTemplate\": \"https://maxbounty.com/click.php?id={offer_id}&tid={click_id}\",\n    \"postbackUrl\": \"https://your-domain.com/postback\",\n    \"postbackIpWhitelist\": [\n        \"192.168.1.1\",\n        \"10.0.0.1\"\n    ],\n    \"statusPayoutRelations\": [\n        {\n            \"conversionStatus\": \"approved\",\n            \"payout\": \"{payout}\"\n        },\n        {\n            \"conversionStatus\": \"pending\",\n            \"payout\": \"0\"\n        }\n    ],\n    \"isPayoutRelationsActive\": true\n},\n    null\n  );\n  \n  console.log('✅ Success:', result);\n} catch (error) {\n  console.error('❌ Error:', error.message);\n}"
    },
    "errorHandling": {
      "commonErrors": [
        {
          "code": 400,
          "cause": "Invalid input data, missing required fields, or malformed JSON",
          "solution": "Validate all input data before sending. Check required fields and data types.",
          "example": "Missing 'name' field in request body"
        },
        {
          "code": 401,
          "cause": "Invalid, expired, or missing API key",
          "solution": "Verify API key is correct and has not expired. Check Authorization header format.",
          "example": "Authorization header: 'Bearer YOUR_API_KEY'"
        },
        {
          "code": 403,
          "cause": "Insufficient permissions or access denied",
          "solution": "Ensure API key has required permissions for this operation.",
          "example": "User lacks permission to modify campaigns"
        },
        {
          "code": 404,
          "cause": "Resource not found or invalid ID",
          "solution": "Verify resource ID exists and is accessible to your account.",
          "example": "Campaign with ID 123 does not exist"
        },
        {
          "code": 429,
          "cause": "Rate limit exceeded",
          "solution": "Implement exponential backoff and retry logic. Reduce request frequency.",
          "example": "Wait 60 seconds before retrying"
        },
        {
          "code": 500,
          "cause": "Internal server error",
          "solution": "Retry request after a delay. Contact support if error persists.",
          "example": "Temporary server issue"
        }
      ],
      "retryStrategy": {
        "maxRetries": 3,
        "backoffMultiplier": 2,
        "initialDelay": 1,
        "retryableStatusCodes": [
          429,
          500,
          502,
          503,
          504
        ]
      },
      "bestPractices": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting",
        "Log errors with sufficient detail for debugging",
        "Set appropriate timeouts for requests",
        "Handle network errors gracefully"
      ]
    },
    "validation": {
      "authentication": {
        "required": true,
        "type": "Bearer token",
        "header": "Authorization: Bearer YOUR_API_KEY",
        "validation": "Token must be valid and not expired"
      },
      "contentType": {
        "required": true,
        "value": "application/json",
        "header": "Content-Type: application/json"
      },
      "rateLimits": {
        "requestsPerMinute": 100,
        "burstLimit": 10,
        "enforcement": "HTTP 429 status code when exceeded"
      },
      "dataValidation": [
        "All required fields must be present and non-empty",
        "Field types must match schema definitions",
        "String fields must not exceed maximum length",
        "Numeric fields must be within specified ranges",
        "Array fields must contain valid items",
        "Date fields must be in correct format (YYYY-MM-DD HH:MM:SS)"
      ],
      "commonValidationErrors": [
        "Missing required field 'name'",
        "Invalid email format",
        "String too long (max 255 characters)",
        "Invalid date format",
        "Negative value not allowed",
        "Invalid enum value"
      ]
    },
    "aiNotes": {
      "keyPoints": [
        "This is a POST endpoint for v1 operations",
        "Requires Bearer token authentication in Authorization header",
        "Returns JSON responses with consistent error format",
        "Supports standard HTTP status codes for success/error indication",
        "Rate limited to 100 requests per minute"
      ],
      "integrationTips": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting (429 errors)",
        "Cache responses when appropriate to reduce API calls",
        "Set reasonable timeouts (30 seconds recommended)",
        "Log requests and responses for debugging"
      ],
      "commonPatterns": [
        "Check authentication before making requests",
        "Validate required parameters are present",
        "Handle pagination for list endpoints",
        "Implement retry logic for transient errors",
        "Parse error responses for detailed error information"
      ],
      "aiSpecificGuidance": [
        "For AI agents: Always check response status before processing data",
        "Implement fallback strategies for API failures",
        "Use structured error handling to provide meaningful feedback",
        "Consider caching strategies for frequently accessed data",
        "Implement request queuing for high-volume operations"
      ]
    },
    "workflow": "First step: Create affiliate network before adding offers and campaigns",
    "realWorldUsage": [
      "Setting up MaxBounty integration for CPA campaigns",
      "Adding ClickBank network for digital product promotions",
      "Configuring custom affiliate network with postback tracking"
    ]
  },
  "GET /public/api/v1/affiliate_network/{id}": {
    "method": "GET",
    "path": "/public/api/v1/affiliate_network/{id}",
    "category": "affiliate_network",
    "summary": "Get Affiliate Network",
    "description": "Retrieves complete information about a specific affiliate network including all configuration parameters, postback settings, payout relations, and current status. Essential for auditing and managing existing networks.",
    "parameters": [
      {
        "name": "id",
        "in": "path",
        "required": true,
        "type": "integer",
        "description": "Unique identifier of the resource",
        "example": 123,
        "validation": "Must be a positive integer"
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success - Resource details returned",
        "example": {
          "id": 123,
          "name": "Resource Name",
          "status": "active",
          "createdAt": "2023-12-01T10:00:00Z",
          "updatedAt": "2023-12-01T15:30:00Z"
        }
      },
      "400": {
        "description": "Bad Request - Invalid input data or missing required fields",
        "example": {
          "error": "Validation failed",
          "message": "Field 'name' is required",
          "details": {
            "field": "name",
            "code": "required",
            "value": null
          }
        }
      },
      "401": {
        "description": "Unauthorized - Invalid or missing API key",
        "example": {
          "error": "Unauthorized",
          "message": "Invalid API key or token expired"
        }
      },
      "403": {
        "description": "Forbidden - Access denied or insufficient permissions",
        "example": {
          "error": "Access denied",
          "message": "Insufficient permissions to access this resource"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Not found",
          "message": "Resource with ID 123 not found"
        }
      },
      "429": {
        "description": "Too Many Requests - Rate limit exceeded",
        "example": {
          "error": "Rate limit exceeded",
          "message": "Too many requests, please try again later",
          "retryAfter": 60
        }
      },
      "500": {
        "description": "Internal Server Error - Server-side error",
        "example": {
          "error": "Internal server error",
          "message": "Something went wrong on our end"
        }
      }
    },
    "examples": {
      "python": "import requests\nimport os\nimport time\nfrom typing import Optional, Dict, Any\n\nclass BinomAPIClient:\n    def __init__(self, api_key: str):\n        self.api_key = api_key\n        self.base_url = \"https://pierdun.com/public/api/v1\"\n        self.headers = {\n            \"Authorization\": f\"Bearer {api_key}\",\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json\"\n        }\n    \n    def make_request(self, method: str, endpoint: str, data: Optional[Dict] = None, params: Optional[Dict] = None) -> Dict[Any, Any]:\n        \"\"\"Make API request with error handling and retries\"\"\"\n        url = f\"{self.base_url}{endpoint}\"\n        \n        for attempt in range(3):\n            try:\n                response = requests.request(\n                    method=method,\n                    url=url,\n                    headers=self.headers,\n                    json=data,\n                    params=params,\n                    timeout=30\n                )\n                \n                if response.status_code == 429:\n                    # Rate limit - wait and retry\n                    time.sleep(2 ** attempt)\n                    continue\n                \n                if response.status_code in [200, 201]:\n                    return response.json()\n                else:\n                    raise Exception(f\"API Error {response.status_code}: {response.text}\")\n                    \n            except requests.exceptions.RequestException as e:\n                if attempt == 2:  # Last attempt\n                    raise Exception(f\"Request failed: {str(e)}\")\n                time.sleep(1)\n        \n        raise Exception(\"Max retries exceeded\")\n\n# Usage example\nclient = BinomAPIClient(os.getenv('binomPublic'))\n\ntry:\n    result = client.make_request(\n        method=\"GET\",\n        endpoint=\"/public/api/v1/affiliate_network/{id}\",\n    )\n    \n    print(\"✅ Success:\", result)\n    \nexcept Exception as e:\n    print(f\"❌ Error: {e}\")",
      "curl": "# Basic request\ncurl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\" \\\n  \"https://pierdun.com/public/api/v1/affiliate_network/{id}\"",
      "javascript": "class BinomAPI {\n  constructor(apiKey) {\n    this.apiKey = apiKey;\n    this.baseURL = 'https://pierdun.com/public/api/v1';\n    this.headers = {\n      'Authorization': `Bearer ${apiKey}`,\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    };\n  }\n\n  async makeRequest(method, endpoint, data = null, params = null) {\n    const url = new URL(`${this.baseURL}${endpoint}`);\n    \n    if (params) {\n      Object.keys(params).forEach(key => \n        url.searchParams.append(key, params[key])\n      );\n    }\n\n    const config = {\n      method: method,\n      headers: this.headers\n    };\n\n    if (data) {\n      config.body = JSON.stringify(data);\n    }\n\n    try {\n      const response = await fetch(url.toString(), config);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${await response.text()}`);\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('API Error:', error);\n      throw error;\n    }\n  }\n}\n\n// Usage\nconst api = new BinomAPI(process.env.BINOM_API_KEY);\n\ntry {\n  const result = await api.makeRequest(\n    'GET',\n    '/public/api/v1/affiliate_network/{id}',\n    null,\n    null\n  );\n  \n  console.log('✅ Success:', result);\n} catch (error) {\n  console.error('❌ Error:', error.message);\n}"
    },
    "errorHandling": {
      "commonErrors": [
        {
          "code": 400,
          "cause": "Invalid input data, missing required fields, or malformed JSON",
          "solution": "Validate all input data before sending. Check required fields and data types.",
          "example": "Missing 'name' field in request body"
        },
        {
          "code": 401,
          "cause": "Invalid, expired, or missing API key",
          "solution": "Verify API key is correct and has not expired. Check Authorization header format.",
          "example": "Authorization header: 'Bearer YOUR_API_KEY'"
        },
        {
          "code": 403,
          "cause": "Insufficient permissions or access denied",
          "solution": "Ensure API key has required permissions for this operation.",
          "example": "User lacks permission to modify campaigns"
        },
        {
          "code": 404,
          "cause": "Resource not found or invalid ID",
          "solution": "Verify resource ID exists and is accessible to your account.",
          "example": "Campaign with ID 123 does not exist"
        },
        {
          "code": 429,
          "cause": "Rate limit exceeded",
          "solution": "Implement exponential backoff and retry logic. Reduce request frequency.",
          "example": "Wait 60 seconds before retrying"
        },
        {
          "code": 500,
          "cause": "Internal server error",
          "solution": "Retry request after a delay. Contact support if error persists.",
          "example": "Temporary server issue"
        }
      ],
      "retryStrategy": {
        "maxRetries": 3,
        "backoffMultiplier": 2,
        "initialDelay": 1,
        "retryableStatusCodes": [
          429,
          500,
          502,
          503,
          504
        ]
      },
      "bestPractices": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting",
        "Log errors with sufficient detail for debugging",
        "Set appropriate timeouts for requests",
        "Handle network errors gracefully"
      ]
    },
    "validation": {
      "authentication": {
        "required": true,
        "type": "Bearer token",
        "header": "Authorization: Bearer YOUR_API_KEY",
        "validation": "Token must be valid and not expired"
      },
      "contentType": {
        "required": false,
        "value": "application/json",
        "header": "Content-Type: application/json"
      },
      "rateLimits": {
        "requestsPerMinute": 100,
        "burstLimit": 10,
        "enforcement": "HTTP 429 status code when exceeded"
      },
      "dataValidation": [
        "All required fields must be present and non-empty",
        "Field types must match schema definitions",
        "String fields must not exceed maximum length",
        "Numeric fields must be within specified ranges",
        "Array fields must contain valid items",
        "Date fields must be in correct format (YYYY-MM-DD HH:MM:SS)"
      ],
      "commonValidationErrors": [
        "Missing required field 'name'",
        "Invalid email format",
        "String too long (max 255 characters)",
        "Invalid date format",
        "Negative value not allowed",
        "Invalid enum value"
      ]
    },
    "aiNotes": {
      "keyPoints": [
        "This is a GET endpoint for v1 operations",
        "Requires Bearer token authentication in Authorization header",
        "Returns JSON responses with consistent error format",
        "Supports standard HTTP status codes for success/error indication",
        "Rate limited to 100 requests per minute"
      ],
      "integrationTips": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting (429 errors)",
        "Cache responses when appropriate to reduce API calls",
        "Set reasonable timeouts (30 seconds recommended)",
        "Log requests and responses for debugging"
      ],
      "commonPatterns": [
        "Check authentication before making requests",
        "Validate required parameters are present",
        "Handle pagination for list endpoints",
        "Implement retry logic for transient errors",
        "Parse error responses for detailed error information"
      ],
      "aiSpecificGuidance": [
        "For AI agents: Always check response status before processing data",
        "Implement fallback strategies for API failures",
        "Use structured error handling to provide meaningful feedback",
        "Consider caching strategies for frequently accessed data",
        "Implement request queuing for high-volume operations"
      ]
    },
    "workflow": "Used for: Retrieving network details for campaign setup or auditing",
    "realWorldUsage": [
      "Managing affiliate_network resources in affiliate marketing workflows",
      "Automating affiliate_network operations for campaign optimization",
      "Integrating affiliate_network data with external reporting systems"
    ]
  },
  "PUT /public/api/v1/affiliate_network/{id}": {
    "method": "PUT",
    "path": "/public/api/v1/affiliate_network/{id}",
    "category": "affiliate_network",
    "summary": "Edit Affiliate Network",
    "description": "Edit Affiliate Network. Updates an existing affiliate_network resource with new configuration data.",
    "parameters": [
      {
        "name": "id",
        "in": "path",
        "required": true,
        "type": "integer",
        "description": "Unique identifier of the resource",
        "example": 123,
        "validation": "Must be a positive integer"
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success - Resource updated successfully",
        "example": {
          "message": "Resource updated successfully",
          "data": {
            "id": 123,
            "updatedAt": "2023-12-01T15:30:00Z"
          }
        }
      },
      "400": {
        "description": "Bad Request - Invalid input data or missing required fields",
        "example": {
          "error": "Validation failed",
          "message": "Field 'name' is required",
          "details": {
            "field": "name",
            "code": "required",
            "value": null
          }
        }
      },
      "401": {
        "description": "Unauthorized - Invalid or missing API key",
        "example": {
          "error": "Unauthorized",
          "message": "Invalid API key or token expired"
        }
      },
      "403": {
        "description": "Forbidden - Access denied or insufficient permissions",
        "example": {
          "error": "Access denied",
          "message": "Insufficient permissions to access this resource"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Not found",
          "message": "Resource with ID 123 not found"
        }
      },
      "429": {
        "description": "Too Many Requests - Rate limit exceeded",
        "example": {
          "error": "Rate limit exceeded",
          "message": "Too many requests, please try again later",
          "retryAfter": 60
        }
      },
      "500": {
        "description": "Internal Server Error - Server-side error",
        "example": {
          "error": "Internal server error",
          "message": "Something went wrong on our end"
        }
      }
    },
    "examples": {
      "python": "import requests\nimport os\nimport time\nfrom typing import Optional, Dict, Any\n\nclass BinomAPIClient:\n    def __init__(self, api_key: str):\n        self.api_key = api_key\n        self.base_url = \"https://pierdun.com/public/api/v1\"\n        self.headers = {\n            \"Authorization\": f\"Bearer {api_key}\",\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json\"\n        }\n    \n    def make_request(self, method: str, endpoint: str, data: Optional[Dict] = None, params: Optional[Dict] = None) -> Dict[Any, Any]:\n        \"\"\"Make API request with error handling and retries\"\"\"\n        url = f\"{self.base_url}{endpoint}\"\n        \n        for attempt in range(3):\n            try:\n                response = requests.request(\n                    method=method,\n                    url=url,\n                    headers=self.headers,\n                    json=data,\n                    params=params,\n                    timeout=30\n                )\n                \n                if response.status_code == 429:\n                    # Rate limit - wait and retry\n                    time.sleep(2 ** attempt)\n                    continue\n                \n                if response.status_code in [200, 201]:\n                    return response.json()\n                else:\n                    raise Exception(f\"API Error {response.status_code}: {response.text}\")\n                    \n            except requests.exceptions.RequestException as e:\n                if attempt == 2:  # Last attempt\n                    raise Exception(f\"Request failed: {str(e)}\")\n                time.sleep(1)\n        \n        raise Exception(\"Max retries exceeded\")\n\n# Usage example\nclient = BinomAPIClient(os.getenv('binomPublic'))\n\ntry:\n    result = client.make_request(\n        method=\"PUT\",\n        endpoint=\"/public/api/v1/affiliate_network/{id}\",\n    )\n    \n    print(\"✅ Success:\", result)\n    \nexcept Exception as e:\n    print(f\"❌ Error: {e}\")",
      "curl": "# Basic request\ncurl -X PUT \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\" \\\n  \"https://pierdun.com/public/api/v1/affiliate_network/{id}\"",
      "javascript": "class BinomAPI {\n  constructor(apiKey) {\n    this.apiKey = apiKey;\n    this.baseURL = 'https://pierdun.com/public/api/v1';\n    this.headers = {\n      'Authorization': `Bearer ${apiKey}`,\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    };\n  }\n\n  async makeRequest(method, endpoint, data = null, params = null) {\n    const url = new URL(`${this.baseURL}${endpoint}`);\n    \n    if (params) {\n      Object.keys(params).forEach(key => \n        url.searchParams.append(key, params[key])\n      );\n    }\n\n    const config = {\n      method: method,\n      headers: this.headers\n    };\n\n    if (data) {\n      config.body = JSON.stringify(data);\n    }\n\n    try {\n      const response = await fetch(url.toString(), config);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${await response.text()}`);\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('API Error:', error);\n      throw error;\n    }\n  }\n}\n\n// Usage\nconst api = new BinomAPI(process.env.BINOM_API_KEY);\n\ntry {\n  const result = await api.makeRequest(\n    'PUT',\n    '/public/api/v1/affiliate_network/{id}',\n    null,\n    null\n  );\n  \n  console.log('✅ Success:', result);\n} catch (error) {\n  console.error('❌ Error:', error.message);\n}"
    },
    "errorHandling": {
      "commonErrors": [
        {
          "code": 400,
          "cause": "Invalid input data, missing required fields, or malformed JSON",
          "solution": "Validate all input data before sending. Check required fields and data types.",
          "example": "Missing 'name' field in request body"
        },
        {
          "code": 401,
          "cause": "Invalid, expired, or missing API key",
          "solution": "Verify API key is correct and has not expired. Check Authorization header format.",
          "example": "Authorization header: 'Bearer YOUR_API_KEY'"
        },
        {
          "code": 403,
          "cause": "Insufficient permissions or access denied",
          "solution": "Ensure API key has required permissions for this operation.",
          "example": "User lacks permission to modify campaigns"
        },
        {
          "code": 404,
          "cause": "Resource not found or invalid ID",
          "solution": "Verify resource ID exists and is accessible to your account.",
          "example": "Campaign with ID 123 does not exist"
        },
        {
          "code": 429,
          "cause": "Rate limit exceeded",
          "solution": "Implement exponential backoff and retry logic. Reduce request frequency.",
          "example": "Wait 60 seconds before retrying"
        },
        {
          "code": 500,
          "cause": "Internal server error",
          "solution": "Retry request after a delay. Contact support if error persists.",
          "example": "Temporary server issue"
        }
      ],
      "retryStrategy": {
        "maxRetries": 3,
        "backoffMultiplier": 2,
        "initialDelay": 1,
        "retryableStatusCodes": [
          429,
          500,
          502,
          503,
          504
        ]
      },
      "bestPractices": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting",
        "Log errors with sufficient detail for debugging",
        "Set appropriate timeouts for requests",
        "Handle network errors gracefully"
      ]
    },
    "validation": {
      "authentication": {
        "required": true,
        "type": "Bearer token",
        "header": "Authorization: Bearer YOUR_API_KEY",
        "validation": "Token must be valid and not expired"
      },
      "contentType": {
        "required": true,
        "value": "application/json",
        "header": "Content-Type: application/json"
      },
      "rateLimits": {
        "requestsPerMinute": 100,
        "burstLimit": 10,
        "enforcement": "HTTP 429 status code when exceeded"
      },
      "dataValidation": [
        "All required fields must be present and non-empty",
        "Field types must match schema definitions",
        "String fields must not exceed maximum length",
        "Numeric fields must be within specified ranges",
        "Array fields must contain valid items",
        "Date fields must be in correct format (YYYY-MM-DD HH:MM:SS)"
      ],
      "commonValidationErrors": [
        "Missing required field 'name'",
        "Invalid email format",
        "String too long (max 255 characters)",
        "Invalid date format",
        "Negative value not allowed",
        "Invalid enum value"
      ]
    },
    "aiNotes": {
      "keyPoints": [
        "This is a PUT endpoint for v1 operations",
        "Requires Bearer token authentication in Authorization header",
        "Returns JSON responses with consistent error format",
        "Supports standard HTTP status codes for success/error indication",
        "Rate limited to 100 requests per minute"
      ],
      "integrationTips": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting (429 errors)",
        "Cache responses when appropriate to reduce API calls",
        "Set reasonable timeouts (30 seconds recommended)",
        "Log requests and responses for debugging"
      ],
      "commonPatterns": [
        "Check authentication before making requests",
        "Validate required parameters are present",
        "Handle pagination for list endpoints",
        "Implement retry logic for transient errors",
        "Parse error responses for detailed error information"
      ],
      "aiSpecificGuidance": [
        "For AI agents: Always check response status before processing data",
        "Implement fallback strategies for API failures",
        "Use structured error handling to provide meaningful feedback",
        "Consider caching strategies for frequently accessed data",
        "Implement request queuing for high-volume operations"
      ]
    },
    "workflow": "Used for: Updating network configuration or postback settings",
    "realWorldUsage": [
      "Managing affiliate_network resources in affiliate marketing workflows",
      "Automating affiliate_network operations for campaign optimization",
      "Integrating affiliate_network data with external reporting systems"
    ]
  },
  "DELETE /public/api/v1/affiliate_network/{id}": {
    "method": "DELETE",
    "path": "/public/api/v1/affiliate_network/{id}",
    "category": "affiliate_network",
    "summary": "Delete Affiliate Network",
    "description": "Delete Affiliate Network. Removes a affiliate_network resource (typically soft delete that can be restored).",
    "parameters": [
      {
        "name": "id",
        "in": "path",
        "required": true,
        "type": "integer",
        "description": "Unique identifier of the resource",
        "example": 123,
        "validation": "Must be a positive integer"
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success - Resource deleted successfully",
        "example": {
          "message": "Resource deleted successfully",
          "deletedAt": "2023-12-01T16:00:00Z"
        }
      },
      "400": {
        "description": "Bad Request - Invalid input data or missing required fields",
        "example": {
          "error": "Validation failed",
          "message": "Field 'name' is required",
          "details": {
            "field": "name",
            "code": "required",
            "value": null
          }
        }
      },
      "401": {
        "description": "Unauthorized - Invalid or missing API key",
        "example": {
          "error": "Unauthorized",
          "message": "Invalid API key or token expired"
        }
      },
      "403": {
        "description": "Forbidden - Access denied or insufficient permissions",
        "example": {
          "error": "Access denied",
          "message": "Insufficient permissions to access this resource"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Not found",
          "message": "Resource with ID 123 not found"
        }
      },
      "429": {
        "description": "Too Many Requests - Rate limit exceeded",
        "example": {
          "error": "Rate limit exceeded",
          "message": "Too many requests, please try again later",
          "retryAfter": 60
        }
      },
      "500": {
        "description": "Internal Server Error - Server-side error",
        "example": {
          "error": "Internal server error",
          "message": "Something went wrong on our end"
        }
      }
    },
    "examples": {
      "python": "import requests\nimport os\nimport time\nfrom typing import Optional, Dict, Any\n\nclass BinomAPIClient:\n    def __init__(self, api_key: str):\n        self.api_key = api_key\n        self.base_url = \"https://pierdun.com/public/api/v1\"\n        self.headers = {\n            \"Authorization\": f\"Bearer {api_key}\",\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json\"\n        }\n    \n    def make_request(self, method: str, endpoint: str, data: Optional[Dict] = None, params: Optional[Dict] = None) -> Dict[Any, Any]:\n        \"\"\"Make API request with error handling and retries\"\"\"\n        url = f\"{self.base_url}{endpoint}\"\n        \n        for attempt in range(3):\n            try:\n                response = requests.request(\n                    method=method,\n                    url=url,\n                    headers=self.headers,\n                    json=data,\n                    params=params,\n                    timeout=30\n                )\n                \n                if response.status_code == 429:\n                    # Rate limit - wait and retry\n                    time.sleep(2 ** attempt)\n                    continue\n                \n                if response.status_code in [200, 201]:\n                    return response.json()\n                else:\n                    raise Exception(f\"API Error {response.status_code}: {response.text}\")\n                    \n            except requests.exceptions.RequestException as e:\n                if attempt == 2:  # Last attempt\n                    raise Exception(f\"Request failed: {str(e)}\")\n                time.sleep(1)\n        \n        raise Exception(\"Max retries exceeded\")\n\n# Usage example\nclient = BinomAPIClient(os.getenv('binomPublic'))\n\ntry:\n    result = client.make_request(\n        method=\"DELETE\",\n        endpoint=\"/public/api/v1/affiliate_network/{id}\",\n    )\n    \n    print(\"✅ Success:\", result)\n    \nexcept Exception as e:\n    print(f\"❌ Error: {e}\")",
      "curl": "# Basic request\ncurl -X DELETE \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\" \\\n  \"https://pierdun.com/public/api/v1/affiliate_network/{id}\"",
      "javascript": "class BinomAPI {\n  constructor(apiKey) {\n    this.apiKey = apiKey;\n    this.baseURL = 'https://pierdun.com/public/api/v1';\n    this.headers = {\n      'Authorization': `Bearer ${apiKey}`,\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    };\n  }\n\n  async makeRequest(method, endpoint, data = null, params = null) {\n    const url = new URL(`${this.baseURL}${endpoint}`);\n    \n    if (params) {\n      Object.keys(params).forEach(key => \n        url.searchParams.append(key, params[key])\n      );\n    }\n\n    const config = {\n      method: method,\n      headers: this.headers\n    };\n\n    if (data) {\n      config.body = JSON.stringify(data);\n    }\n\n    try {\n      const response = await fetch(url.toString(), config);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${await response.text()}`);\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('API Error:', error);\n      throw error;\n    }\n  }\n}\n\n// Usage\nconst api = new BinomAPI(process.env.BINOM_API_KEY);\n\ntry {\n  const result = await api.makeRequest(\n    'DELETE',\n    '/public/api/v1/affiliate_network/{id}',\n    null,\n    null\n  );\n  \n  console.log('✅ Success:', result);\n} catch (error) {\n  console.error('❌ Error:', error.message);\n}"
    },
    "errorHandling": {
      "commonErrors": [
        {
          "code": 400,
          "cause": "Invalid input data, missing required fields, or malformed JSON",
          "solution": "Validate all input data before sending. Check required fields and data types.",
          "example": "Missing 'name' field in request body"
        },
        {
          "code": 401,
          "cause": "Invalid, expired, or missing API key",
          "solution": "Verify API key is correct and has not expired. Check Authorization header format.",
          "example": "Authorization header: 'Bearer YOUR_API_KEY'"
        },
        {
          "code": 403,
          "cause": "Insufficient permissions or access denied",
          "solution": "Ensure API key has required permissions for this operation.",
          "example": "User lacks permission to modify campaigns"
        },
        {
          "code": 404,
          "cause": "Resource not found or invalid ID",
          "solution": "Verify resource ID exists and is accessible to your account.",
          "example": "Campaign with ID 123 does not exist"
        },
        {
          "code": 429,
          "cause": "Rate limit exceeded",
          "solution": "Implement exponential backoff and retry logic. Reduce request frequency.",
          "example": "Wait 60 seconds before retrying"
        },
        {
          "code": 500,
          "cause": "Internal server error",
          "solution": "Retry request after a delay. Contact support if error persists.",
          "example": "Temporary server issue"
        }
      ],
      "retryStrategy": {
        "maxRetries": 3,
        "backoffMultiplier": 2,
        "initialDelay": 1,
        "retryableStatusCodes": [
          429,
          500,
          502,
          503,
          504
        ]
      },
      "bestPractices": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting",
        "Log errors with sufficient detail for debugging",
        "Set appropriate timeouts for requests",
        "Handle network errors gracefully"
      ]
    },
    "validation": {
      "authentication": {
        "required": true,
        "type": "Bearer token",
        "header": "Authorization: Bearer YOUR_API_KEY",
        "validation": "Token must be valid and not expired"
      },
      "contentType": {
        "required": false,
        "value": "application/json",
        "header": "Content-Type: application/json"
      },
      "rateLimits": {
        "requestsPerMinute": 100,
        "burstLimit": 10,
        "enforcement": "HTTP 429 status code when exceeded"
      },
      "dataValidation": [
        "All required fields must be present and non-empty",
        "Field types must match schema definitions",
        "String fields must not exceed maximum length",
        "Numeric fields must be within specified ranges",
        "Array fields must contain valid items",
        "Date fields must be in correct format (YYYY-MM-DD HH:MM:SS)"
      ],
      "commonValidationErrors": [
        "Missing required field 'name'",
        "Invalid email format",
        "String too long (max 255 characters)",
        "Invalid date format",
        "Negative value not allowed",
        "Invalid enum value"
      ]
    },
    "aiNotes": {
      "keyPoints": [
        "This is a DELETE endpoint for v1 operations",
        "Requires Bearer token authentication in Authorization header",
        "Returns JSON responses with consistent error format",
        "Supports standard HTTP status codes for success/error indication",
        "Rate limited to 100 requests per minute"
      ],
      "integrationTips": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting (429 errors)",
        "Cache responses when appropriate to reduce API calls",
        "Set reasonable timeouts (30 seconds recommended)",
        "Log requests and responses for debugging"
      ],
      "commonPatterns": [
        "Check authentication before making requests",
        "Validate required parameters are present",
        "Handle pagination for list endpoints",
        "Implement retry logic for transient errors",
        "Parse error responses for detailed error information"
      ],
      "aiSpecificGuidance": [
        "For AI agents: Always check response status before processing data",
        "Implement fallback strategies for API failures",
        "Use structured error handling to provide meaningful feedback",
        "Consider caching strategies for frequently accessed data",
        "Implement request queuing for high-volume operations"
      ]
    },
    "workflow": "Used for: Removing unused networks (can be restored later)",
    "realWorldUsage": [
      "Managing affiliate_network resources in affiliate marketing workflows",
      "Automating affiliate_network operations for campaign optimization",
      "Integrating affiliate_network data with external reporting systems"
    ]
  },
  "PATCH /public/api/v1/affiliate_network/{id}": {
    "method": "PATCH",
    "path": "/public/api/v1/affiliate_network/{id}",
    "category": "affiliate_network",
    "summary": "Restore Affiliate Network",
    "description": "Restore Affiliate Network. Partially updates or restores a affiliate_network resource.",
    "parameters": [
      {
        "name": "id",
        "in": "path",
        "required": true,
        "type": "integer",
        "description": "Unique identifier of the resource",
        "example": 123,
        "validation": "Must be a positive integer"
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success - Resource updated successfully",
        "example": {
          "message": "Resource updated successfully",
          "data": {
            "id": 123,
            "updatedAt": "2023-12-01T15:30:00Z"
          }
        }
      },
      "400": {
        "description": "Bad Request - Invalid input data or missing required fields",
        "example": {
          "error": "Validation failed",
          "message": "Field 'name' is required",
          "details": {
            "field": "name",
            "code": "required",
            "value": null
          }
        }
      },
      "401": {
        "description": "Unauthorized - Invalid or missing API key",
        "example": {
          "error": "Unauthorized",
          "message": "Invalid API key or token expired"
        }
      },
      "403": {
        "description": "Forbidden - Access denied or insufficient permissions",
        "example": {
          "error": "Access denied",
          "message": "Insufficient permissions to access this resource"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Not found",
          "message": "Resource with ID 123 not found"
        }
      },
      "429": {
        "description": "Too Many Requests - Rate limit exceeded",
        "example": {
          "error": "Rate limit exceeded",
          "message": "Too many requests, please try again later",
          "retryAfter": 60
        }
      },
      "500": {
        "description": "Internal Server Error - Server-side error",
        "example": {
          "error": "Internal server error",
          "message": "Something went wrong on our end"
        }
      }
    },
    "examples": {
      "python": "import requests\nimport os\nimport time\nfrom typing import Optional, Dict, Any\n\nclass BinomAPIClient:\n    def __init__(self, api_key: str):\n        self.api_key = api_key\n        self.base_url = \"https://pierdun.com/public/api/v1\"\n        self.headers = {\n            \"Authorization\": f\"Bearer {api_key}\",\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json\"\n        }\n    \n    def make_request(self, method: str, endpoint: str, data: Optional[Dict] = None, params: Optional[Dict] = None) -> Dict[Any, Any]:\n        \"\"\"Make API request with error handling and retries\"\"\"\n        url = f\"{self.base_url}{endpoint}\"\n        \n        for attempt in range(3):\n            try:\n                response = requests.request(\n                    method=method,\n                    url=url,\n                    headers=self.headers,\n                    json=data,\n                    params=params,\n                    timeout=30\n                )\n                \n                if response.status_code == 429:\n                    # Rate limit - wait and retry\n                    time.sleep(2 ** attempt)\n                    continue\n                \n                if response.status_code in [200, 201]:\n                    return response.json()\n                else:\n                    raise Exception(f\"API Error {response.status_code}: {response.text}\")\n                    \n            except requests.exceptions.RequestException as e:\n                if attempt == 2:  # Last attempt\n                    raise Exception(f\"Request failed: {str(e)}\")\n                time.sleep(1)\n        \n        raise Exception(\"Max retries exceeded\")\n\n# Usage example\nclient = BinomAPIClient(os.getenv('binomPublic'))\n\ntry:\n    result = client.make_request(\n        method=\"PATCH\",\n        endpoint=\"/public/api/v1/affiliate_network/{id}\",\n    )\n    \n    print(\"✅ Success:\", result)\n    \nexcept Exception as e:\n    print(f\"❌ Error: {e}\")",
      "curl": "# Basic request\ncurl -X PATCH \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\" \\\n  \"https://pierdun.com/public/api/v1/affiliate_network/{id}\"",
      "javascript": "class BinomAPI {\n  constructor(apiKey) {\n    this.apiKey = apiKey;\n    this.baseURL = 'https://pierdun.com/public/api/v1';\n    this.headers = {\n      'Authorization': `Bearer ${apiKey}`,\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    };\n  }\n\n  async makeRequest(method, endpoint, data = null, params = null) {\n    const url = new URL(`${this.baseURL}${endpoint}`);\n    \n    if (params) {\n      Object.keys(params).forEach(key => \n        url.searchParams.append(key, params[key])\n      );\n    }\n\n    const config = {\n      method: method,\n      headers: this.headers\n    };\n\n    if (data) {\n      config.body = JSON.stringify(data);\n    }\n\n    try {\n      const response = await fetch(url.toString(), config);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${await response.text()}`);\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('API Error:', error);\n      throw error;\n    }\n  }\n}\n\n// Usage\nconst api = new BinomAPI(process.env.BINOM_API_KEY);\n\ntry {\n  const result = await api.makeRequest(\n    'PATCH',\n    '/public/api/v1/affiliate_network/{id}',\n    null,\n    null\n  );\n  \n  console.log('✅ Success:', result);\n} catch (error) {\n  console.error('❌ Error:', error.message);\n}"
    },
    "errorHandling": {
      "commonErrors": [
        {
          "code": 400,
          "cause": "Invalid input data, missing required fields, or malformed JSON",
          "solution": "Validate all input data before sending. Check required fields and data types.",
          "example": "Missing 'name' field in request body"
        },
        {
          "code": 401,
          "cause": "Invalid, expired, or missing API key",
          "solution": "Verify API key is correct and has not expired. Check Authorization header format.",
          "example": "Authorization header: 'Bearer YOUR_API_KEY'"
        },
        {
          "code": 403,
          "cause": "Insufficient permissions or access denied",
          "solution": "Ensure API key has required permissions for this operation.",
          "example": "User lacks permission to modify campaigns"
        },
        {
          "code": 404,
          "cause": "Resource not found or invalid ID",
          "solution": "Verify resource ID exists and is accessible to your account.",
          "example": "Campaign with ID 123 does not exist"
        },
        {
          "code": 429,
          "cause": "Rate limit exceeded",
          "solution": "Implement exponential backoff and retry logic. Reduce request frequency.",
          "example": "Wait 60 seconds before retrying"
        },
        {
          "code": 500,
          "cause": "Internal server error",
          "solution": "Retry request after a delay. Contact support if error persists.",
          "example": "Temporary server issue"
        }
      ],
      "retryStrategy": {
        "maxRetries": 3,
        "backoffMultiplier": 2,
        "initialDelay": 1,
        "retryableStatusCodes": [
          429,
          500,
          502,
          503,
          504
        ]
      },
      "bestPractices": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting",
        "Log errors with sufficient detail for debugging",
        "Set appropriate timeouts for requests",
        "Handle network errors gracefully"
      ]
    },
    "validation": {
      "authentication": {
        "required": true,
        "type": "Bearer token",
        "header": "Authorization: Bearer YOUR_API_KEY",
        "validation": "Token must be valid and not expired"
      },
      "contentType": {
        "required": true,
        "value": "application/json",
        "header": "Content-Type: application/json"
      },
      "rateLimits": {
        "requestsPerMinute": 100,
        "burstLimit": 10,
        "enforcement": "HTTP 429 status code when exceeded"
      },
      "dataValidation": [
        "All required fields must be present and non-empty",
        "Field types must match schema definitions",
        "String fields must not exceed maximum length",
        "Numeric fields must be within specified ranges",
        "Array fields must contain valid items",
        "Date fields must be in correct format (YYYY-MM-DD HH:MM:SS)"
      ],
      "commonValidationErrors": [
        "Missing required field 'name'",
        "Invalid email format",
        "String too long (max 255 characters)",
        "Invalid date format",
        "Negative value not allowed",
        "Invalid enum value"
      ]
    },
    "aiNotes": {
      "keyPoints": [
        "This is a PATCH endpoint for v1 operations",
        "Requires Bearer token authentication in Authorization header",
        "Returns JSON responses with consistent error format",
        "Supports standard HTTP status codes for success/error indication",
        "Rate limited to 100 requests per minute"
      ],
      "integrationTips": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting (429 errors)",
        "Cache responses when appropriate to reduce API calls",
        "Set reasonable timeouts (30 seconds recommended)",
        "Log requests and responses for debugging"
      ],
      "commonPatterns": [
        "Check authentication before making requests",
        "Validate required parameters are present",
        "Handle pagination for list endpoints",
        "Implement retry logic for transient errors",
        "Parse error responses for detailed error information"
      ],
      "aiSpecificGuidance": [
        "For AI agents: Always check response status before processing data",
        "Implement fallback strategies for API failures",
        "Use structured error handling to provide meaningful feedback",
        "Consider caching strategies for frequently accessed data",
        "Implement request queuing for high-volume operations"
      ]
    },
    "workflow": "Part of affiliate_network management workflow",
    "realWorldUsage": [
      "Managing affiliate_network resources in affiliate marketing workflows",
      "Automating affiliate_network operations for campaign optimization",
      "Integrating affiliate_network data with external reporting systems"
    ]
  },
  "GET /public/api/v1/affiliate_network/list/filtered": {
    "method": "GET",
    "path": "/public/api/v1/affiliate_network/list/filtered",
    "category": "affiliate_network",
    "summary": "Get Affiliate Network list filtered",
    "description": "Get Affiliate Network list filtered. Retrieves information from the affiliate_network resource with optional filtering and pagination.",
    "parameters": [
      {
        "name": "datePreset",
        "in": "query",
        "required": true,
        "type": "string",
        "description": "Date range preset for filtering data",
        "enum": [
          "today",
          "yesterday",
          "last_2_days",
          "last_3_days",
          "last_7_days",
          "last_14_days",
          "last_30_days",
          "this_week",
          "last_week",
          "this_month",
          "last_month",
          "this_year",
          "last_year",
          "all_time",
          "custom_time"
        ],
        "example": "last_7_days",
        "validation": "Must be one of the predefined values"
      },
      {
        "name": "timezone",
        "in": "query",
        "required": true,
        "type": "string",
        "description": "Timezone for date calculations (always use UTC for consistency)",
        "example": "UTC",
        "default": "UTC",
        "validation": "Must be a valid timezone identifier"
      },
      {
        "name": "limit",
        "in": "query",
        "required": false,
        "type": "integer",
        "description": "Maximum number of records to return",
        "example": 100,
        "default": 100,
        "minimum": 1,
        "maximum": 1000,
        "validation": "Must be between 1 and 1000"
      },
      {
        "name": "offset",
        "in": "query",
        "required": false,
        "type": "integer",
        "description": "Number of records to skip for pagination",
        "example": 0,
        "default": 0,
        "minimum": 0,
        "validation": "Must be non-negative"
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success - List of resources returned",
        "example": {
          "data": [
            {
              "id": 1,
              "name": "Resource 1"
            },
            {
              "id": 2,
              "name": "Resource 2"
            }
          ],
          "pagination": {
            "total": 150,
            "limit": 100,
            "offset": 0,
            "hasMore": true
          }
        }
      },
      "400": {
        "description": "Bad Request - Invalid input data or missing required fields",
        "example": {
          "error": "Validation failed",
          "message": "Field 'name' is required",
          "details": {
            "field": "name",
            "code": "required",
            "value": null
          }
        }
      },
      "401": {
        "description": "Unauthorized - Invalid or missing API key",
        "example": {
          "error": "Unauthorized",
          "message": "Invalid API key or token expired"
        }
      },
      "403": {
        "description": "Forbidden - Access denied or insufficient permissions",
        "example": {
          "error": "Access denied",
          "message": "Insufficient permissions to access this resource"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Not found",
          "message": "Resource with ID 123 not found"
        }
      },
      "429": {
        "description": "Too Many Requests - Rate limit exceeded",
        "example": {
          "error": "Rate limit exceeded",
          "message": "Too many requests, please try again later",
          "retryAfter": 60
        }
      },
      "500": {
        "description": "Internal Server Error - Server-side error",
        "example": {
          "error": "Internal server error",
          "message": "Something went wrong on our end"
        }
      }
    },
    "examples": {
      "python": "import requests\nimport os\nimport time\nfrom typing import Optional, Dict, Any\n\nclass BinomAPIClient:\n    def __init__(self, api_key: str):\n        self.api_key = api_key\n        self.base_url = \"https://pierdun.com/public/api/v1\"\n        self.headers = {\n            \"Authorization\": f\"Bearer {api_key}\",\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json\"\n        }\n    \n    def make_request(self, method: str, endpoint: str, data: Optional[Dict] = None, params: Optional[Dict] = None) -> Dict[Any, Any]:\n        \"\"\"Make API request with error handling and retries\"\"\"\n        url = f\"{self.base_url}{endpoint}\"\n        \n        for attempt in range(3):\n            try:\n                response = requests.request(\n                    method=method,\n                    url=url,\n                    headers=self.headers,\n                    json=data,\n                    params=params,\n                    timeout=30\n                )\n                \n                if response.status_code == 429:\n                    # Rate limit - wait and retry\n                    time.sleep(2 ** attempt)\n                    continue\n                \n                if response.status_code in [200, 201]:\n                    return response.json()\n                else:\n                    raise Exception(f\"API Error {response.status_code}: {response.text}\")\n                    \n            except requests.exceptions.RequestException as e:\n                if attempt == 2:  # Last attempt\n                    raise Exception(f\"Request failed: {str(e)}\")\n                time.sleep(1)\n        \n        raise Exception(\"Max retries exceeded\")\n\n# Usage example\nclient = BinomAPIClient(os.getenv('binomPublic'))\n\ntry:\n    result = client.make_request(\n        method=\"GET\",\n        endpoint=\"/public/api/v1/affiliate_network/list/filtered\",\n        params={\n            \"datePreset\": \"last_7_days\",\n            \"timezone\": \"UTC\",\n            \"limit\": 100,\n            \"offset\": 0\n        }\n    )\n    \n    print(\"✅ Success:\", result)\n    \nexcept Exception as e:\n    print(f\"❌ Error: {e}\")",
      "curl": "# Basic request\ncurl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\" \\\n  \"https://pierdun.com/public/api/v1/affiliate_network/list/filtered\"\n\n# With query parameters\ncurl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Accept: application/json\" \\\n  \"https://pierdun.com/public/api/v1/affiliate_network/list/filtered?datePreset=last_7_days&timezone=UTC&limit=100&offset=0\"",
      "javascript": "class BinomAPI {\n  constructor(apiKey) {\n    this.apiKey = apiKey;\n    this.baseURL = 'https://pierdun.com/public/api/v1';\n    this.headers = {\n      'Authorization': `Bearer ${apiKey}`,\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    };\n  }\n\n  async makeRequest(method, endpoint, data = null, params = null) {\n    const url = new URL(`${this.baseURL}${endpoint}`);\n    \n    if (params) {\n      Object.keys(params).forEach(key => \n        url.searchParams.append(key, params[key])\n      );\n    }\n\n    const config = {\n      method: method,\n      headers: this.headers\n    };\n\n    if (data) {\n      config.body = JSON.stringify(data);\n    }\n\n    try {\n      const response = await fetch(url.toString(), config);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${await response.text()}`);\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('API Error:', error);\n      throw error;\n    }\n  }\n}\n\n// Usage\nconst api = new BinomAPI(process.env.BINOM_API_KEY);\n\ntry {\n  const result = await api.makeRequest(\n    'GET',\n    '/public/api/v1/affiliate_network/list/filtered',\n    null,\n    {\n      datePreset: 'last_7_days',\n      timezone: 'UTC',\n      limit: 100,\n      offset: 0\n    }\n  );\n  \n  console.log('✅ Success:', result);\n} catch (error) {\n  console.error('❌ Error:', error.message);\n}"
    },
    "errorHandling": {
      "commonErrors": [
        {
          "code": 400,
          "cause": "Invalid input data, missing required fields, or malformed JSON",
          "solution": "Validate all input data before sending. Check required fields and data types.",
          "example": "Missing 'name' field in request body"
        },
        {
          "code": 401,
          "cause": "Invalid, expired, or missing API key",
          "solution": "Verify API key is correct and has not expired. Check Authorization header format.",
          "example": "Authorization header: 'Bearer YOUR_API_KEY'"
        },
        {
          "code": 403,
          "cause": "Insufficient permissions or access denied",
          "solution": "Ensure API key has required permissions for this operation.",
          "example": "User lacks permission to modify campaigns"
        },
        {
          "code": 404,
          "cause": "Resource not found or invalid ID",
          "solution": "Verify resource ID exists and is accessible to your account.",
          "example": "Campaign with ID 123 does not exist"
        },
        {
          "code": 429,
          "cause": "Rate limit exceeded",
          "solution": "Implement exponential backoff and retry logic. Reduce request frequency.",
          "example": "Wait 60 seconds before retrying"
        },
        {
          "code": 500,
          "cause": "Internal server error",
          "solution": "Retry request after a delay. Contact support if error persists.",
          "example": "Temporary server issue"
        }
      ],
      "retryStrategy": {
        "maxRetries": 3,
        "backoffMultiplier": 2,
        "initialDelay": 1,
        "retryableStatusCodes": [
          429,
          500,
          502,
          503,
          504
        ]
      },
      "bestPractices": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting",
        "Log errors with sufficient detail for debugging",
        "Set appropriate timeouts for requests",
        "Handle network errors gracefully"
      ]
    },
    "validation": {
      "authentication": {
        "required": true,
        "type": "Bearer token",
        "header": "Authorization: Bearer YOUR_API_KEY",
        "validation": "Token must be valid and not expired"
      },
      "contentType": {
        "required": false,
        "value": "application/json",
        "header": "Content-Type: application/json"
      },
      "rateLimits": {
        "requestsPerMinute": 100,
        "burstLimit": 10,
        "enforcement": "HTTP 429 status code when exceeded"
      },
      "dataValidation": [
        "All required fields must be present and non-empty",
        "Field types must match schema definitions",
        "String fields must not exceed maximum length",
        "Numeric fields must be within specified ranges",
        "Array fields must contain valid items",
        "Date fields must be in correct format (YYYY-MM-DD HH:MM:SS)"
      ],
      "commonValidationErrors": [
        "Missing required field 'name'",
        "Invalid email format",
        "String too long (max 255 characters)",
        "Invalid date format",
        "Negative value not allowed",
        "Invalid enum value"
      ]
    },
    "aiNotes": {
      "keyPoints": [
        "This is a GET endpoint for v1 operations",
        "Requires Bearer token authentication in Authorization header",
        "Returns JSON responses with consistent error format",
        "Supports standard HTTP status codes for success/error indication",
        "Rate limited to 100 requests per minute"
      ],
      "integrationTips": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting (429 errors)",
        "Cache responses when appropriate to reduce API calls",
        "Set reasonable timeouts (30 seconds recommended)",
        "Log requests and responses for debugging"
      ],
      "commonPatterns": [
        "Check authentication before making requests",
        "Validate required parameters are present",
        "Handle pagination for list endpoints",
        "Implement retry logic for transient errors",
        "Parse error responses for detailed error information"
      ],
      "aiSpecificGuidance": [
        "For AI agents: Always check response status before processing data",
        "Implement fallback strategies for API failures",
        "Use structured error handling to provide meaningful feedback",
        "Consider caching strategies for frequently accessed data",
        "Implement request queuing for high-volume operations"
      ]
    },
    "workflow": "Used for: Retrieving network details for campaign setup or auditing",
    "realWorldUsage": [
      "Managing affiliate_network resources in affiliate marketing workflows",
      "Automating affiliate_network operations for campaign optimization",
      "Integrating affiliate_network data with external reporting systems"
    ]
  },
  "GET /public/api/v1/affiliate_network/list/all": {
    "method": "GET",
    "path": "/public/api/v1/affiliate_network/list/all",
    "category": "affiliate_network",
    "summary": "Get Affiliate Network list",
    "description": "Get Affiliate Network list. Retrieves information from the affiliate_network resource with optional filtering and pagination.",
    "parameters": [
      {
        "name": "datePreset",
        "in": "query",
        "required": true,
        "type": "string",
        "description": "Date range preset for filtering data",
        "enum": [
          "today",
          "yesterday",
          "last_2_days",
          "last_3_days",
          "last_7_days",
          "last_14_days",
          "last_30_days",
          "this_week",
          "last_week",
          "this_month",
          "last_month",
          "this_year",
          "last_year",
          "all_time",
          "custom_time"
        ],
        "example": "last_7_days",
        "validation": "Must be one of the predefined values"
      },
      {
        "name": "timezone",
        "in": "query",
        "required": true,
        "type": "string",
        "description": "Timezone for date calculations (always use UTC for consistency)",
        "example": "UTC",
        "default": "UTC",
        "validation": "Must be a valid timezone identifier"
      },
      {
        "name": "limit",
        "in": "query",
        "required": false,
        "type": "integer",
        "description": "Maximum number of records to return",
        "example": 100,
        "default": 100,
        "minimum": 1,
        "maximum": 1000,
        "validation": "Must be between 1 and 1000"
      },
      {
        "name": "offset",
        "in": "query",
        "required": false,
        "type": "integer",
        "description": "Number of records to skip for pagination",
        "example": 0,
        "default": 0,
        "minimum": 0,
        "validation": "Must be non-negative"
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success - List of resources returned",
        "example": {
          "data": [
            {
              "id": 1,
              "name": "Resource 1"
            },
            {
              "id": 2,
              "name": "Resource 2"
            }
          ],
          "pagination": {
            "total": 150,
            "limit": 100,
            "offset": 0,
            "hasMore": true
          }
        }
      },
      "400": {
        "description": "Bad Request - Invalid input data or missing required fields",
        "example": {
          "error": "Validation failed",
          "message": "Field 'name' is required",
          "details": {
            "field": "name",
            "code": "required",
            "value": null
          }
        }
      },
      "401": {
        "description": "Unauthorized - Invalid or missing API key",
        "example": {
          "error": "Unauthorized",
          "message": "Invalid API key or token expired"
        }
      },
      "403": {
        "description": "Forbidden - Access denied or insufficient permissions",
        "example": {
          "error": "Access denied",
          "message": "Insufficient permissions to access this resource"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Not found",
          "message": "Resource with ID 123 not found"
        }
      },
      "429": {
        "description": "Too Many Requests - Rate limit exceeded",
        "example": {
          "error": "Rate limit exceeded",
          "message": "Too many requests, please try again later",
          "retryAfter": 60
        }
      },
      "500": {
        "description": "Internal Server Error - Server-side error",
        "example": {
          "error": "Internal server error",
          "message": "Something went wrong on our end"
        }
      }
    },
    "examples": {
      "python": "import requests\nimport os\nimport time\nfrom typing import Optional, Dict, Any\n\nclass BinomAPIClient:\n    def __init__(self, api_key: str):\n        self.api_key = api_key\n        self.base_url = \"https://pierdun.com/public/api/v1\"\n        self.headers = {\n            \"Authorization\": f\"Bearer {api_key}\",\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json\"\n        }\n    \n    def make_request(self, method: str, endpoint: str, data: Optional[Dict] = None, params: Optional[Dict] = None) -> Dict[Any, Any]:\n        \"\"\"Make API request with error handling and retries\"\"\"\n        url = f\"{self.base_url}{endpoint}\"\n        \n        for attempt in range(3):\n            try:\n                response = requests.request(\n                    method=method,\n                    url=url,\n                    headers=self.headers,\n                    json=data,\n                    params=params,\n                    timeout=30\n                )\n                \n                if response.status_code == 429:\n                    # Rate limit - wait and retry\n                    time.sleep(2 ** attempt)\n                    continue\n                \n                if response.status_code in [200, 201]:\n                    return response.json()\n                else:\n                    raise Exception(f\"API Error {response.status_code}: {response.text}\")\n                    \n            except requests.exceptions.RequestException as e:\n                if attempt == 2:  # Last attempt\n                    raise Exception(f\"Request failed: {str(e)}\")\n                time.sleep(1)\n        \n        raise Exception(\"Max retries exceeded\")\n\n# Usage example\nclient = BinomAPIClient(os.getenv('binomPublic'))\n\ntry:\n    result = client.make_request(\n        method=\"GET\",\n        endpoint=\"/public/api/v1/affiliate_network/list/all\",\n        params={\n            \"datePreset\": \"last_7_days\",\n            \"timezone\": \"UTC\",\n            \"limit\": 100,\n            \"offset\": 0\n        }\n    )\n    \n    print(\"✅ Success:\", result)\n    \nexcept Exception as e:\n    print(f\"❌ Error: {e}\")",
      "curl": "# Basic request\ncurl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\" \\\n  \"https://pierdun.com/public/api/v1/affiliate_network/list/all\"\n\n# With query parameters\ncurl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Accept: application/json\" \\\n  \"https://pierdun.com/public/api/v1/affiliate_network/list/all?datePreset=last_7_days&timezone=UTC&limit=100&offset=0\"",
      "javascript": "class BinomAPI {\n  constructor(apiKey) {\n    this.apiKey = apiKey;\n    this.baseURL = 'https://pierdun.com/public/api/v1';\n    this.headers = {\n      'Authorization': `Bearer ${apiKey}`,\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    };\n  }\n\n  async makeRequest(method, endpoint, data = null, params = null) {\n    const url = new URL(`${this.baseURL}${endpoint}`);\n    \n    if (params) {\n      Object.keys(params).forEach(key => \n        url.searchParams.append(key, params[key])\n      );\n    }\n\n    const config = {\n      method: method,\n      headers: this.headers\n    };\n\n    if (data) {\n      config.body = JSON.stringify(data);\n    }\n\n    try {\n      const response = await fetch(url.toString(), config);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${await response.text()}`);\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('API Error:', error);\n      throw error;\n    }\n  }\n}\n\n// Usage\nconst api = new BinomAPI(process.env.BINOM_API_KEY);\n\ntry {\n  const result = await api.makeRequest(\n    'GET',\n    '/public/api/v1/affiliate_network/list/all',\n    null,\n    {\n      datePreset: 'last_7_days',\n      timezone: 'UTC',\n      limit: 100,\n      offset: 0\n    }\n  );\n  \n  console.log('✅ Success:', result);\n} catch (error) {\n  console.error('❌ Error:', error.message);\n}"
    },
    "errorHandling": {
      "commonErrors": [
        {
          "code": 400,
          "cause": "Invalid input data, missing required fields, or malformed JSON",
          "solution": "Validate all input data before sending. Check required fields and data types.",
          "example": "Missing 'name' field in request body"
        },
        {
          "code": 401,
          "cause": "Invalid, expired, or missing API key",
          "solution": "Verify API key is correct and has not expired. Check Authorization header format.",
          "example": "Authorization header: 'Bearer YOUR_API_KEY'"
        },
        {
          "code": 403,
          "cause": "Insufficient permissions or access denied",
          "solution": "Ensure API key has required permissions for this operation.",
          "example": "User lacks permission to modify campaigns"
        },
        {
          "code": 404,
          "cause": "Resource not found or invalid ID",
          "solution": "Verify resource ID exists and is accessible to your account.",
          "example": "Campaign with ID 123 does not exist"
        },
        {
          "code": 429,
          "cause": "Rate limit exceeded",
          "solution": "Implement exponential backoff and retry logic. Reduce request frequency.",
          "example": "Wait 60 seconds before retrying"
        },
        {
          "code": 500,
          "cause": "Internal server error",
          "solution": "Retry request after a delay. Contact support if error persists.",
          "example": "Temporary server issue"
        }
      ],
      "retryStrategy": {
        "maxRetries": 3,
        "backoffMultiplier": 2,
        "initialDelay": 1,
        "retryableStatusCodes": [
          429,
          500,
          502,
          503,
          504
        ]
      },
      "bestPractices": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting",
        "Log errors with sufficient detail for debugging",
        "Set appropriate timeouts for requests",
        "Handle network errors gracefully"
      ]
    },
    "validation": {
      "authentication": {
        "required": true,
        "type": "Bearer token",
        "header": "Authorization: Bearer YOUR_API_KEY",
        "validation": "Token must be valid and not expired"
      },
      "contentType": {
        "required": false,
        "value": "application/json",
        "header": "Content-Type: application/json"
      },
      "rateLimits": {
        "requestsPerMinute": 100,
        "burstLimit": 10,
        "enforcement": "HTTP 429 status code when exceeded"
      },
      "dataValidation": [
        "All required fields must be present and non-empty",
        "Field types must match schema definitions",
        "String fields must not exceed maximum length",
        "Numeric fields must be within specified ranges",
        "Array fields must contain valid items",
        "Date fields must be in correct format (YYYY-MM-DD HH:MM:SS)"
      ],
      "commonValidationErrors": [
        "Missing required field 'name'",
        "Invalid email format",
        "String too long (max 255 characters)",
        "Invalid date format",
        "Negative value not allowed",
        "Invalid enum value"
      ]
    },
    "aiNotes": {
      "keyPoints": [
        "This is a GET endpoint for v1 operations",
        "Requires Bearer token authentication in Authorization header",
        "Returns JSON responses with consistent error format",
        "Supports standard HTTP status codes for success/error indication",
        "Rate limited to 100 requests per minute"
      ],
      "integrationTips": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting (429 errors)",
        "Cache responses when appropriate to reduce API calls",
        "Set reasonable timeouts (30 seconds recommended)",
        "Log requests and responses for debugging"
      ],
      "commonPatterns": [
        "Check authentication before making requests",
        "Validate required parameters are present",
        "Handle pagination for list endpoints",
        "Implement retry logic for transient errors",
        "Parse error responses for detailed error information"
      ],
      "aiSpecificGuidance": [
        "For AI agents: Always check response status before processing data",
        "Implement fallback strategies for API failures",
        "Use structured error handling to provide meaningful feedback",
        "Consider caching strategies for frequently accessed data",
        "Implement request queuing for high-volume operations"
      ]
    },
    "workflow": "Used for: Retrieving network details for campaign setup or auditing",
    "realWorldUsage": [
      "Managing affiliate_network resources in affiliate marketing workflows",
      "Automating affiliate_network operations for campaign optimization",
      "Integrating affiliate_network data with external reporting systems"
    ]
  },
  "GET /public/api/v1/affiliate_network/preset/catalog": {
    "method": "GET",
    "path": "/public/api/v1/affiliate_network/preset/catalog",
    "category": "affiliate_network",
    "summary": "Get Affiliate Network presets",
    "description": "Get Affiliate Network presets. Retrieves information from the affiliate_network resource with optional filtering and pagination.",
    "parameters": [],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success - Resource details returned",
        "example": {
          "id": 123,
          "name": "Resource Name",
          "status": "active",
          "createdAt": "2023-12-01T10:00:00Z",
          "updatedAt": "2023-12-01T15:30:00Z"
        }
      },
      "400": {
        "description": "Bad Request - Invalid input data or missing required fields",
        "example": {
          "error": "Validation failed",
          "message": "Field 'name' is required",
          "details": {
            "field": "name",
            "code": "required",
            "value": null
          }
        }
      },
      "401": {
        "description": "Unauthorized - Invalid or missing API key",
        "example": {
          "error": "Unauthorized",
          "message": "Invalid API key or token expired"
        }
      },
      "403": {
        "description": "Forbidden - Access denied or insufficient permissions",
        "example": {
          "error": "Access denied",
          "message": "Insufficient permissions to access this resource"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Not found",
          "message": "Resource with ID 123 not found"
        }
      },
      "429": {
        "description": "Too Many Requests - Rate limit exceeded",
        "example": {
          "error": "Rate limit exceeded",
          "message": "Too many requests, please try again later",
          "retryAfter": 60
        }
      },
      "500": {
        "description": "Internal Server Error - Server-side error",
        "example": {
          "error": "Internal server error",
          "message": "Something went wrong on our end"
        }
      }
    },
    "examples": {
      "python": "import requests\nimport os\nimport time\nfrom typing import Optional, Dict, Any\n\nclass BinomAPIClient:\n    def __init__(self, api_key: str):\n        self.api_key = api_key\n        self.base_url = \"https://pierdun.com/public/api/v1\"\n        self.headers = {\n            \"Authorization\": f\"Bearer {api_key}\",\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json\"\n        }\n    \n    def make_request(self, method: str, endpoint: str, data: Optional[Dict] = None, params: Optional[Dict] = None) -> Dict[Any, Any]:\n        \"\"\"Make API request with error handling and retries\"\"\"\n        url = f\"{self.base_url}{endpoint}\"\n        \n        for attempt in range(3):\n            try:\n                response = requests.request(\n                    method=method,\n                    url=url,\n                    headers=self.headers,\n                    json=data,\n                    params=params,\n                    timeout=30\n                )\n                \n                if response.status_code == 429:\n                    # Rate limit - wait and retry\n                    time.sleep(2 ** attempt)\n                    continue\n                \n                if response.status_code in [200, 201]:\n                    return response.json()\n                else:\n                    raise Exception(f\"API Error {response.status_code}: {response.text}\")\n                    \n            except requests.exceptions.RequestException as e:\n                if attempt == 2:  # Last attempt\n                    raise Exception(f\"Request failed: {str(e)}\")\n                time.sleep(1)\n        \n        raise Exception(\"Max retries exceeded\")\n\n# Usage example\nclient = BinomAPIClient(os.getenv('binomPublic'))\n\ntry:\n    result = client.make_request(\n        method=\"GET\",\n        endpoint=\"/public/api/v1/affiliate_network/preset/catalog\",\n    )\n    \n    print(\"✅ Success:\", result)\n    \nexcept Exception as e:\n    print(f\"❌ Error: {e}\")",
      "curl": "# Basic request\ncurl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\" \\\n  \"https://pierdun.com/public/api/v1/affiliate_network/preset/catalog\"",
      "javascript": "class BinomAPI {\n  constructor(apiKey) {\n    this.apiKey = apiKey;\n    this.baseURL = 'https://pierdun.com/public/api/v1';\n    this.headers = {\n      'Authorization': `Bearer ${apiKey}`,\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    };\n  }\n\n  async makeRequest(method, endpoint, data = null, params = null) {\n    const url = new URL(`${this.baseURL}${endpoint}`);\n    \n    if (params) {\n      Object.keys(params).forEach(key => \n        url.searchParams.append(key, params[key])\n      );\n    }\n\n    const config = {\n      method: method,\n      headers: this.headers\n    };\n\n    if (data) {\n      config.body = JSON.stringify(data);\n    }\n\n    try {\n      const response = await fetch(url.toString(), config);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${await response.text()}`);\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('API Error:', error);\n      throw error;\n    }\n  }\n}\n\n// Usage\nconst api = new BinomAPI(process.env.BINOM_API_KEY);\n\ntry {\n  const result = await api.makeRequest(\n    'GET',\n    '/public/api/v1/affiliate_network/preset/catalog',\n    null,\n    null\n  );\n  \n  console.log('✅ Success:', result);\n} catch (error) {\n  console.error('❌ Error:', error.message);\n}"
    },
    "errorHandling": {
      "commonErrors": [
        {
          "code": 400,
          "cause": "Invalid input data, missing required fields, or malformed JSON",
          "solution": "Validate all input data before sending. Check required fields and data types.",
          "example": "Missing 'name' field in request body"
        },
        {
          "code": 401,
          "cause": "Invalid, expired, or missing API key",
          "solution": "Verify API key is correct and has not expired. Check Authorization header format.",
          "example": "Authorization header: 'Bearer YOUR_API_KEY'"
        },
        {
          "code": 403,
          "cause": "Insufficient permissions or access denied",
          "solution": "Ensure API key has required permissions for this operation.",
          "example": "User lacks permission to modify campaigns"
        },
        {
          "code": 404,
          "cause": "Resource not found or invalid ID",
          "solution": "Verify resource ID exists and is accessible to your account.",
          "example": "Campaign with ID 123 does not exist"
        },
        {
          "code": 429,
          "cause": "Rate limit exceeded",
          "solution": "Implement exponential backoff and retry logic. Reduce request frequency.",
          "example": "Wait 60 seconds before retrying"
        },
        {
          "code": 500,
          "cause": "Internal server error",
          "solution": "Retry request after a delay. Contact support if error persists.",
          "example": "Temporary server issue"
        }
      ],
      "retryStrategy": {
        "maxRetries": 3,
        "backoffMultiplier": 2,
        "initialDelay": 1,
        "retryableStatusCodes": [
          429,
          500,
          502,
          503,
          504
        ]
      },
      "bestPractices": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting",
        "Log errors with sufficient detail for debugging",
        "Set appropriate timeouts for requests",
        "Handle network errors gracefully"
      ]
    },
    "validation": {
      "authentication": {
        "required": true,
        "type": "Bearer token",
        "header": "Authorization: Bearer YOUR_API_KEY",
        "validation": "Token must be valid and not expired"
      },
      "contentType": {
        "required": false,
        "value": "application/json",
        "header": "Content-Type: application/json"
      },
      "rateLimits": {
        "requestsPerMinute": 100,
        "burstLimit": 10,
        "enforcement": "HTTP 429 status code when exceeded"
      },
      "dataValidation": [
        "All required fields must be present and non-empty",
        "Field types must match schema definitions",
        "String fields must not exceed maximum length",
        "Numeric fields must be within specified ranges",
        "Array fields must contain valid items",
        "Date fields must be in correct format (YYYY-MM-DD HH:MM:SS)"
      ],
      "commonValidationErrors": [
        "Missing required field 'name'",
        "Invalid email format",
        "String too long (max 255 characters)",
        "Invalid date format",
        "Negative value not allowed",
        "Invalid enum value"
      ]
    },
    "aiNotes": {
      "keyPoints": [
        "This is a GET endpoint for v1 operations",
        "Requires Bearer token authentication in Authorization header",
        "Returns JSON responses with consistent error format",
        "Supports standard HTTP status codes for success/error indication",
        "Rate limited to 100 requests per minute"
      ],
      "integrationTips": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting (429 errors)",
        "Cache responses when appropriate to reduce API calls",
        "Set reasonable timeouts (30 seconds recommended)",
        "Log requests and responses for debugging"
      ],
      "commonPatterns": [
        "Check authentication before making requests",
        "Validate required parameters are present",
        "Handle pagination for list endpoints",
        "Implement retry logic for transient errors",
        "Parse error responses for detailed error information"
      ],
      "aiSpecificGuidance": [
        "For AI agents: Always check response status before processing data",
        "Implement fallback strategies for API failures",
        "Use structured error handling to provide meaningful feedback",
        "Consider caching strategies for frequently accessed data",
        "Implement request queuing for high-volume operations"
      ]
    },
    "workflow": "Used for: Retrieving network details for campaign setup or auditing",
    "realWorldUsage": [
      "Managing affiliate_network resources in affiliate marketing workflows",
      "Automating affiliate_network operations for campaign optimization",
      "Integrating affiliate_network data with external reporting systems"
    ]
  },
  "PUT /public/api/v1/affiliate_network/{id}/rename": {
    "method": "PUT",
    "path": "/public/api/v1/affiliate_network/{id}/rename",
    "category": "affiliate_network",
    "summary": "Rename Affiliate Network",
    "description": "Rename Affiliate Network. Updates an existing affiliate_network resource with new configuration data.",
    "parameters": [
      {
        "name": "id",
        "in": "path",
        "required": true,
        "type": "integer",
        "description": "Unique identifier of the resource",
        "example": 123,
        "validation": "Must be a positive integer"
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success - Resource updated successfully",
        "example": {
          "message": "Resource updated successfully",
          "data": {
            "id": 123,
            "updatedAt": "2023-12-01T15:30:00Z"
          }
        }
      },
      "400": {
        "description": "Bad Request - Invalid input data or missing required fields",
        "example": {
          "error": "Validation failed",
          "message": "Field 'name' is required",
          "details": {
            "field": "name",
            "code": "required",
            "value": null
          }
        }
      },
      "401": {
        "description": "Unauthorized - Invalid or missing API key",
        "example": {
          "error": "Unauthorized",
          "message": "Invalid API key or token expired"
        }
      },
      "403": {
        "description": "Forbidden - Access denied or insufficient permissions",
        "example": {
          "error": "Access denied",
          "message": "Insufficient permissions to access this resource"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Not found",
          "message": "Resource with ID 123 not found"
        }
      },
      "429": {
        "description": "Too Many Requests - Rate limit exceeded",
        "example": {
          "error": "Rate limit exceeded",
          "message": "Too many requests, please try again later",
          "retryAfter": 60
        }
      },
      "500": {
        "description": "Internal Server Error - Server-side error",
        "example": {
          "error": "Internal server error",
          "message": "Something went wrong on our end"
        }
      }
    },
    "examples": {
      "python": "import requests\nimport os\nimport time\nfrom typing import Optional, Dict, Any\n\nclass BinomAPIClient:\n    def __init__(self, api_key: str):\n        self.api_key = api_key\n        self.base_url = \"https://pierdun.com/public/api/v1\"\n        self.headers = {\n            \"Authorization\": f\"Bearer {api_key}\",\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json\"\n        }\n    \n    def make_request(self, method: str, endpoint: str, data: Optional[Dict] = None, params: Optional[Dict] = None) -> Dict[Any, Any]:\n        \"\"\"Make API request with error handling and retries\"\"\"\n        url = f\"{self.base_url}{endpoint}\"\n        \n        for attempt in range(3):\n            try:\n                response = requests.request(\n                    method=method,\n                    url=url,\n                    headers=self.headers,\n                    json=data,\n                    params=params,\n                    timeout=30\n                )\n                \n                if response.status_code == 429:\n                    # Rate limit - wait and retry\n                    time.sleep(2 ** attempt)\n                    continue\n                \n                if response.status_code in [200, 201]:\n                    return response.json()\n                else:\n                    raise Exception(f\"API Error {response.status_code}: {response.text}\")\n                    \n            except requests.exceptions.RequestException as e:\n                if attempt == 2:  # Last attempt\n                    raise Exception(f\"Request failed: {str(e)}\")\n                time.sleep(1)\n        \n        raise Exception(\"Max retries exceeded\")\n\n# Usage example\nclient = BinomAPIClient(os.getenv('binomPublic'))\n\ntry:\n    result = client.make_request(\n        method=\"PUT\",\n        endpoint=\"/public/api/v1/affiliate_network/{id}/rename\",\n    )\n    \n    print(\"✅ Success:\", result)\n    \nexcept Exception as e:\n    print(f\"❌ Error: {e}\")",
      "curl": "# Basic request\ncurl -X PUT \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\" \\\n  \"https://pierdun.com/public/api/v1/affiliate_network/{id}/rename\"",
      "javascript": "class BinomAPI {\n  constructor(apiKey) {\n    this.apiKey = apiKey;\n    this.baseURL = 'https://pierdun.com/public/api/v1';\n    this.headers = {\n      'Authorization': `Bearer ${apiKey}`,\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    };\n  }\n\n  async makeRequest(method, endpoint, data = null, params = null) {\n    const url = new URL(`${this.baseURL}${endpoint}`);\n    \n    if (params) {\n      Object.keys(params).forEach(key => \n        url.searchParams.append(key, params[key])\n      );\n    }\n\n    const config = {\n      method: method,\n      headers: this.headers\n    };\n\n    if (data) {\n      config.body = JSON.stringify(data);\n    }\n\n    try {\n      const response = await fetch(url.toString(), config);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${await response.text()}`);\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('API Error:', error);\n      throw error;\n    }\n  }\n}\n\n// Usage\nconst api = new BinomAPI(process.env.BINOM_API_KEY);\n\ntry {\n  const result = await api.makeRequest(\n    'PUT',\n    '/public/api/v1/affiliate_network/{id}/rename',\n    null,\n    null\n  );\n  \n  console.log('✅ Success:', result);\n} catch (error) {\n  console.error('❌ Error:', error.message);\n}"
    },
    "errorHandling": {
      "commonErrors": [
        {
          "code": 400,
          "cause": "Invalid input data, missing required fields, or malformed JSON",
          "solution": "Validate all input data before sending. Check required fields and data types.",
          "example": "Missing 'name' field in request body"
        },
        {
          "code": 401,
          "cause": "Invalid, expired, or missing API key",
          "solution": "Verify API key is correct and has not expired. Check Authorization header format.",
          "example": "Authorization header: 'Bearer YOUR_API_KEY'"
        },
        {
          "code": 403,
          "cause": "Insufficient permissions or access denied",
          "solution": "Ensure API key has required permissions for this operation.",
          "example": "User lacks permission to modify campaigns"
        },
        {
          "code": 404,
          "cause": "Resource not found or invalid ID",
          "solution": "Verify resource ID exists and is accessible to your account.",
          "example": "Campaign with ID 123 does not exist"
        },
        {
          "code": 429,
          "cause": "Rate limit exceeded",
          "solution": "Implement exponential backoff and retry logic. Reduce request frequency.",
          "example": "Wait 60 seconds before retrying"
        },
        {
          "code": 500,
          "cause": "Internal server error",
          "solution": "Retry request after a delay. Contact support if error persists.",
          "example": "Temporary server issue"
        }
      ],
      "retryStrategy": {
        "maxRetries": 3,
        "backoffMultiplier": 2,
        "initialDelay": 1,
        "retryableStatusCodes": [
          429,
          500,
          502,
          503,
          504
        ]
      },
      "bestPractices": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting",
        "Log errors with sufficient detail for debugging",
        "Set appropriate timeouts for requests",
        "Handle network errors gracefully"
      ]
    },
    "validation": {
      "authentication": {
        "required": true,
        "type": "Bearer token",
        "header": "Authorization: Bearer YOUR_API_KEY",
        "validation": "Token must be valid and not expired"
      },
      "contentType": {
        "required": true,
        "value": "application/json",
        "header": "Content-Type: application/json"
      },
      "rateLimits": {
        "requestsPerMinute": 100,
        "burstLimit": 10,
        "enforcement": "HTTP 429 status code when exceeded"
      },
      "dataValidation": [
        "All required fields must be present and non-empty",
        "Field types must match schema definitions",
        "String fields must not exceed maximum length",
        "Numeric fields must be within specified ranges",
        "Array fields must contain valid items",
        "Date fields must be in correct format (YYYY-MM-DD HH:MM:SS)"
      ],
      "commonValidationErrors": [
        "Missing required field 'name'",
        "Invalid email format",
        "String too long (max 255 characters)",
        "Invalid date format",
        "Negative value not allowed",
        "Invalid enum value"
      ]
    },
    "aiNotes": {
      "keyPoints": [
        "This is a PUT endpoint for v1 operations",
        "Requires Bearer token authentication in Authorization header",
        "Returns JSON responses with consistent error format",
        "Supports standard HTTP status codes for success/error indication",
        "Rate limited to 100 requests per minute"
      ],
      "integrationTips": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting (429 errors)",
        "Cache responses when appropriate to reduce API calls",
        "Set reasonable timeouts (30 seconds recommended)",
        "Log requests and responses for debugging"
      ],
      "commonPatterns": [
        "Check authentication before making requests",
        "Validate required parameters are present",
        "Handle pagination for list endpoints",
        "Implement retry logic for transient errors",
        "Parse error responses for detailed error information"
      ],
      "aiSpecificGuidance": [
        "For AI agents: Always check response status before processing data",
        "Implement fallback strategies for API failures",
        "Use structured error handling to provide meaningful feedback",
        "Consider caching strategies for frequently accessed data",
        "Implement request queuing for high-volume operations"
      ]
    },
    "workflow": "Used for: Updating network configuration or postback settings",
    "realWorldUsage": [
      "Managing affiliate_network resources in affiliate marketing workflows",
      "Automating affiliate_network operations for campaign optimization",
      "Integrating affiliate_network data with external reporting systems"
    ]
  },
  "PUT /public/api/v1/clicks/campaign/{id}": {
    "method": "PUT",
    "path": "/public/api/v1/clicks/campaign/{id}",
    "category": "clicks",
    "summary": "Update campaign's clicks cost",
    "description": "Update campaign's clicks cost. Updates an existing campaign resource with new configuration data.",
    "parameters": [
      {
        "name": "id",
        "in": "path",
        "required": true,
        "type": "integer",
        "description": "Unique identifier of the resource",
        "example": 123,
        "validation": "Must be a positive integer"
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success - Resource updated successfully",
        "example": {
          "message": "Resource updated successfully",
          "data": {
            "id": 123,
            "updatedAt": "2023-12-01T15:30:00Z"
          }
        }
      },
      "400": {
        "description": "Bad Request - Invalid input data or missing required fields",
        "example": {
          "error": "Validation failed",
          "message": "Field 'name' is required",
          "details": {
            "field": "name",
            "code": "required",
            "value": null
          }
        }
      },
      "401": {
        "description": "Unauthorized - Invalid or missing API key",
        "example": {
          "error": "Unauthorized",
          "message": "Invalid API key or token expired"
        }
      },
      "403": {
        "description": "Forbidden - Access denied or insufficient permissions",
        "example": {
          "error": "Access denied",
          "message": "Insufficient permissions to access this resource"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Not found",
          "message": "Resource with ID 123 not found"
        }
      },
      "429": {
        "description": "Too Many Requests - Rate limit exceeded",
        "example": {
          "error": "Rate limit exceeded",
          "message": "Too many requests, please try again later",
          "retryAfter": 60
        }
      },
      "500": {
        "description": "Internal Server Error - Server-side error",
        "example": {
          "error": "Internal server error",
          "message": "Something went wrong on our end"
        }
      }
    },
    "examples": {
      "python": "import requests\nimport os\nimport time\nfrom typing import Optional, Dict, Any\n\nclass BinomAPIClient:\n    def __init__(self, api_key: str):\n        self.api_key = api_key\n        self.base_url = \"https://pierdun.com/public/api/v1\"\n        self.headers = {\n            \"Authorization\": f\"Bearer {api_key}\",\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json\"\n        }\n    \n    def make_request(self, method: str, endpoint: str, data: Optional[Dict] = None, params: Optional[Dict] = None) -> Dict[Any, Any]:\n        \"\"\"Make API request with error handling and retries\"\"\"\n        url = f\"{self.base_url}{endpoint}\"\n        \n        for attempt in range(3):\n            try:\n                response = requests.request(\n                    method=method,\n                    url=url,\n                    headers=self.headers,\n                    json=data,\n                    params=params,\n                    timeout=30\n                )\n                \n                if response.status_code == 429:\n                    # Rate limit - wait and retry\n                    time.sleep(2 ** attempt)\n                    continue\n                \n                if response.status_code in [200, 201]:\n                    return response.json()\n                else:\n                    raise Exception(f\"API Error {response.status_code}: {response.text}\")\n                    \n            except requests.exceptions.RequestException as e:\n                if attempt == 2:  # Last attempt\n                    raise Exception(f\"Request failed: {str(e)}\")\n                time.sleep(1)\n        \n        raise Exception(\"Max retries exceeded\")\n\n# Usage example\nclient = BinomAPIClient(os.getenv('binomPublic'))\n\ntry:\n    result = client.make_request(\n        method=\"PUT\",\n        endpoint=\"/public/api/v1/clicks/campaign/{id}\",\n    )\n    \n    print(\"✅ Success:\", result)\n    \nexcept Exception as e:\n    print(f\"❌ Error: {e}\")",
      "curl": "# Basic request\ncurl -X PUT \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\" \\\n  \"https://pierdun.com/public/api/v1/clicks/campaign/{id}\"",
      "javascript": "class BinomAPI {\n  constructor(apiKey) {\n    this.apiKey = apiKey;\n    this.baseURL = 'https://pierdun.com/public/api/v1';\n    this.headers = {\n      'Authorization': `Bearer ${apiKey}`,\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    };\n  }\n\n  async makeRequest(method, endpoint, data = null, params = null) {\n    const url = new URL(`${this.baseURL}${endpoint}`);\n    \n    if (params) {\n      Object.keys(params).forEach(key => \n        url.searchParams.append(key, params[key])\n      );\n    }\n\n    const config = {\n      method: method,\n      headers: this.headers\n    };\n\n    if (data) {\n      config.body = JSON.stringify(data);\n    }\n\n    try {\n      const response = await fetch(url.toString(), config);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${await response.text()}`);\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('API Error:', error);\n      throw error;\n    }\n  }\n}\n\n// Usage\nconst api = new BinomAPI(process.env.BINOM_API_KEY);\n\ntry {\n  const result = await api.makeRequest(\n    'PUT',\n    '/public/api/v1/clicks/campaign/{id}',\n    null,\n    null\n  );\n  \n  console.log('✅ Success:', result);\n} catch (error) {\n  console.error('❌ Error:', error.message);\n}"
    },
    "errorHandling": {
      "commonErrors": [
        {
          "code": 400,
          "cause": "Invalid input data, missing required fields, or malformed JSON",
          "solution": "Validate all input data before sending. Check required fields and data types.",
          "example": "Missing 'name' field in request body"
        },
        {
          "code": 401,
          "cause": "Invalid, expired, or missing API key",
          "solution": "Verify API key is correct and has not expired. Check Authorization header format.",
          "example": "Authorization header: 'Bearer YOUR_API_KEY'"
        },
        {
          "code": 403,
          "cause": "Insufficient permissions or access denied",
          "solution": "Ensure API key has required permissions for this operation.",
          "example": "User lacks permission to modify campaigns"
        },
        {
          "code": 404,
          "cause": "Resource not found or invalid ID",
          "solution": "Verify resource ID exists and is accessible to your account.",
          "example": "Campaign with ID 123 does not exist"
        },
        {
          "code": 429,
          "cause": "Rate limit exceeded",
          "solution": "Implement exponential backoff and retry logic. Reduce request frequency.",
          "example": "Wait 60 seconds before retrying"
        },
        {
          "code": 500,
          "cause": "Internal server error",
          "solution": "Retry request after a delay. Contact support if error persists.",
          "example": "Temporary server issue"
        }
      ],
      "retryStrategy": {
        "maxRetries": 3,
        "backoffMultiplier": 2,
        "initialDelay": 1,
        "retryableStatusCodes": [
          429,
          500,
          502,
          503,
          504
        ]
      },
      "bestPractices": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting",
        "Log errors with sufficient detail for debugging",
        "Set appropriate timeouts for requests",
        "Handle network errors gracefully"
      ]
    },
    "validation": {
      "authentication": {
        "required": true,
        "type": "Bearer token",
        "header": "Authorization: Bearer YOUR_API_KEY",
        "validation": "Token must be valid and not expired"
      },
      "contentType": {
        "required": true,
        "value": "application/json",
        "header": "Content-Type: application/json"
      },
      "rateLimits": {
        "requestsPerMinute": 100,
        "burstLimit": 10,
        "enforcement": "HTTP 429 status code when exceeded"
      },
      "dataValidation": [
        "All required fields must be present and non-empty",
        "Field types must match schema definitions",
        "String fields must not exceed maximum length",
        "Numeric fields must be within specified ranges",
        "Array fields must contain valid items",
        "Date fields must be in correct format (YYYY-MM-DD HH:MM:SS)"
      ],
      "commonValidationErrors": [
        "Missing required field 'name'",
        "Invalid email format",
        "String too long (max 255 characters)",
        "Invalid date format",
        "Negative value not allowed",
        "Invalid enum value"
      ]
    },
    "aiNotes": {
      "keyPoints": [
        "This is a PUT endpoint for v1 operations",
        "Requires Bearer token authentication in Authorization header",
        "Returns JSON responses with consistent error format",
        "Supports standard HTTP status codes for success/error indication",
        "Rate limited to 100 requests per minute"
      ],
      "integrationTips": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting (429 errors)",
        "Cache responses when appropriate to reduce API calls",
        "Set reasonable timeouts (30 seconds recommended)",
        "Log requests and responses for debugging"
      ],
      "commonPatterns": [
        "Check authentication before making requests",
        "Validate required parameters are present",
        "Handle pagination for list endpoints",
        "Implement retry logic for transient errors",
        "Parse error responses for detailed error information"
      ],
      "aiSpecificGuidance": [
        "For AI agents: Always check response status before processing data",
        "Implement fallback strategies for API failures",
        "Use structured error handling to provide meaningful feedback",
        "Consider caching strategies for frequently accessed data",
        "Implement request queuing for high-volume operations"
      ]
    },
    "workflow": "Part of clicks management workflow",
    "realWorldUsage": [
      "Managing clicks resources in affiliate marketing workflows",
      "Automating clicks operations for campaign optimization",
      "Integrating clicks data with external reporting systems"
    ]
  },
  "DELETE /public/api/v1/clicks/campaign/{id}": {
    "method": "DELETE",
    "path": "/public/api/v1/clicks/campaign/{id}",
    "category": "clicks",
    "summary": "Delete campaign's clicks",
    "description": "Delete campaign's clicks. Removes a campaign resource (typically soft delete that can be restored).",
    "parameters": [
      {
        "name": "id",
        "in": "path",
        "required": true,
        "type": "integer",
        "description": "Unique identifier of the resource",
        "example": 123,
        "validation": "Must be a positive integer"
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success - Resource deleted successfully",
        "example": {
          "message": "Resource deleted successfully",
          "deletedAt": "2023-12-01T16:00:00Z"
        }
      },
      "400": {
        "description": "Bad Request - Invalid input data or missing required fields",
        "example": {
          "error": "Validation failed",
          "message": "Field 'name' is required",
          "details": {
            "field": "name",
            "code": "required",
            "value": null
          }
        }
      },
      "401": {
        "description": "Unauthorized - Invalid or missing API key",
        "example": {
          "error": "Unauthorized",
          "message": "Invalid API key or token expired"
        }
      },
      "403": {
        "description": "Forbidden - Access denied or insufficient permissions",
        "example": {
          "error": "Access denied",
          "message": "Insufficient permissions to access this resource"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Not found",
          "message": "Resource with ID 123 not found"
        }
      },
      "429": {
        "description": "Too Many Requests - Rate limit exceeded",
        "example": {
          "error": "Rate limit exceeded",
          "message": "Too many requests, please try again later",
          "retryAfter": 60
        }
      },
      "500": {
        "description": "Internal Server Error - Server-side error",
        "example": {
          "error": "Internal server error",
          "message": "Something went wrong on our end"
        }
      }
    },
    "examples": {
      "python": "import requests\nimport os\nimport time\nfrom typing import Optional, Dict, Any\n\nclass BinomAPIClient:\n    def __init__(self, api_key: str):\n        self.api_key = api_key\n        self.base_url = \"https://pierdun.com/public/api/v1\"\n        self.headers = {\n            \"Authorization\": f\"Bearer {api_key}\",\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json\"\n        }\n    \n    def make_request(self, method: str, endpoint: str, data: Optional[Dict] = None, params: Optional[Dict] = None) -> Dict[Any, Any]:\n        \"\"\"Make API request with error handling and retries\"\"\"\n        url = f\"{self.base_url}{endpoint}\"\n        \n        for attempt in range(3):\n            try:\n                response = requests.request(\n                    method=method,\n                    url=url,\n                    headers=self.headers,\n                    json=data,\n                    params=params,\n                    timeout=30\n                )\n                \n                if response.status_code == 429:\n                    # Rate limit - wait and retry\n                    time.sleep(2 ** attempt)\n                    continue\n                \n                if response.status_code in [200, 201]:\n                    return response.json()\n                else:\n                    raise Exception(f\"API Error {response.status_code}: {response.text}\")\n                    \n            except requests.exceptions.RequestException as e:\n                if attempt == 2:  # Last attempt\n                    raise Exception(f\"Request failed: {str(e)}\")\n                time.sleep(1)\n        \n        raise Exception(\"Max retries exceeded\")\n\n# Usage example\nclient = BinomAPIClient(os.getenv('binomPublic'))\n\ntry:\n    result = client.make_request(\n        method=\"DELETE\",\n        endpoint=\"/public/api/v1/clicks/campaign/{id}\",\n    )\n    \n    print(\"✅ Success:\", result)\n    \nexcept Exception as e:\n    print(f\"❌ Error: {e}\")",
      "curl": "# Basic request\ncurl -X DELETE \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\" \\\n  \"https://pierdun.com/public/api/v1/clicks/campaign/{id}\"",
      "javascript": "class BinomAPI {\n  constructor(apiKey) {\n    this.apiKey = apiKey;\n    this.baseURL = 'https://pierdun.com/public/api/v1';\n    this.headers = {\n      'Authorization': `Bearer ${apiKey}`,\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    };\n  }\n\n  async makeRequest(method, endpoint, data = null, params = null) {\n    const url = new URL(`${this.baseURL}${endpoint}`);\n    \n    if (params) {\n      Object.keys(params).forEach(key => \n        url.searchParams.append(key, params[key])\n      );\n    }\n\n    const config = {\n      method: method,\n      headers: this.headers\n    };\n\n    if (data) {\n      config.body = JSON.stringify(data);\n    }\n\n    try {\n      const response = await fetch(url.toString(), config);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${await response.text()}`);\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('API Error:', error);\n      throw error;\n    }\n  }\n}\n\n// Usage\nconst api = new BinomAPI(process.env.BINOM_API_KEY);\n\ntry {\n  const result = await api.makeRequest(\n    'DELETE',\n    '/public/api/v1/clicks/campaign/{id}',\n    null,\n    null\n  );\n  \n  console.log('✅ Success:', result);\n} catch (error) {\n  console.error('❌ Error:', error.message);\n}"
    },
    "errorHandling": {
      "commonErrors": [
        {
          "code": 400,
          "cause": "Invalid input data, missing required fields, or malformed JSON",
          "solution": "Validate all input data before sending. Check required fields and data types.",
          "example": "Missing 'name' field in request body"
        },
        {
          "code": 401,
          "cause": "Invalid, expired, or missing API key",
          "solution": "Verify API key is correct and has not expired. Check Authorization header format.",
          "example": "Authorization header: 'Bearer YOUR_API_KEY'"
        },
        {
          "code": 403,
          "cause": "Insufficient permissions or access denied",
          "solution": "Ensure API key has required permissions for this operation.",
          "example": "User lacks permission to modify campaigns"
        },
        {
          "code": 404,
          "cause": "Resource not found or invalid ID",
          "solution": "Verify resource ID exists and is accessible to your account.",
          "example": "Campaign with ID 123 does not exist"
        },
        {
          "code": 429,
          "cause": "Rate limit exceeded",
          "solution": "Implement exponential backoff and retry logic. Reduce request frequency.",
          "example": "Wait 60 seconds before retrying"
        },
        {
          "code": 500,
          "cause": "Internal server error",
          "solution": "Retry request after a delay. Contact support if error persists.",
          "example": "Temporary server issue"
        }
      ],
      "retryStrategy": {
        "maxRetries": 3,
        "backoffMultiplier": 2,
        "initialDelay": 1,
        "retryableStatusCodes": [
          429,
          500,
          502,
          503,
          504
        ]
      },
      "bestPractices": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting",
        "Log errors with sufficient detail for debugging",
        "Set appropriate timeouts for requests",
        "Handle network errors gracefully"
      ]
    },
    "validation": {
      "authentication": {
        "required": true,
        "type": "Bearer token",
        "header": "Authorization: Bearer YOUR_API_KEY",
        "validation": "Token must be valid and not expired"
      },
      "contentType": {
        "required": false,
        "value": "application/json",
        "header": "Content-Type: application/json"
      },
      "rateLimits": {
        "requestsPerMinute": 100,
        "burstLimit": 10,
        "enforcement": "HTTP 429 status code when exceeded"
      },
      "dataValidation": [
        "All required fields must be present and non-empty",
        "Field types must match schema definitions",
        "String fields must not exceed maximum length",
        "Numeric fields must be within specified ranges",
        "Array fields must contain valid items",
        "Date fields must be in correct format (YYYY-MM-DD HH:MM:SS)"
      ],
      "commonValidationErrors": [
        "Missing required field 'name'",
        "Invalid email format",
        "String too long (max 255 characters)",
        "Invalid date format",
        "Negative value not allowed",
        "Invalid enum value"
      ]
    },
    "aiNotes": {
      "keyPoints": [
        "This is a DELETE endpoint for v1 operations",
        "Requires Bearer token authentication in Authorization header",
        "Returns JSON responses with consistent error format",
        "Supports standard HTTP status codes for success/error indication",
        "Rate limited to 100 requests per minute"
      ],
      "integrationTips": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting (429 errors)",
        "Cache responses when appropriate to reduce API calls",
        "Set reasonable timeouts (30 seconds recommended)",
        "Log requests and responses for debugging"
      ],
      "commonPatterns": [
        "Check authentication before making requests",
        "Validate required parameters are present",
        "Handle pagination for list endpoints",
        "Implement retry logic for transient errors",
        "Parse error responses for detailed error information"
      ],
      "aiSpecificGuidance": [
        "For AI agents: Always check response status before processing data",
        "Implement fallback strategies for API failures",
        "Use structured error handling to provide meaningful feedback",
        "Consider caching strategies for frequently accessed data",
        "Implement request queuing for high-volume operations"
      ]
    },
    "workflow": "Part of clicks management workflow",
    "realWorldUsage": [
      "Managing clicks resources in affiliate marketing workflows",
      "Automating clicks operations for campaign optimization",
      "Integrating clicks data with external reporting systems"
    ]
  },
  "POST /public/api/v1/campaign": {
    "method": "POST",
    "path": "/public/api/v1/campaign",
    "category": "campaign",
    "summary": "Create Campaign",
    "description": "Creates a new tracking campaign with specified traffic source, cost model, landing pages, and offers. This is the core operation for setting up traffic tracking and requires careful configuration of all routing parameters.",
    "parameters": [],
    "requestBody": {
      "contentType": "application/json",
      "required": [
        "name",
        "trafficSourceId"
      ],
      "schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Campaign name",
            "example": "Facebook iOS Dating Campaign",
            "minLength": 1,
            "maxLength": 255
          },
          "trafficSourceId": {
            "type": "integer",
            "description": "ID of the traffic source",
            "example": 1,
            "minimum": 1
          },
          "cost": {
            "type": "number",
            "description": "Cost per click/action",
            "example": 0.5,
            "minimum": 0
          },
          "currency": {
            "type": "string",
            "description": "Currency code",
            "example": "USD",
            "enum": [
              "USD",
              "EUR",
              "GBP",
              "RUB"
            ]
          },
          "status": {
            "type": "string",
            "description": "Campaign status",
            "example": "active",
            "enum": [
              "active",
              "paused",
              "archived"
            ]
          }
        }
      },
      "example": {
        "name": "Facebook iOS Dating Campaign",
        "trafficSourceId": 1,
        "cost": 0.5,
        "currency": "USD",
        "status": "active"
      }
    },
    "responses": {
      "201": {
        "description": "Created - Resource created successfully",
        "example": {
          "id": 123,
          "message": "Resource created successfully",
          "data": {
            "id": 123,
            "name": "New Resource",
            "createdAt": "2023-12-01T10:00:00Z"
          }
        }
      },
      "400": {
        "description": "Bad Request - Invalid input data or missing required fields",
        "example": {
          "error": "Validation failed",
          "message": "Field 'name' is required",
          "details": {
            "field": "name",
            "code": "required",
            "value": null
          }
        }
      },
      "401": {
        "description": "Unauthorized - Invalid or missing API key",
        "example": {
          "error": "Unauthorized",
          "message": "Invalid API key or token expired"
        }
      },
      "403": {
        "description": "Forbidden - Access denied or insufficient permissions",
        "example": {
          "error": "Access denied",
          "message": "Insufficient permissions to access this resource"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Not found",
          "message": "Resource with ID 123 not found"
        }
      },
      "429": {
        "description": "Too Many Requests - Rate limit exceeded",
        "example": {
          "error": "Rate limit exceeded",
          "message": "Too many requests, please try again later",
          "retryAfter": 60
        }
      },
      "500": {
        "description": "Internal Server Error - Server-side error",
        "example": {
          "error": "Internal server error",
          "message": "Something went wrong on our end"
        }
      }
    },
    "examples": {
      "python": "import requests\nimport os\nimport time\nfrom typing import Optional, Dict, Any\n\nclass BinomAPIClient:\n    def __init__(self, api_key: str):\n        self.api_key = api_key\n        self.base_url = \"https://pierdun.com/public/api/v1\"\n        self.headers = {\n            \"Authorization\": f\"Bearer {api_key}\",\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json\"\n        }\n    \n    def make_request(self, method: str, endpoint: str, data: Optional[Dict] = None, params: Optional[Dict] = None) -> Dict[Any, Any]:\n        \"\"\"Make API request with error handling and retries\"\"\"\n        url = f\"{self.base_url}{endpoint}\"\n        \n        for attempt in range(3):\n            try:\n                response = requests.request(\n                    method=method,\n                    url=url,\n                    headers=self.headers,\n                    json=data,\n                    params=params,\n                    timeout=30\n                )\n                \n                if response.status_code == 429:\n                    # Rate limit - wait and retry\n                    time.sleep(2 ** attempt)\n                    continue\n                \n                if response.status_code in [200, 201]:\n                    return response.json()\n                else:\n                    raise Exception(f\"API Error {response.status_code}: {response.text}\")\n                    \n            except requests.exceptions.RequestException as e:\n                if attempt == 2:  # Last attempt\n                    raise Exception(f\"Request failed: {str(e)}\")\n                time.sleep(1)\n        \n        raise Exception(\"Max retries exceeded\")\n\n# Usage example\nclient = BinomAPIClient(os.getenv('binomPublic'))\n\ntry:\n    result = client.make_request(\n        method=\"POST\",\n        endpoint=\"/public/api/v1/campaign\",\n        data={\n        \"name\": \"Facebook iOS Dating Campaign\",\n        \"trafficSourceId\": 1,\n        \"cost\": 0.5,\n        \"currency\": \"USD\",\n        \"status\": \"active\"\n},\n    )\n    \n    print(\"✅ Success:\", result)\n    \nexcept Exception as e:\n    print(f\"❌ Error: {e}\")",
      "curl": "# Basic request\ncurl -X POST \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\" \\\n  -d '{\"name\":\"Facebook iOS Dating Campaign\",\"trafficSourceId\":1,\"cost\":0.5,\"currency\":\"USD\",\"status\":\"active\"}' \\\n  \"https://pierdun.com/public/api/v1/campaign\"",
      "javascript": "class BinomAPI {\n  constructor(apiKey) {\n    this.apiKey = apiKey;\n    this.baseURL = 'https://pierdun.com/public/api/v1';\n    this.headers = {\n      'Authorization': `Bearer ${apiKey}`,\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    };\n  }\n\n  async makeRequest(method, endpoint, data = null, params = null) {\n    const url = new URL(`${this.baseURL}${endpoint}`);\n    \n    if (params) {\n      Object.keys(params).forEach(key => \n        url.searchParams.append(key, params[key])\n      );\n    }\n\n    const config = {\n      method: method,\n      headers: this.headers\n    };\n\n    if (data) {\n      config.body = JSON.stringify(data);\n    }\n\n    try {\n      const response = await fetch(url.toString(), config);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${await response.text()}`);\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('API Error:', error);\n      throw error;\n    }\n  }\n}\n\n// Usage\nconst api = new BinomAPI(process.env.BINOM_API_KEY);\n\ntry {\n  const result = await api.makeRequest(\n    'POST',\n    '/public/api/v1/campaign',\n    {\n    \"name\": \"Facebook iOS Dating Campaign\",\n    \"trafficSourceId\": 1,\n    \"cost\": 0.5,\n    \"currency\": \"USD\",\n    \"status\": \"active\"\n},\n    null\n  );\n  \n  console.log('✅ Success:', result);\n} catch (error) {\n  console.error('❌ Error:', error.message);\n}"
    },
    "errorHandling": {
      "commonErrors": [
        {
          "code": 400,
          "cause": "Invalid input data, missing required fields, or malformed JSON",
          "solution": "Validate all input data before sending. Check required fields and data types.",
          "example": "Missing 'name' field in request body"
        },
        {
          "code": 401,
          "cause": "Invalid, expired, or missing API key",
          "solution": "Verify API key is correct and has not expired. Check Authorization header format.",
          "example": "Authorization header: 'Bearer YOUR_API_KEY'"
        },
        {
          "code": 403,
          "cause": "Insufficient permissions or access denied",
          "solution": "Ensure API key has required permissions for this operation.",
          "example": "User lacks permission to modify campaigns"
        },
        {
          "code": 404,
          "cause": "Resource not found or invalid ID",
          "solution": "Verify resource ID exists and is accessible to your account.",
          "example": "Campaign with ID 123 does not exist"
        },
        {
          "code": 429,
          "cause": "Rate limit exceeded",
          "solution": "Implement exponential backoff and retry logic. Reduce request frequency.",
          "example": "Wait 60 seconds before retrying"
        },
        {
          "code": 500,
          "cause": "Internal server error",
          "solution": "Retry request after a delay. Contact support if error persists.",
          "example": "Temporary server issue"
        }
      ],
      "retryStrategy": {
        "maxRetries": 3,
        "backoffMultiplier": 2,
        "initialDelay": 1,
        "retryableStatusCodes": [
          429,
          500,
          502,
          503,
          504
        ]
      },
      "bestPractices": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting",
        "Log errors with sufficient detail for debugging",
        "Set appropriate timeouts for requests",
        "Handle network errors gracefully"
      ]
    },
    "validation": {
      "authentication": {
        "required": true,
        "type": "Bearer token",
        "header": "Authorization: Bearer YOUR_API_KEY",
        "validation": "Token must be valid and not expired"
      },
      "contentType": {
        "required": true,
        "value": "application/json",
        "header": "Content-Type: application/json"
      },
      "rateLimits": {
        "requestsPerMinute": 100,
        "burstLimit": 10,
        "enforcement": "HTTP 429 status code when exceeded"
      },
      "dataValidation": [
        "All required fields must be present and non-empty",
        "Field types must match schema definitions",
        "String fields must not exceed maximum length",
        "Numeric fields must be within specified ranges",
        "Array fields must contain valid items",
        "Date fields must be in correct format (YYYY-MM-DD HH:MM:SS)"
      ],
      "commonValidationErrors": [
        "Missing required field 'name'",
        "Invalid email format",
        "String too long (max 255 characters)",
        "Invalid date format",
        "Negative value not allowed",
        "Invalid enum value"
      ]
    },
    "aiNotes": {
      "keyPoints": [
        "This is a POST endpoint for v1 operations",
        "Requires Bearer token authentication in Authorization header",
        "Returns JSON responses with consistent error format",
        "Supports standard HTTP status codes for success/error indication",
        "Rate limited to 100 requests per minute"
      ],
      "integrationTips": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting (429 errors)",
        "Cache responses when appropriate to reduce API calls",
        "Set reasonable timeouts (30 seconds recommended)",
        "Log requests and responses for debugging"
      ],
      "commonPatterns": [
        "Check authentication before making requests",
        "Validate required parameters are present",
        "Handle pagination for list endpoints",
        "Implement retry logic for transient errors",
        "Parse error responses for detailed error information"
      ],
      "aiSpecificGuidance": [
        "For AI agents: Always check response status before processing data",
        "Implement fallback strategies for API failures",
        "Use structured error handling to provide meaningful feedback",
        "Consider caching strategies for frequently accessed data",
        "Implement request queuing for high-volume operations"
      ]
    },
    "workflow": "Core step: Create campaign after setting up traffic sources and networks",
    "realWorldUsage": [
      "Creating Facebook Ads campaign for dating offers",
      "Setting up Google Ads campaign with multiple landing pages",
      "Launching native advertising campaign with A/B testing"
    ]
  },
  "GET /public/api/v1/campaign/{id}": {
    "method": "GET",
    "path": "/public/api/v1/campaign/{id}",
    "category": "campaign",
    "summary": "Get Campaign",
    "description": "Fetches complete campaign configuration including traffic source settings, landing page rotations, offer assignments, cost models, and current status. Critical for campaign management and troubleshooting.",
    "parameters": [
      {
        "name": "id",
        "in": "path",
        "required": true,
        "type": "integer",
        "description": "Unique identifier of the resource",
        "example": 123,
        "validation": "Must be a positive integer"
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success - Resource details returned",
        "example": {
          "id": 123,
          "name": "Resource Name",
          "status": "active",
          "createdAt": "2023-12-01T10:00:00Z",
          "updatedAt": "2023-12-01T15:30:00Z"
        }
      },
      "400": {
        "description": "Bad Request - Invalid input data or missing required fields",
        "example": {
          "error": "Validation failed",
          "message": "Field 'name' is required",
          "details": {
            "field": "name",
            "code": "required",
            "value": null
          }
        }
      },
      "401": {
        "description": "Unauthorized - Invalid or missing API key",
        "example": {
          "error": "Unauthorized",
          "message": "Invalid API key or token expired"
        }
      },
      "403": {
        "description": "Forbidden - Access denied or insufficient permissions",
        "example": {
          "error": "Access denied",
          "message": "Insufficient permissions to access this resource"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Not found",
          "message": "Resource with ID 123 not found"
        }
      },
      "429": {
        "description": "Too Many Requests - Rate limit exceeded",
        "example": {
          "error": "Rate limit exceeded",
          "message": "Too many requests, please try again later",
          "retryAfter": 60
        }
      },
      "500": {
        "description": "Internal Server Error - Server-side error",
        "example": {
          "error": "Internal server error",
          "message": "Something went wrong on our end"
        }
      }
    },
    "examples": {
      "python": "import requests\nimport os\nimport time\nfrom typing import Optional, Dict, Any\n\nclass BinomAPIClient:\n    def __init__(self, api_key: str):\n        self.api_key = api_key\n        self.base_url = \"https://pierdun.com/public/api/v1\"\n        self.headers = {\n            \"Authorization\": f\"Bearer {api_key}\",\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json\"\n        }\n    \n    def make_request(self, method: str, endpoint: str, data: Optional[Dict] = None, params: Optional[Dict] = None) -> Dict[Any, Any]:\n        \"\"\"Make API request with error handling and retries\"\"\"\n        url = f\"{self.base_url}{endpoint}\"\n        \n        for attempt in range(3):\n            try:\n                response = requests.request(\n                    method=method,\n                    url=url,\n                    headers=self.headers,\n                    json=data,\n                    params=params,\n                    timeout=30\n                )\n                \n                if response.status_code == 429:\n                    # Rate limit - wait and retry\n                    time.sleep(2 ** attempt)\n                    continue\n                \n                if response.status_code in [200, 201]:\n                    return response.json()\n                else:\n                    raise Exception(f\"API Error {response.status_code}: {response.text}\")\n                    \n            except requests.exceptions.RequestException as e:\n                if attempt == 2:  # Last attempt\n                    raise Exception(f\"Request failed: {str(e)}\")\n                time.sleep(1)\n        \n        raise Exception(\"Max retries exceeded\")\n\n# Usage example\nclient = BinomAPIClient(os.getenv('binomPublic'))\n\ntry:\n    result = client.make_request(\n        method=\"GET\",\n        endpoint=\"/public/api/v1/campaign/{id}\",\n    )\n    \n    print(\"✅ Success:\", result)\n    \nexcept Exception as e:\n    print(f\"❌ Error: {e}\")",
      "curl": "# Basic request\ncurl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\" \\\n  \"https://pierdun.com/public/api/v1/campaign/{id}\"",
      "javascript": "class BinomAPI {\n  constructor(apiKey) {\n    this.apiKey = apiKey;\n    this.baseURL = 'https://pierdun.com/public/api/v1';\n    this.headers = {\n      'Authorization': `Bearer ${apiKey}`,\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    };\n  }\n\n  async makeRequest(method, endpoint, data = null, params = null) {\n    const url = new URL(`${this.baseURL}${endpoint}`);\n    \n    if (params) {\n      Object.keys(params).forEach(key => \n        url.searchParams.append(key, params[key])\n      );\n    }\n\n    const config = {\n      method: method,\n      headers: this.headers\n    };\n\n    if (data) {\n      config.body = JSON.stringify(data);\n    }\n\n    try {\n      const response = await fetch(url.toString(), config);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${await response.text()}`);\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('API Error:', error);\n      throw error;\n    }\n  }\n}\n\n// Usage\nconst api = new BinomAPI(process.env.BINOM_API_KEY);\n\ntry {\n  const result = await api.makeRequest(\n    'GET',\n    '/public/api/v1/campaign/{id}',\n    null,\n    null\n  );\n  \n  console.log('✅ Success:', result);\n} catch (error) {\n  console.error('❌ Error:', error.message);\n}"
    },
    "errorHandling": {
      "commonErrors": [
        {
          "code": 400,
          "cause": "Invalid input data, missing required fields, or malformed JSON",
          "solution": "Validate all input data before sending. Check required fields and data types.",
          "example": "Missing 'name' field in request body"
        },
        {
          "code": 401,
          "cause": "Invalid, expired, or missing API key",
          "solution": "Verify API key is correct and has not expired. Check Authorization header format.",
          "example": "Authorization header: 'Bearer YOUR_API_KEY'"
        },
        {
          "code": 403,
          "cause": "Insufficient permissions or access denied",
          "solution": "Ensure API key has required permissions for this operation.",
          "example": "User lacks permission to modify campaigns"
        },
        {
          "code": 404,
          "cause": "Resource not found or invalid ID",
          "solution": "Verify resource ID exists and is accessible to your account.",
          "example": "Campaign with ID 123 does not exist"
        },
        {
          "code": 429,
          "cause": "Rate limit exceeded",
          "solution": "Implement exponential backoff and retry logic. Reduce request frequency.",
          "example": "Wait 60 seconds before retrying"
        },
        {
          "code": 500,
          "cause": "Internal server error",
          "solution": "Retry request after a delay. Contact support if error persists.",
          "example": "Temporary server issue"
        }
      ],
      "retryStrategy": {
        "maxRetries": 3,
        "backoffMultiplier": 2,
        "initialDelay": 1,
        "retryableStatusCodes": [
          429,
          500,
          502,
          503,
          504
        ]
      },
      "bestPractices": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting",
        "Log errors with sufficient detail for debugging",
        "Set appropriate timeouts for requests",
        "Handle network errors gracefully"
      ]
    },
    "validation": {
      "authentication": {
        "required": true,
        "type": "Bearer token",
        "header": "Authorization: Bearer YOUR_API_KEY",
        "validation": "Token must be valid and not expired"
      },
      "contentType": {
        "required": false,
        "value": "application/json",
        "header": "Content-Type: application/json"
      },
      "rateLimits": {
        "requestsPerMinute": 100,
        "burstLimit": 10,
        "enforcement": "HTTP 429 status code when exceeded"
      },
      "dataValidation": [
        "All required fields must be present and non-empty",
        "Field types must match schema definitions",
        "String fields must not exceed maximum length",
        "Numeric fields must be within specified ranges",
        "Array fields must contain valid items",
        "Date fields must be in correct format (YYYY-MM-DD HH:MM:SS)"
      ],
      "commonValidationErrors": [
        "Missing required field 'name'",
        "Invalid email format",
        "String too long (max 255 characters)",
        "Invalid date format",
        "Negative value not allowed",
        "Invalid enum value"
      ]
    },
    "aiNotes": {
      "keyPoints": [
        "This is a GET endpoint for v1 operations",
        "Requires Bearer token authentication in Authorization header",
        "Returns JSON responses with consistent error format",
        "Supports standard HTTP status codes for success/error indication",
        "Rate limited to 100 requests per minute"
      ],
      "integrationTips": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting (429 errors)",
        "Cache responses when appropriate to reduce API calls",
        "Set reasonable timeouts (30 seconds recommended)",
        "Log requests and responses for debugging"
      ],
      "commonPatterns": [
        "Check authentication before making requests",
        "Validate required parameters are present",
        "Handle pagination for list endpoints",
        "Implement retry logic for transient errors",
        "Parse error responses for detailed error information"
      ],
      "aiSpecificGuidance": [
        "For AI agents: Always check response status before processing data",
        "Implement fallback strategies for API failures",
        "Use structured error handling to provide meaningful feedback",
        "Consider caching strategies for frequently accessed data",
        "Implement request queuing for high-volume operations"
      ]
    },
    "workflow": "Used for: Retrieving campaign details for optimization or troubleshooting",
    "realWorldUsage": [
      "Managing campaign resources in affiliate marketing workflows",
      "Automating campaign operations for campaign optimization",
      "Integrating campaign data with external reporting systems"
    ]
  },
  "PUT /public/api/v1/campaign/{id}": {
    "method": "PUT",
    "path": "/public/api/v1/campaign/{id}",
    "category": "campaign",
    "summary": "Edit Campaign",
    "description": "Edit Campaign. Updates an existing campaign resource with new configuration data.",
    "parameters": [
      {
        "name": "id",
        "in": "path",
        "required": true,
        "type": "integer",
        "description": "Unique identifier of the resource",
        "example": 123,
        "validation": "Must be a positive integer"
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success - Resource updated successfully",
        "example": {
          "message": "Resource updated successfully",
          "data": {
            "id": 123,
            "updatedAt": "2023-12-01T15:30:00Z"
          }
        }
      },
      "400": {
        "description": "Bad Request - Invalid input data or missing required fields",
        "example": {
          "error": "Validation failed",
          "message": "Field 'name' is required",
          "details": {
            "field": "name",
            "code": "required",
            "value": null
          }
        }
      },
      "401": {
        "description": "Unauthorized - Invalid or missing API key",
        "example": {
          "error": "Unauthorized",
          "message": "Invalid API key or token expired"
        }
      },
      "403": {
        "description": "Forbidden - Access denied or insufficient permissions",
        "example": {
          "error": "Access denied",
          "message": "Insufficient permissions to access this resource"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Not found",
          "message": "Resource with ID 123 not found"
        }
      },
      "429": {
        "description": "Too Many Requests - Rate limit exceeded",
        "example": {
          "error": "Rate limit exceeded",
          "message": "Too many requests, please try again later",
          "retryAfter": 60
        }
      },
      "500": {
        "description": "Internal Server Error - Server-side error",
        "example": {
          "error": "Internal server error",
          "message": "Something went wrong on our end"
        }
      }
    },
    "examples": {
      "python": "import requests\nimport os\nimport time\nfrom typing import Optional, Dict, Any\n\nclass BinomAPIClient:\n    def __init__(self, api_key: str):\n        self.api_key = api_key\n        self.base_url = \"https://pierdun.com/public/api/v1\"\n        self.headers = {\n            \"Authorization\": f\"Bearer {api_key}\",\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json\"\n        }\n    \n    def make_request(self, method: str, endpoint: str, data: Optional[Dict] = None, params: Optional[Dict] = None) -> Dict[Any, Any]:\n        \"\"\"Make API request with error handling and retries\"\"\"\n        url = f\"{self.base_url}{endpoint}\"\n        \n        for attempt in range(3):\n            try:\n                response = requests.request(\n                    method=method,\n                    url=url,\n                    headers=self.headers,\n                    json=data,\n                    params=params,\n                    timeout=30\n                )\n                \n                if response.status_code == 429:\n                    # Rate limit - wait and retry\n                    time.sleep(2 ** attempt)\n                    continue\n                \n                if response.status_code in [200, 201]:\n                    return response.json()\n                else:\n                    raise Exception(f\"API Error {response.status_code}: {response.text}\")\n                    \n            except requests.exceptions.RequestException as e:\n                if attempt == 2:  # Last attempt\n                    raise Exception(f\"Request failed: {str(e)}\")\n                time.sleep(1)\n        \n        raise Exception(\"Max retries exceeded\")\n\n# Usage example\nclient = BinomAPIClient(os.getenv('binomPublic'))\n\ntry:\n    result = client.make_request(\n        method=\"PUT\",\n        endpoint=\"/public/api/v1/campaign/{id}\",\n    )\n    \n    print(\"✅ Success:\", result)\n    \nexcept Exception as e:\n    print(f\"❌ Error: {e}\")",
      "curl": "# Basic request\ncurl -X PUT \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\" \\\n  \"https://pierdun.com/public/api/v1/campaign/{id}\"",
      "javascript": "class BinomAPI {\n  constructor(apiKey) {\n    this.apiKey = apiKey;\n    this.baseURL = 'https://pierdun.com/public/api/v1';\n    this.headers = {\n      'Authorization': `Bearer ${apiKey}`,\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    };\n  }\n\n  async makeRequest(method, endpoint, data = null, params = null) {\n    const url = new URL(`${this.baseURL}${endpoint}`);\n    \n    if (params) {\n      Object.keys(params).forEach(key => \n        url.searchParams.append(key, params[key])\n      );\n    }\n\n    const config = {\n      method: method,\n      headers: this.headers\n    };\n\n    if (data) {\n      config.body = JSON.stringify(data);\n    }\n\n    try {\n      const response = await fetch(url.toString(), config);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${await response.text()}`);\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('API Error:', error);\n      throw error;\n    }\n  }\n}\n\n// Usage\nconst api = new BinomAPI(process.env.BINOM_API_KEY);\n\ntry {\n  const result = await api.makeRequest(\n    'PUT',\n    '/public/api/v1/campaign/{id}',\n    null,\n    null\n  );\n  \n  console.log('✅ Success:', result);\n} catch (error) {\n  console.error('❌ Error:', error.message);\n}"
    },
    "errorHandling": {
      "commonErrors": [
        {
          "code": 400,
          "cause": "Invalid input data, missing required fields, or malformed JSON",
          "solution": "Validate all input data before sending. Check required fields and data types.",
          "example": "Missing 'name' field in request body"
        },
        {
          "code": 401,
          "cause": "Invalid, expired, or missing API key",
          "solution": "Verify API key is correct and has not expired. Check Authorization header format.",
          "example": "Authorization header: 'Bearer YOUR_API_KEY'"
        },
        {
          "code": 403,
          "cause": "Insufficient permissions or access denied",
          "solution": "Ensure API key has required permissions for this operation.",
          "example": "User lacks permission to modify campaigns"
        },
        {
          "code": 404,
          "cause": "Resource not found or invalid ID",
          "solution": "Verify resource ID exists and is accessible to your account.",
          "example": "Campaign with ID 123 does not exist"
        },
        {
          "code": 429,
          "cause": "Rate limit exceeded",
          "solution": "Implement exponential backoff and retry logic. Reduce request frequency.",
          "example": "Wait 60 seconds before retrying"
        },
        {
          "code": 500,
          "cause": "Internal server error",
          "solution": "Retry request after a delay. Contact support if error persists.",
          "example": "Temporary server issue"
        }
      ],
      "retryStrategy": {
        "maxRetries": 3,
        "backoffMultiplier": 2,
        "initialDelay": 1,
        "retryableStatusCodes": [
          429,
          500,
          502,
          503,
          504
        ]
      },
      "bestPractices": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting",
        "Log errors with sufficient detail for debugging",
        "Set appropriate timeouts for requests",
        "Handle network errors gracefully"
      ]
    },
    "validation": {
      "authentication": {
        "required": true,
        "type": "Bearer token",
        "header": "Authorization: Bearer YOUR_API_KEY",
        "validation": "Token must be valid and not expired"
      },
      "contentType": {
        "required": true,
        "value": "application/json",
        "header": "Content-Type: application/json"
      },
      "rateLimits": {
        "requestsPerMinute": 100,
        "burstLimit": 10,
        "enforcement": "HTTP 429 status code when exceeded"
      },
      "dataValidation": [
        "All required fields must be present and non-empty",
        "Field types must match schema definitions",
        "String fields must not exceed maximum length",
        "Numeric fields must be within specified ranges",
        "Array fields must contain valid items",
        "Date fields must be in correct format (YYYY-MM-DD HH:MM:SS)"
      ],
      "commonValidationErrors": [
        "Missing required field 'name'",
        "Invalid email format",
        "String too long (max 255 characters)",
        "Invalid date format",
        "Negative value not allowed",
        "Invalid enum value"
      ]
    },
    "aiNotes": {
      "keyPoints": [
        "This is a PUT endpoint for v1 operations",
        "Requires Bearer token authentication in Authorization header",
        "Returns JSON responses with consistent error format",
        "Supports standard HTTP status codes for success/error indication",
        "Rate limited to 100 requests per minute"
      ],
      "integrationTips": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting (429 errors)",
        "Cache responses when appropriate to reduce API calls",
        "Set reasonable timeouts (30 seconds recommended)",
        "Log requests and responses for debugging"
      ],
      "commonPatterns": [
        "Check authentication before making requests",
        "Validate required parameters are present",
        "Handle pagination for list endpoints",
        "Implement retry logic for transient errors",
        "Parse error responses for detailed error information"
      ],
      "aiSpecificGuidance": [
        "For AI agents: Always check response status before processing data",
        "Implement fallback strategies for API failures",
        "Use structured error handling to provide meaningful feedback",
        "Consider caching strategies for frequently accessed data",
        "Implement request queuing for high-volume operations"
      ]
    },
    "workflow": "Used for: Updating campaign settings, costs, or routing rules",
    "realWorldUsage": [
      "Managing campaign resources in affiliate marketing workflows",
      "Automating campaign operations for campaign optimization",
      "Integrating campaign data with external reporting systems"
    ]
  },
  "DELETE /public/api/v1/campaign/{id}": {
    "method": "DELETE",
    "path": "/public/api/v1/campaign/{id}",
    "category": "campaign",
    "summary": "Delete Campaign",
    "description": "Delete Campaign. Removes a campaign resource (typically soft delete that can be restored).",
    "parameters": [
      {
        "name": "id",
        "in": "path",
        "required": true,
        "type": "integer",
        "description": "Unique identifier of the resource",
        "example": 123,
        "validation": "Must be a positive integer"
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success - Resource deleted successfully",
        "example": {
          "message": "Resource deleted successfully",
          "deletedAt": "2023-12-01T16:00:00Z"
        }
      },
      "400": {
        "description": "Bad Request - Invalid input data or missing required fields",
        "example": {
          "error": "Validation failed",
          "message": "Field 'name' is required",
          "details": {
            "field": "name",
            "code": "required",
            "value": null
          }
        }
      },
      "401": {
        "description": "Unauthorized - Invalid or missing API key",
        "example": {
          "error": "Unauthorized",
          "message": "Invalid API key or token expired"
        }
      },
      "403": {
        "description": "Forbidden - Access denied or insufficient permissions",
        "example": {
          "error": "Access denied",
          "message": "Insufficient permissions to access this resource"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Not found",
          "message": "Resource with ID 123 not found"
        }
      },
      "429": {
        "description": "Too Many Requests - Rate limit exceeded",
        "example": {
          "error": "Rate limit exceeded",
          "message": "Too many requests, please try again later",
          "retryAfter": 60
        }
      },
      "500": {
        "description": "Internal Server Error - Server-side error",
        "example": {
          "error": "Internal server error",
          "message": "Something went wrong on our end"
        }
      }
    },
    "examples": {
      "python": "import requests\nimport os\nimport time\nfrom typing import Optional, Dict, Any\n\nclass BinomAPIClient:\n    def __init__(self, api_key: str):\n        self.api_key = api_key\n        self.base_url = \"https://pierdun.com/public/api/v1\"\n        self.headers = {\n            \"Authorization\": f\"Bearer {api_key}\",\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json\"\n        }\n    \n    def make_request(self, method: str, endpoint: str, data: Optional[Dict] = None, params: Optional[Dict] = None) -> Dict[Any, Any]:\n        \"\"\"Make API request with error handling and retries\"\"\"\n        url = f\"{self.base_url}{endpoint}\"\n        \n        for attempt in range(3):\n            try:\n                response = requests.request(\n                    method=method,\n                    url=url,\n                    headers=self.headers,\n                    json=data,\n                    params=params,\n                    timeout=30\n                )\n                \n                if response.status_code == 429:\n                    # Rate limit - wait and retry\n                    time.sleep(2 ** attempt)\n                    continue\n                \n                if response.status_code in [200, 201]:\n                    return response.json()\n                else:\n                    raise Exception(f\"API Error {response.status_code}: {response.text}\")\n                    \n            except requests.exceptions.RequestException as e:\n                if attempt == 2:  # Last attempt\n                    raise Exception(f\"Request failed: {str(e)}\")\n                time.sleep(1)\n        \n        raise Exception(\"Max retries exceeded\")\n\n# Usage example\nclient = BinomAPIClient(os.getenv('binomPublic'))\n\ntry:\n    result = client.make_request(\n        method=\"DELETE\",\n        endpoint=\"/public/api/v1/campaign/{id}\",\n    )\n    \n    print(\"✅ Success:\", result)\n    \nexcept Exception as e:\n    print(f\"❌ Error: {e}\")",
      "curl": "# Basic request\ncurl -X DELETE \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\" \\\n  \"https://pierdun.com/public/api/v1/campaign/{id}\"",
      "javascript": "class BinomAPI {\n  constructor(apiKey) {\n    this.apiKey = apiKey;\n    this.baseURL = 'https://pierdun.com/public/api/v1';\n    this.headers = {\n      'Authorization': `Bearer ${apiKey}`,\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    };\n  }\n\n  async makeRequest(method, endpoint, data = null, params = null) {\n    const url = new URL(`${this.baseURL}${endpoint}`);\n    \n    if (params) {\n      Object.keys(params).forEach(key => \n        url.searchParams.append(key, params[key])\n      );\n    }\n\n    const config = {\n      method: method,\n      headers: this.headers\n    };\n\n    if (data) {\n      config.body = JSON.stringify(data);\n    }\n\n    try {\n      const response = await fetch(url.toString(), config);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${await response.text()}`);\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('API Error:', error);\n      throw error;\n    }\n  }\n}\n\n// Usage\nconst api = new BinomAPI(process.env.BINOM_API_KEY);\n\ntry {\n  const result = await api.makeRequest(\n    'DELETE',\n    '/public/api/v1/campaign/{id}',\n    null,\n    null\n  );\n  \n  console.log('✅ Success:', result);\n} catch (error) {\n  console.error('❌ Error:', error.message);\n}"
    },
    "errorHandling": {
      "commonErrors": [
        {
          "code": 400,
          "cause": "Invalid input data, missing required fields, or malformed JSON",
          "solution": "Validate all input data before sending. Check required fields and data types.",
          "example": "Missing 'name' field in request body"
        },
        {
          "code": 401,
          "cause": "Invalid, expired, or missing API key",
          "solution": "Verify API key is correct and has not expired. Check Authorization header format.",
          "example": "Authorization header: 'Bearer YOUR_API_KEY'"
        },
        {
          "code": 403,
          "cause": "Insufficient permissions or access denied",
          "solution": "Ensure API key has required permissions for this operation.",
          "example": "User lacks permission to modify campaigns"
        },
        {
          "code": 404,
          "cause": "Resource not found or invalid ID",
          "solution": "Verify resource ID exists and is accessible to your account.",
          "example": "Campaign with ID 123 does not exist"
        },
        {
          "code": 429,
          "cause": "Rate limit exceeded",
          "solution": "Implement exponential backoff and retry logic. Reduce request frequency.",
          "example": "Wait 60 seconds before retrying"
        },
        {
          "code": 500,
          "cause": "Internal server error",
          "solution": "Retry request after a delay. Contact support if error persists.",
          "example": "Temporary server issue"
        }
      ],
      "retryStrategy": {
        "maxRetries": 3,
        "backoffMultiplier": 2,
        "initialDelay": 1,
        "retryableStatusCodes": [
          429,
          500,
          502,
          503,
          504
        ]
      },
      "bestPractices": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting",
        "Log errors with sufficient detail for debugging",
        "Set appropriate timeouts for requests",
        "Handle network errors gracefully"
      ]
    },
    "validation": {
      "authentication": {
        "required": true,
        "type": "Bearer token",
        "header": "Authorization: Bearer YOUR_API_KEY",
        "validation": "Token must be valid and not expired"
      },
      "contentType": {
        "required": false,
        "value": "application/json",
        "header": "Content-Type: application/json"
      },
      "rateLimits": {
        "requestsPerMinute": 100,
        "burstLimit": 10,
        "enforcement": "HTTP 429 status code when exceeded"
      },
      "dataValidation": [
        "All required fields must be present and non-empty",
        "Field types must match schema definitions",
        "String fields must not exceed maximum length",
        "Numeric fields must be within specified ranges",
        "Array fields must contain valid items",
        "Date fields must be in correct format (YYYY-MM-DD HH:MM:SS)"
      ],
      "commonValidationErrors": [
        "Missing required field 'name'",
        "Invalid email format",
        "String too long (max 255 characters)",
        "Invalid date format",
        "Negative value not allowed",
        "Invalid enum value"
      ]
    },
    "aiNotes": {
      "keyPoints": [
        "This is a DELETE endpoint for v1 operations",
        "Requires Bearer token authentication in Authorization header",
        "Returns JSON responses with consistent error format",
        "Supports standard HTTP status codes for success/error indication",
        "Rate limited to 100 requests per minute"
      ],
      "integrationTips": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting (429 errors)",
        "Cache responses when appropriate to reduce API calls",
        "Set reasonable timeouts (30 seconds recommended)",
        "Log requests and responses for debugging"
      ],
      "commonPatterns": [
        "Check authentication before making requests",
        "Validate required parameters are present",
        "Handle pagination for list endpoints",
        "Implement retry logic for transient errors",
        "Parse error responses for detailed error information"
      ],
      "aiSpecificGuidance": [
        "For AI agents: Always check response status before processing data",
        "Implement fallback strategies for API failures",
        "Use structured error handling to provide meaningful feedback",
        "Consider caching strategies for frequently accessed data",
        "Implement request queuing for high-volume operations"
      ]
    },
    "workflow": "Used for: Pausing or removing campaigns (can be restored)",
    "realWorldUsage": [
      "Managing campaign resources in affiliate marketing workflows",
      "Automating campaign operations for campaign optimization",
      "Integrating campaign data with external reporting systems"
    ]
  },
  "PATCH /public/api/v1/campaign/{id}": {
    "method": "PATCH",
    "path": "/public/api/v1/campaign/{id}",
    "category": "campaign",
    "summary": "Restore Campaign",
    "description": "Restore Campaign. Partially updates or restores a campaign resource.",
    "parameters": [
      {
        "name": "id",
        "in": "path",
        "required": true,
        "type": "integer",
        "description": "Unique identifier of the resource",
        "example": 123,
        "validation": "Must be a positive integer"
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success - Resource updated successfully",
        "example": {
          "message": "Resource updated successfully",
          "data": {
            "id": 123,
            "updatedAt": "2023-12-01T15:30:00Z"
          }
        }
      },
      "400": {
        "description": "Bad Request - Invalid input data or missing required fields",
        "example": {
          "error": "Validation failed",
          "message": "Field 'name' is required",
          "details": {
            "field": "name",
            "code": "required",
            "value": null
          }
        }
      },
      "401": {
        "description": "Unauthorized - Invalid or missing API key",
        "example": {
          "error": "Unauthorized",
          "message": "Invalid API key or token expired"
        }
      },
      "403": {
        "description": "Forbidden - Access denied or insufficient permissions",
        "example": {
          "error": "Access denied",
          "message": "Insufficient permissions to access this resource"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Not found",
          "message": "Resource with ID 123 not found"
        }
      },
      "429": {
        "description": "Too Many Requests - Rate limit exceeded",
        "example": {
          "error": "Rate limit exceeded",
          "message": "Too many requests, please try again later",
          "retryAfter": 60
        }
      },
      "500": {
        "description": "Internal Server Error - Server-side error",
        "example": {
          "error": "Internal server error",
          "message": "Something went wrong on our end"
        }
      }
    },
    "examples": {
      "python": "import requests\nimport os\nimport time\nfrom typing import Optional, Dict, Any\n\nclass BinomAPIClient:\n    def __init__(self, api_key: str):\n        self.api_key = api_key\n        self.base_url = \"https://pierdun.com/public/api/v1\"\n        self.headers = {\n            \"Authorization\": f\"Bearer {api_key}\",\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json\"\n        }\n    \n    def make_request(self, method: str, endpoint: str, data: Optional[Dict] = None, params: Optional[Dict] = None) -> Dict[Any, Any]:\n        \"\"\"Make API request with error handling and retries\"\"\"\n        url = f\"{self.base_url}{endpoint}\"\n        \n        for attempt in range(3):\n            try:\n                response = requests.request(\n                    method=method,\n                    url=url,\n                    headers=self.headers,\n                    json=data,\n                    params=params,\n                    timeout=30\n                )\n                \n                if response.status_code == 429:\n                    # Rate limit - wait and retry\n                    time.sleep(2 ** attempt)\n                    continue\n                \n                if response.status_code in [200, 201]:\n                    return response.json()\n                else:\n                    raise Exception(f\"API Error {response.status_code}: {response.text}\")\n                    \n            except requests.exceptions.RequestException as e:\n                if attempt == 2:  # Last attempt\n                    raise Exception(f\"Request failed: {str(e)}\")\n                time.sleep(1)\n        \n        raise Exception(\"Max retries exceeded\")\n\n# Usage example\nclient = BinomAPIClient(os.getenv('binomPublic'))\n\ntry:\n    result = client.make_request(\n        method=\"PATCH\",\n        endpoint=\"/public/api/v1/campaign/{id}\",\n    )\n    \n    print(\"✅ Success:\", result)\n    \nexcept Exception as e:\n    print(f\"❌ Error: {e}\")",
      "curl": "# Basic request\ncurl -X PATCH \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\" \\\n  \"https://pierdun.com/public/api/v1/campaign/{id}\"",
      "javascript": "class BinomAPI {\n  constructor(apiKey) {\n    this.apiKey = apiKey;\n    this.baseURL = 'https://pierdun.com/public/api/v1';\n    this.headers = {\n      'Authorization': `Bearer ${apiKey}`,\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    };\n  }\n\n  async makeRequest(method, endpoint, data = null, params = null) {\n    const url = new URL(`${this.baseURL}${endpoint}`);\n    \n    if (params) {\n      Object.keys(params).forEach(key => \n        url.searchParams.append(key, params[key])\n      );\n    }\n\n    const config = {\n      method: method,\n      headers: this.headers\n    };\n\n    if (data) {\n      config.body = JSON.stringify(data);\n    }\n\n    try {\n      const response = await fetch(url.toString(), config);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${await response.text()}`);\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('API Error:', error);\n      throw error;\n    }\n  }\n}\n\n// Usage\nconst api = new BinomAPI(process.env.BINOM_API_KEY);\n\ntry {\n  const result = await api.makeRequest(\n    'PATCH',\n    '/public/api/v1/campaign/{id}',\n    null,\n    null\n  );\n  \n  console.log('✅ Success:', result);\n} catch (error) {\n  console.error('❌ Error:', error.message);\n}"
    },
    "errorHandling": {
      "commonErrors": [
        {
          "code": 400,
          "cause": "Invalid input data, missing required fields, or malformed JSON",
          "solution": "Validate all input data before sending. Check required fields and data types.",
          "example": "Missing 'name' field in request body"
        },
        {
          "code": 401,
          "cause": "Invalid, expired, or missing API key",
          "solution": "Verify API key is correct and has not expired. Check Authorization header format.",
          "example": "Authorization header: 'Bearer YOUR_API_KEY'"
        },
        {
          "code": 403,
          "cause": "Insufficient permissions or access denied",
          "solution": "Ensure API key has required permissions for this operation.",
          "example": "User lacks permission to modify campaigns"
        },
        {
          "code": 404,
          "cause": "Resource not found or invalid ID",
          "solution": "Verify resource ID exists and is accessible to your account.",
          "example": "Campaign with ID 123 does not exist"
        },
        {
          "code": 429,
          "cause": "Rate limit exceeded",
          "solution": "Implement exponential backoff and retry logic. Reduce request frequency.",
          "example": "Wait 60 seconds before retrying"
        },
        {
          "code": 500,
          "cause": "Internal server error",
          "solution": "Retry request after a delay. Contact support if error persists.",
          "example": "Temporary server issue"
        }
      ],
      "retryStrategy": {
        "maxRetries": 3,
        "backoffMultiplier": 2,
        "initialDelay": 1,
        "retryableStatusCodes": [
          429,
          500,
          502,
          503,
          504
        ]
      },
      "bestPractices": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting",
        "Log errors with sufficient detail for debugging",
        "Set appropriate timeouts for requests",
        "Handle network errors gracefully"
      ]
    },
    "validation": {
      "authentication": {
        "required": true,
        "type": "Bearer token",
        "header": "Authorization: Bearer YOUR_API_KEY",
        "validation": "Token must be valid and not expired"
      },
      "contentType": {
        "required": true,
        "value": "application/json",
        "header": "Content-Type: application/json"
      },
      "rateLimits": {
        "requestsPerMinute": 100,
        "burstLimit": 10,
        "enforcement": "HTTP 429 status code when exceeded"
      },
      "dataValidation": [
        "All required fields must be present and non-empty",
        "Field types must match schema definitions",
        "String fields must not exceed maximum length",
        "Numeric fields must be within specified ranges",
        "Array fields must contain valid items",
        "Date fields must be in correct format (YYYY-MM-DD HH:MM:SS)"
      ],
      "commonValidationErrors": [
        "Missing required field 'name'",
        "Invalid email format",
        "String too long (max 255 characters)",
        "Invalid date format",
        "Negative value not allowed",
        "Invalid enum value"
      ]
    },
    "aiNotes": {
      "keyPoints": [
        "This is a PATCH endpoint for v1 operations",
        "Requires Bearer token authentication in Authorization header",
        "Returns JSON responses with consistent error format",
        "Supports standard HTTP status codes for success/error indication",
        "Rate limited to 100 requests per minute"
      ],
      "integrationTips": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting (429 errors)",
        "Cache responses when appropriate to reduce API calls",
        "Set reasonable timeouts (30 seconds recommended)",
        "Log requests and responses for debugging"
      ],
      "commonPatterns": [
        "Check authentication before making requests",
        "Validate required parameters are present",
        "Handle pagination for list endpoints",
        "Implement retry logic for transient errors",
        "Parse error responses for detailed error information"
      ],
      "aiSpecificGuidance": [
        "For AI agents: Always check response status before processing data",
        "Implement fallback strategies for API failures",
        "Use structured error handling to provide meaningful feedback",
        "Consider caching strategies for frequently accessed data",
        "Implement request queuing for high-volume operations"
      ]
    },
    "workflow": "Part of campaign management workflow",
    "realWorldUsage": [
      "Managing campaign resources in affiliate marketing workflows",
      "Automating campaign operations for campaign optimization",
      "Integrating campaign data with external reporting systems"
    ]
  },
  "GET /public/api/v1/campaign/{id}/clone": {
    "method": "GET",
    "path": "/public/api/v1/campaign/{id}/clone",
    "category": "campaign",
    "summary": "Clone Campaign",
    "description": "Clone Campaign. Retrieves information from the campaign resource with optional filtering and pagination.",
    "parameters": [
      {
        "name": "id",
        "in": "path",
        "required": true,
        "type": "integer",
        "description": "Unique identifier of the resource",
        "example": 123,
        "validation": "Must be a positive integer"
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success - Resource details returned",
        "example": {
          "id": 123,
          "name": "Resource Name",
          "status": "active",
          "createdAt": "2023-12-01T10:00:00Z",
          "updatedAt": "2023-12-01T15:30:00Z"
        }
      },
      "400": {
        "description": "Bad Request - Invalid input data or missing required fields",
        "example": {
          "error": "Validation failed",
          "message": "Field 'name' is required",
          "details": {
            "field": "name",
            "code": "required",
            "value": null
          }
        }
      },
      "401": {
        "description": "Unauthorized - Invalid or missing API key",
        "example": {
          "error": "Unauthorized",
          "message": "Invalid API key or token expired"
        }
      },
      "403": {
        "description": "Forbidden - Access denied or insufficient permissions",
        "example": {
          "error": "Access denied",
          "message": "Insufficient permissions to access this resource"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Not found",
          "message": "Resource with ID 123 not found"
        }
      },
      "429": {
        "description": "Too Many Requests - Rate limit exceeded",
        "example": {
          "error": "Rate limit exceeded",
          "message": "Too many requests, please try again later",
          "retryAfter": 60
        }
      },
      "500": {
        "description": "Internal Server Error - Server-side error",
        "example": {
          "error": "Internal server error",
          "message": "Something went wrong on our end"
        }
      }
    },
    "examples": {
      "python": "import requests\nimport os\nimport time\nfrom typing import Optional, Dict, Any\n\nclass BinomAPIClient:\n    def __init__(self, api_key: str):\n        self.api_key = api_key\n        self.base_url = \"https://pierdun.com/public/api/v1\"\n        self.headers = {\n            \"Authorization\": f\"Bearer {api_key}\",\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json\"\n        }\n    \n    def make_request(self, method: str, endpoint: str, data: Optional[Dict] = None, params: Optional[Dict] = None) -> Dict[Any, Any]:\n        \"\"\"Make API request with error handling and retries\"\"\"\n        url = f\"{self.base_url}{endpoint}\"\n        \n        for attempt in range(3):\n            try:\n                response = requests.request(\n                    method=method,\n                    url=url,\n                    headers=self.headers,\n                    json=data,\n                    params=params,\n                    timeout=30\n                )\n                \n                if response.status_code == 429:\n                    # Rate limit - wait and retry\n                    time.sleep(2 ** attempt)\n                    continue\n                \n                if response.status_code in [200, 201]:\n                    return response.json()\n                else:\n                    raise Exception(f\"API Error {response.status_code}: {response.text}\")\n                    \n            except requests.exceptions.RequestException as e:\n                if attempt == 2:  # Last attempt\n                    raise Exception(f\"Request failed: {str(e)}\")\n                time.sleep(1)\n        \n        raise Exception(\"Max retries exceeded\")\n\n# Usage example\nclient = BinomAPIClient(os.getenv('binomPublic'))\n\ntry:\n    result = client.make_request(\n        method=\"GET\",\n        endpoint=\"/public/api/v1/campaign/{id}/clone\",\n    )\n    \n    print(\"✅ Success:\", result)\n    \nexcept Exception as e:\n    print(f\"❌ Error: {e}\")",
      "curl": "# Basic request\ncurl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\" \\\n  \"https://pierdun.com/public/api/v1/campaign/{id}/clone\"",
      "javascript": "class BinomAPI {\n  constructor(apiKey) {\n    this.apiKey = apiKey;\n    this.baseURL = 'https://pierdun.com/public/api/v1';\n    this.headers = {\n      'Authorization': `Bearer ${apiKey}`,\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    };\n  }\n\n  async makeRequest(method, endpoint, data = null, params = null) {\n    const url = new URL(`${this.baseURL}${endpoint}`);\n    \n    if (params) {\n      Object.keys(params).forEach(key => \n        url.searchParams.append(key, params[key])\n      );\n    }\n\n    const config = {\n      method: method,\n      headers: this.headers\n    };\n\n    if (data) {\n      config.body = JSON.stringify(data);\n    }\n\n    try {\n      const response = await fetch(url.toString(), config);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${await response.text()}`);\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('API Error:', error);\n      throw error;\n    }\n  }\n}\n\n// Usage\nconst api = new BinomAPI(process.env.BINOM_API_KEY);\n\ntry {\n  const result = await api.makeRequest(\n    'GET',\n    '/public/api/v1/campaign/{id}/clone',\n    null,\n    null\n  );\n  \n  console.log('✅ Success:', result);\n} catch (error) {\n  console.error('❌ Error:', error.message);\n}"
    },
    "errorHandling": {
      "commonErrors": [
        {
          "code": 400,
          "cause": "Invalid input data, missing required fields, or malformed JSON",
          "solution": "Validate all input data before sending. Check required fields and data types.",
          "example": "Missing 'name' field in request body"
        },
        {
          "code": 401,
          "cause": "Invalid, expired, or missing API key",
          "solution": "Verify API key is correct and has not expired. Check Authorization header format.",
          "example": "Authorization header: 'Bearer YOUR_API_KEY'"
        },
        {
          "code": 403,
          "cause": "Insufficient permissions or access denied",
          "solution": "Ensure API key has required permissions for this operation.",
          "example": "User lacks permission to modify campaigns"
        },
        {
          "code": 404,
          "cause": "Resource not found or invalid ID",
          "solution": "Verify resource ID exists and is accessible to your account.",
          "example": "Campaign with ID 123 does not exist"
        },
        {
          "code": 429,
          "cause": "Rate limit exceeded",
          "solution": "Implement exponential backoff and retry logic. Reduce request frequency.",
          "example": "Wait 60 seconds before retrying"
        },
        {
          "code": 500,
          "cause": "Internal server error",
          "solution": "Retry request after a delay. Contact support if error persists.",
          "example": "Temporary server issue"
        }
      ],
      "retryStrategy": {
        "maxRetries": 3,
        "backoffMultiplier": 2,
        "initialDelay": 1,
        "retryableStatusCodes": [
          429,
          500,
          502,
          503,
          504
        ]
      },
      "bestPractices": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting",
        "Log errors with sufficient detail for debugging",
        "Set appropriate timeouts for requests",
        "Handle network errors gracefully"
      ]
    },
    "validation": {
      "authentication": {
        "required": true,
        "type": "Bearer token",
        "header": "Authorization: Bearer YOUR_API_KEY",
        "validation": "Token must be valid and not expired"
      },
      "contentType": {
        "required": false,
        "value": "application/json",
        "header": "Content-Type: application/json"
      },
      "rateLimits": {
        "requestsPerMinute": 100,
        "burstLimit": 10,
        "enforcement": "HTTP 429 status code when exceeded"
      },
      "dataValidation": [
        "All required fields must be present and non-empty",
        "Field types must match schema definitions",
        "String fields must not exceed maximum length",
        "Numeric fields must be within specified ranges",
        "Array fields must contain valid items",
        "Date fields must be in correct format (YYYY-MM-DD HH:MM:SS)"
      ],
      "commonValidationErrors": [
        "Missing required field 'name'",
        "Invalid email format",
        "String too long (max 255 characters)",
        "Invalid date format",
        "Negative value not allowed",
        "Invalid enum value"
      ]
    },
    "aiNotes": {
      "keyPoints": [
        "This is a GET endpoint for v1 operations",
        "Requires Bearer token authentication in Authorization header",
        "Returns JSON responses with consistent error format",
        "Supports standard HTTP status codes for success/error indication",
        "Rate limited to 100 requests per minute"
      ],
      "integrationTips": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting (429 errors)",
        "Cache responses when appropriate to reduce API calls",
        "Set reasonable timeouts (30 seconds recommended)",
        "Log requests and responses for debugging"
      ],
      "commonPatterns": [
        "Check authentication before making requests",
        "Validate required parameters are present",
        "Handle pagination for list endpoints",
        "Implement retry logic for transient errors",
        "Parse error responses for detailed error information"
      ],
      "aiSpecificGuidance": [
        "For AI agents: Always check response status before processing data",
        "Implement fallback strategies for API failures",
        "Use structured error handling to provide meaningful feedback",
        "Consider caching strategies for frequently accessed data",
        "Implement request queuing for high-volume operations"
      ]
    },
    "workflow": "Used for: Retrieving campaign details for optimization or troubleshooting",
    "realWorldUsage": [
      "Managing campaign resources in affiliate marketing workflows",
      "Automating campaign operations for campaign optimization",
      "Integrating campaign data with external reporting systems"
    ]
  },
  "PUT /public/api/v1/campaign/{id}/rename": {
    "method": "PUT",
    "path": "/public/api/v1/campaign/{id}/rename",
    "category": "campaign",
    "summary": "Rename Campaign",
    "description": "Rename Campaign. Updates an existing campaign resource with new configuration data.",
    "parameters": [
      {
        "name": "id",
        "in": "path",
        "required": true,
        "type": "integer",
        "description": "Unique identifier of the resource",
        "example": 123,
        "validation": "Must be a positive integer"
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success - Resource updated successfully",
        "example": {
          "message": "Resource updated successfully",
          "data": {
            "id": 123,
            "updatedAt": "2023-12-01T15:30:00Z"
          }
        }
      },
      "400": {
        "description": "Bad Request - Invalid input data or missing required fields",
        "example": {
          "error": "Validation failed",
          "message": "Field 'name' is required",
          "details": {
            "field": "name",
            "code": "required",
            "value": null
          }
        }
      },
      "401": {
        "description": "Unauthorized - Invalid or missing API key",
        "example": {
          "error": "Unauthorized",
          "message": "Invalid API key or token expired"
        }
      },
      "403": {
        "description": "Forbidden - Access denied or insufficient permissions",
        "example": {
          "error": "Access denied",
          "message": "Insufficient permissions to access this resource"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Not found",
          "message": "Resource with ID 123 not found"
        }
      },
      "429": {
        "description": "Too Many Requests - Rate limit exceeded",
        "example": {
          "error": "Rate limit exceeded",
          "message": "Too many requests, please try again later",
          "retryAfter": 60
        }
      },
      "500": {
        "description": "Internal Server Error - Server-side error",
        "example": {
          "error": "Internal server error",
          "message": "Something went wrong on our end"
        }
      }
    },
    "examples": {
      "python": "import requests\nimport os\nimport time\nfrom typing import Optional, Dict, Any\n\nclass BinomAPIClient:\n    def __init__(self, api_key: str):\n        self.api_key = api_key\n        self.base_url = \"https://pierdun.com/public/api/v1\"\n        self.headers = {\n            \"Authorization\": f\"Bearer {api_key}\",\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json\"\n        }\n    \n    def make_request(self, method: str, endpoint: str, data: Optional[Dict] = None, params: Optional[Dict] = None) -> Dict[Any, Any]:\n        \"\"\"Make API request with error handling and retries\"\"\"\n        url = f\"{self.base_url}{endpoint}\"\n        \n        for attempt in range(3):\n            try:\n                response = requests.request(\n                    method=method,\n                    url=url,\n                    headers=self.headers,\n                    json=data,\n                    params=params,\n                    timeout=30\n                )\n                \n                if response.status_code == 429:\n                    # Rate limit - wait and retry\n                    time.sleep(2 ** attempt)\n                    continue\n                \n                if response.status_code in [200, 201]:\n                    return response.json()\n                else:\n                    raise Exception(f\"API Error {response.status_code}: {response.text}\")\n                    \n            except requests.exceptions.RequestException as e:\n                if attempt == 2:  # Last attempt\n                    raise Exception(f\"Request failed: {str(e)}\")\n                time.sleep(1)\n        \n        raise Exception(\"Max retries exceeded\")\n\n# Usage example\nclient = BinomAPIClient(os.getenv('binomPublic'))\n\ntry:\n    result = client.make_request(\n        method=\"PUT\",\n        endpoint=\"/public/api/v1/campaign/{id}/rename\",\n    )\n    \n    print(\"✅ Success:\", result)\n    \nexcept Exception as e:\n    print(f\"❌ Error: {e}\")",
      "curl": "# Basic request\ncurl -X PUT \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\" \\\n  \"https://pierdun.com/public/api/v1/campaign/{id}/rename\"",
      "javascript": "class BinomAPI {\n  constructor(apiKey) {\n    this.apiKey = apiKey;\n    this.baseURL = 'https://pierdun.com/public/api/v1';\n    this.headers = {\n      'Authorization': `Bearer ${apiKey}`,\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    };\n  }\n\n  async makeRequest(method, endpoint, data = null, params = null) {\n    const url = new URL(`${this.baseURL}${endpoint}`);\n    \n    if (params) {\n      Object.keys(params).forEach(key => \n        url.searchParams.append(key, params[key])\n      );\n    }\n\n    const config = {\n      method: method,\n      headers: this.headers\n    };\n\n    if (data) {\n      config.body = JSON.stringify(data);\n    }\n\n    try {\n      const response = await fetch(url.toString(), config);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${await response.text()}`);\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('API Error:', error);\n      throw error;\n    }\n  }\n}\n\n// Usage\nconst api = new BinomAPI(process.env.BINOM_API_KEY);\n\ntry {\n  const result = await api.makeRequest(\n    'PUT',\n    '/public/api/v1/campaign/{id}/rename',\n    null,\n    null\n  );\n  \n  console.log('✅ Success:', result);\n} catch (error) {\n  console.error('❌ Error:', error.message);\n}"
    },
    "errorHandling": {
      "commonErrors": [
        {
          "code": 400,
          "cause": "Invalid input data, missing required fields, or malformed JSON",
          "solution": "Validate all input data before sending. Check required fields and data types.",
          "example": "Missing 'name' field in request body"
        },
        {
          "code": 401,
          "cause": "Invalid, expired, or missing API key",
          "solution": "Verify API key is correct and has not expired. Check Authorization header format.",
          "example": "Authorization header: 'Bearer YOUR_API_KEY'"
        },
        {
          "code": 403,
          "cause": "Insufficient permissions or access denied",
          "solution": "Ensure API key has required permissions for this operation.",
          "example": "User lacks permission to modify campaigns"
        },
        {
          "code": 404,
          "cause": "Resource not found or invalid ID",
          "solution": "Verify resource ID exists and is accessible to your account.",
          "example": "Campaign with ID 123 does not exist"
        },
        {
          "code": 429,
          "cause": "Rate limit exceeded",
          "solution": "Implement exponential backoff and retry logic. Reduce request frequency.",
          "example": "Wait 60 seconds before retrying"
        },
        {
          "code": 500,
          "cause": "Internal server error",
          "solution": "Retry request after a delay. Contact support if error persists.",
          "example": "Temporary server issue"
        }
      ],
      "retryStrategy": {
        "maxRetries": 3,
        "backoffMultiplier": 2,
        "initialDelay": 1,
        "retryableStatusCodes": [
          429,
          500,
          502,
          503,
          504
        ]
      },
      "bestPractices": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting",
        "Log errors with sufficient detail for debugging",
        "Set appropriate timeouts for requests",
        "Handle network errors gracefully"
      ]
    },
    "validation": {
      "authentication": {
        "required": true,
        "type": "Bearer token",
        "header": "Authorization: Bearer YOUR_API_KEY",
        "validation": "Token must be valid and not expired"
      },
      "contentType": {
        "required": true,
        "value": "application/json",
        "header": "Content-Type: application/json"
      },
      "rateLimits": {
        "requestsPerMinute": 100,
        "burstLimit": 10,
        "enforcement": "HTTP 429 status code when exceeded"
      },
      "dataValidation": [
        "All required fields must be present and non-empty",
        "Field types must match schema definitions",
        "String fields must not exceed maximum length",
        "Numeric fields must be within specified ranges",
        "Array fields must contain valid items",
        "Date fields must be in correct format (YYYY-MM-DD HH:MM:SS)"
      ],
      "commonValidationErrors": [
        "Missing required field 'name'",
        "Invalid email format",
        "String too long (max 255 characters)",
        "Invalid date format",
        "Negative value not allowed",
        "Invalid enum value"
      ]
    },
    "aiNotes": {
      "keyPoints": [
        "This is a PUT endpoint for v1 operations",
        "Requires Bearer token authentication in Authorization header",
        "Returns JSON responses with consistent error format",
        "Supports standard HTTP status codes for success/error indication",
        "Rate limited to 100 requests per minute"
      ],
      "integrationTips": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting (429 errors)",
        "Cache responses when appropriate to reduce API calls",
        "Set reasonable timeouts (30 seconds recommended)",
        "Log requests and responses for debugging"
      ],
      "commonPatterns": [
        "Check authentication before making requests",
        "Validate required parameters are present",
        "Handle pagination for list endpoints",
        "Implement retry logic for transient errors",
        "Parse error responses for detailed error information"
      ],
      "aiSpecificGuidance": [
        "For AI agents: Always check response status before processing data",
        "Implement fallback strategies for API failures",
        "Use structured error handling to provide meaningful feedback",
        "Consider caching strategies for frequently accessed data",
        "Implement request queuing for high-volume operations"
      ]
    },
    "workflow": "Used for: Updating campaign settings, costs, or routing rules",
    "realWorldUsage": [
      "Managing campaign resources in affiliate marketing workflows",
      "Automating campaign operations for campaign optimization",
      "Integrating campaign data with external reporting systems"
    ]
  },
  "PATCH /public/api/v1/campaign/modify/{id}": {
    "method": "PATCH",
    "path": "/public/api/v1/campaign/modify/{id}",
    "category": "campaign",
    "summary": "Modify Campaign",
    "description": "Modify Campaign. Partially updates or restores a campaign resource.",
    "parameters": [
      {
        "name": "id",
        "in": "path",
        "required": true,
        "type": "integer",
        "description": "Unique identifier of the resource",
        "example": 123,
        "validation": "Must be a positive integer"
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success - Resource updated successfully",
        "example": {
          "message": "Resource updated successfully",
          "data": {
            "id": 123,
            "updatedAt": "2023-12-01T15:30:00Z"
          }
        }
      },
      "400": {
        "description": "Bad Request - Invalid input data or missing required fields",
        "example": {
          "error": "Validation failed",
          "message": "Field 'name' is required",
          "details": {
            "field": "name",
            "code": "required",
            "value": null
          }
        }
      },
      "401": {
        "description": "Unauthorized - Invalid or missing API key",
        "example": {
          "error": "Unauthorized",
          "message": "Invalid API key or token expired"
        }
      },
      "403": {
        "description": "Forbidden - Access denied or insufficient permissions",
        "example": {
          "error": "Access denied",
          "message": "Insufficient permissions to access this resource"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Not found",
          "message": "Resource with ID 123 not found"
        }
      },
      "429": {
        "description": "Too Many Requests - Rate limit exceeded",
        "example": {
          "error": "Rate limit exceeded",
          "message": "Too many requests, please try again later",
          "retryAfter": 60
        }
      },
      "500": {
        "description": "Internal Server Error - Server-side error",
        "example": {
          "error": "Internal server error",
          "message": "Something went wrong on our end"
        }
      }
    },
    "examples": {
      "python": "import requests\nimport os\nimport time\nfrom typing import Optional, Dict, Any\n\nclass BinomAPIClient:\n    def __init__(self, api_key: str):\n        self.api_key = api_key\n        self.base_url = \"https://pierdun.com/public/api/v1\"\n        self.headers = {\n            \"Authorization\": f\"Bearer {api_key}\",\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json\"\n        }\n    \n    def make_request(self, method: str, endpoint: str, data: Optional[Dict] = None, params: Optional[Dict] = None) -> Dict[Any, Any]:\n        \"\"\"Make API request with error handling and retries\"\"\"\n        url = f\"{self.base_url}{endpoint}\"\n        \n        for attempt in range(3):\n            try:\n                response = requests.request(\n                    method=method,\n                    url=url,\n                    headers=self.headers,\n                    json=data,\n                    params=params,\n                    timeout=30\n                )\n                \n                if response.status_code == 429:\n                    # Rate limit - wait and retry\n                    time.sleep(2 ** attempt)\n                    continue\n                \n                if response.status_code in [200, 201]:\n                    return response.json()\n                else:\n                    raise Exception(f\"API Error {response.status_code}: {response.text}\")\n                    \n            except requests.exceptions.RequestException as e:\n                if attempt == 2:  # Last attempt\n                    raise Exception(f\"Request failed: {str(e)}\")\n                time.sleep(1)\n        \n        raise Exception(\"Max retries exceeded\")\n\n# Usage example\nclient = BinomAPIClient(os.getenv('binomPublic'))\n\ntry:\n    result = client.make_request(\n        method=\"PATCH\",\n        endpoint=\"/public/api/v1/campaign/modify/{id}\",\n    )\n    \n    print(\"✅ Success:\", result)\n    \nexcept Exception as e:\n    print(f\"❌ Error: {e}\")",
      "curl": "# Basic request\ncurl -X PATCH \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\" \\\n  \"https://pierdun.com/public/api/v1/campaign/modify/{id}\"",
      "javascript": "class BinomAPI {\n  constructor(apiKey) {\n    this.apiKey = apiKey;\n    this.baseURL = 'https://pierdun.com/public/api/v1';\n    this.headers = {\n      'Authorization': `Bearer ${apiKey}`,\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    };\n  }\n\n  async makeRequest(method, endpoint, data = null, params = null) {\n    const url = new URL(`${this.baseURL}${endpoint}`);\n    \n    if (params) {\n      Object.keys(params).forEach(key => \n        url.searchParams.append(key, params[key])\n      );\n    }\n\n    const config = {\n      method: method,\n      headers: this.headers\n    };\n\n    if (data) {\n      config.body = JSON.stringify(data);\n    }\n\n    try {\n      const response = await fetch(url.toString(), config);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${await response.text()}`);\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('API Error:', error);\n      throw error;\n    }\n  }\n}\n\n// Usage\nconst api = new BinomAPI(process.env.BINOM_API_KEY);\n\ntry {\n  const result = await api.makeRequest(\n    'PATCH',\n    '/public/api/v1/campaign/modify/{id}',\n    null,\n    null\n  );\n  \n  console.log('✅ Success:', result);\n} catch (error) {\n  console.error('❌ Error:', error.message);\n}"
    },
    "errorHandling": {
      "commonErrors": [
        {
          "code": 400,
          "cause": "Invalid input data, missing required fields, or malformed JSON",
          "solution": "Validate all input data before sending. Check required fields and data types.",
          "example": "Missing 'name' field in request body"
        },
        {
          "code": 401,
          "cause": "Invalid, expired, or missing API key",
          "solution": "Verify API key is correct and has not expired. Check Authorization header format.",
          "example": "Authorization header: 'Bearer YOUR_API_KEY'"
        },
        {
          "code": 403,
          "cause": "Insufficient permissions or access denied",
          "solution": "Ensure API key has required permissions for this operation.",
          "example": "User lacks permission to modify campaigns"
        },
        {
          "code": 404,
          "cause": "Resource not found or invalid ID",
          "solution": "Verify resource ID exists and is accessible to your account.",
          "example": "Campaign with ID 123 does not exist"
        },
        {
          "code": 429,
          "cause": "Rate limit exceeded",
          "solution": "Implement exponential backoff and retry logic. Reduce request frequency.",
          "example": "Wait 60 seconds before retrying"
        },
        {
          "code": 500,
          "cause": "Internal server error",
          "solution": "Retry request after a delay. Contact support if error persists.",
          "example": "Temporary server issue"
        }
      ],
      "retryStrategy": {
        "maxRetries": 3,
        "backoffMultiplier": 2,
        "initialDelay": 1,
        "retryableStatusCodes": [
          429,
          500,
          502,
          503,
          504
        ]
      },
      "bestPractices": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting",
        "Log errors with sufficient detail for debugging",
        "Set appropriate timeouts for requests",
        "Handle network errors gracefully"
      ]
    },
    "validation": {
      "authentication": {
        "required": true,
        "type": "Bearer token",
        "header": "Authorization: Bearer YOUR_API_KEY",
        "validation": "Token must be valid and not expired"
      },
      "contentType": {
        "required": true,
        "value": "application/json",
        "header": "Content-Type: application/json"
      },
      "rateLimits": {
        "requestsPerMinute": 100,
        "burstLimit": 10,
        "enforcement": "HTTP 429 status code when exceeded"
      },
      "dataValidation": [
        "All required fields must be present and non-empty",
        "Field types must match schema definitions",
        "String fields must not exceed maximum length",
        "Numeric fields must be within specified ranges",
        "Array fields must contain valid items",
        "Date fields must be in correct format (YYYY-MM-DD HH:MM:SS)"
      ],
      "commonValidationErrors": [
        "Missing required field 'name'",
        "Invalid email format",
        "String too long (max 255 characters)",
        "Invalid date format",
        "Negative value not allowed",
        "Invalid enum value"
      ]
    },
    "aiNotes": {
      "keyPoints": [
        "This is a PATCH endpoint for v1 operations",
        "Requires Bearer token authentication in Authorization header",
        "Returns JSON responses with consistent error format",
        "Supports standard HTTP status codes for success/error indication",
        "Rate limited to 100 requests per minute"
      ],
      "integrationTips": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting (429 errors)",
        "Cache responses when appropriate to reduce API calls",
        "Set reasonable timeouts (30 seconds recommended)",
        "Log requests and responses for debugging"
      ],
      "commonPatterns": [
        "Check authentication before making requests",
        "Validate required parameters are present",
        "Handle pagination for list endpoints",
        "Implement retry logic for transient errors",
        "Parse error responses for detailed error information"
      ],
      "aiSpecificGuidance": [
        "For AI agents: Always check response status before processing data",
        "Implement fallback strategies for API failures",
        "Use structured error handling to provide meaningful feedback",
        "Consider caching strategies for frequently accessed data",
        "Implement request queuing for high-volume operations"
      ]
    },
    "workflow": "Part of campaign management workflow",
    "realWorldUsage": [
      "Managing campaign resources in affiliate marketing workflows",
      "Automating campaign operations for campaign optimization",
      "Integrating campaign data with external reporting systems"
    ]
  },
  "GET /public/api/v1/campaign/{id}/link": {
    "method": "GET",
    "path": "/public/api/v1/campaign/{id}/link",
    "category": "campaign",
    "summary": "Get Campaign Link",
    "description": "Get Campaign Link. Retrieves information from the campaign resource with optional filtering and pagination.",
    "parameters": [
      {
        "name": "id",
        "in": "path",
        "required": true,
        "type": "integer",
        "description": "Unique identifier of the resource",
        "example": 123,
        "validation": "Must be a positive integer"
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success - Resource details returned",
        "example": {
          "id": 123,
          "name": "Resource Name",
          "status": "active",
          "createdAt": "2023-12-01T10:00:00Z",
          "updatedAt": "2023-12-01T15:30:00Z"
        }
      },
      "400": {
        "description": "Bad Request - Invalid input data or missing required fields",
        "example": {
          "error": "Validation failed",
          "message": "Field 'name' is required",
          "details": {
            "field": "name",
            "code": "required",
            "value": null
          }
        }
      },
      "401": {
        "description": "Unauthorized - Invalid or missing API key",
        "example": {
          "error": "Unauthorized",
          "message": "Invalid API key or token expired"
        }
      },
      "403": {
        "description": "Forbidden - Access denied or insufficient permissions",
        "example": {
          "error": "Access denied",
          "message": "Insufficient permissions to access this resource"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Not found",
          "message": "Resource with ID 123 not found"
        }
      },
      "429": {
        "description": "Too Many Requests - Rate limit exceeded",
        "example": {
          "error": "Rate limit exceeded",
          "message": "Too many requests, please try again later",
          "retryAfter": 60
        }
      },
      "500": {
        "description": "Internal Server Error - Server-side error",
        "example": {
          "error": "Internal server error",
          "message": "Something went wrong on our end"
        }
      }
    },
    "examples": {
      "python": "import requests\nimport os\nimport time\nfrom typing import Optional, Dict, Any\n\nclass BinomAPIClient:\n    def __init__(self, api_key: str):\n        self.api_key = api_key\n        self.base_url = \"https://pierdun.com/public/api/v1\"\n        self.headers = {\n            \"Authorization\": f\"Bearer {api_key}\",\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json\"\n        }\n    \n    def make_request(self, method: str, endpoint: str, data: Optional[Dict] = None, params: Optional[Dict] = None) -> Dict[Any, Any]:\n        \"\"\"Make API request with error handling and retries\"\"\"\n        url = f\"{self.base_url}{endpoint}\"\n        \n        for attempt in range(3):\n            try:\n                response = requests.request(\n                    method=method,\n                    url=url,\n                    headers=self.headers,\n                    json=data,\n                    params=params,\n                    timeout=30\n                )\n                \n                if response.status_code == 429:\n                    # Rate limit - wait and retry\n                    time.sleep(2 ** attempt)\n                    continue\n                \n                if response.status_code in [200, 201]:\n                    return response.json()\n                else:\n                    raise Exception(f\"API Error {response.status_code}: {response.text}\")\n                    \n            except requests.exceptions.RequestException as e:\n                if attempt == 2:  # Last attempt\n                    raise Exception(f\"Request failed: {str(e)}\")\n                time.sleep(1)\n        \n        raise Exception(\"Max retries exceeded\")\n\n# Usage example\nclient = BinomAPIClient(os.getenv('binomPublic'))\n\ntry:\n    result = client.make_request(\n        method=\"GET\",\n        endpoint=\"/public/api/v1/campaign/{id}/link\",\n    )\n    \n    print(\"✅ Success:\", result)\n    \nexcept Exception as e:\n    print(f\"❌ Error: {e}\")",
      "curl": "# Basic request\ncurl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\" \\\n  \"https://pierdun.com/public/api/v1/campaign/{id}/link\"",
      "javascript": "class BinomAPI {\n  constructor(apiKey) {\n    this.apiKey = apiKey;\n    this.baseURL = 'https://pierdun.com/public/api/v1';\n    this.headers = {\n      'Authorization': `Bearer ${apiKey}`,\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    };\n  }\n\n  async makeRequest(method, endpoint, data = null, params = null) {\n    const url = new URL(`${this.baseURL}${endpoint}`);\n    \n    if (params) {\n      Object.keys(params).forEach(key => \n        url.searchParams.append(key, params[key])\n      );\n    }\n\n    const config = {\n      method: method,\n      headers: this.headers\n    };\n\n    if (data) {\n      config.body = JSON.stringify(data);\n    }\n\n    try {\n      const response = await fetch(url.toString(), config);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${await response.text()}`);\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('API Error:', error);\n      throw error;\n    }\n  }\n}\n\n// Usage\nconst api = new BinomAPI(process.env.BINOM_API_KEY);\n\ntry {\n  const result = await api.makeRequest(\n    'GET',\n    '/public/api/v1/campaign/{id}/link',\n    null,\n    null\n  );\n  \n  console.log('✅ Success:', result);\n} catch (error) {\n  console.error('❌ Error:', error.message);\n}"
    },
    "errorHandling": {
      "commonErrors": [
        {
          "code": 400,
          "cause": "Invalid input data, missing required fields, or malformed JSON",
          "solution": "Validate all input data before sending. Check required fields and data types.",
          "example": "Missing 'name' field in request body"
        },
        {
          "code": 401,
          "cause": "Invalid, expired, or missing API key",
          "solution": "Verify API key is correct and has not expired. Check Authorization header format.",
          "example": "Authorization header: 'Bearer YOUR_API_KEY'"
        },
        {
          "code": 403,
          "cause": "Insufficient permissions or access denied",
          "solution": "Ensure API key has required permissions for this operation.",
          "example": "User lacks permission to modify campaigns"
        },
        {
          "code": 404,
          "cause": "Resource not found or invalid ID",
          "solution": "Verify resource ID exists and is accessible to your account.",
          "example": "Campaign with ID 123 does not exist"
        },
        {
          "code": 429,
          "cause": "Rate limit exceeded",
          "solution": "Implement exponential backoff and retry logic. Reduce request frequency.",
          "example": "Wait 60 seconds before retrying"
        },
        {
          "code": 500,
          "cause": "Internal server error",
          "solution": "Retry request after a delay. Contact support if error persists.",
          "example": "Temporary server issue"
        }
      ],
      "retryStrategy": {
        "maxRetries": 3,
        "backoffMultiplier": 2,
        "initialDelay": 1,
        "retryableStatusCodes": [
          429,
          500,
          502,
          503,
          504
        ]
      },
      "bestPractices": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting",
        "Log errors with sufficient detail for debugging",
        "Set appropriate timeouts for requests",
        "Handle network errors gracefully"
      ]
    },
    "validation": {
      "authentication": {
        "required": true,
        "type": "Bearer token",
        "header": "Authorization: Bearer YOUR_API_KEY",
        "validation": "Token must be valid and not expired"
      },
      "contentType": {
        "required": false,
        "value": "application/json",
        "header": "Content-Type: application/json"
      },
      "rateLimits": {
        "requestsPerMinute": 100,
        "burstLimit": 10,
        "enforcement": "HTTP 429 status code when exceeded"
      },
      "dataValidation": [
        "All required fields must be present and non-empty",
        "Field types must match schema definitions",
        "String fields must not exceed maximum length",
        "Numeric fields must be within specified ranges",
        "Array fields must contain valid items",
        "Date fields must be in correct format (YYYY-MM-DD HH:MM:SS)"
      ],
      "commonValidationErrors": [
        "Missing required field 'name'",
        "Invalid email format",
        "String too long (max 255 characters)",
        "Invalid date format",
        "Negative value not allowed",
        "Invalid enum value"
      ]
    },
    "aiNotes": {
      "keyPoints": [
        "This is a GET endpoint for v1 operations",
        "Requires Bearer token authentication in Authorization header",
        "Returns JSON responses with consistent error format",
        "Supports standard HTTP status codes for success/error indication",
        "Rate limited to 100 requests per minute"
      ],
      "integrationTips": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting (429 errors)",
        "Cache responses when appropriate to reduce API calls",
        "Set reasonable timeouts (30 seconds recommended)",
        "Log requests and responses for debugging"
      ],
      "commonPatterns": [
        "Check authentication before making requests",
        "Validate required parameters are present",
        "Handle pagination for list endpoints",
        "Implement retry logic for transient errors",
        "Parse error responses for detailed error information"
      ],
      "aiSpecificGuidance": [
        "For AI agents: Always check response status before processing data",
        "Implement fallback strategies for API failures",
        "Use structured error handling to provide meaningful feedback",
        "Consider caching strategies for frequently accessed data",
        "Implement request queuing for high-volume operations"
      ]
    },
    "workflow": "Used for: Retrieving campaign details for optimization or troubleshooting",
    "realWorldUsage": [
      "Managing campaign resources in affiliate marketing workflows",
      "Automating campaign operations for campaign optimization",
      "Integrating campaign data with external reporting systems"
    ]
  },
  "GET /public/api/v1/campaign/list/filtered": {
    "method": "GET",
    "path": "/public/api/v1/campaign/list/filtered",
    "category": "campaign",
    "summary": "Get Campaign list filtered",
    "description": "Get Campaign list filtered. Retrieves information from the campaign resource with optional filtering and pagination.",
    "parameters": [
      {
        "name": "datePreset",
        "in": "query",
        "required": true,
        "type": "string",
        "description": "Date range preset for filtering data",
        "enum": [
          "today",
          "yesterday",
          "last_2_days",
          "last_3_days",
          "last_7_days",
          "last_14_days",
          "last_30_days",
          "this_week",
          "last_week",
          "this_month",
          "last_month",
          "this_year",
          "last_year",
          "all_time",
          "custom_time"
        ],
        "example": "last_7_days",
        "validation": "Must be one of the predefined values"
      },
      {
        "name": "timezone",
        "in": "query",
        "required": true,
        "type": "string",
        "description": "Timezone for date calculations (always use UTC for consistency)",
        "example": "UTC",
        "default": "UTC",
        "validation": "Must be a valid timezone identifier"
      },
      {
        "name": "limit",
        "in": "query",
        "required": false,
        "type": "integer",
        "description": "Maximum number of records to return",
        "example": 100,
        "default": 100,
        "minimum": 1,
        "maximum": 1000,
        "validation": "Must be between 1 and 1000"
      },
      {
        "name": "offset",
        "in": "query",
        "required": false,
        "type": "integer",
        "description": "Number of records to skip for pagination",
        "example": 0,
        "default": 0,
        "minimum": 0,
        "validation": "Must be non-negative"
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success - List of resources returned",
        "example": {
          "data": [
            {
              "id": 1,
              "name": "Resource 1"
            },
            {
              "id": 2,
              "name": "Resource 2"
            }
          ],
          "pagination": {
            "total": 150,
            "limit": 100,
            "offset": 0,
            "hasMore": true
          }
        }
      },
      "400": {
        "description": "Bad Request - Invalid input data or missing required fields",
        "example": {
          "error": "Validation failed",
          "message": "Field 'name' is required",
          "details": {
            "field": "name",
            "code": "required",
            "value": null
          }
        }
      },
      "401": {
        "description": "Unauthorized - Invalid or missing API key",
        "example": {
          "error": "Unauthorized",
          "message": "Invalid API key or token expired"
        }
      },
      "403": {
        "description": "Forbidden - Access denied or insufficient permissions",
        "example": {
          "error": "Access denied",
          "message": "Insufficient permissions to access this resource"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Not found",
          "message": "Resource with ID 123 not found"
        }
      },
      "429": {
        "description": "Too Many Requests - Rate limit exceeded",
        "example": {
          "error": "Rate limit exceeded",
          "message": "Too many requests, please try again later",
          "retryAfter": 60
        }
      },
      "500": {
        "description": "Internal Server Error - Server-side error",
        "example": {
          "error": "Internal server error",
          "message": "Something went wrong on our end"
        }
      }
    },
    "examples": {
      "python": "import requests\nimport os\nimport time\nfrom typing import Optional, Dict, Any\n\nclass BinomAPIClient:\n    def __init__(self, api_key: str):\n        self.api_key = api_key\n        self.base_url = \"https://pierdun.com/public/api/v1\"\n        self.headers = {\n            \"Authorization\": f\"Bearer {api_key}\",\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json\"\n        }\n    \n    def make_request(self, method: str, endpoint: str, data: Optional[Dict] = None, params: Optional[Dict] = None) -> Dict[Any, Any]:\n        \"\"\"Make API request with error handling and retries\"\"\"\n        url = f\"{self.base_url}{endpoint}\"\n        \n        for attempt in range(3):\n            try:\n                response = requests.request(\n                    method=method,\n                    url=url,\n                    headers=self.headers,\n                    json=data,\n                    params=params,\n                    timeout=30\n                )\n                \n                if response.status_code == 429:\n                    # Rate limit - wait and retry\n                    time.sleep(2 ** attempt)\n                    continue\n                \n                if response.status_code in [200, 201]:\n                    return response.json()\n                else:\n                    raise Exception(f\"API Error {response.status_code}: {response.text}\")\n                    \n            except requests.exceptions.RequestException as e:\n                if attempt == 2:  # Last attempt\n                    raise Exception(f\"Request failed: {str(e)}\")\n                time.sleep(1)\n        \n        raise Exception(\"Max retries exceeded\")\n\n# Usage example\nclient = BinomAPIClient(os.getenv('binomPublic'))\n\ntry:\n    result = client.make_request(\n        method=\"GET\",\n        endpoint=\"/public/api/v1/campaign/list/filtered\",\n        params={\n            \"datePreset\": \"last_7_days\",\n            \"timezone\": \"UTC\",\n            \"limit\": 100,\n            \"offset\": 0\n        }\n    )\n    \n    print(\"✅ Success:\", result)\n    \nexcept Exception as e:\n    print(f\"❌ Error: {e}\")",
      "curl": "# Basic request\ncurl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\" \\\n  \"https://pierdun.com/public/api/v1/campaign/list/filtered\"\n\n# With query parameters\ncurl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Accept: application/json\" \\\n  \"https://pierdun.com/public/api/v1/campaign/list/filtered?datePreset=last_7_days&timezone=UTC&limit=100&offset=0\"",
      "javascript": "class BinomAPI {\n  constructor(apiKey) {\n    this.apiKey = apiKey;\n    this.baseURL = 'https://pierdun.com/public/api/v1';\n    this.headers = {\n      'Authorization': `Bearer ${apiKey}`,\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    };\n  }\n\n  async makeRequest(method, endpoint, data = null, params = null) {\n    const url = new URL(`${this.baseURL}${endpoint}`);\n    \n    if (params) {\n      Object.keys(params).forEach(key => \n        url.searchParams.append(key, params[key])\n      );\n    }\n\n    const config = {\n      method: method,\n      headers: this.headers\n    };\n\n    if (data) {\n      config.body = JSON.stringify(data);\n    }\n\n    try {\n      const response = await fetch(url.toString(), config);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${await response.text()}`);\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('API Error:', error);\n      throw error;\n    }\n  }\n}\n\n// Usage\nconst api = new BinomAPI(process.env.BINOM_API_KEY);\n\ntry {\n  const result = await api.makeRequest(\n    'GET',\n    '/public/api/v1/campaign/list/filtered',\n    null,\n    {\n      datePreset: 'last_7_days',\n      timezone: 'UTC',\n      limit: 100,\n      offset: 0\n    }\n  );\n  \n  console.log('✅ Success:', result);\n} catch (error) {\n  console.error('❌ Error:', error.message);\n}"
    },
    "errorHandling": {
      "commonErrors": [
        {
          "code": 400,
          "cause": "Invalid input data, missing required fields, or malformed JSON",
          "solution": "Validate all input data before sending. Check required fields and data types.",
          "example": "Missing 'name' field in request body"
        },
        {
          "code": 401,
          "cause": "Invalid, expired, or missing API key",
          "solution": "Verify API key is correct and has not expired. Check Authorization header format.",
          "example": "Authorization header: 'Bearer YOUR_API_KEY'"
        },
        {
          "code": 403,
          "cause": "Insufficient permissions or access denied",
          "solution": "Ensure API key has required permissions for this operation.",
          "example": "User lacks permission to modify campaigns"
        },
        {
          "code": 404,
          "cause": "Resource not found or invalid ID",
          "solution": "Verify resource ID exists and is accessible to your account.",
          "example": "Campaign with ID 123 does not exist"
        },
        {
          "code": 429,
          "cause": "Rate limit exceeded",
          "solution": "Implement exponential backoff and retry logic. Reduce request frequency.",
          "example": "Wait 60 seconds before retrying"
        },
        {
          "code": 500,
          "cause": "Internal server error",
          "solution": "Retry request after a delay. Contact support if error persists.",
          "example": "Temporary server issue"
        }
      ],
      "retryStrategy": {
        "maxRetries": 3,
        "backoffMultiplier": 2,
        "initialDelay": 1,
        "retryableStatusCodes": [
          429,
          500,
          502,
          503,
          504
        ]
      },
      "bestPractices": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting",
        "Log errors with sufficient detail for debugging",
        "Set appropriate timeouts for requests",
        "Handle network errors gracefully"
      ]
    },
    "validation": {
      "authentication": {
        "required": true,
        "type": "Bearer token",
        "header": "Authorization: Bearer YOUR_API_KEY",
        "validation": "Token must be valid and not expired"
      },
      "contentType": {
        "required": false,
        "value": "application/json",
        "header": "Content-Type: application/json"
      },
      "rateLimits": {
        "requestsPerMinute": 100,
        "burstLimit": 10,
        "enforcement": "HTTP 429 status code when exceeded"
      },
      "dataValidation": [
        "All required fields must be present and non-empty",
        "Field types must match schema definitions",
        "String fields must not exceed maximum length",
        "Numeric fields must be within specified ranges",
        "Array fields must contain valid items",
        "Date fields must be in correct format (YYYY-MM-DD HH:MM:SS)"
      ],
      "commonValidationErrors": [
        "Missing required field 'name'",
        "Invalid email format",
        "String too long (max 255 characters)",
        "Invalid date format",
        "Negative value not allowed",
        "Invalid enum value"
      ]
    },
    "aiNotes": {
      "keyPoints": [
        "This is a GET endpoint for v1 operations",
        "Requires Bearer token authentication in Authorization header",
        "Returns JSON responses with consistent error format",
        "Supports standard HTTP status codes for success/error indication",
        "Rate limited to 100 requests per minute"
      ],
      "integrationTips": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting (429 errors)",
        "Cache responses when appropriate to reduce API calls",
        "Set reasonable timeouts (30 seconds recommended)",
        "Log requests and responses for debugging"
      ],
      "commonPatterns": [
        "Check authentication before making requests",
        "Validate required parameters are present",
        "Handle pagination for list endpoints",
        "Implement retry logic for transient errors",
        "Parse error responses for detailed error information"
      ],
      "aiSpecificGuidance": [
        "For AI agents: Always check response status before processing data",
        "Implement fallback strategies for API failures",
        "Use structured error handling to provide meaningful feedback",
        "Consider caching strategies for frequently accessed data",
        "Implement request queuing for high-volume operations"
      ]
    },
    "workflow": "Used for: Retrieving campaign details for optimization or troubleshooting",
    "realWorldUsage": [
      "Managing campaign resources in affiliate marketing workflows",
      "Automating campaign operations for campaign optimization",
      "Integrating campaign data with external reporting systems"
    ]
  },
  "GET /public/api/v1/campaign/short/info": {
    "method": "GET",
    "path": "/public/api/v1/campaign/short/info",
    "category": "campaign",
    "summary": "Get Campaign short info",
    "description": "Get Campaign short info. Retrieves information from the campaign resource with optional filtering and pagination.",
    "parameters": [
      {
        "name": "datePreset",
        "in": "query",
        "required": true,
        "type": "string",
        "description": "Date range preset for filtering data",
        "enum": [
          "today",
          "yesterday",
          "last_2_days",
          "last_3_days",
          "last_7_days",
          "last_14_days",
          "last_30_days",
          "this_week",
          "last_week",
          "this_month",
          "last_month",
          "this_year",
          "last_year",
          "all_time",
          "custom_time"
        ],
        "example": "last_7_days",
        "validation": "Must be one of the predefined values"
      },
      {
        "name": "timezone",
        "in": "query",
        "required": true,
        "type": "string",
        "description": "Timezone for date calculations (always use UTC for consistency)",
        "example": "UTC",
        "default": "UTC",
        "validation": "Must be a valid timezone identifier"
      },
      {
        "name": "limit",
        "in": "query",
        "required": false,
        "type": "integer",
        "description": "Maximum number of records to return",
        "example": 100,
        "default": 100,
        "minimum": 1,
        "maximum": 1000,
        "validation": "Must be between 1 and 1000"
      },
      {
        "name": "offset",
        "in": "query",
        "required": false,
        "type": "integer",
        "description": "Number of records to skip for pagination",
        "example": 0,
        "default": 0,
        "minimum": 0,
        "validation": "Must be non-negative"
      },
      {
        "name": "dateFrom",
        "in": "query",
        "required": false,
        "type": "string",
        "description": "Start date for custom time range (required when datePreset=custom_time)",
        "example": "2023-01-01 00:00:00",
        "format": "YYYY-MM-DD HH:MM:SS",
        "validation": "Required when datePreset is 'custom_time'"
      },
      {
        "name": "dateTo",
        "in": "query",
        "required": false,
        "type": "string",
        "description": "End date for custom time range (required when datePreset=custom_time)",
        "example": "2023-01-31 23:59:59",
        "format": "YYYY-MM-DD HH:MM:SS",
        "validation": "Required when datePreset is 'custom_time', must be after dateFrom"
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success - List of resources returned",
        "example": {
          "data": [
            {
              "id": 1,
              "name": "Resource 1"
            },
            {
              "id": 2,
              "name": "Resource 2"
            }
          ],
          "pagination": {
            "total": 150,
            "limit": 100,
            "offset": 0,
            "hasMore": true
          }
        }
      },
      "400": {
        "description": "Bad Request - Invalid input data or missing required fields",
        "example": {
          "error": "Validation failed",
          "message": "Field 'name' is required",
          "details": {
            "field": "name",
            "code": "required",
            "value": null
          }
        }
      },
      "401": {
        "description": "Unauthorized - Invalid or missing API key",
        "example": {
          "error": "Unauthorized",
          "message": "Invalid API key or token expired"
        }
      },
      "403": {
        "description": "Forbidden - Access denied or insufficient permissions",
        "example": {
          "error": "Access denied",
          "message": "Insufficient permissions to access this resource"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Not found",
          "message": "Resource with ID 123 not found"
        }
      },
      "429": {
        "description": "Too Many Requests - Rate limit exceeded",
        "example": {
          "error": "Rate limit exceeded",
          "message": "Too many requests, please try again later",
          "retryAfter": 60
        }
      },
      "500": {
        "description": "Internal Server Error - Server-side error",
        "example": {
          "error": "Internal server error",
          "message": "Something went wrong on our end"
        }
      }
    },
    "examples": {
      "python": "import requests\nimport os\nimport time\nfrom typing import Optional, Dict, Any\n\nclass BinomAPIClient:\n    def __init__(self, api_key: str):\n        self.api_key = api_key\n        self.base_url = \"https://pierdun.com/public/api/v1\"\n        self.headers = {\n            \"Authorization\": f\"Bearer {api_key}\",\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json\"\n        }\n    \n    def make_request(self, method: str, endpoint: str, data: Optional[Dict] = None, params: Optional[Dict] = None) -> Dict[Any, Any]:\n        \"\"\"Make API request with error handling and retries\"\"\"\n        url = f\"{self.base_url}{endpoint}\"\n        \n        for attempt in range(3):\n            try:\n                response = requests.request(\n                    method=method,\n                    url=url,\n                    headers=self.headers,\n                    json=data,\n                    params=params,\n                    timeout=30\n                )\n                \n                if response.status_code == 429:\n                    # Rate limit - wait and retry\n                    time.sleep(2 ** attempt)\n                    continue\n                \n                if response.status_code in [200, 201]:\n                    return response.json()\n                else:\n                    raise Exception(f\"API Error {response.status_code}: {response.text}\")\n                    \n            except requests.exceptions.RequestException as e:\n                if attempt == 2:  # Last attempt\n                    raise Exception(f\"Request failed: {str(e)}\")\n                time.sleep(1)\n        \n        raise Exception(\"Max retries exceeded\")\n\n# Usage example\nclient = BinomAPIClient(os.getenv('binomPublic'))\n\ntry:\n    result = client.make_request(\n        method=\"GET\",\n        endpoint=\"/public/api/v1/campaign/short/info\",\n        params={\n            \"datePreset\": \"last_7_days\",\n            \"timezone\": \"UTC\",\n            \"limit\": 100,\n            \"offset\": 0\n        }\n    )\n    \n    print(\"✅ Success:\", result)\n    \nexcept Exception as e:\n    print(f\"❌ Error: {e}\")",
      "curl": "# Basic request\ncurl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\" \\\n  \"https://pierdun.com/public/api/v1/campaign/short/info\"\n\n# With query parameters\ncurl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Accept: application/json\" \\\n  \"https://pierdun.com/public/api/v1/campaign/short/info?datePreset=last_7_days&timezone=UTC&limit=100&offset=0\"",
      "javascript": "class BinomAPI {\n  constructor(apiKey) {\n    this.apiKey = apiKey;\n    this.baseURL = 'https://pierdun.com/public/api/v1';\n    this.headers = {\n      'Authorization': `Bearer ${apiKey}`,\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    };\n  }\n\n  async makeRequest(method, endpoint, data = null, params = null) {\n    const url = new URL(`${this.baseURL}${endpoint}`);\n    \n    if (params) {\n      Object.keys(params).forEach(key => \n        url.searchParams.append(key, params[key])\n      );\n    }\n\n    const config = {\n      method: method,\n      headers: this.headers\n    };\n\n    if (data) {\n      config.body = JSON.stringify(data);\n    }\n\n    try {\n      const response = await fetch(url.toString(), config);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${await response.text()}`);\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('API Error:', error);\n      throw error;\n    }\n  }\n}\n\n// Usage\nconst api = new BinomAPI(process.env.BINOM_API_KEY);\n\ntry {\n  const result = await api.makeRequest(\n    'GET',\n    '/public/api/v1/campaign/short/info',\n    null,\n    {\n      datePreset: 'last_7_days',\n      timezone: 'UTC',\n      limit: 100,\n      offset: 0\n    }\n  );\n  \n  console.log('✅ Success:', result);\n} catch (error) {\n  console.error('❌ Error:', error.message);\n}"
    },
    "errorHandling": {
      "commonErrors": [
        {
          "code": 400,
          "cause": "Invalid input data, missing required fields, or malformed JSON",
          "solution": "Validate all input data before sending. Check required fields and data types.",
          "example": "Missing 'name' field in request body"
        },
        {
          "code": 401,
          "cause": "Invalid, expired, or missing API key",
          "solution": "Verify API key is correct and has not expired. Check Authorization header format.",
          "example": "Authorization header: 'Bearer YOUR_API_KEY'"
        },
        {
          "code": 403,
          "cause": "Insufficient permissions or access denied",
          "solution": "Ensure API key has required permissions for this operation.",
          "example": "User lacks permission to modify campaigns"
        },
        {
          "code": 404,
          "cause": "Resource not found or invalid ID",
          "solution": "Verify resource ID exists and is accessible to your account.",
          "example": "Campaign with ID 123 does not exist"
        },
        {
          "code": 429,
          "cause": "Rate limit exceeded",
          "solution": "Implement exponential backoff and retry logic. Reduce request frequency.",
          "example": "Wait 60 seconds before retrying"
        },
        {
          "code": 500,
          "cause": "Internal server error",
          "solution": "Retry request after a delay. Contact support if error persists.",
          "example": "Temporary server issue"
        }
      ],
      "retryStrategy": {
        "maxRetries": 3,
        "backoffMultiplier": 2,
        "initialDelay": 1,
        "retryableStatusCodes": [
          429,
          500,
          502,
          503,
          504
        ]
      },
      "bestPractices": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting",
        "Log errors with sufficient detail for debugging",
        "Set appropriate timeouts for requests",
        "Handle network errors gracefully"
      ]
    },
    "validation": {
      "authentication": {
        "required": true,
        "type": "Bearer token",
        "header": "Authorization: Bearer YOUR_API_KEY",
        "validation": "Token must be valid and not expired"
      },
      "contentType": {
        "required": false,
        "value": "application/json",
        "header": "Content-Type: application/json"
      },
      "rateLimits": {
        "requestsPerMinute": 100,
        "burstLimit": 10,
        "enforcement": "HTTP 429 status code when exceeded"
      },
      "dataValidation": [
        "All required fields must be present and non-empty",
        "Field types must match schema definitions",
        "String fields must not exceed maximum length",
        "Numeric fields must be within specified ranges",
        "Array fields must contain valid items",
        "Date fields must be in correct format (YYYY-MM-DD HH:MM:SS)"
      ],
      "commonValidationErrors": [
        "Missing required field 'name'",
        "Invalid email format",
        "String too long (max 255 characters)",
        "Invalid date format",
        "Negative value not allowed",
        "Invalid enum value"
      ]
    },
    "aiNotes": {
      "keyPoints": [
        "This is a GET endpoint for v1 operations",
        "Requires Bearer token authentication in Authorization header",
        "Returns JSON responses with consistent error format",
        "Supports standard HTTP status codes for success/error indication",
        "Rate limited to 100 requests per minute"
      ],
      "integrationTips": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting (429 errors)",
        "Cache responses when appropriate to reduce API calls",
        "Set reasonable timeouts (30 seconds recommended)",
        "Log requests and responses for debugging"
      ],
      "commonPatterns": [
        "Check authentication before making requests",
        "Validate required parameters are present",
        "Handle pagination for list endpoints",
        "Implement retry logic for transient errors",
        "Parse error responses for detailed error information"
      ],
      "aiSpecificGuidance": [
        "For AI agents: Always check response status before processing data",
        "Implement fallback strategies for API failures",
        "Use structured error handling to provide meaningful feedback",
        "Consider caching strategies for frequently accessed data",
        "Implement request queuing for high-volume operations"
      ]
    },
    "workflow": "Used for: Retrieving campaign details for optimization or troubleshooting",
    "realWorldUsage": [
      "Managing campaign resources in affiliate marketing workflows",
      "Automating campaign operations for campaign optimization",
      "Integrating campaign data with external reporting systems"
    ]
  },
  "GET /public/api/v1/campaign/by_rotation/{rotationId}/list": {
    "method": "GET",
    "path": "/public/api/v1/campaign/by_rotation/{rotationId}/list",
    "category": "campaign",
    "summary": "Get Campaign list by rotation",
    "description": "Get Campaign list by rotation. Retrieves information from the campaign resource with optional filtering and pagination.",
    "parameters": [
      {
        "name": "rotationId",
        "in": "path",
        "required": true,
        "type": "integer",
        "description": "Rotation identifier",
        "example": 789,
        "validation": "Must be a positive integer"
      },
      {
        "name": "datePreset",
        "in": "query",
        "required": true,
        "type": "string",
        "description": "Date range preset for filtering data",
        "enum": [
          "today",
          "yesterday",
          "last_2_days",
          "last_3_days",
          "last_7_days",
          "last_14_days",
          "last_30_days",
          "this_week",
          "last_week",
          "this_month",
          "last_month",
          "this_year",
          "last_year",
          "all_time",
          "custom_time"
        ],
        "example": "last_7_days",
        "validation": "Must be one of the predefined values"
      },
      {
        "name": "timezone",
        "in": "query",
        "required": true,
        "type": "string",
        "description": "Timezone for date calculations (always use UTC for consistency)",
        "example": "UTC",
        "default": "UTC",
        "validation": "Must be a valid timezone identifier"
      },
      {
        "name": "limit",
        "in": "query",
        "required": false,
        "type": "integer",
        "description": "Maximum number of records to return",
        "example": 100,
        "default": 100,
        "minimum": 1,
        "maximum": 1000,
        "validation": "Must be between 1 and 1000"
      },
      {
        "name": "offset",
        "in": "query",
        "required": false,
        "type": "integer",
        "description": "Number of records to skip for pagination",
        "example": 0,
        "default": 0,
        "minimum": 0,
        "validation": "Must be non-negative"
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success - List of resources returned",
        "example": {
          "data": [
            {
              "id": 1,
              "name": "Resource 1"
            },
            {
              "id": 2,
              "name": "Resource 2"
            }
          ],
          "pagination": {
            "total": 150,
            "limit": 100,
            "offset": 0,
            "hasMore": true
          }
        }
      },
      "400": {
        "description": "Bad Request - Invalid input data or missing required fields",
        "example": {
          "error": "Validation failed",
          "message": "Field 'name' is required",
          "details": {
            "field": "name",
            "code": "required",
            "value": null
          }
        }
      },
      "401": {
        "description": "Unauthorized - Invalid or missing API key",
        "example": {
          "error": "Unauthorized",
          "message": "Invalid API key or token expired"
        }
      },
      "403": {
        "description": "Forbidden - Access denied or insufficient permissions",
        "example": {
          "error": "Access denied",
          "message": "Insufficient permissions to access this resource"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Not found",
          "message": "Resource with ID 123 not found"
        }
      },
      "429": {
        "description": "Too Many Requests - Rate limit exceeded",
        "example": {
          "error": "Rate limit exceeded",
          "message": "Too many requests, please try again later",
          "retryAfter": 60
        }
      },
      "500": {
        "description": "Internal Server Error - Server-side error",
        "example": {
          "error": "Internal server error",
          "message": "Something went wrong on our end"
        }
      }
    },
    "examples": {
      "python": "import requests\nimport os\nimport time\nfrom typing import Optional, Dict, Any\n\nclass BinomAPIClient:\n    def __init__(self, api_key: str):\n        self.api_key = api_key\n        self.base_url = \"https://pierdun.com/public/api/v1\"\n        self.headers = {\n            \"Authorization\": f\"Bearer {api_key}\",\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json\"\n        }\n    \n    def make_request(self, method: str, endpoint: str, data: Optional[Dict] = None, params: Optional[Dict] = None) -> Dict[Any, Any]:\n        \"\"\"Make API request with error handling and retries\"\"\"\n        url = f\"{self.base_url}{endpoint}\"\n        \n        for attempt in range(3):\n            try:\n                response = requests.request(\n                    method=method,\n                    url=url,\n                    headers=self.headers,\n                    json=data,\n                    params=params,\n                    timeout=30\n                )\n                \n                if response.status_code == 429:\n                    # Rate limit - wait and retry\n                    time.sleep(2 ** attempt)\n                    continue\n                \n                if response.status_code in [200, 201]:\n                    return response.json()\n                else:\n                    raise Exception(f\"API Error {response.status_code}: {response.text}\")\n                    \n            except requests.exceptions.RequestException as e:\n                if attempt == 2:  # Last attempt\n                    raise Exception(f\"Request failed: {str(e)}\")\n                time.sleep(1)\n        \n        raise Exception(\"Max retries exceeded\")\n\n# Usage example\nclient = BinomAPIClient(os.getenv('binomPublic'))\n\ntry:\n    result = client.make_request(\n        method=\"GET\",\n        endpoint=\"/public/api/v1/campaign/by_rotation/{rotationId}/list\",\n        params={\n            \"datePreset\": \"last_7_days\",\n            \"timezone\": \"UTC\",\n            \"limit\": 100,\n            \"offset\": 0\n        }\n    )\n    \n    print(\"✅ Success:\", result)\n    \nexcept Exception as e:\n    print(f\"❌ Error: {e}\")",
      "curl": "# Basic request\ncurl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\" \\\n  \"https://pierdun.com/public/api/v1/campaign/by_rotation/{rotationId}/list\"\n\n# With query parameters\ncurl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Accept: application/json\" \\\n  \"https://pierdun.com/public/api/v1/campaign/by_rotation/{rotationId}/list?datePreset=last_7_days&timezone=UTC&limit=100&offset=0\"",
      "javascript": "class BinomAPI {\n  constructor(apiKey) {\n    this.apiKey = apiKey;\n    this.baseURL = 'https://pierdun.com/public/api/v1';\n    this.headers = {\n      'Authorization': `Bearer ${apiKey}`,\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    };\n  }\n\n  async makeRequest(method, endpoint, data = null, params = null) {\n    const url = new URL(`${this.baseURL}${endpoint}`);\n    \n    if (params) {\n      Object.keys(params).forEach(key => \n        url.searchParams.append(key, params[key])\n      );\n    }\n\n    const config = {\n      method: method,\n      headers: this.headers\n    };\n\n    if (data) {\n      config.body = JSON.stringify(data);\n    }\n\n    try {\n      const response = await fetch(url.toString(), config);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${await response.text()}`);\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('API Error:', error);\n      throw error;\n    }\n  }\n}\n\n// Usage\nconst api = new BinomAPI(process.env.BINOM_API_KEY);\n\ntry {\n  const result = await api.makeRequest(\n    'GET',\n    '/public/api/v1/campaign/by_rotation/{rotationId}/list',\n    null,\n    {\n      datePreset: 'last_7_days',\n      timezone: 'UTC',\n      limit: 100,\n      offset: 0\n    }\n  );\n  \n  console.log('✅ Success:', result);\n} catch (error) {\n  console.error('❌ Error:', error.message);\n}"
    },
    "errorHandling": {
      "commonErrors": [
        {
          "code": 400,
          "cause": "Invalid input data, missing required fields, or malformed JSON",
          "solution": "Validate all input data before sending. Check required fields and data types.",
          "example": "Missing 'name' field in request body"
        },
        {
          "code": 401,
          "cause": "Invalid, expired, or missing API key",
          "solution": "Verify API key is correct and has not expired. Check Authorization header format.",
          "example": "Authorization header: 'Bearer YOUR_API_KEY'"
        },
        {
          "code": 403,
          "cause": "Insufficient permissions or access denied",
          "solution": "Ensure API key has required permissions for this operation.",
          "example": "User lacks permission to modify campaigns"
        },
        {
          "code": 404,
          "cause": "Resource not found or invalid ID",
          "solution": "Verify resource ID exists and is accessible to your account.",
          "example": "Campaign with ID 123 does not exist"
        },
        {
          "code": 429,
          "cause": "Rate limit exceeded",
          "solution": "Implement exponential backoff and retry logic. Reduce request frequency.",
          "example": "Wait 60 seconds before retrying"
        },
        {
          "code": 500,
          "cause": "Internal server error",
          "solution": "Retry request after a delay. Contact support if error persists.",
          "example": "Temporary server issue"
        }
      ],
      "retryStrategy": {
        "maxRetries": 3,
        "backoffMultiplier": 2,
        "initialDelay": 1,
        "retryableStatusCodes": [
          429,
          500,
          502,
          503,
          504
        ]
      },
      "bestPractices": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting",
        "Log errors with sufficient detail for debugging",
        "Set appropriate timeouts for requests",
        "Handle network errors gracefully"
      ]
    },
    "validation": {
      "authentication": {
        "required": true,
        "type": "Bearer token",
        "header": "Authorization: Bearer YOUR_API_KEY",
        "validation": "Token must be valid and not expired"
      },
      "contentType": {
        "required": false,
        "value": "application/json",
        "header": "Content-Type: application/json"
      },
      "rateLimits": {
        "requestsPerMinute": 100,
        "burstLimit": 10,
        "enforcement": "HTTP 429 status code when exceeded"
      },
      "dataValidation": [
        "All required fields must be present and non-empty",
        "Field types must match schema definitions",
        "String fields must not exceed maximum length",
        "Numeric fields must be within specified ranges",
        "Array fields must contain valid items",
        "Date fields must be in correct format (YYYY-MM-DD HH:MM:SS)"
      ],
      "commonValidationErrors": [
        "Missing required field 'name'",
        "Invalid email format",
        "String too long (max 255 characters)",
        "Invalid date format",
        "Negative value not allowed",
        "Invalid enum value"
      ]
    },
    "aiNotes": {
      "keyPoints": [
        "This is a GET endpoint for v1 operations",
        "Requires Bearer token authentication in Authorization header",
        "Returns JSON responses with consistent error format",
        "Supports standard HTTP status codes for success/error indication",
        "Rate limited to 100 requests per minute"
      ],
      "integrationTips": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting (429 errors)",
        "Cache responses when appropriate to reduce API calls",
        "Set reasonable timeouts (30 seconds recommended)",
        "Log requests and responses for debugging"
      ],
      "commonPatterns": [
        "Check authentication before making requests",
        "Validate required parameters are present",
        "Handle pagination for list endpoints",
        "Implement retry logic for transient errors",
        "Parse error responses for detailed error information"
      ],
      "aiSpecificGuidance": [
        "For AI agents: Always check response status before processing data",
        "Implement fallback strategies for API failures",
        "Use structured error handling to provide meaningful feedback",
        "Consider caching strategies for frequently accessed data",
        "Implement request queuing for high-volume operations"
      ]
    },
    "workflow": "Used for: Retrieving campaign details for optimization or troubleshooting",
    "realWorldUsage": [
      "Managing campaign resources in affiliate marketing workflows",
      "Automating campaign operations for campaign optimization",
      "Integrating campaign data with external reporting systems"
    ]
  },
  "GET /public/api/v1/campaign/traffic_source/list": {
    "method": "GET",
    "path": "/public/api/v1/campaign/traffic_source/list",
    "category": "campaign",
    "summary": "Get Campaign traffic source list",
    "description": "Get Campaign traffic source list. Retrieves information from the campaign resource with optional filtering and pagination.",
    "parameters": [
      {
        "name": "datePreset",
        "in": "query",
        "required": true,
        "type": "string",
        "description": "Date range preset for filtering data",
        "enum": [
          "today",
          "yesterday",
          "last_2_days",
          "last_3_days",
          "last_7_days",
          "last_14_days",
          "last_30_days",
          "this_week",
          "last_week",
          "this_month",
          "last_month",
          "this_year",
          "last_year",
          "all_time",
          "custom_time"
        ],
        "example": "last_7_days",
        "validation": "Must be one of the predefined values"
      },
      {
        "name": "timezone",
        "in": "query",
        "required": true,
        "type": "string",
        "description": "Timezone for date calculations (always use UTC for consistency)",
        "example": "UTC",
        "default": "UTC",
        "validation": "Must be a valid timezone identifier"
      },
      {
        "name": "limit",
        "in": "query",
        "required": false,
        "type": "integer",
        "description": "Maximum number of records to return",
        "example": 100,
        "default": 100,
        "minimum": 1,
        "maximum": 1000,
        "validation": "Must be between 1 and 1000"
      },
      {
        "name": "offset",
        "in": "query",
        "required": false,
        "type": "integer",
        "description": "Number of records to skip for pagination",
        "example": 0,
        "default": 0,
        "minimum": 0,
        "validation": "Must be non-negative"
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success - List of resources returned",
        "example": {
          "data": [
            {
              "id": 1,
              "name": "Resource 1"
            },
            {
              "id": 2,
              "name": "Resource 2"
            }
          ],
          "pagination": {
            "total": 150,
            "limit": 100,
            "offset": 0,
            "hasMore": true
          }
        }
      },
      "400": {
        "description": "Bad Request - Invalid input data or missing required fields",
        "example": {
          "error": "Validation failed",
          "message": "Field 'name' is required",
          "details": {
            "field": "name",
            "code": "required",
            "value": null
          }
        }
      },
      "401": {
        "description": "Unauthorized - Invalid or missing API key",
        "example": {
          "error": "Unauthorized",
          "message": "Invalid API key or token expired"
        }
      },
      "403": {
        "description": "Forbidden - Access denied or insufficient permissions",
        "example": {
          "error": "Access denied",
          "message": "Insufficient permissions to access this resource"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Not found",
          "message": "Resource with ID 123 not found"
        }
      },
      "429": {
        "description": "Too Many Requests - Rate limit exceeded",
        "example": {
          "error": "Rate limit exceeded",
          "message": "Too many requests, please try again later",
          "retryAfter": 60
        }
      },
      "500": {
        "description": "Internal Server Error - Server-side error",
        "example": {
          "error": "Internal server error",
          "message": "Something went wrong on our end"
        }
      }
    },
    "examples": {
      "python": "import requests\nimport os\nimport time\nfrom typing import Optional, Dict, Any\n\nclass BinomAPIClient:\n    def __init__(self, api_key: str):\n        self.api_key = api_key\n        self.base_url = \"https://pierdun.com/public/api/v1\"\n        self.headers = {\n            \"Authorization\": f\"Bearer {api_key}\",\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json\"\n        }\n    \n    def make_request(self, method: str, endpoint: str, data: Optional[Dict] = None, params: Optional[Dict] = None) -> Dict[Any, Any]:\n        \"\"\"Make API request with error handling and retries\"\"\"\n        url = f\"{self.base_url}{endpoint}\"\n        \n        for attempt in range(3):\n            try:\n                response = requests.request(\n                    method=method,\n                    url=url,\n                    headers=self.headers,\n                    json=data,\n                    params=params,\n                    timeout=30\n                )\n                \n                if response.status_code == 429:\n                    # Rate limit - wait and retry\n                    time.sleep(2 ** attempt)\n                    continue\n                \n                if response.status_code in [200, 201]:\n                    return response.json()\n                else:\n                    raise Exception(f\"API Error {response.status_code}: {response.text}\")\n                    \n            except requests.exceptions.RequestException as e:\n                if attempt == 2:  # Last attempt\n                    raise Exception(f\"Request failed: {str(e)}\")\n                time.sleep(1)\n        \n        raise Exception(\"Max retries exceeded\")\n\n# Usage example\nclient = BinomAPIClient(os.getenv('binomPublic'))\n\ntry:\n    result = client.make_request(\n        method=\"GET\",\n        endpoint=\"/public/api/v1/campaign/traffic_source/list\",\n        params={\n            \"datePreset\": \"last_7_days\",\n            \"timezone\": \"UTC\",\n            \"limit\": 100,\n            \"offset\": 0\n        }\n    )\n    \n    print(\"✅ Success:\", result)\n    \nexcept Exception as e:\n    print(f\"❌ Error: {e}\")",
      "curl": "# Basic request\ncurl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\" \\\n  \"https://pierdun.com/public/api/v1/campaign/traffic_source/list\"\n\n# With query parameters\ncurl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Accept: application/json\" \\\n  \"https://pierdun.com/public/api/v1/campaign/traffic_source/list?datePreset=last_7_days&timezone=UTC&limit=100&offset=0\"",
      "javascript": "class BinomAPI {\n  constructor(apiKey) {\n    this.apiKey = apiKey;\n    this.baseURL = 'https://pierdun.com/public/api/v1';\n    this.headers = {\n      'Authorization': `Bearer ${apiKey}`,\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    };\n  }\n\n  async makeRequest(method, endpoint, data = null, params = null) {\n    const url = new URL(`${this.baseURL}${endpoint}`);\n    \n    if (params) {\n      Object.keys(params).forEach(key => \n        url.searchParams.append(key, params[key])\n      );\n    }\n\n    const config = {\n      method: method,\n      headers: this.headers\n    };\n\n    if (data) {\n      config.body = JSON.stringify(data);\n    }\n\n    try {\n      const response = await fetch(url.toString(), config);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${await response.text()}`);\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('API Error:', error);\n      throw error;\n    }\n  }\n}\n\n// Usage\nconst api = new BinomAPI(process.env.BINOM_API_KEY);\n\ntry {\n  const result = await api.makeRequest(\n    'GET',\n    '/public/api/v1/campaign/traffic_source/list',\n    null,\n    {\n      datePreset: 'last_7_days',\n      timezone: 'UTC',\n      limit: 100,\n      offset: 0\n    }\n  );\n  \n  console.log('✅ Success:', result);\n} catch (error) {\n  console.error('❌ Error:', error.message);\n}"
    },
    "errorHandling": {
      "commonErrors": [
        {
          "code": 400,
          "cause": "Invalid input data, missing required fields, or malformed JSON",
          "solution": "Validate all input data before sending. Check required fields and data types.",
          "example": "Missing 'name' field in request body"
        },
        {
          "code": 401,
          "cause": "Invalid, expired, or missing API key",
          "solution": "Verify API key is correct and has not expired. Check Authorization header format.",
          "example": "Authorization header: 'Bearer YOUR_API_KEY'"
        },
        {
          "code": 403,
          "cause": "Insufficient permissions or access denied",
          "solution": "Ensure API key has required permissions for this operation.",
          "example": "User lacks permission to modify campaigns"
        },
        {
          "code": 404,
          "cause": "Resource not found or invalid ID",
          "solution": "Verify resource ID exists and is accessible to your account.",
          "example": "Campaign with ID 123 does not exist"
        },
        {
          "code": 429,
          "cause": "Rate limit exceeded",
          "solution": "Implement exponential backoff and retry logic. Reduce request frequency.",
          "example": "Wait 60 seconds before retrying"
        },
        {
          "code": 500,
          "cause": "Internal server error",
          "solution": "Retry request after a delay. Contact support if error persists.",
          "example": "Temporary server issue"
        }
      ],
      "retryStrategy": {
        "maxRetries": 3,
        "backoffMultiplier": 2,
        "initialDelay": 1,
        "retryableStatusCodes": [
          429,
          500,
          502,
          503,
          504
        ]
      },
      "bestPractices": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting",
        "Log errors with sufficient detail for debugging",
        "Set appropriate timeouts for requests",
        "Handle network errors gracefully"
      ]
    },
    "validation": {
      "authentication": {
        "required": true,
        "type": "Bearer token",
        "header": "Authorization: Bearer YOUR_API_KEY",
        "validation": "Token must be valid and not expired"
      },
      "contentType": {
        "required": false,
        "value": "application/json",
        "header": "Content-Type: application/json"
      },
      "rateLimits": {
        "requestsPerMinute": 100,
        "burstLimit": 10,
        "enforcement": "HTTP 429 status code when exceeded"
      },
      "dataValidation": [
        "All required fields must be present and non-empty",
        "Field types must match schema definitions",
        "String fields must not exceed maximum length",
        "Numeric fields must be within specified ranges",
        "Array fields must contain valid items",
        "Date fields must be in correct format (YYYY-MM-DD HH:MM:SS)"
      ],
      "commonValidationErrors": [
        "Missing required field 'name'",
        "Invalid email format",
        "String too long (max 255 characters)",
        "Invalid date format",
        "Negative value not allowed",
        "Invalid enum value"
      ]
    },
    "aiNotes": {
      "keyPoints": [
        "This is a GET endpoint for v1 operations",
        "Requires Bearer token authentication in Authorization header",
        "Returns JSON responses with consistent error format",
        "Supports standard HTTP status codes for success/error indication",
        "Rate limited to 100 requests per minute"
      ],
      "integrationTips": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting (429 errors)",
        "Cache responses when appropriate to reduce API calls",
        "Set reasonable timeouts (30 seconds recommended)",
        "Log requests and responses for debugging"
      ],
      "commonPatterns": [
        "Check authentication before making requests",
        "Validate required parameters are present",
        "Handle pagination for list endpoints",
        "Implement retry logic for transient errors",
        "Parse error responses for detailed error information"
      ],
      "aiSpecificGuidance": [
        "For AI agents: Always check response status before processing data",
        "Implement fallback strategies for API failures",
        "Use structured error handling to provide meaningful feedback",
        "Consider caching strategies for frequently accessed data",
        "Implement request queuing for high-volume operations"
      ]
    },
    "workflow": "Used for: Retrieving campaign details for optimization or troubleshooting",
    "realWorldUsage": [
      "Managing campaign resources in affiliate marketing workflows",
      "Automating campaign operations for campaign optimization",
      "Integrating campaign data with external reporting systems"
    ]
  },
  "POST /public/api/v1/campaign/change_setting": {
    "method": "POST",
    "path": "/public/api/v1/campaign/change_setting",
    "category": "campaign",
    "summary": "Change Campaign Setting",
    "description": "Change Campaign Setting. Creates a new campaign resource with specified configuration parameters.",
    "parameters": [],
    "requestBody": null,
    "responses": {
      "201": {
        "description": "Created - Resource created successfully",
        "example": {
          "id": 123,
          "message": "Resource created successfully",
          "data": {
            "id": 123,
            "name": "New Resource",
            "createdAt": "2023-12-01T10:00:00Z"
          }
        }
      },
      "400": {
        "description": "Bad Request - Invalid input data or missing required fields",
        "example": {
          "error": "Validation failed",
          "message": "Field 'name' is required",
          "details": {
            "field": "name",
            "code": "required",
            "value": null
          }
        }
      },
      "401": {
        "description": "Unauthorized - Invalid or missing API key",
        "example": {
          "error": "Unauthorized",
          "message": "Invalid API key or token expired"
        }
      },
      "403": {
        "description": "Forbidden - Access denied or insufficient permissions",
        "example": {
          "error": "Access denied",
          "message": "Insufficient permissions to access this resource"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Not found",
          "message": "Resource with ID 123 not found"
        }
      },
      "429": {
        "description": "Too Many Requests - Rate limit exceeded",
        "example": {
          "error": "Rate limit exceeded",
          "message": "Too many requests, please try again later",
          "retryAfter": 60
        }
      },
      "500": {
        "description": "Internal Server Error - Server-side error",
        "example": {
          "error": "Internal server error",
          "message": "Something went wrong on our end"
        }
      }
    },
    "examples": {
      "python": "import requests\nimport os\nimport time\nfrom typing import Optional, Dict, Any\n\nclass BinomAPIClient:\n    def __init__(self, api_key: str):\n        self.api_key = api_key\n        self.base_url = \"https://pierdun.com/public/api/v1\"\n        self.headers = {\n            \"Authorization\": f\"Bearer {api_key}\",\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json\"\n        }\n    \n    def make_request(self, method: str, endpoint: str, data: Optional[Dict] = None, params: Optional[Dict] = None) -> Dict[Any, Any]:\n        \"\"\"Make API request with error handling and retries\"\"\"\n        url = f\"{self.base_url}{endpoint}\"\n        \n        for attempt in range(3):\n            try:\n                response = requests.request(\n                    method=method,\n                    url=url,\n                    headers=self.headers,\n                    json=data,\n                    params=params,\n                    timeout=30\n                )\n                \n                if response.status_code == 429:\n                    # Rate limit - wait and retry\n                    time.sleep(2 ** attempt)\n                    continue\n                \n                if response.status_code in [200, 201]:\n                    return response.json()\n                else:\n                    raise Exception(f\"API Error {response.status_code}: {response.text}\")\n                    \n            except requests.exceptions.RequestException as e:\n                if attempt == 2:  # Last attempt\n                    raise Exception(f\"Request failed: {str(e)}\")\n                time.sleep(1)\n        \n        raise Exception(\"Max retries exceeded\")\n\n# Usage example\nclient = BinomAPIClient(os.getenv('binomPublic'))\n\ntry:\n    result = client.make_request(\n        method=\"POST\",\n        endpoint=\"/public/api/v1/campaign/change_setting\",\n    )\n    \n    print(\"✅ Success:\", result)\n    \nexcept Exception as e:\n    print(f\"❌ Error: {e}\")",
      "curl": "# Basic request\ncurl -X POST \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\" \\\n  \"https://pierdun.com/public/api/v1/campaign/change_setting\"",
      "javascript": "class BinomAPI {\n  constructor(apiKey) {\n    this.apiKey = apiKey;\n    this.baseURL = 'https://pierdun.com/public/api/v1';\n    this.headers = {\n      'Authorization': `Bearer ${apiKey}`,\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    };\n  }\n\n  async makeRequest(method, endpoint, data = null, params = null) {\n    const url = new URL(`${this.baseURL}${endpoint}`);\n    \n    if (params) {\n      Object.keys(params).forEach(key => \n        url.searchParams.append(key, params[key])\n      );\n    }\n\n    const config = {\n      method: method,\n      headers: this.headers\n    };\n\n    if (data) {\n      config.body = JSON.stringify(data);\n    }\n\n    try {\n      const response = await fetch(url.toString(), config);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${await response.text()}`);\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('API Error:', error);\n      throw error;\n    }\n  }\n}\n\n// Usage\nconst api = new BinomAPI(process.env.BINOM_API_KEY);\n\ntry {\n  const result = await api.makeRequest(\n    'POST',\n    '/public/api/v1/campaign/change_setting',\n    null,\n    null\n  );\n  \n  console.log('✅ Success:', result);\n} catch (error) {\n  console.error('❌ Error:', error.message);\n}"
    },
    "errorHandling": {
      "commonErrors": [
        {
          "code": 400,
          "cause": "Invalid input data, missing required fields, or malformed JSON",
          "solution": "Validate all input data before sending. Check required fields and data types.",
          "example": "Missing 'name' field in request body"
        },
        {
          "code": 401,
          "cause": "Invalid, expired, or missing API key",
          "solution": "Verify API key is correct and has not expired. Check Authorization header format.",
          "example": "Authorization header: 'Bearer YOUR_API_KEY'"
        },
        {
          "code": 403,
          "cause": "Insufficient permissions or access denied",
          "solution": "Ensure API key has required permissions for this operation.",
          "example": "User lacks permission to modify campaigns"
        },
        {
          "code": 404,
          "cause": "Resource not found or invalid ID",
          "solution": "Verify resource ID exists and is accessible to your account.",
          "example": "Campaign with ID 123 does not exist"
        },
        {
          "code": 429,
          "cause": "Rate limit exceeded",
          "solution": "Implement exponential backoff and retry logic. Reduce request frequency.",
          "example": "Wait 60 seconds before retrying"
        },
        {
          "code": 500,
          "cause": "Internal server error",
          "solution": "Retry request after a delay. Contact support if error persists.",
          "example": "Temporary server issue"
        }
      ],
      "retryStrategy": {
        "maxRetries": 3,
        "backoffMultiplier": 2,
        "initialDelay": 1,
        "retryableStatusCodes": [
          429,
          500,
          502,
          503,
          504
        ]
      },
      "bestPractices": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting",
        "Log errors with sufficient detail for debugging",
        "Set appropriate timeouts for requests",
        "Handle network errors gracefully"
      ]
    },
    "validation": {
      "authentication": {
        "required": true,
        "type": "Bearer token",
        "header": "Authorization: Bearer YOUR_API_KEY",
        "validation": "Token must be valid and not expired"
      },
      "contentType": {
        "required": true,
        "value": "application/json",
        "header": "Content-Type: application/json"
      },
      "rateLimits": {
        "requestsPerMinute": 100,
        "burstLimit": 10,
        "enforcement": "HTTP 429 status code when exceeded"
      },
      "dataValidation": [
        "All required fields must be present and non-empty",
        "Field types must match schema definitions",
        "String fields must not exceed maximum length",
        "Numeric fields must be within specified ranges",
        "Array fields must contain valid items",
        "Date fields must be in correct format (YYYY-MM-DD HH:MM:SS)"
      ],
      "commonValidationErrors": [
        "Missing required field 'name'",
        "Invalid email format",
        "String too long (max 255 characters)",
        "Invalid date format",
        "Negative value not allowed",
        "Invalid enum value"
      ]
    },
    "aiNotes": {
      "keyPoints": [
        "This is a POST endpoint for v1 operations",
        "Requires Bearer token authentication in Authorization header",
        "Returns JSON responses with consistent error format",
        "Supports standard HTTP status codes for success/error indication",
        "Rate limited to 100 requests per minute"
      ],
      "integrationTips": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting (429 errors)",
        "Cache responses when appropriate to reduce API calls",
        "Set reasonable timeouts (30 seconds recommended)",
        "Log requests and responses for debugging"
      ],
      "commonPatterns": [
        "Check authentication before making requests",
        "Validate required parameters are present",
        "Handle pagination for list endpoints",
        "Implement retry logic for transient errors",
        "Parse error responses for detailed error information"
      ],
      "aiSpecificGuidance": [
        "For AI agents: Always check response status before processing data",
        "Implement fallback strategies for API failures",
        "Use structured error handling to provide meaningful feedback",
        "Consider caching strategies for frequently accessed data",
        "Implement request queuing for high-volume operations"
      ]
    },
    "workflow": "Core step: Create campaign after setting up traffic sources and networks",
    "realWorldUsage": [
      "Managing campaign resources in affiliate marketing workflows",
      "Automating campaign operations for campaign optimization",
      "Integrating campaign data with external reporting systems"
    ]
  },
  "POST /public/api/v1/campaign/change_cost": {
    "method": "POST",
    "path": "/public/api/v1/campaign/change_cost",
    "category": "campaign",
    "summary": "Change Campaign Cost",
    "description": "Change Campaign Cost. Creates a new campaign resource with specified configuration parameters.",
    "parameters": [],
    "requestBody": null,
    "responses": {
      "201": {
        "description": "Created - Resource created successfully",
        "example": {
          "id": 123,
          "message": "Resource created successfully",
          "data": {
            "id": 123,
            "name": "New Resource",
            "createdAt": "2023-12-01T10:00:00Z"
          }
        }
      },
      "400": {
        "description": "Bad Request - Invalid input data or missing required fields",
        "example": {
          "error": "Validation failed",
          "message": "Field 'name' is required",
          "details": {
            "field": "name",
            "code": "required",
            "value": null
          }
        }
      },
      "401": {
        "description": "Unauthorized - Invalid or missing API key",
        "example": {
          "error": "Unauthorized",
          "message": "Invalid API key or token expired"
        }
      },
      "403": {
        "description": "Forbidden - Access denied or insufficient permissions",
        "example": {
          "error": "Access denied",
          "message": "Insufficient permissions to access this resource"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Not found",
          "message": "Resource with ID 123 not found"
        }
      },
      "429": {
        "description": "Too Many Requests - Rate limit exceeded",
        "example": {
          "error": "Rate limit exceeded",
          "message": "Too many requests, please try again later",
          "retryAfter": 60
        }
      },
      "500": {
        "description": "Internal Server Error - Server-side error",
        "example": {
          "error": "Internal server error",
          "message": "Something went wrong on our end"
        }
      }
    },
    "examples": {
      "python": "import requests\nimport os\nimport time\nfrom typing import Optional, Dict, Any\n\nclass BinomAPIClient:\n    def __init__(self, api_key: str):\n        self.api_key = api_key\n        self.base_url = \"https://pierdun.com/public/api/v1\"\n        self.headers = {\n            \"Authorization\": f\"Bearer {api_key}\",\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json\"\n        }\n    \n    def make_request(self, method: str, endpoint: str, data: Optional[Dict] = None, params: Optional[Dict] = None) -> Dict[Any, Any]:\n        \"\"\"Make API request with error handling and retries\"\"\"\n        url = f\"{self.base_url}{endpoint}\"\n        \n        for attempt in range(3):\n            try:\n                response = requests.request(\n                    method=method,\n                    url=url,\n                    headers=self.headers,\n                    json=data,\n                    params=params,\n                    timeout=30\n                )\n                \n                if response.status_code == 429:\n                    # Rate limit - wait and retry\n                    time.sleep(2 ** attempt)\n                    continue\n                \n                if response.status_code in [200, 201]:\n                    return response.json()\n                else:\n                    raise Exception(f\"API Error {response.status_code}: {response.text}\")\n                    \n            except requests.exceptions.RequestException as e:\n                if attempt == 2:  # Last attempt\n                    raise Exception(f\"Request failed: {str(e)}\")\n                time.sleep(1)\n        \n        raise Exception(\"Max retries exceeded\")\n\n# Usage example\nclient = BinomAPIClient(os.getenv('binomPublic'))\n\ntry:\n    result = client.make_request(\n        method=\"POST\",\n        endpoint=\"/public/api/v1/campaign/change_cost\",\n    )\n    \n    print(\"✅ Success:\", result)\n    \nexcept Exception as e:\n    print(f\"❌ Error: {e}\")",
      "curl": "# Basic request\ncurl -X POST \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\" \\\n  \"https://pierdun.com/public/api/v1/campaign/change_cost\"",
      "javascript": "class BinomAPI {\n  constructor(apiKey) {\n    this.apiKey = apiKey;\n    this.baseURL = 'https://pierdun.com/public/api/v1';\n    this.headers = {\n      'Authorization': `Bearer ${apiKey}`,\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    };\n  }\n\n  async makeRequest(method, endpoint, data = null, params = null) {\n    const url = new URL(`${this.baseURL}${endpoint}`);\n    \n    if (params) {\n      Object.keys(params).forEach(key => \n        url.searchParams.append(key, params[key])\n      );\n    }\n\n    const config = {\n      method: method,\n      headers: this.headers\n    };\n\n    if (data) {\n      config.body = JSON.stringify(data);\n    }\n\n    try {\n      const response = await fetch(url.toString(), config);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${await response.text()}`);\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('API Error:', error);\n      throw error;\n    }\n  }\n}\n\n// Usage\nconst api = new BinomAPI(process.env.BINOM_API_KEY);\n\ntry {\n  const result = await api.makeRequest(\n    'POST',\n    '/public/api/v1/campaign/change_cost',\n    null,\n    null\n  );\n  \n  console.log('✅ Success:', result);\n} catch (error) {\n  console.error('❌ Error:', error.message);\n}"
    },
    "errorHandling": {
      "commonErrors": [
        {
          "code": 400,
          "cause": "Invalid input data, missing required fields, or malformed JSON",
          "solution": "Validate all input data before sending. Check required fields and data types.",
          "example": "Missing 'name' field in request body"
        },
        {
          "code": 401,
          "cause": "Invalid, expired, or missing API key",
          "solution": "Verify API key is correct and has not expired. Check Authorization header format.",
          "example": "Authorization header: 'Bearer YOUR_API_KEY'"
        },
        {
          "code": 403,
          "cause": "Insufficient permissions or access denied",
          "solution": "Ensure API key has required permissions for this operation.",
          "example": "User lacks permission to modify campaigns"
        },
        {
          "code": 404,
          "cause": "Resource not found or invalid ID",
          "solution": "Verify resource ID exists and is accessible to your account.",
          "example": "Campaign with ID 123 does not exist"
        },
        {
          "code": 429,
          "cause": "Rate limit exceeded",
          "solution": "Implement exponential backoff and retry logic. Reduce request frequency.",
          "example": "Wait 60 seconds before retrying"
        },
        {
          "code": 500,
          "cause": "Internal server error",
          "solution": "Retry request after a delay. Contact support if error persists.",
          "example": "Temporary server issue"
        }
      ],
      "retryStrategy": {
        "maxRetries": 3,
        "backoffMultiplier": 2,
        "initialDelay": 1,
        "retryableStatusCodes": [
          429,
          500,
          502,
          503,
          504
        ]
      },
      "bestPractices": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting",
        "Log errors with sufficient detail for debugging",
        "Set appropriate timeouts for requests",
        "Handle network errors gracefully"
      ]
    },
    "validation": {
      "authentication": {
        "required": true,
        "type": "Bearer token",
        "header": "Authorization: Bearer YOUR_API_KEY",
        "validation": "Token must be valid and not expired"
      },
      "contentType": {
        "required": true,
        "value": "application/json",
        "header": "Content-Type: application/json"
      },
      "rateLimits": {
        "requestsPerMinute": 100,
        "burstLimit": 10,
        "enforcement": "HTTP 429 status code when exceeded"
      },
      "dataValidation": [
        "All required fields must be present and non-empty",
        "Field types must match schema definitions",
        "String fields must not exceed maximum length",
        "Numeric fields must be within specified ranges",
        "Array fields must contain valid items",
        "Date fields must be in correct format (YYYY-MM-DD HH:MM:SS)"
      ],
      "commonValidationErrors": [
        "Missing required field 'name'",
        "Invalid email format",
        "String too long (max 255 characters)",
        "Invalid date format",
        "Negative value not allowed",
        "Invalid enum value"
      ]
    },
    "aiNotes": {
      "keyPoints": [
        "This is a POST endpoint for v1 operations",
        "Requires Bearer token authentication in Authorization header",
        "Returns JSON responses with consistent error format",
        "Supports standard HTTP status codes for success/error indication",
        "Rate limited to 100 requests per minute"
      ],
      "integrationTips": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting (429 errors)",
        "Cache responses when appropriate to reduce API calls",
        "Set reasonable timeouts (30 seconds recommended)",
        "Log requests and responses for debugging"
      ],
      "commonPatterns": [
        "Check authentication before making requests",
        "Validate required parameters are present",
        "Handle pagination for list endpoints",
        "Implement retry logic for transient errors",
        "Parse error responses for detailed error information"
      ],
      "aiSpecificGuidance": [
        "For AI agents: Always check response status before processing data",
        "Implement fallback strategies for API failures",
        "Use structured error handling to provide meaningful feedback",
        "Consider caching strategies for frequently accessed data",
        "Implement request queuing for high-volume operations"
      ]
    },
    "workflow": "Core step: Create campaign after setting up traffic sources and networks",
    "realWorldUsage": [
      "Managing campaign resources in affiliate marketing workflows",
      "Automating campaign operations for campaign optimization",
      "Integrating campaign data with external reporting systems"
    ]
  },
  "POST /public/api/v1/campaign/change_domain": {
    "method": "POST",
    "path": "/public/api/v1/campaign/change_domain",
    "category": "campaign",
    "summary": "Change Campaign Domain",
    "description": "Change Campaign Domain. Creates a new campaign resource with specified configuration parameters.",
    "parameters": [],
    "requestBody": null,
    "responses": {
      "201": {
        "description": "Created - Resource created successfully",
        "example": {
          "id": 123,
          "message": "Resource created successfully",
          "data": {
            "id": 123,
            "name": "New Resource",
            "createdAt": "2023-12-01T10:00:00Z"
          }
        }
      },
      "400": {
        "description": "Bad Request - Invalid input data or missing required fields",
        "example": {
          "error": "Validation failed",
          "message": "Field 'name' is required",
          "details": {
            "field": "name",
            "code": "required",
            "value": null
          }
        }
      },
      "401": {
        "description": "Unauthorized - Invalid or missing API key",
        "example": {
          "error": "Unauthorized",
          "message": "Invalid API key or token expired"
        }
      },
      "403": {
        "description": "Forbidden - Access denied or insufficient permissions",
        "example": {
          "error": "Access denied",
          "message": "Insufficient permissions to access this resource"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Not found",
          "message": "Resource with ID 123 not found"
        }
      },
      "429": {
        "description": "Too Many Requests - Rate limit exceeded",
        "example": {
          "error": "Rate limit exceeded",
          "message": "Too many requests, please try again later",
          "retryAfter": 60
        }
      },
      "500": {
        "description": "Internal Server Error - Server-side error",
        "example": {
          "error": "Internal server error",
          "message": "Something went wrong on our end"
        }
      }
    },
    "examples": {
      "python": "import requests\nimport os\nimport time\nfrom typing import Optional, Dict, Any\n\nclass BinomAPIClient:\n    def __init__(self, api_key: str):\n        self.api_key = api_key\n        self.base_url = \"https://pierdun.com/public/api/v1\"\n        self.headers = {\n            \"Authorization\": f\"Bearer {api_key}\",\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json\"\n        }\n    \n    def make_request(self, method: str, endpoint: str, data: Optional[Dict] = None, params: Optional[Dict] = None) -> Dict[Any, Any]:\n        \"\"\"Make API request with error handling and retries\"\"\"\n        url = f\"{self.base_url}{endpoint}\"\n        \n        for attempt in range(3):\n            try:\n                response = requests.request(\n                    method=method,\n                    url=url,\n                    headers=self.headers,\n                    json=data,\n                    params=params,\n                    timeout=30\n                )\n                \n                if response.status_code == 429:\n                    # Rate limit - wait and retry\n                    time.sleep(2 ** attempt)\n                    continue\n                \n                if response.status_code in [200, 201]:\n                    return response.json()\n                else:\n                    raise Exception(f\"API Error {response.status_code}: {response.text}\")\n                    \n            except requests.exceptions.RequestException as e:\n                if attempt == 2:  # Last attempt\n                    raise Exception(f\"Request failed: {str(e)}\")\n                time.sleep(1)\n        \n        raise Exception(\"Max retries exceeded\")\n\n# Usage example\nclient = BinomAPIClient(os.getenv('binomPublic'))\n\ntry:\n    result = client.make_request(\n        method=\"POST\",\n        endpoint=\"/public/api/v1/campaign/change_domain\",\n    )\n    \n    print(\"✅ Success:\", result)\n    \nexcept Exception as e:\n    print(f\"❌ Error: {e}\")",
      "curl": "# Basic request\ncurl -X POST \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\" \\\n  \"https://pierdun.com/public/api/v1/campaign/change_domain\"",
      "javascript": "class BinomAPI {\n  constructor(apiKey) {\n    this.apiKey = apiKey;\n    this.baseURL = 'https://pierdun.com/public/api/v1';\n    this.headers = {\n      'Authorization': `Bearer ${apiKey}`,\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    };\n  }\n\n  async makeRequest(method, endpoint, data = null, params = null) {\n    const url = new URL(`${this.baseURL}${endpoint}`);\n    \n    if (params) {\n      Object.keys(params).forEach(key => \n        url.searchParams.append(key, params[key])\n      );\n    }\n\n    const config = {\n      method: method,\n      headers: this.headers\n    };\n\n    if (data) {\n      config.body = JSON.stringify(data);\n    }\n\n    try {\n      const response = await fetch(url.toString(), config);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${await response.text()}`);\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('API Error:', error);\n      throw error;\n    }\n  }\n}\n\n// Usage\nconst api = new BinomAPI(process.env.BINOM_API_KEY);\n\ntry {\n  const result = await api.makeRequest(\n    'POST',\n    '/public/api/v1/campaign/change_domain',\n    null,\n    null\n  );\n  \n  console.log('✅ Success:', result);\n} catch (error) {\n  console.error('❌ Error:', error.message);\n}"
    },
    "errorHandling": {
      "commonErrors": [
        {
          "code": 400,
          "cause": "Invalid input data, missing required fields, or malformed JSON",
          "solution": "Validate all input data before sending. Check required fields and data types.",
          "example": "Missing 'name' field in request body"
        },
        {
          "code": 401,
          "cause": "Invalid, expired, or missing API key",
          "solution": "Verify API key is correct and has not expired. Check Authorization header format.",
          "example": "Authorization header: 'Bearer YOUR_API_KEY'"
        },
        {
          "code": 403,
          "cause": "Insufficient permissions or access denied",
          "solution": "Ensure API key has required permissions for this operation.",
          "example": "User lacks permission to modify campaigns"
        },
        {
          "code": 404,
          "cause": "Resource not found or invalid ID",
          "solution": "Verify resource ID exists and is accessible to your account.",
          "example": "Campaign with ID 123 does not exist"
        },
        {
          "code": 429,
          "cause": "Rate limit exceeded",
          "solution": "Implement exponential backoff and retry logic. Reduce request frequency.",
          "example": "Wait 60 seconds before retrying"
        },
        {
          "code": 500,
          "cause": "Internal server error",
          "solution": "Retry request after a delay. Contact support if error persists.",
          "example": "Temporary server issue"
        }
      ],
      "retryStrategy": {
        "maxRetries": 3,
        "backoffMultiplier": 2,
        "initialDelay": 1,
        "retryableStatusCodes": [
          429,
          500,
          502,
          503,
          504
        ]
      },
      "bestPractices": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting",
        "Log errors with sufficient detail for debugging",
        "Set appropriate timeouts for requests",
        "Handle network errors gracefully"
      ]
    },
    "validation": {
      "authentication": {
        "required": true,
        "type": "Bearer token",
        "header": "Authorization: Bearer YOUR_API_KEY",
        "validation": "Token must be valid and not expired"
      },
      "contentType": {
        "required": true,
        "value": "application/json",
        "header": "Content-Type: application/json"
      },
      "rateLimits": {
        "requestsPerMinute": 100,
        "burstLimit": 10,
        "enforcement": "HTTP 429 status code when exceeded"
      },
      "dataValidation": [
        "All required fields must be present and non-empty",
        "Field types must match schema definitions",
        "String fields must not exceed maximum length",
        "Numeric fields must be within specified ranges",
        "Array fields must contain valid items",
        "Date fields must be in correct format (YYYY-MM-DD HH:MM:SS)"
      ],
      "commonValidationErrors": [
        "Missing required field 'name'",
        "Invalid email format",
        "String too long (max 255 characters)",
        "Invalid date format",
        "Negative value not allowed",
        "Invalid enum value"
      ]
    },
    "aiNotes": {
      "keyPoints": [
        "This is a POST endpoint for v1 operations",
        "Requires Bearer token authentication in Authorization header",
        "Returns JSON responses with consistent error format",
        "Supports standard HTTP status codes for success/error indication",
        "Rate limited to 100 requests per minute"
      ],
      "integrationTips": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting (429 errors)",
        "Cache responses when appropriate to reduce API calls",
        "Set reasonable timeouts (30 seconds recommended)",
        "Log requests and responses for debugging"
      ],
      "commonPatterns": [
        "Check authentication before making requests",
        "Validate required parameters are present",
        "Handle pagination for list endpoints",
        "Implement retry logic for transient errors",
        "Parse error responses for detailed error information"
      ],
      "aiSpecificGuidance": [
        "For AI agents: Always check response status before processing data",
        "Implement fallback strategies for API failures",
        "Use structured error handling to provide meaningful feedback",
        "Consider caching strategies for frequently accessed data",
        "Implement request queuing for high-volume operations"
      ]
    },
    "workflow": "Core step: Create campaign after setting up traffic sources and networks",
    "realWorldUsage": [
      "Managing campaign resources in affiliate marketing workflows",
      "Automating campaign operations for campaign optimization",
      "Integrating campaign data with external reporting systems"
    ]
  },
  "POST /public/api/v1/campaign/change_group": {
    "method": "POST",
    "path": "/public/api/v1/campaign/change_group",
    "category": "campaign",
    "summary": "Change Campaign Group",
    "description": "Change Campaign Group. Creates a new campaign resource with specified configuration parameters.",
    "parameters": [],
    "requestBody": null,
    "responses": {
      "201": {
        "description": "Created - Resource created successfully",
        "example": {
          "id": 123,
          "message": "Resource created successfully",
          "data": {
            "id": 123,
            "name": "New Resource",
            "createdAt": "2023-12-01T10:00:00Z"
          }
        }
      },
      "400": {
        "description": "Bad Request - Invalid input data or missing required fields",
        "example": {
          "error": "Validation failed",
          "message": "Field 'name' is required",
          "details": {
            "field": "name",
            "code": "required",
            "value": null
          }
        }
      },
      "401": {
        "description": "Unauthorized - Invalid or missing API key",
        "example": {
          "error": "Unauthorized",
          "message": "Invalid API key or token expired"
        }
      },
      "403": {
        "description": "Forbidden - Access denied or insufficient permissions",
        "example": {
          "error": "Access denied",
          "message": "Insufficient permissions to access this resource"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Not found",
          "message": "Resource with ID 123 not found"
        }
      },
      "429": {
        "description": "Too Many Requests - Rate limit exceeded",
        "example": {
          "error": "Rate limit exceeded",
          "message": "Too many requests, please try again later",
          "retryAfter": 60
        }
      },
      "500": {
        "description": "Internal Server Error - Server-side error",
        "example": {
          "error": "Internal server error",
          "message": "Something went wrong on our end"
        }
      }
    },
    "examples": {
      "python": "import requests\nimport os\nimport time\nfrom typing import Optional, Dict, Any\n\nclass BinomAPIClient:\n    def __init__(self, api_key: str):\n        self.api_key = api_key\n        self.base_url = \"https://pierdun.com/public/api/v1\"\n        self.headers = {\n            \"Authorization\": f\"Bearer {api_key}\",\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json\"\n        }\n    \n    def make_request(self, method: str, endpoint: str, data: Optional[Dict] = None, params: Optional[Dict] = None) -> Dict[Any, Any]:\n        \"\"\"Make API request with error handling and retries\"\"\"\n        url = f\"{self.base_url}{endpoint}\"\n        \n        for attempt in range(3):\n            try:\n                response = requests.request(\n                    method=method,\n                    url=url,\n                    headers=self.headers,\n                    json=data,\n                    params=params,\n                    timeout=30\n                )\n                \n                if response.status_code == 429:\n                    # Rate limit - wait and retry\n                    time.sleep(2 ** attempt)\n                    continue\n                \n                if response.status_code in [200, 201]:\n                    return response.json()\n                else:\n                    raise Exception(f\"API Error {response.status_code}: {response.text}\")\n                    \n            except requests.exceptions.RequestException as e:\n                if attempt == 2:  # Last attempt\n                    raise Exception(f\"Request failed: {str(e)}\")\n                time.sleep(1)\n        \n        raise Exception(\"Max retries exceeded\")\n\n# Usage example\nclient = BinomAPIClient(os.getenv('binomPublic'))\n\ntry:\n    result = client.make_request(\n        method=\"POST\",\n        endpoint=\"/public/api/v1/campaign/change_group\",\n    )\n    \n    print(\"✅ Success:\", result)\n    \nexcept Exception as e:\n    print(f\"❌ Error: {e}\")",
      "curl": "# Basic request\ncurl -X POST \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\" \\\n  \"https://pierdun.com/public/api/v1/campaign/change_group\"",
      "javascript": "class BinomAPI {\n  constructor(apiKey) {\n    this.apiKey = apiKey;\n    this.baseURL = 'https://pierdun.com/public/api/v1';\n    this.headers = {\n      'Authorization': `Bearer ${apiKey}`,\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    };\n  }\n\n  async makeRequest(method, endpoint, data = null, params = null) {\n    const url = new URL(`${this.baseURL}${endpoint}`);\n    \n    if (params) {\n      Object.keys(params).forEach(key => \n        url.searchParams.append(key, params[key])\n      );\n    }\n\n    const config = {\n      method: method,\n      headers: this.headers\n    };\n\n    if (data) {\n      config.body = JSON.stringify(data);\n    }\n\n    try {\n      const response = await fetch(url.toString(), config);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${await response.text()}`);\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('API Error:', error);\n      throw error;\n    }\n  }\n}\n\n// Usage\nconst api = new BinomAPI(process.env.BINOM_API_KEY);\n\ntry {\n  const result = await api.makeRequest(\n    'POST',\n    '/public/api/v1/campaign/change_group',\n    null,\n    null\n  );\n  \n  console.log('✅ Success:', result);\n} catch (error) {\n  console.error('❌ Error:', error.message);\n}"
    },
    "errorHandling": {
      "commonErrors": [
        {
          "code": 400,
          "cause": "Invalid input data, missing required fields, or malformed JSON",
          "solution": "Validate all input data before sending. Check required fields and data types.",
          "example": "Missing 'name' field in request body"
        },
        {
          "code": 401,
          "cause": "Invalid, expired, or missing API key",
          "solution": "Verify API key is correct and has not expired. Check Authorization header format.",
          "example": "Authorization header: 'Bearer YOUR_API_KEY'"
        },
        {
          "code": 403,
          "cause": "Insufficient permissions or access denied",
          "solution": "Ensure API key has required permissions for this operation.",
          "example": "User lacks permission to modify campaigns"
        },
        {
          "code": 404,
          "cause": "Resource not found or invalid ID",
          "solution": "Verify resource ID exists and is accessible to your account.",
          "example": "Campaign with ID 123 does not exist"
        },
        {
          "code": 429,
          "cause": "Rate limit exceeded",
          "solution": "Implement exponential backoff and retry logic. Reduce request frequency.",
          "example": "Wait 60 seconds before retrying"
        },
        {
          "code": 500,
          "cause": "Internal server error",
          "solution": "Retry request after a delay. Contact support if error persists.",
          "example": "Temporary server issue"
        }
      ],
      "retryStrategy": {
        "maxRetries": 3,
        "backoffMultiplier": 2,
        "initialDelay": 1,
        "retryableStatusCodes": [
          429,
          500,
          502,
          503,
          504
        ]
      },
      "bestPractices": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting",
        "Log errors with sufficient detail for debugging",
        "Set appropriate timeouts for requests",
        "Handle network errors gracefully"
      ]
    },
    "validation": {
      "authentication": {
        "required": true,
        "type": "Bearer token",
        "header": "Authorization: Bearer YOUR_API_KEY",
        "validation": "Token must be valid and not expired"
      },
      "contentType": {
        "required": true,
        "value": "application/json",
        "header": "Content-Type: application/json"
      },
      "rateLimits": {
        "requestsPerMinute": 100,
        "burstLimit": 10,
        "enforcement": "HTTP 429 status code when exceeded"
      },
      "dataValidation": [
        "All required fields must be present and non-empty",
        "Field types must match schema definitions",
        "String fields must not exceed maximum length",
        "Numeric fields must be within specified ranges",
        "Array fields must contain valid items",
        "Date fields must be in correct format (YYYY-MM-DD HH:MM:SS)"
      ],
      "commonValidationErrors": [
        "Missing required field 'name'",
        "Invalid email format",
        "String too long (max 255 characters)",
        "Invalid date format",
        "Negative value not allowed",
        "Invalid enum value"
      ]
    },
    "aiNotes": {
      "keyPoints": [
        "This is a POST endpoint for v1 operations",
        "Requires Bearer token authentication in Authorization header",
        "Returns JSON responses with consistent error format",
        "Supports standard HTTP status codes for success/error indication",
        "Rate limited to 100 requests per minute"
      ],
      "integrationTips": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting (429 errors)",
        "Cache responses when appropriate to reduce API calls",
        "Set reasonable timeouts (30 seconds recommended)",
        "Log requests and responses for debugging"
      ],
      "commonPatterns": [
        "Check authentication before making requests",
        "Validate required parameters are present",
        "Handle pagination for list endpoints",
        "Implement retry logic for transient errors",
        "Parse error responses for detailed error information"
      ],
      "aiSpecificGuidance": [
        "For AI agents: Always check response status before processing data",
        "Implement fallback strategies for API failures",
        "Use structured error handling to provide meaningful feedback",
        "Consider caching strategies for frequently accessed data",
        "Implement request queuing for high-volume operations"
      ]
    },
    "workflow": "Core step: Create campaign after setting up traffic sources and networks",
    "realWorldUsage": [
      "Managing campaign resources in affiliate marketing workflows",
      "Automating campaign operations for campaign optimization",
      "Integrating campaign data with external reporting systems"
    ]
  },
  "POST /public/api/v1/campaign/switch_domain": {
    "method": "POST",
    "path": "/public/api/v1/campaign/switch_domain",
    "category": "campaign",
    "summary": "Switch Campaign Domain",
    "description": "Switch Campaign Domain. Creates a new campaign resource with specified configuration parameters.",
    "parameters": [],
    "requestBody": null,
    "responses": {
      "201": {
        "description": "Created - Resource created successfully",
        "example": {
          "id": 123,
          "message": "Resource created successfully",
          "data": {
            "id": 123,
            "name": "New Resource",
            "createdAt": "2023-12-01T10:00:00Z"
          }
        }
      },
      "400": {
        "description": "Bad Request - Invalid input data or missing required fields",
        "example": {
          "error": "Validation failed",
          "message": "Field 'name' is required",
          "details": {
            "field": "name",
            "code": "required",
            "value": null
          }
        }
      },
      "401": {
        "description": "Unauthorized - Invalid or missing API key",
        "example": {
          "error": "Unauthorized",
          "message": "Invalid API key or token expired"
        }
      },
      "403": {
        "description": "Forbidden - Access denied or insufficient permissions",
        "example": {
          "error": "Access denied",
          "message": "Insufficient permissions to access this resource"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Not found",
          "message": "Resource with ID 123 not found"
        }
      },
      "429": {
        "description": "Too Many Requests - Rate limit exceeded",
        "example": {
          "error": "Rate limit exceeded",
          "message": "Too many requests, please try again later",
          "retryAfter": 60
        }
      },
      "500": {
        "description": "Internal Server Error - Server-side error",
        "example": {
          "error": "Internal server error",
          "message": "Something went wrong on our end"
        }
      }
    },
    "examples": {
      "python": "import requests\nimport os\nimport time\nfrom typing import Optional, Dict, Any\n\nclass BinomAPIClient:\n    def __init__(self, api_key: str):\n        self.api_key = api_key\n        self.base_url = \"https://pierdun.com/public/api/v1\"\n        self.headers = {\n            \"Authorization\": f\"Bearer {api_key}\",\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json\"\n        }\n    \n    def make_request(self, method: str, endpoint: str, data: Optional[Dict] = None, params: Optional[Dict] = None) -> Dict[Any, Any]:\n        \"\"\"Make API request with error handling and retries\"\"\"\n        url = f\"{self.base_url}{endpoint}\"\n        \n        for attempt in range(3):\n            try:\n                response = requests.request(\n                    method=method,\n                    url=url,\n                    headers=self.headers,\n                    json=data,\n                    params=params,\n                    timeout=30\n                )\n                \n                if response.status_code == 429:\n                    # Rate limit - wait and retry\n                    time.sleep(2 ** attempt)\n                    continue\n                \n                if response.status_code in [200, 201]:\n                    return response.json()\n                else:\n                    raise Exception(f\"API Error {response.status_code}: {response.text}\")\n                    \n            except requests.exceptions.RequestException as e:\n                if attempt == 2:  # Last attempt\n                    raise Exception(f\"Request failed: {str(e)}\")\n                time.sleep(1)\n        \n        raise Exception(\"Max retries exceeded\")\n\n# Usage example\nclient = BinomAPIClient(os.getenv('binomPublic'))\n\ntry:\n    result = client.make_request(\n        method=\"POST\",\n        endpoint=\"/public/api/v1/campaign/switch_domain\",\n    )\n    \n    print(\"✅ Success:\", result)\n    \nexcept Exception as e:\n    print(f\"❌ Error: {e}\")",
      "curl": "# Basic request\ncurl -X POST \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\" \\\n  \"https://pierdun.com/public/api/v1/campaign/switch_domain\"",
      "javascript": "class BinomAPI {\n  constructor(apiKey) {\n    this.apiKey = apiKey;\n    this.baseURL = 'https://pierdun.com/public/api/v1';\n    this.headers = {\n      'Authorization': `Bearer ${apiKey}`,\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    };\n  }\n\n  async makeRequest(method, endpoint, data = null, params = null) {\n    const url = new URL(`${this.baseURL}${endpoint}`);\n    \n    if (params) {\n      Object.keys(params).forEach(key => \n        url.searchParams.append(key, params[key])\n      );\n    }\n\n    const config = {\n      method: method,\n      headers: this.headers\n    };\n\n    if (data) {\n      config.body = JSON.stringify(data);\n    }\n\n    try {\n      const response = await fetch(url.toString(), config);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${await response.text()}`);\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('API Error:', error);\n      throw error;\n    }\n  }\n}\n\n// Usage\nconst api = new BinomAPI(process.env.BINOM_API_KEY);\n\ntry {\n  const result = await api.makeRequest(\n    'POST',\n    '/public/api/v1/campaign/switch_domain',\n    null,\n    null\n  );\n  \n  console.log('✅ Success:', result);\n} catch (error) {\n  console.error('❌ Error:', error.message);\n}"
    },
    "errorHandling": {
      "commonErrors": [
        {
          "code": 400,
          "cause": "Invalid input data, missing required fields, or malformed JSON",
          "solution": "Validate all input data before sending. Check required fields and data types.",
          "example": "Missing 'name' field in request body"
        },
        {
          "code": 401,
          "cause": "Invalid, expired, or missing API key",
          "solution": "Verify API key is correct and has not expired. Check Authorization header format.",
          "example": "Authorization header: 'Bearer YOUR_API_KEY'"
        },
        {
          "code": 403,
          "cause": "Insufficient permissions or access denied",
          "solution": "Ensure API key has required permissions for this operation.",
          "example": "User lacks permission to modify campaigns"
        },
        {
          "code": 404,
          "cause": "Resource not found or invalid ID",
          "solution": "Verify resource ID exists and is accessible to your account.",
          "example": "Campaign with ID 123 does not exist"
        },
        {
          "code": 429,
          "cause": "Rate limit exceeded",
          "solution": "Implement exponential backoff and retry logic. Reduce request frequency.",
          "example": "Wait 60 seconds before retrying"
        },
        {
          "code": 500,
          "cause": "Internal server error",
          "solution": "Retry request after a delay. Contact support if error persists.",
          "example": "Temporary server issue"
        }
      ],
      "retryStrategy": {
        "maxRetries": 3,
        "backoffMultiplier": 2,
        "initialDelay": 1,
        "retryableStatusCodes": [
          429,
          500,
          502,
          503,
          504
        ]
      },
      "bestPractices": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting",
        "Log errors with sufficient detail for debugging",
        "Set appropriate timeouts for requests",
        "Handle network errors gracefully"
      ]
    },
    "validation": {
      "authentication": {
        "required": true,
        "type": "Bearer token",
        "header": "Authorization: Bearer YOUR_API_KEY",
        "validation": "Token must be valid and not expired"
      },
      "contentType": {
        "required": true,
        "value": "application/json",
        "header": "Content-Type: application/json"
      },
      "rateLimits": {
        "requestsPerMinute": 100,
        "burstLimit": 10,
        "enforcement": "HTTP 429 status code when exceeded"
      },
      "dataValidation": [
        "All required fields must be present and non-empty",
        "Field types must match schema definitions",
        "String fields must not exceed maximum length",
        "Numeric fields must be within specified ranges",
        "Array fields must contain valid items",
        "Date fields must be in correct format (YYYY-MM-DD HH:MM:SS)"
      ],
      "commonValidationErrors": [
        "Missing required field 'name'",
        "Invalid email format",
        "String too long (max 255 characters)",
        "Invalid date format",
        "Negative value not allowed",
        "Invalid enum value"
      ]
    },
    "aiNotes": {
      "keyPoints": [
        "This is a POST endpoint for v1 operations",
        "Requires Bearer token authentication in Authorization header",
        "Returns JSON responses with consistent error format",
        "Supports standard HTTP status codes for success/error indication",
        "Rate limited to 100 requests per minute"
      ],
      "integrationTips": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting (429 errors)",
        "Cache responses when appropriate to reduce API calls",
        "Set reasonable timeouts (30 seconds recommended)",
        "Log requests and responses for debugging"
      ],
      "commonPatterns": [
        "Check authentication before making requests",
        "Validate required parameters are present",
        "Handle pagination for list endpoints",
        "Implement retry logic for transient errors",
        "Parse error responses for detailed error information"
      ],
      "aiSpecificGuidance": [
        "For AI agents: Always check response status before processing data",
        "Implement fallback strategies for API failures",
        "Use structured error handling to provide meaningful feedback",
        "Consider caching strategies for frequently accessed data",
        "Implement request queuing for high-volume operations"
      ]
    },
    "workflow": "Core step: Create campaign after setting up traffic sources and networks",
    "realWorldUsage": [
      "Managing campaign resources in affiliate marketing workflows",
      "Automating campaign operations for campaign optimization",
      "Integrating campaign data with external reporting systems"
    ]
  },
  "POST /public/api/v1/campaign/change_traffic_distribution_info": {
    "method": "POST",
    "path": "/public/api/v1/campaign/change_traffic_distribution_info",
    "category": "campaign",
    "summary": "Change Campaign Traffic Distribution Info",
    "description": "Change Campaign Traffic Distribution Info. Creates a new campaign resource with specified configuration parameters.",
    "parameters": [],
    "requestBody": null,
    "responses": {
      "201": {
        "description": "Created - Resource created successfully",
        "example": {
          "id": 123,
          "message": "Resource created successfully",
          "data": {
            "id": 123,
            "name": "New Resource",
            "createdAt": "2023-12-01T10:00:00Z"
          }
        }
      },
      "400": {
        "description": "Bad Request - Invalid input data or missing required fields",
        "example": {
          "error": "Validation failed",
          "message": "Field 'name' is required",
          "details": {
            "field": "name",
            "code": "required",
            "value": null
          }
        }
      },
      "401": {
        "description": "Unauthorized - Invalid or missing API key",
        "example": {
          "error": "Unauthorized",
          "message": "Invalid API key or token expired"
        }
      },
      "403": {
        "description": "Forbidden - Access denied or insufficient permissions",
        "example": {
          "error": "Access denied",
          "message": "Insufficient permissions to access this resource"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Not found",
          "message": "Resource with ID 123 not found"
        }
      },
      "429": {
        "description": "Too Many Requests - Rate limit exceeded",
        "example": {
          "error": "Rate limit exceeded",
          "message": "Too many requests, please try again later",
          "retryAfter": 60
        }
      },
      "500": {
        "description": "Internal Server Error - Server-side error",
        "example": {
          "error": "Internal server error",
          "message": "Something went wrong on our end"
        }
      }
    },
    "examples": {
      "python": "import requests\nimport os\nimport time\nfrom typing import Optional, Dict, Any\n\nclass BinomAPIClient:\n    def __init__(self, api_key: str):\n        self.api_key = api_key\n        self.base_url = \"https://pierdun.com/public/api/v1\"\n        self.headers = {\n            \"Authorization\": f\"Bearer {api_key}\",\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json\"\n        }\n    \n    def make_request(self, method: str, endpoint: str, data: Optional[Dict] = None, params: Optional[Dict] = None) -> Dict[Any, Any]:\n        \"\"\"Make API request with error handling and retries\"\"\"\n        url = f\"{self.base_url}{endpoint}\"\n        \n        for attempt in range(3):\n            try:\n                response = requests.request(\n                    method=method,\n                    url=url,\n                    headers=self.headers,\n                    json=data,\n                    params=params,\n                    timeout=30\n                )\n                \n                if response.status_code == 429:\n                    # Rate limit - wait and retry\n                    time.sleep(2 ** attempt)\n                    continue\n                \n                if response.status_code in [200, 201]:\n                    return response.json()\n                else:\n                    raise Exception(f\"API Error {response.status_code}: {response.text}\")\n                    \n            except requests.exceptions.RequestException as e:\n                if attempt == 2:  # Last attempt\n                    raise Exception(f\"Request failed: {str(e)}\")\n                time.sleep(1)\n        \n        raise Exception(\"Max retries exceeded\")\n\n# Usage example\nclient = BinomAPIClient(os.getenv('binomPublic'))\n\ntry:\n    result = client.make_request(\n        method=\"POST\",\n        endpoint=\"/public/api/v1/campaign/change_traffic_distribution_info\",\n    )\n    \n    print(\"✅ Success:\", result)\n    \nexcept Exception as e:\n    print(f\"❌ Error: {e}\")",
      "curl": "# Basic request\ncurl -X POST \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\" \\\n  \"https://pierdun.com/public/api/v1/campaign/change_traffic_distribution_info\"",
      "javascript": "class BinomAPI {\n  constructor(apiKey) {\n    this.apiKey = apiKey;\n    this.baseURL = 'https://pierdun.com/public/api/v1';\n    this.headers = {\n      'Authorization': `Bearer ${apiKey}`,\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    };\n  }\n\n  async makeRequest(method, endpoint, data = null, params = null) {\n    const url = new URL(`${this.baseURL}${endpoint}`);\n    \n    if (params) {\n      Object.keys(params).forEach(key => \n        url.searchParams.append(key, params[key])\n      );\n    }\n\n    const config = {\n      method: method,\n      headers: this.headers\n    };\n\n    if (data) {\n      config.body = JSON.stringify(data);\n    }\n\n    try {\n      const response = await fetch(url.toString(), config);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${await response.text()}`);\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('API Error:', error);\n      throw error;\n    }\n  }\n}\n\n// Usage\nconst api = new BinomAPI(process.env.BINOM_API_KEY);\n\ntry {\n  const result = await api.makeRequest(\n    'POST',\n    '/public/api/v1/campaign/change_traffic_distribution_info',\n    null,\n    null\n  );\n  \n  console.log('✅ Success:', result);\n} catch (error) {\n  console.error('❌ Error:', error.message);\n}"
    },
    "errorHandling": {
      "commonErrors": [
        {
          "code": 400,
          "cause": "Invalid input data, missing required fields, or malformed JSON",
          "solution": "Validate all input data before sending. Check required fields and data types.",
          "example": "Missing 'name' field in request body"
        },
        {
          "code": 401,
          "cause": "Invalid, expired, or missing API key",
          "solution": "Verify API key is correct and has not expired. Check Authorization header format.",
          "example": "Authorization header: 'Bearer YOUR_API_KEY'"
        },
        {
          "code": 403,
          "cause": "Insufficient permissions or access denied",
          "solution": "Ensure API key has required permissions for this operation.",
          "example": "User lacks permission to modify campaigns"
        },
        {
          "code": 404,
          "cause": "Resource not found or invalid ID",
          "solution": "Verify resource ID exists and is accessible to your account.",
          "example": "Campaign with ID 123 does not exist"
        },
        {
          "code": 429,
          "cause": "Rate limit exceeded",
          "solution": "Implement exponential backoff and retry logic. Reduce request frequency.",
          "example": "Wait 60 seconds before retrying"
        },
        {
          "code": 500,
          "cause": "Internal server error",
          "solution": "Retry request after a delay. Contact support if error persists.",
          "example": "Temporary server issue"
        }
      ],
      "retryStrategy": {
        "maxRetries": 3,
        "backoffMultiplier": 2,
        "initialDelay": 1,
        "retryableStatusCodes": [
          429,
          500,
          502,
          503,
          504
        ]
      },
      "bestPractices": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting",
        "Log errors with sufficient detail for debugging",
        "Set appropriate timeouts for requests",
        "Handle network errors gracefully"
      ]
    },
    "validation": {
      "authentication": {
        "required": true,
        "type": "Bearer token",
        "header": "Authorization: Bearer YOUR_API_KEY",
        "validation": "Token must be valid and not expired"
      },
      "contentType": {
        "required": true,
        "value": "application/json",
        "header": "Content-Type: application/json"
      },
      "rateLimits": {
        "requestsPerMinute": 100,
        "burstLimit": 10,
        "enforcement": "HTTP 429 status code when exceeded"
      },
      "dataValidation": [
        "All required fields must be present and non-empty",
        "Field types must match schema definitions",
        "String fields must not exceed maximum length",
        "Numeric fields must be within specified ranges",
        "Array fields must contain valid items",
        "Date fields must be in correct format (YYYY-MM-DD HH:MM:SS)"
      ],
      "commonValidationErrors": [
        "Missing required field 'name'",
        "Invalid email format",
        "String too long (max 255 characters)",
        "Invalid date format",
        "Negative value not allowed",
        "Invalid enum value"
      ]
    },
    "aiNotes": {
      "keyPoints": [
        "This is a POST endpoint for v1 operations",
        "Requires Bearer token authentication in Authorization header",
        "Returns JSON responses with consistent error format",
        "Supports standard HTTP status codes for success/error indication",
        "Rate limited to 100 requests per minute"
      ],
      "integrationTips": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting (429 errors)",
        "Cache responses when appropriate to reduce API calls",
        "Set reasonable timeouts (30 seconds recommended)",
        "Log requests and responses for debugging"
      ],
      "commonPatterns": [
        "Check authentication before making requests",
        "Validate required parameters are present",
        "Handle pagination for list endpoints",
        "Implement retry logic for transient errors",
        "Parse error responses for detailed error information"
      ],
      "aiSpecificGuidance": [
        "For AI agents: Always check response status before processing data",
        "Implement fallback strategies for API failures",
        "Use structured error handling to provide meaningful feedback",
        "Consider caching strategies for frequently accessed data",
        "Implement request queuing for high-volume operations"
      ]
    },
    "workflow": "Core step: Create campaign after setting up traffic sources and networks",
    "realWorldUsage": [
      "Managing campaign resources in affiliate marketing workflows",
      "Automating campaign operations for campaign optimization",
      "Integrating campaign data with external reporting systems"
    ]
  },
  "PUT /public/api/v1/campaign/landing/pause": {
    "method": "PUT",
    "path": "/public/api/v1/campaign/landing/pause",
    "category": "campaign",
    "summary": "Pause Campaign Landing",
    "description": "Pause Campaign Landing. Updates an existing campaign resource with new configuration data.",
    "parameters": [],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success - Resource updated successfully",
        "example": {
          "message": "Resource updated successfully",
          "data": {
            "id": 123,
            "updatedAt": "2023-12-01T15:30:00Z"
          }
        }
      },
      "400": {
        "description": "Bad Request - Invalid input data or missing required fields",
        "example": {
          "error": "Validation failed",
          "message": "Field 'name' is required",
          "details": {
            "field": "name",
            "code": "required",
            "value": null
          }
        }
      },
      "401": {
        "description": "Unauthorized - Invalid or missing API key",
        "example": {
          "error": "Unauthorized",
          "message": "Invalid API key or token expired"
        }
      },
      "403": {
        "description": "Forbidden - Access denied or insufficient permissions",
        "example": {
          "error": "Access denied",
          "message": "Insufficient permissions to access this resource"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Not found",
          "message": "Resource with ID 123 not found"
        }
      },
      "429": {
        "description": "Too Many Requests - Rate limit exceeded",
        "example": {
          "error": "Rate limit exceeded",
          "message": "Too many requests, please try again later",
          "retryAfter": 60
        }
      },
      "500": {
        "description": "Internal Server Error - Server-side error",
        "example": {
          "error": "Internal server error",
          "message": "Something went wrong on our end"
        }
      }
    },
    "examples": {
      "python": "import requests\nimport os\nimport time\nfrom typing import Optional, Dict, Any\n\nclass BinomAPIClient:\n    def __init__(self, api_key: str):\n        self.api_key = api_key\n        self.base_url = \"https://pierdun.com/public/api/v1\"\n        self.headers = {\n            \"Authorization\": f\"Bearer {api_key}\",\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json\"\n        }\n    \n    def make_request(self, method: str, endpoint: str, data: Optional[Dict] = None, params: Optional[Dict] = None) -> Dict[Any, Any]:\n        \"\"\"Make API request with error handling and retries\"\"\"\n        url = f\"{self.base_url}{endpoint}\"\n        \n        for attempt in range(3):\n            try:\n                response = requests.request(\n                    method=method,\n                    url=url,\n                    headers=self.headers,\n                    json=data,\n                    params=params,\n                    timeout=30\n                )\n                \n                if response.status_code == 429:\n                    # Rate limit - wait and retry\n                    time.sleep(2 ** attempt)\n                    continue\n                \n                if response.status_code in [200, 201]:\n                    return response.json()\n                else:\n                    raise Exception(f\"API Error {response.status_code}: {response.text}\")\n                    \n            except requests.exceptions.RequestException as e:\n                if attempt == 2:  # Last attempt\n                    raise Exception(f\"Request failed: {str(e)}\")\n                time.sleep(1)\n        \n        raise Exception(\"Max retries exceeded\")\n\n# Usage example\nclient = BinomAPIClient(os.getenv('binomPublic'))\n\ntry:\n    result = client.make_request(\n        method=\"PUT\",\n        endpoint=\"/public/api/v1/campaign/landing/pause\",\n    )\n    \n    print(\"✅ Success:\", result)\n    \nexcept Exception as e:\n    print(f\"❌ Error: {e}\")",
      "curl": "# Basic request\ncurl -X PUT \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\" \\\n  \"https://pierdun.com/public/api/v1/campaign/landing/pause\"",
      "javascript": "class BinomAPI {\n  constructor(apiKey) {\n    this.apiKey = apiKey;\n    this.baseURL = 'https://pierdun.com/public/api/v1';\n    this.headers = {\n      'Authorization': `Bearer ${apiKey}`,\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    };\n  }\n\n  async makeRequest(method, endpoint, data = null, params = null) {\n    const url = new URL(`${this.baseURL}${endpoint}`);\n    \n    if (params) {\n      Object.keys(params).forEach(key => \n        url.searchParams.append(key, params[key])\n      );\n    }\n\n    const config = {\n      method: method,\n      headers: this.headers\n    };\n\n    if (data) {\n      config.body = JSON.stringify(data);\n    }\n\n    try {\n      const response = await fetch(url.toString(), config);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${await response.text()}`);\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('API Error:', error);\n      throw error;\n    }\n  }\n}\n\n// Usage\nconst api = new BinomAPI(process.env.BINOM_API_KEY);\n\ntry {\n  const result = await api.makeRequest(\n    'PUT',\n    '/public/api/v1/campaign/landing/pause',\n    null,\n    null\n  );\n  \n  console.log('✅ Success:', result);\n} catch (error) {\n  console.error('❌ Error:', error.message);\n}"
    },
    "errorHandling": {
      "commonErrors": [
        {
          "code": 400,
          "cause": "Invalid input data, missing required fields, or malformed JSON",
          "solution": "Validate all input data before sending. Check required fields and data types.",
          "example": "Missing 'name' field in request body"
        },
        {
          "code": 401,
          "cause": "Invalid, expired, or missing API key",
          "solution": "Verify API key is correct and has not expired. Check Authorization header format.",
          "example": "Authorization header: 'Bearer YOUR_API_KEY'"
        },
        {
          "code": 403,
          "cause": "Insufficient permissions or access denied",
          "solution": "Ensure API key has required permissions for this operation.",
          "example": "User lacks permission to modify campaigns"
        },
        {
          "code": 404,
          "cause": "Resource not found or invalid ID",
          "solution": "Verify resource ID exists and is accessible to your account.",
          "example": "Campaign with ID 123 does not exist"
        },
        {
          "code": 429,
          "cause": "Rate limit exceeded",
          "solution": "Implement exponential backoff and retry logic. Reduce request frequency.",
          "example": "Wait 60 seconds before retrying"
        },
        {
          "code": 500,
          "cause": "Internal server error",
          "solution": "Retry request after a delay. Contact support if error persists.",
          "example": "Temporary server issue"
        }
      ],
      "retryStrategy": {
        "maxRetries": 3,
        "backoffMultiplier": 2,
        "initialDelay": 1,
        "retryableStatusCodes": [
          429,
          500,
          502,
          503,
          504
        ]
      },
      "bestPractices": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting",
        "Log errors with sufficient detail for debugging",
        "Set appropriate timeouts for requests",
        "Handle network errors gracefully"
      ]
    },
    "validation": {
      "authentication": {
        "required": true,
        "type": "Bearer token",
        "header": "Authorization: Bearer YOUR_API_KEY",
        "validation": "Token must be valid and not expired"
      },
      "contentType": {
        "required": true,
        "value": "application/json",
        "header": "Content-Type: application/json"
      },
      "rateLimits": {
        "requestsPerMinute": 100,
        "burstLimit": 10,
        "enforcement": "HTTP 429 status code when exceeded"
      },
      "dataValidation": [
        "All required fields must be present and non-empty",
        "Field types must match schema definitions",
        "String fields must not exceed maximum length",
        "Numeric fields must be within specified ranges",
        "Array fields must contain valid items",
        "Date fields must be in correct format (YYYY-MM-DD HH:MM:SS)"
      ],
      "commonValidationErrors": [
        "Missing required field 'name'",
        "Invalid email format",
        "String too long (max 255 characters)",
        "Invalid date format",
        "Negative value not allowed",
        "Invalid enum value"
      ]
    },
    "aiNotes": {
      "keyPoints": [
        "This is a PUT endpoint for v1 operations",
        "Requires Bearer token authentication in Authorization header",
        "Returns JSON responses with consistent error format",
        "Supports standard HTTP status codes for success/error indication",
        "Rate limited to 100 requests per minute"
      ],
      "integrationTips": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting (429 errors)",
        "Cache responses when appropriate to reduce API calls",
        "Set reasonable timeouts (30 seconds recommended)",
        "Log requests and responses for debugging"
      ],
      "commonPatterns": [
        "Check authentication before making requests",
        "Validate required parameters are present",
        "Handle pagination for list endpoints",
        "Implement retry logic for transient errors",
        "Parse error responses for detailed error information"
      ],
      "aiSpecificGuidance": [
        "For AI agents: Always check response status before processing data",
        "Implement fallback strategies for API failures",
        "Use structured error handling to provide meaningful feedback",
        "Consider caching strategies for frequently accessed data",
        "Implement request queuing for high-volume operations"
      ]
    },
    "workflow": "Used for: Updating campaign settings, costs, or routing rules",
    "realWorldUsage": [
      "Managing campaign resources in affiliate marketing workflows",
      "Automating campaign operations for campaign optimization",
      "Integrating campaign data with external reporting systems"
    ]
  },
  "PUT /public/api/v1/campaign/offer/pause": {
    "method": "PUT",
    "path": "/public/api/v1/campaign/offer/pause",
    "category": "campaign",
    "summary": "Pause Campaign Offer",
    "description": "Pause Campaign Offer. Updates an existing campaign resource with new configuration data.",
    "parameters": [],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success - Resource updated successfully",
        "example": {
          "message": "Resource updated successfully",
          "data": {
            "id": 123,
            "updatedAt": "2023-12-01T15:30:00Z"
          }
        }
      },
      "400": {
        "description": "Bad Request - Invalid input data or missing required fields",
        "example": {
          "error": "Validation failed",
          "message": "Field 'name' is required",
          "details": {
            "field": "name",
            "code": "required",
            "value": null
          }
        }
      },
      "401": {
        "description": "Unauthorized - Invalid or missing API key",
        "example": {
          "error": "Unauthorized",
          "message": "Invalid API key or token expired"
        }
      },
      "403": {
        "description": "Forbidden - Access denied or insufficient permissions",
        "example": {
          "error": "Access denied",
          "message": "Insufficient permissions to access this resource"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Not found",
          "message": "Resource with ID 123 not found"
        }
      },
      "429": {
        "description": "Too Many Requests - Rate limit exceeded",
        "example": {
          "error": "Rate limit exceeded",
          "message": "Too many requests, please try again later",
          "retryAfter": 60
        }
      },
      "500": {
        "description": "Internal Server Error - Server-side error",
        "example": {
          "error": "Internal server error",
          "message": "Something went wrong on our end"
        }
      }
    },
    "examples": {
      "python": "import requests\nimport os\nimport time\nfrom typing import Optional, Dict, Any\n\nclass BinomAPIClient:\n    def __init__(self, api_key: str):\n        self.api_key = api_key\n        self.base_url = \"https://pierdun.com/public/api/v1\"\n        self.headers = {\n            \"Authorization\": f\"Bearer {api_key}\",\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json\"\n        }\n    \n    def make_request(self, method: str, endpoint: str, data: Optional[Dict] = None, params: Optional[Dict] = None) -> Dict[Any, Any]:\n        \"\"\"Make API request with error handling and retries\"\"\"\n        url = f\"{self.base_url}{endpoint}\"\n        \n        for attempt in range(3):\n            try:\n                response = requests.request(\n                    method=method,\n                    url=url,\n                    headers=self.headers,\n                    json=data,\n                    params=params,\n                    timeout=30\n                )\n                \n                if response.status_code == 429:\n                    # Rate limit - wait and retry\n                    time.sleep(2 ** attempt)\n                    continue\n                \n                if response.status_code in [200, 201]:\n                    return response.json()\n                else:\n                    raise Exception(f\"API Error {response.status_code}: {response.text}\")\n                    \n            except requests.exceptions.RequestException as e:\n                if attempt == 2:  # Last attempt\n                    raise Exception(f\"Request failed: {str(e)}\")\n                time.sleep(1)\n        \n        raise Exception(\"Max retries exceeded\")\n\n# Usage example\nclient = BinomAPIClient(os.getenv('binomPublic'))\n\ntry:\n    result = client.make_request(\n        method=\"PUT\",\n        endpoint=\"/public/api/v1/campaign/offer/pause\",\n    )\n    \n    print(\"✅ Success:\", result)\n    \nexcept Exception as e:\n    print(f\"❌ Error: {e}\")",
      "curl": "# Basic request\ncurl -X PUT \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\" \\\n  \"https://pierdun.com/public/api/v1/campaign/offer/pause\"",
      "javascript": "class BinomAPI {\n  constructor(apiKey) {\n    this.apiKey = apiKey;\n    this.baseURL = 'https://pierdun.com/public/api/v1';\n    this.headers = {\n      'Authorization': `Bearer ${apiKey}`,\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    };\n  }\n\n  async makeRequest(method, endpoint, data = null, params = null) {\n    const url = new URL(`${this.baseURL}${endpoint}`);\n    \n    if (params) {\n      Object.keys(params).forEach(key => \n        url.searchParams.append(key, params[key])\n      );\n    }\n\n    const config = {\n      method: method,\n      headers: this.headers\n    };\n\n    if (data) {\n      config.body = JSON.stringify(data);\n    }\n\n    try {\n      const response = await fetch(url.toString(), config);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${await response.text()}`);\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('API Error:', error);\n      throw error;\n    }\n  }\n}\n\n// Usage\nconst api = new BinomAPI(process.env.BINOM_API_KEY);\n\ntry {\n  const result = await api.makeRequest(\n    'PUT',\n    '/public/api/v1/campaign/offer/pause',\n    null,\n    null\n  );\n  \n  console.log('✅ Success:', result);\n} catch (error) {\n  console.error('❌ Error:', error.message);\n}"
    },
    "errorHandling": {
      "commonErrors": [
        {
          "code": 400,
          "cause": "Invalid input data, missing required fields, or malformed JSON",
          "solution": "Validate all input data before sending. Check required fields and data types.",
          "example": "Missing 'name' field in request body"
        },
        {
          "code": 401,
          "cause": "Invalid, expired, or missing API key",
          "solution": "Verify API key is correct and has not expired. Check Authorization header format.",
          "example": "Authorization header: 'Bearer YOUR_API_KEY'"
        },
        {
          "code": 403,
          "cause": "Insufficient permissions or access denied",
          "solution": "Ensure API key has required permissions for this operation.",
          "example": "User lacks permission to modify campaigns"
        },
        {
          "code": 404,
          "cause": "Resource not found or invalid ID",
          "solution": "Verify resource ID exists and is accessible to your account.",
          "example": "Campaign with ID 123 does not exist"
        },
        {
          "code": 429,
          "cause": "Rate limit exceeded",
          "solution": "Implement exponential backoff and retry logic. Reduce request frequency.",
          "example": "Wait 60 seconds before retrying"
        },
        {
          "code": 500,
          "cause": "Internal server error",
          "solution": "Retry request after a delay. Contact support if error persists.",
          "example": "Temporary server issue"
        }
      ],
      "retryStrategy": {
        "maxRetries": 3,
        "backoffMultiplier": 2,
        "initialDelay": 1,
        "retryableStatusCodes": [
          429,
          500,
          502,
          503,
          504
        ]
      },
      "bestPractices": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting",
        "Log errors with sufficient detail for debugging",
        "Set appropriate timeouts for requests",
        "Handle network errors gracefully"
      ]
    },
    "validation": {
      "authentication": {
        "required": true,
        "type": "Bearer token",
        "header": "Authorization: Bearer YOUR_API_KEY",
        "validation": "Token must be valid and not expired"
      },
      "contentType": {
        "required": true,
        "value": "application/json",
        "header": "Content-Type: application/json"
      },
      "rateLimits": {
        "requestsPerMinute": 100,
        "burstLimit": 10,
        "enforcement": "HTTP 429 status code when exceeded"
      },
      "dataValidation": [
        "All required fields must be present and non-empty",
        "Field types must match schema definitions",
        "String fields must not exceed maximum length",
        "Numeric fields must be within specified ranges",
        "Array fields must contain valid items",
        "Date fields must be in correct format (YYYY-MM-DD HH:MM:SS)"
      ],
      "commonValidationErrors": [
        "Missing required field 'name'",
        "Invalid email format",
        "String too long (max 255 characters)",
        "Invalid date format",
        "Negative value not allowed",
        "Invalid enum value"
      ]
    },
    "aiNotes": {
      "keyPoints": [
        "This is a PUT endpoint for v1 operations",
        "Requires Bearer token authentication in Authorization header",
        "Returns JSON responses with consistent error format",
        "Supports standard HTTP status codes for success/error indication",
        "Rate limited to 100 requests per minute"
      ],
      "integrationTips": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting (429 errors)",
        "Cache responses when appropriate to reduce API calls",
        "Set reasonable timeouts (30 seconds recommended)",
        "Log requests and responses for debugging"
      ],
      "commonPatterns": [
        "Check authentication before making requests",
        "Validate required parameters are present",
        "Handle pagination for list endpoints",
        "Implement retry logic for transient errors",
        "Parse error responses for detailed error information"
      ],
      "aiSpecificGuidance": [
        "For AI agents: Always check response status before processing data",
        "Implement fallback strategies for API failures",
        "Use structured error handling to provide meaningful feedback",
        "Consider caching strategies for frequently accessed data",
        "Implement request queuing for high-volume operations"
      ]
    },
    "workflow": "Used for: Updating campaign settings, costs, or routing rules",
    "realWorldUsage": [
      "Managing campaign resources in affiliate marketing workflows",
      "Automating campaign operations for campaign optimization",
      "Integrating campaign data with external reporting systems"
    ]
  },
  "PUT /public/api/v1/campaign/path/pause": {
    "method": "PUT",
    "path": "/public/api/v1/campaign/path/pause",
    "category": "campaign",
    "summary": "Pause Campaign Path",
    "description": "Pause Campaign Path. Updates an existing campaign resource with new configuration data.",
    "parameters": [],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success - Resource updated successfully",
        "example": {
          "message": "Resource updated successfully",
          "data": {
            "id": 123,
            "updatedAt": "2023-12-01T15:30:00Z"
          }
        }
      },
      "400": {
        "description": "Bad Request - Invalid input data or missing required fields",
        "example": {
          "error": "Validation failed",
          "message": "Field 'name' is required",
          "details": {
            "field": "name",
            "code": "required",
            "value": null
          }
        }
      },
      "401": {
        "description": "Unauthorized - Invalid or missing API key",
        "example": {
          "error": "Unauthorized",
          "message": "Invalid API key or token expired"
        }
      },
      "403": {
        "description": "Forbidden - Access denied or insufficient permissions",
        "example": {
          "error": "Access denied",
          "message": "Insufficient permissions to access this resource"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Not found",
          "message": "Resource with ID 123 not found"
        }
      },
      "429": {
        "description": "Too Many Requests - Rate limit exceeded",
        "example": {
          "error": "Rate limit exceeded",
          "message": "Too many requests, please try again later",
          "retryAfter": 60
        }
      },
      "500": {
        "description": "Internal Server Error - Server-side error",
        "example": {
          "error": "Internal server error",
          "message": "Something went wrong on our end"
        }
      }
    },
    "examples": {
      "python": "import requests\nimport os\nimport time\nfrom typing import Optional, Dict, Any\n\nclass BinomAPIClient:\n    def __init__(self, api_key: str):\n        self.api_key = api_key\n        self.base_url = \"https://pierdun.com/public/api/v1\"\n        self.headers = {\n            \"Authorization\": f\"Bearer {api_key}\",\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json\"\n        }\n    \n    def make_request(self, method: str, endpoint: str, data: Optional[Dict] = None, params: Optional[Dict] = None) -> Dict[Any, Any]:\n        \"\"\"Make API request with error handling and retries\"\"\"\n        url = f\"{self.base_url}{endpoint}\"\n        \n        for attempt in range(3):\n            try:\n                response = requests.request(\n                    method=method,\n                    url=url,\n                    headers=self.headers,\n                    json=data,\n                    params=params,\n                    timeout=30\n                )\n                \n                if response.status_code == 429:\n                    # Rate limit - wait and retry\n                    time.sleep(2 ** attempt)\n                    continue\n                \n                if response.status_code in [200, 201]:\n                    return response.json()\n                else:\n                    raise Exception(f\"API Error {response.status_code}: {response.text}\")\n                    \n            except requests.exceptions.RequestException as e:\n                if attempt == 2:  # Last attempt\n                    raise Exception(f\"Request failed: {str(e)}\")\n                time.sleep(1)\n        \n        raise Exception(\"Max retries exceeded\")\n\n# Usage example\nclient = BinomAPIClient(os.getenv('binomPublic'))\n\ntry:\n    result = client.make_request(\n        method=\"PUT\",\n        endpoint=\"/public/api/v1/campaign/path/pause\",\n    )\n    \n    print(\"✅ Success:\", result)\n    \nexcept Exception as e:\n    print(f\"❌ Error: {e}\")",
      "curl": "# Basic request\ncurl -X PUT \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\" \\\n  \"https://pierdun.com/public/api/v1/campaign/path/pause\"",
      "javascript": "class BinomAPI {\n  constructor(apiKey) {\n    this.apiKey = apiKey;\n    this.baseURL = 'https://pierdun.com/public/api/v1';\n    this.headers = {\n      'Authorization': `Bearer ${apiKey}`,\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    };\n  }\n\n  async makeRequest(method, endpoint, data = null, params = null) {\n    const url = new URL(`${this.baseURL}${endpoint}`);\n    \n    if (params) {\n      Object.keys(params).forEach(key => \n        url.searchParams.append(key, params[key])\n      );\n    }\n\n    const config = {\n      method: method,\n      headers: this.headers\n    };\n\n    if (data) {\n      config.body = JSON.stringify(data);\n    }\n\n    try {\n      const response = await fetch(url.toString(), config);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${await response.text()}`);\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('API Error:', error);\n      throw error;\n    }\n  }\n}\n\n// Usage\nconst api = new BinomAPI(process.env.BINOM_API_KEY);\n\ntry {\n  const result = await api.makeRequest(\n    'PUT',\n    '/public/api/v1/campaign/path/pause',\n    null,\n    null\n  );\n  \n  console.log('✅ Success:', result);\n} catch (error) {\n  console.error('❌ Error:', error.message);\n}"
    },
    "errorHandling": {
      "commonErrors": [
        {
          "code": 400,
          "cause": "Invalid input data, missing required fields, or malformed JSON",
          "solution": "Validate all input data before sending. Check required fields and data types.",
          "example": "Missing 'name' field in request body"
        },
        {
          "code": 401,
          "cause": "Invalid, expired, or missing API key",
          "solution": "Verify API key is correct and has not expired. Check Authorization header format.",
          "example": "Authorization header: 'Bearer YOUR_API_KEY'"
        },
        {
          "code": 403,
          "cause": "Insufficient permissions or access denied",
          "solution": "Ensure API key has required permissions for this operation.",
          "example": "User lacks permission to modify campaigns"
        },
        {
          "code": 404,
          "cause": "Resource not found or invalid ID",
          "solution": "Verify resource ID exists and is accessible to your account.",
          "example": "Campaign with ID 123 does not exist"
        },
        {
          "code": 429,
          "cause": "Rate limit exceeded",
          "solution": "Implement exponential backoff and retry logic. Reduce request frequency.",
          "example": "Wait 60 seconds before retrying"
        },
        {
          "code": 500,
          "cause": "Internal server error",
          "solution": "Retry request after a delay. Contact support if error persists.",
          "example": "Temporary server issue"
        }
      ],
      "retryStrategy": {
        "maxRetries": 3,
        "backoffMultiplier": 2,
        "initialDelay": 1,
        "retryableStatusCodes": [
          429,
          500,
          502,
          503,
          504
        ]
      },
      "bestPractices": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting",
        "Log errors with sufficient detail for debugging",
        "Set appropriate timeouts for requests",
        "Handle network errors gracefully"
      ]
    },
    "validation": {
      "authentication": {
        "required": true,
        "type": "Bearer token",
        "header": "Authorization: Bearer YOUR_API_KEY",
        "validation": "Token must be valid and not expired"
      },
      "contentType": {
        "required": true,
        "value": "application/json",
        "header": "Content-Type: application/json"
      },
      "rateLimits": {
        "requestsPerMinute": 100,
        "burstLimit": 10,
        "enforcement": "HTTP 429 status code when exceeded"
      },
      "dataValidation": [
        "All required fields must be present and non-empty",
        "Field types must match schema definitions",
        "String fields must not exceed maximum length",
        "Numeric fields must be within specified ranges",
        "Array fields must contain valid items",
        "Date fields must be in correct format (YYYY-MM-DD HH:MM:SS)"
      ],
      "commonValidationErrors": [
        "Missing required field 'name'",
        "Invalid email format",
        "String too long (max 255 characters)",
        "Invalid date format",
        "Negative value not allowed",
        "Invalid enum value"
      ]
    },
    "aiNotes": {
      "keyPoints": [
        "This is a PUT endpoint for v1 operations",
        "Requires Bearer token authentication in Authorization header",
        "Returns JSON responses with consistent error format",
        "Supports standard HTTP status codes for success/error indication",
        "Rate limited to 100 requests per minute"
      ],
      "integrationTips": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting (429 errors)",
        "Cache responses when appropriate to reduce API calls",
        "Set reasonable timeouts (30 seconds recommended)",
        "Log requests and responses for debugging"
      ],
      "commonPatterns": [
        "Check authentication before making requests",
        "Validate required parameters are present",
        "Handle pagination for list endpoints",
        "Implement retry logic for transient errors",
        "Parse error responses for detailed error information"
      ],
      "aiSpecificGuidance": [
        "For AI agents: Always check response status before processing data",
        "Implement fallback strategies for API failures",
        "Use structured error handling to provide meaningful feedback",
        "Consider caching strategies for frequently accessed data",
        "Implement request queuing for high-volume operations"
      ]
    },
    "workflow": "Used for: Updating campaign settings, costs, or routing rules",
    "realWorldUsage": [
      "Managing campaign resources in affiliate marketing workflows",
      "Automating campaign operations for campaign optimization",
      "Integrating campaign data with external reporting systems"
    ]
  },
  "GET /public/api/v1/campaign/{id}/permissions": {
    "method": "GET",
    "path": "/public/api/v1/campaign/{id}/permissions",
    "category": "campaign",
    "summary": "Get Campaign Permissions",
    "description": "Get Campaign Permissions. Retrieves information from the campaign resource with optional filtering and pagination.",
    "parameters": [
      {
        "name": "id",
        "in": "path",
        "required": true,
        "type": "integer",
        "description": "Unique identifier of the resource",
        "example": 123,
        "validation": "Must be a positive integer"
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success - Resource details returned",
        "example": {
          "id": 123,
          "name": "Resource Name",
          "status": "active",
          "createdAt": "2023-12-01T10:00:00Z",
          "updatedAt": "2023-12-01T15:30:00Z"
        }
      },
      "400": {
        "description": "Bad Request - Invalid input data or missing required fields",
        "example": {
          "error": "Validation failed",
          "message": "Field 'name' is required",
          "details": {
            "field": "name",
            "code": "required",
            "value": null
          }
        }
      },
      "401": {
        "description": "Unauthorized - Invalid or missing API key",
        "example": {
          "error": "Unauthorized",
          "message": "Invalid API key or token expired"
        }
      },
      "403": {
        "description": "Forbidden - Access denied or insufficient permissions",
        "example": {
          "error": "Access denied",
          "message": "Insufficient permissions to access this resource"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Not found",
          "message": "Resource with ID 123 not found"
        }
      },
      "429": {
        "description": "Too Many Requests - Rate limit exceeded",
        "example": {
          "error": "Rate limit exceeded",
          "message": "Too many requests, please try again later",
          "retryAfter": 60
        }
      },
      "500": {
        "description": "Internal Server Error - Server-side error",
        "example": {
          "error": "Internal server error",
          "message": "Something went wrong on our end"
        }
      }
    },
    "examples": {
      "python": "import requests\nimport os\nimport time\nfrom typing import Optional, Dict, Any\n\nclass BinomAPIClient:\n    def __init__(self, api_key: str):\n        self.api_key = api_key\n        self.base_url = \"https://pierdun.com/public/api/v1\"\n        self.headers = {\n            \"Authorization\": f\"Bearer {api_key}\",\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json\"\n        }\n    \n    def make_request(self, method: str, endpoint: str, data: Optional[Dict] = None, params: Optional[Dict] = None) -> Dict[Any, Any]:\n        \"\"\"Make API request with error handling and retries\"\"\"\n        url = f\"{self.base_url}{endpoint}\"\n        \n        for attempt in range(3):\n            try:\n                response = requests.request(\n                    method=method,\n                    url=url,\n                    headers=self.headers,\n                    json=data,\n                    params=params,\n                    timeout=30\n                )\n                \n                if response.status_code == 429:\n                    # Rate limit - wait and retry\n                    time.sleep(2 ** attempt)\n                    continue\n                \n                if response.status_code in [200, 201]:\n                    return response.json()\n                else:\n                    raise Exception(f\"API Error {response.status_code}: {response.text}\")\n                    \n            except requests.exceptions.RequestException as e:\n                if attempt == 2:  # Last attempt\n                    raise Exception(f\"Request failed: {str(e)}\")\n                time.sleep(1)\n        \n        raise Exception(\"Max retries exceeded\")\n\n# Usage example\nclient = BinomAPIClient(os.getenv('binomPublic'))\n\ntry:\n    result = client.make_request(\n        method=\"GET\",\n        endpoint=\"/public/api/v1/campaign/{id}/permissions\",\n    )\n    \n    print(\"✅ Success:\", result)\n    \nexcept Exception as e:\n    print(f\"❌ Error: {e}\")",
      "curl": "# Basic request\ncurl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\" \\\n  \"https://pierdun.com/public/api/v1/campaign/{id}/permissions\"",
      "javascript": "class BinomAPI {\n  constructor(apiKey) {\n    this.apiKey = apiKey;\n    this.baseURL = 'https://pierdun.com/public/api/v1';\n    this.headers = {\n      'Authorization': `Bearer ${apiKey}`,\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    };\n  }\n\n  async makeRequest(method, endpoint, data = null, params = null) {\n    const url = new URL(`${this.baseURL}${endpoint}`);\n    \n    if (params) {\n      Object.keys(params).forEach(key => \n        url.searchParams.append(key, params[key])\n      );\n    }\n\n    const config = {\n      method: method,\n      headers: this.headers\n    };\n\n    if (data) {\n      config.body = JSON.stringify(data);\n    }\n\n    try {\n      const response = await fetch(url.toString(), config);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${await response.text()}`);\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('API Error:', error);\n      throw error;\n    }\n  }\n}\n\n// Usage\nconst api = new BinomAPI(process.env.BINOM_API_KEY);\n\ntry {\n  const result = await api.makeRequest(\n    'GET',\n    '/public/api/v1/campaign/{id}/permissions',\n    null,\n    null\n  );\n  \n  console.log('✅ Success:', result);\n} catch (error) {\n  console.error('❌ Error:', error.message);\n}"
    },
    "errorHandling": {
      "commonErrors": [
        {
          "code": 400,
          "cause": "Invalid input data, missing required fields, or malformed JSON",
          "solution": "Validate all input data before sending. Check required fields and data types.",
          "example": "Missing 'name' field in request body"
        },
        {
          "code": 401,
          "cause": "Invalid, expired, or missing API key",
          "solution": "Verify API key is correct and has not expired. Check Authorization header format.",
          "example": "Authorization header: 'Bearer YOUR_API_KEY'"
        },
        {
          "code": 403,
          "cause": "Insufficient permissions or access denied",
          "solution": "Ensure API key has required permissions for this operation.",
          "example": "User lacks permission to modify campaigns"
        },
        {
          "code": 404,
          "cause": "Resource not found or invalid ID",
          "solution": "Verify resource ID exists and is accessible to your account.",
          "example": "Campaign with ID 123 does not exist"
        },
        {
          "code": 429,
          "cause": "Rate limit exceeded",
          "solution": "Implement exponential backoff and retry logic. Reduce request frequency.",
          "example": "Wait 60 seconds before retrying"
        },
        {
          "code": 500,
          "cause": "Internal server error",
          "solution": "Retry request after a delay. Contact support if error persists.",
          "example": "Temporary server issue"
        }
      ],
      "retryStrategy": {
        "maxRetries": 3,
        "backoffMultiplier": 2,
        "initialDelay": 1,
        "retryableStatusCodes": [
          429,
          500,
          502,
          503,
          504
        ]
      },
      "bestPractices": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting",
        "Log errors with sufficient detail for debugging",
        "Set appropriate timeouts for requests",
        "Handle network errors gracefully"
      ]
    },
    "validation": {
      "authentication": {
        "required": true,
        "type": "Bearer token",
        "header": "Authorization: Bearer YOUR_API_KEY",
        "validation": "Token must be valid and not expired"
      },
      "contentType": {
        "required": false,
        "value": "application/json",
        "header": "Content-Type: application/json"
      },
      "rateLimits": {
        "requestsPerMinute": 100,
        "burstLimit": 10,
        "enforcement": "HTTP 429 status code when exceeded"
      },
      "dataValidation": [
        "All required fields must be present and non-empty",
        "Field types must match schema definitions",
        "String fields must not exceed maximum length",
        "Numeric fields must be within specified ranges",
        "Array fields must contain valid items",
        "Date fields must be in correct format (YYYY-MM-DD HH:MM:SS)"
      ],
      "commonValidationErrors": [
        "Missing required field 'name'",
        "Invalid email format",
        "String too long (max 255 characters)",
        "Invalid date format",
        "Negative value not allowed",
        "Invalid enum value"
      ]
    },
    "aiNotes": {
      "keyPoints": [
        "This is a GET endpoint for v1 operations",
        "Requires Bearer token authentication in Authorization header",
        "Returns JSON responses with consistent error format",
        "Supports standard HTTP status codes for success/error indication",
        "Rate limited to 100 requests per minute"
      ],
      "integrationTips": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting (429 errors)",
        "Cache responses when appropriate to reduce API calls",
        "Set reasonable timeouts (30 seconds recommended)",
        "Log requests and responses for debugging"
      ],
      "commonPatterns": [
        "Check authentication before making requests",
        "Validate required parameters are present",
        "Handle pagination for list endpoints",
        "Implement retry logic for transient errors",
        "Parse error responses for detailed error information"
      ],
      "aiSpecificGuidance": [
        "For AI agents: Always check response status before processing data",
        "Implement fallback strategies for API failures",
        "Use structured error handling to provide meaningful feedback",
        "Consider caching strategies for frequently accessed data",
        "Implement request queuing for high-volume operations"
      ]
    },
    "workflow": "Used for: Retrieving campaign details for optimization or troubleshooting",
    "realWorldUsage": [
      "Managing campaign resources in affiliate marketing workflows",
      "Automating campaign operations for campaign optimization",
      "Integrating campaign data with external reporting systems"
    ]
  },
  "POST /public/api/v1/campaign/{id}/permissions": {
    "method": "POST",
    "path": "/public/api/v1/campaign/{id}/permissions",
    "category": "campaign",
    "summary": "Grant Campaign Permissions",
    "description": "Grant Campaign Permissions. Creates a new campaign resource with specified configuration parameters.",
    "parameters": [
      {
        "name": "id",
        "in": "path",
        "required": true,
        "type": "integer",
        "description": "Unique identifier of the resource",
        "example": 123,
        "validation": "Must be a positive integer"
      }
    ],
    "requestBody": null,
    "responses": {
      "201": {
        "description": "Created - Resource created successfully",
        "example": {
          "id": 123,
          "message": "Resource created successfully",
          "data": {
            "id": 123,
            "name": "New Resource",
            "createdAt": "2023-12-01T10:00:00Z"
          }
        }
      },
      "400": {
        "description": "Bad Request - Invalid input data or missing required fields",
        "example": {
          "error": "Validation failed",
          "message": "Field 'name' is required",
          "details": {
            "field": "name",
            "code": "required",
            "value": null
          }
        }
      },
      "401": {
        "description": "Unauthorized - Invalid or missing API key",
        "example": {
          "error": "Unauthorized",
          "message": "Invalid API key or token expired"
        }
      },
      "403": {
        "description": "Forbidden - Access denied or insufficient permissions",
        "example": {
          "error": "Access denied",
          "message": "Insufficient permissions to access this resource"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Not found",
          "message": "Resource with ID 123 not found"
        }
      },
      "429": {
        "description": "Too Many Requests - Rate limit exceeded",
        "example": {
          "error": "Rate limit exceeded",
          "message": "Too many requests, please try again later",
          "retryAfter": 60
        }
      },
      "500": {
        "description": "Internal Server Error - Server-side error",
        "example": {
          "error": "Internal server error",
          "message": "Something went wrong on our end"
        }
      }
    },
    "examples": {
      "python": "import requests\nimport os\nimport time\nfrom typing import Optional, Dict, Any\n\nclass BinomAPIClient:\n    def __init__(self, api_key: str):\n        self.api_key = api_key\n        self.base_url = \"https://pierdun.com/public/api/v1\"\n        self.headers = {\n            \"Authorization\": f\"Bearer {api_key}\",\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json\"\n        }\n    \n    def make_request(self, method: str, endpoint: str, data: Optional[Dict] = None, params: Optional[Dict] = None) -> Dict[Any, Any]:\n        \"\"\"Make API request with error handling and retries\"\"\"\n        url = f\"{self.base_url}{endpoint}\"\n        \n        for attempt in range(3):\n            try:\n                response = requests.request(\n                    method=method,\n                    url=url,\n                    headers=self.headers,\n                    json=data,\n                    params=params,\n                    timeout=30\n                )\n                \n                if response.status_code == 429:\n                    # Rate limit - wait and retry\n                    time.sleep(2 ** attempt)\n                    continue\n                \n                if response.status_code in [200, 201]:\n                    return response.json()\n                else:\n                    raise Exception(f\"API Error {response.status_code}: {response.text}\")\n                    \n            except requests.exceptions.RequestException as e:\n                if attempt == 2:  # Last attempt\n                    raise Exception(f\"Request failed: {str(e)}\")\n                time.sleep(1)\n        \n        raise Exception(\"Max retries exceeded\")\n\n# Usage example\nclient = BinomAPIClient(os.getenv('binomPublic'))\n\ntry:\n    result = client.make_request(\n        method=\"POST\",\n        endpoint=\"/public/api/v1/campaign/{id}/permissions\",\n    )\n    \n    print(\"✅ Success:\", result)\n    \nexcept Exception as e:\n    print(f\"❌ Error: {e}\")",
      "curl": "# Basic request\ncurl -X POST \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\" \\\n  \"https://pierdun.com/public/api/v1/campaign/{id}/permissions\"",
      "javascript": "class BinomAPI {\n  constructor(apiKey) {\n    this.apiKey = apiKey;\n    this.baseURL = 'https://pierdun.com/public/api/v1';\n    this.headers = {\n      'Authorization': `Bearer ${apiKey}`,\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    };\n  }\n\n  async makeRequest(method, endpoint, data = null, params = null) {\n    const url = new URL(`${this.baseURL}${endpoint}`);\n    \n    if (params) {\n      Object.keys(params).forEach(key => \n        url.searchParams.append(key, params[key])\n      );\n    }\n\n    const config = {\n      method: method,\n      headers: this.headers\n    };\n\n    if (data) {\n      config.body = JSON.stringify(data);\n    }\n\n    try {\n      const response = await fetch(url.toString(), config);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${await response.text()}`);\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('API Error:', error);\n      throw error;\n    }\n  }\n}\n\n// Usage\nconst api = new BinomAPI(process.env.BINOM_API_KEY);\n\ntry {\n  const result = await api.makeRequest(\n    'POST',\n    '/public/api/v1/campaign/{id}/permissions',\n    null,\n    null\n  );\n  \n  console.log('✅ Success:', result);\n} catch (error) {\n  console.error('❌ Error:', error.message);\n}"
    },
    "errorHandling": {
      "commonErrors": [
        {
          "code": 400,
          "cause": "Invalid input data, missing required fields, or malformed JSON",
          "solution": "Validate all input data before sending. Check required fields and data types.",
          "example": "Missing 'name' field in request body"
        },
        {
          "code": 401,
          "cause": "Invalid, expired, or missing API key",
          "solution": "Verify API key is correct and has not expired. Check Authorization header format.",
          "example": "Authorization header: 'Bearer YOUR_API_KEY'"
        },
        {
          "code": 403,
          "cause": "Insufficient permissions or access denied",
          "solution": "Ensure API key has required permissions for this operation.",
          "example": "User lacks permission to modify campaigns"
        },
        {
          "code": 404,
          "cause": "Resource not found or invalid ID",
          "solution": "Verify resource ID exists and is accessible to your account.",
          "example": "Campaign with ID 123 does not exist"
        },
        {
          "code": 429,
          "cause": "Rate limit exceeded",
          "solution": "Implement exponential backoff and retry logic. Reduce request frequency.",
          "example": "Wait 60 seconds before retrying"
        },
        {
          "code": 500,
          "cause": "Internal server error",
          "solution": "Retry request after a delay. Contact support if error persists.",
          "example": "Temporary server issue"
        }
      ],
      "retryStrategy": {
        "maxRetries": 3,
        "backoffMultiplier": 2,
        "initialDelay": 1,
        "retryableStatusCodes": [
          429,
          500,
          502,
          503,
          504
        ]
      },
      "bestPractices": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting",
        "Log errors with sufficient detail for debugging",
        "Set appropriate timeouts for requests",
        "Handle network errors gracefully"
      ]
    },
    "validation": {
      "authentication": {
        "required": true,
        "type": "Bearer token",
        "header": "Authorization: Bearer YOUR_API_KEY",
        "validation": "Token must be valid and not expired"
      },
      "contentType": {
        "required": true,
        "value": "application/json",
        "header": "Content-Type: application/json"
      },
      "rateLimits": {
        "requestsPerMinute": 100,
        "burstLimit": 10,
        "enforcement": "HTTP 429 status code when exceeded"
      },
      "dataValidation": [
        "All required fields must be present and non-empty",
        "Field types must match schema definitions",
        "String fields must not exceed maximum length",
        "Numeric fields must be within specified ranges",
        "Array fields must contain valid items",
        "Date fields must be in correct format (YYYY-MM-DD HH:MM:SS)"
      ],
      "commonValidationErrors": [
        "Missing required field 'name'",
        "Invalid email format",
        "String too long (max 255 characters)",
        "Invalid date format",
        "Negative value not allowed",
        "Invalid enum value"
      ]
    },
    "aiNotes": {
      "keyPoints": [
        "This is a POST endpoint for v1 operations",
        "Requires Bearer token authentication in Authorization header",
        "Returns JSON responses with consistent error format",
        "Supports standard HTTP status codes for success/error indication",
        "Rate limited to 100 requests per minute"
      ],
      "integrationTips": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting (429 errors)",
        "Cache responses when appropriate to reduce API calls",
        "Set reasonable timeouts (30 seconds recommended)",
        "Log requests and responses for debugging"
      ],
      "commonPatterns": [
        "Check authentication before making requests",
        "Validate required parameters are present",
        "Handle pagination for list endpoints",
        "Implement retry logic for transient errors",
        "Parse error responses for detailed error information"
      ],
      "aiSpecificGuidance": [
        "For AI agents: Always check response status before processing data",
        "Implement fallback strategies for API failures",
        "Use structured error handling to provide meaningful feedback",
        "Consider caching strategies for frequently accessed data",
        "Implement request queuing for high-volume operations"
      ]
    },
    "workflow": "Core step: Create campaign after setting up traffic sources and networks",
    "realWorldUsage": [
      "Managing campaign resources in affiliate marketing workflows",
      "Automating campaign operations for campaign optimization",
      "Integrating campaign data with external reporting systems"
    ]
  },
  "DELETE /public/api/v1/campaign/{id}/permissions": {
    "method": "DELETE",
    "path": "/public/api/v1/campaign/{id}/permissions",
    "category": "campaign",
    "summary": "Revoke Campaign Permissions",
    "description": "Revoke Campaign Permissions. Removes a campaign resource (typically soft delete that can be restored).",
    "parameters": [
      {
        "name": "id",
        "in": "path",
        "required": true,
        "type": "integer",
        "description": "Unique identifier of the resource",
        "example": 123,
        "validation": "Must be a positive integer"
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success - Resource deleted successfully",
        "example": {
          "message": "Resource deleted successfully",
          "deletedAt": "2023-12-01T16:00:00Z"
        }
      },
      "400": {
        "description": "Bad Request - Invalid input data or missing required fields",
        "example": {
          "error": "Validation failed",
          "message": "Field 'name' is required",
          "details": {
            "field": "name",
            "code": "required",
            "value": null
          }
        }
      },
      "401": {
        "description": "Unauthorized - Invalid or missing API key",
        "example": {
          "error": "Unauthorized",
          "message": "Invalid API key or token expired"
        }
      },
      "403": {
        "description": "Forbidden - Access denied or insufficient permissions",
        "example": {
          "error": "Access denied",
          "message": "Insufficient permissions to access this resource"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Not found",
          "message": "Resource with ID 123 not found"
        }
      },
      "429": {
        "description": "Too Many Requests - Rate limit exceeded",
        "example": {
          "error": "Rate limit exceeded",
          "message": "Too many requests, please try again later",
          "retryAfter": 60
        }
      },
      "500": {
        "description": "Internal Server Error - Server-side error",
        "example": {
          "error": "Internal server error",
          "message": "Something went wrong on our end"
        }
      }
    },
    "examples": {
      "python": "import requests\nimport os\nimport time\nfrom typing import Optional, Dict, Any\n\nclass BinomAPIClient:\n    def __init__(self, api_key: str):\n        self.api_key = api_key\n        self.base_url = \"https://pierdun.com/public/api/v1\"\n        self.headers = {\n            \"Authorization\": f\"Bearer {api_key}\",\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json\"\n        }\n    \n    def make_request(self, method: str, endpoint: str, data: Optional[Dict] = None, params: Optional[Dict] = None) -> Dict[Any, Any]:\n        \"\"\"Make API request with error handling and retries\"\"\"\n        url = f\"{self.base_url}{endpoint}\"\n        \n        for attempt in range(3):\n            try:\n                response = requests.request(\n                    method=method,\n                    url=url,\n                    headers=self.headers,\n                    json=data,\n                    params=params,\n                    timeout=30\n                )\n                \n                if response.status_code == 429:\n                    # Rate limit - wait and retry\n                    time.sleep(2 ** attempt)\n                    continue\n                \n                if response.status_code in [200, 201]:\n                    return response.json()\n                else:\n                    raise Exception(f\"API Error {response.status_code}: {response.text}\")\n                    \n            except requests.exceptions.RequestException as e:\n                if attempt == 2:  # Last attempt\n                    raise Exception(f\"Request failed: {str(e)}\")\n                time.sleep(1)\n        \n        raise Exception(\"Max retries exceeded\")\n\n# Usage example\nclient = BinomAPIClient(os.getenv('binomPublic'))\n\ntry:\n    result = client.make_request(\n        method=\"DELETE\",\n        endpoint=\"/public/api/v1/campaign/{id}/permissions\",\n    )\n    \n    print(\"✅ Success:\", result)\n    \nexcept Exception as e:\n    print(f\"❌ Error: {e}\")",
      "curl": "# Basic request\ncurl -X DELETE \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\" \\\n  \"https://pierdun.com/public/api/v1/campaign/{id}/permissions\"",
      "javascript": "class BinomAPI {\n  constructor(apiKey) {\n    this.apiKey = apiKey;\n    this.baseURL = 'https://pierdun.com/public/api/v1';\n    this.headers = {\n      'Authorization': `Bearer ${apiKey}`,\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    };\n  }\n\n  async makeRequest(method, endpoint, data = null, params = null) {\n    const url = new URL(`${this.baseURL}${endpoint}`);\n    \n    if (params) {\n      Object.keys(params).forEach(key => \n        url.searchParams.append(key, params[key])\n      );\n    }\n\n    const config = {\n      method: method,\n      headers: this.headers\n    };\n\n    if (data) {\n      config.body = JSON.stringify(data);\n    }\n\n    try {\n      const response = await fetch(url.toString(), config);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${await response.text()}`);\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('API Error:', error);\n      throw error;\n    }\n  }\n}\n\n// Usage\nconst api = new BinomAPI(process.env.BINOM_API_KEY);\n\ntry {\n  const result = await api.makeRequest(\n    'DELETE',\n    '/public/api/v1/campaign/{id}/permissions',\n    null,\n    null\n  );\n  \n  console.log('✅ Success:', result);\n} catch (error) {\n  console.error('❌ Error:', error.message);\n}"
    },
    "errorHandling": {
      "commonErrors": [
        {
          "code": 400,
          "cause": "Invalid input data, missing required fields, or malformed JSON",
          "solution": "Validate all input data before sending. Check required fields and data types.",
          "example": "Missing 'name' field in request body"
        },
        {
          "code": 401,
          "cause": "Invalid, expired, or missing API key",
          "solution": "Verify API key is correct and has not expired. Check Authorization header format.",
          "example": "Authorization header: 'Bearer YOUR_API_KEY'"
        },
        {
          "code": 403,
          "cause": "Insufficient permissions or access denied",
          "solution": "Ensure API key has required permissions for this operation.",
          "example": "User lacks permission to modify campaigns"
        },
        {
          "code": 404,
          "cause": "Resource not found or invalid ID",
          "solution": "Verify resource ID exists and is accessible to your account.",
          "example": "Campaign with ID 123 does not exist"
        },
        {
          "code": 429,
          "cause": "Rate limit exceeded",
          "solution": "Implement exponential backoff and retry logic. Reduce request frequency.",
          "example": "Wait 60 seconds before retrying"
        },
        {
          "code": 500,
          "cause": "Internal server error",
          "solution": "Retry request after a delay. Contact support if error persists.",
          "example": "Temporary server issue"
        }
      ],
      "retryStrategy": {
        "maxRetries": 3,
        "backoffMultiplier": 2,
        "initialDelay": 1,
        "retryableStatusCodes": [
          429,
          500,
          502,
          503,
          504
        ]
      },
      "bestPractices": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting",
        "Log errors with sufficient detail for debugging",
        "Set appropriate timeouts for requests",
        "Handle network errors gracefully"
      ]
    },
    "validation": {
      "authentication": {
        "required": true,
        "type": "Bearer token",
        "header": "Authorization: Bearer YOUR_API_KEY",
        "validation": "Token must be valid and not expired"
      },
      "contentType": {
        "required": false,
        "value": "application/json",
        "header": "Content-Type: application/json"
      },
      "rateLimits": {
        "requestsPerMinute": 100,
        "burstLimit": 10,
        "enforcement": "HTTP 429 status code when exceeded"
      },
      "dataValidation": [
        "All required fields must be present and non-empty",
        "Field types must match schema definitions",
        "String fields must not exceed maximum length",
        "Numeric fields must be within specified ranges",
        "Array fields must contain valid items",
        "Date fields must be in correct format (YYYY-MM-DD HH:MM:SS)"
      ],
      "commonValidationErrors": [
        "Missing required field 'name'",
        "Invalid email format",
        "String too long (max 255 characters)",
        "Invalid date format",
        "Negative value not allowed",
        "Invalid enum value"
      ]
    },
    "aiNotes": {
      "keyPoints": [
        "This is a DELETE endpoint for v1 operations",
        "Requires Bearer token authentication in Authorization header",
        "Returns JSON responses with consistent error format",
        "Supports standard HTTP status codes for success/error indication",
        "Rate limited to 100 requests per minute"
      ],
      "integrationTips": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting (429 errors)",
        "Cache responses when appropriate to reduce API calls",
        "Set reasonable timeouts (30 seconds recommended)",
        "Log requests and responses for debugging"
      ],
      "commonPatterns": [
        "Check authentication before making requests",
        "Validate required parameters are present",
        "Handle pagination for list endpoints",
        "Implement retry logic for transient errors",
        "Parse error responses for detailed error information"
      ],
      "aiSpecificGuidance": [
        "For AI agents: Always check response status before processing data",
        "Implement fallback strategies for API failures",
        "Use structured error handling to provide meaningful feedback",
        "Consider caching strategies for frequently accessed data",
        "Implement request queuing for high-volume operations"
      ]
    },
    "workflow": "Used for: Pausing or removing campaigns (can be restored)",
    "realWorldUsage": [
      "Managing campaign resources in affiliate marketing workflows",
      "Automating campaign operations for campaign optimization",
      "Integrating campaign data with external reporting systems"
    ]
  },
  "POST /public/api/v1/campaign/{campaignId}/owner": {
    "method": "POST",
    "path": "/public/api/v1/campaign/{campaignId}/owner",
    "category": "campaign",
    "summary": "Change Campaign Owner",
    "description": "Change Campaign Owner. Creates a new campaign resource with specified configuration parameters.",
    "parameters": [
      {
        "name": "campaignId",
        "in": "path",
        "required": true,
        "type": "integer",
        "description": "Campaign identifier",
        "example": 456,
        "validation": "Must be a positive integer"
      }
    ],
    "requestBody": null,
    "responses": {
      "201": {
        "description": "Created - Resource created successfully",
        "example": {
          "id": 123,
          "message": "Resource created successfully",
          "data": {
            "id": 123,
            "name": "New Resource",
            "createdAt": "2023-12-01T10:00:00Z"
          }
        }
      },
      "400": {
        "description": "Bad Request - Invalid input data or missing required fields",
        "example": {
          "error": "Validation failed",
          "message": "Field 'name' is required",
          "details": {
            "field": "name",
            "code": "required",
            "value": null
          }
        }
      },
      "401": {
        "description": "Unauthorized - Invalid or missing API key",
        "example": {
          "error": "Unauthorized",
          "message": "Invalid API key or token expired"
        }
      },
      "403": {
        "description": "Forbidden - Access denied or insufficient permissions",
        "example": {
          "error": "Access denied",
          "message": "Insufficient permissions to access this resource"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Not found",
          "message": "Resource with ID 123 not found"
        }
      },
      "429": {
        "description": "Too Many Requests - Rate limit exceeded",
        "example": {
          "error": "Rate limit exceeded",
          "message": "Too many requests, please try again later",
          "retryAfter": 60
        }
      },
      "500": {
        "description": "Internal Server Error - Server-side error",
        "example": {
          "error": "Internal server error",
          "message": "Something went wrong on our end"
        }
      }
    },
    "examples": {
      "python": "import requests\nimport os\nimport time\nfrom typing import Optional, Dict, Any\n\nclass BinomAPIClient:\n    def __init__(self, api_key: str):\n        self.api_key = api_key\n        self.base_url = \"https://pierdun.com/public/api/v1\"\n        self.headers = {\n            \"Authorization\": f\"Bearer {api_key}\",\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json\"\n        }\n    \n    def make_request(self, method: str, endpoint: str, data: Optional[Dict] = None, params: Optional[Dict] = None) -> Dict[Any, Any]:\n        \"\"\"Make API request with error handling and retries\"\"\"\n        url = f\"{self.base_url}{endpoint}\"\n        \n        for attempt in range(3):\n            try:\n                response = requests.request(\n                    method=method,\n                    url=url,\n                    headers=self.headers,\n                    json=data,\n                    params=params,\n                    timeout=30\n                )\n                \n                if response.status_code == 429:\n                    # Rate limit - wait and retry\n                    time.sleep(2 ** attempt)\n                    continue\n                \n                if response.status_code in [200, 201]:\n                    return response.json()\n                else:\n                    raise Exception(f\"API Error {response.status_code}: {response.text}\")\n                    \n            except requests.exceptions.RequestException as e:\n                if attempt == 2:  # Last attempt\n                    raise Exception(f\"Request failed: {str(e)}\")\n                time.sleep(1)\n        \n        raise Exception(\"Max retries exceeded\")\n\n# Usage example\nclient = BinomAPIClient(os.getenv('binomPublic'))\n\ntry:\n    result = client.make_request(\n        method=\"POST\",\n        endpoint=\"/public/api/v1/campaign/{campaignId}/owner\",\n    )\n    \n    print(\"✅ Success:\", result)\n    \nexcept Exception as e:\n    print(f\"❌ Error: {e}\")",
      "curl": "# Basic request\ncurl -X POST \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\" \\\n  \"https://pierdun.com/public/api/v1/campaign/{campaignId}/owner\"",
      "javascript": "class BinomAPI {\n  constructor(apiKey) {\n    this.apiKey = apiKey;\n    this.baseURL = 'https://pierdun.com/public/api/v1';\n    this.headers = {\n      'Authorization': `Bearer ${apiKey}`,\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    };\n  }\n\n  async makeRequest(method, endpoint, data = null, params = null) {\n    const url = new URL(`${this.baseURL}${endpoint}`);\n    \n    if (params) {\n      Object.keys(params).forEach(key => \n        url.searchParams.append(key, params[key])\n      );\n    }\n\n    const config = {\n      method: method,\n      headers: this.headers\n    };\n\n    if (data) {\n      config.body = JSON.stringify(data);\n    }\n\n    try {\n      const response = await fetch(url.toString(), config);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${await response.text()}`);\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('API Error:', error);\n      throw error;\n    }\n  }\n}\n\n// Usage\nconst api = new BinomAPI(process.env.BINOM_API_KEY);\n\ntry {\n  const result = await api.makeRequest(\n    'POST',\n    '/public/api/v1/campaign/{campaignId}/owner',\n    null,\n    null\n  );\n  \n  console.log('✅ Success:', result);\n} catch (error) {\n  console.error('❌ Error:', error.message);\n}"
    },
    "errorHandling": {
      "commonErrors": [
        {
          "code": 400,
          "cause": "Invalid input data, missing required fields, or malformed JSON",
          "solution": "Validate all input data before sending. Check required fields and data types.",
          "example": "Missing 'name' field in request body"
        },
        {
          "code": 401,
          "cause": "Invalid, expired, or missing API key",
          "solution": "Verify API key is correct and has not expired. Check Authorization header format.",
          "example": "Authorization header: 'Bearer YOUR_API_KEY'"
        },
        {
          "code": 403,
          "cause": "Insufficient permissions or access denied",
          "solution": "Ensure API key has required permissions for this operation.",
          "example": "User lacks permission to modify campaigns"
        },
        {
          "code": 404,
          "cause": "Resource not found or invalid ID",
          "solution": "Verify resource ID exists and is accessible to your account.",
          "example": "Campaign with ID 123 does not exist"
        },
        {
          "code": 429,
          "cause": "Rate limit exceeded",
          "solution": "Implement exponential backoff and retry logic. Reduce request frequency.",
          "example": "Wait 60 seconds before retrying"
        },
        {
          "code": 500,
          "cause": "Internal server error",
          "solution": "Retry request after a delay. Contact support if error persists.",
          "example": "Temporary server issue"
        }
      ],
      "retryStrategy": {
        "maxRetries": 3,
        "backoffMultiplier": 2,
        "initialDelay": 1,
        "retryableStatusCodes": [
          429,
          500,
          502,
          503,
          504
        ]
      },
      "bestPractices": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting",
        "Log errors with sufficient detail for debugging",
        "Set appropriate timeouts for requests",
        "Handle network errors gracefully"
      ]
    },
    "validation": {
      "authentication": {
        "required": true,
        "type": "Bearer token",
        "header": "Authorization: Bearer YOUR_API_KEY",
        "validation": "Token must be valid and not expired"
      },
      "contentType": {
        "required": true,
        "value": "application/json",
        "header": "Content-Type: application/json"
      },
      "rateLimits": {
        "requestsPerMinute": 100,
        "burstLimit": 10,
        "enforcement": "HTTP 429 status code when exceeded"
      },
      "dataValidation": [
        "All required fields must be present and non-empty",
        "Field types must match schema definitions",
        "String fields must not exceed maximum length",
        "Numeric fields must be within specified ranges",
        "Array fields must contain valid items",
        "Date fields must be in correct format (YYYY-MM-DD HH:MM:SS)"
      ],
      "commonValidationErrors": [
        "Missing required field 'name'",
        "Invalid email format",
        "String too long (max 255 characters)",
        "Invalid date format",
        "Negative value not allowed",
        "Invalid enum value"
      ]
    },
    "aiNotes": {
      "keyPoints": [
        "This is a POST endpoint for v1 operations",
        "Requires Bearer token authentication in Authorization header",
        "Returns JSON responses with consistent error format",
        "Supports standard HTTP status codes for success/error indication",
        "Rate limited to 100 requests per minute"
      ],
      "integrationTips": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting (429 errors)",
        "Cache responses when appropriate to reduce API calls",
        "Set reasonable timeouts (30 seconds recommended)",
        "Log requests and responses for debugging"
      ],
      "commonPatterns": [
        "Check authentication before making requests",
        "Validate required parameters are present",
        "Handle pagination for list endpoints",
        "Implement retry logic for transient errors",
        "Parse error responses for detailed error information"
      ],
      "aiSpecificGuidance": [
        "For AI agents: Always check response status before processing data",
        "Implement fallback strategies for API failures",
        "Use structured error handling to provide meaningful feedback",
        "Consider caching strategies for frequently accessed data",
        "Implement request queuing for high-volume operations"
      ]
    },
    "workflow": "Core step: Create campaign after setting up traffic sources and networks",
    "realWorldUsage": [
      "Managing campaign resources in affiliate marketing workflows",
      "Automating campaign operations for campaign optimization",
      "Integrating campaign data with external reporting systems"
    ]
  },
  "DELETE /public/api/v1/campaign/{campaignId}/owner": {
    "method": "DELETE",
    "path": "/public/api/v1/campaign/{campaignId}/owner",
    "category": "campaign",
    "summary": "Delete Campaign Owner",
    "description": "Delete Campaign Owner. Removes a campaign resource (typically soft delete that can be restored).",
    "parameters": [
      {
        "name": "campaignId",
        "in": "path",
        "required": true,
        "type": "integer",
        "description": "Campaign identifier",
        "example": 456,
        "validation": "Must be a positive integer"
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success - Resource deleted successfully",
        "example": {
          "message": "Resource deleted successfully",
          "deletedAt": "2023-12-01T16:00:00Z"
        }
      },
      "400": {
        "description": "Bad Request - Invalid input data or missing required fields",
        "example": {
          "error": "Validation failed",
          "message": "Field 'name' is required",
          "details": {
            "field": "name",
            "code": "required",
            "value": null
          }
        }
      },
      "401": {
        "description": "Unauthorized - Invalid or missing API key",
        "example": {
          "error": "Unauthorized",
          "message": "Invalid API key or token expired"
        }
      },
      "403": {
        "description": "Forbidden - Access denied or insufficient permissions",
        "example": {
          "error": "Access denied",
          "message": "Insufficient permissions to access this resource"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Not found",
          "message": "Resource with ID 123 not found"
        }
      },
      "429": {
        "description": "Too Many Requests - Rate limit exceeded",
        "example": {
          "error": "Rate limit exceeded",
          "message": "Too many requests, please try again later",
          "retryAfter": 60
        }
      },
      "500": {
        "description": "Internal Server Error - Server-side error",
        "example": {
          "error": "Internal server error",
          "message": "Something went wrong on our end"
        }
      }
    },
    "examples": {
      "python": "import requests\nimport os\nimport time\nfrom typing import Optional, Dict, Any\n\nclass BinomAPIClient:\n    def __init__(self, api_key: str):\n        self.api_key = api_key\n        self.base_url = \"https://pierdun.com/public/api/v1\"\n        self.headers = {\n            \"Authorization\": f\"Bearer {api_key}\",\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json\"\n        }\n    \n    def make_request(self, method: str, endpoint: str, data: Optional[Dict] = None, params: Optional[Dict] = None) -> Dict[Any, Any]:\n        \"\"\"Make API request with error handling and retries\"\"\"\n        url = f\"{self.base_url}{endpoint}\"\n        \n        for attempt in range(3):\n            try:\n                response = requests.request(\n                    method=method,\n                    url=url,\n                    headers=self.headers,\n                    json=data,\n                    params=params,\n                    timeout=30\n                )\n                \n                if response.status_code == 429:\n                    # Rate limit - wait and retry\n                    time.sleep(2 ** attempt)\n                    continue\n                \n                if response.status_code in [200, 201]:\n                    return response.json()\n                else:\n                    raise Exception(f\"API Error {response.status_code}: {response.text}\")\n                    \n            except requests.exceptions.RequestException as e:\n                if attempt == 2:  # Last attempt\n                    raise Exception(f\"Request failed: {str(e)}\")\n                time.sleep(1)\n        \n        raise Exception(\"Max retries exceeded\")\n\n# Usage example\nclient = BinomAPIClient(os.getenv('binomPublic'))\n\ntry:\n    result = client.make_request(\n        method=\"DELETE\",\n        endpoint=\"/public/api/v1/campaign/{campaignId}/owner\",\n    )\n    \n    print(\"✅ Success:\", result)\n    \nexcept Exception as e:\n    print(f\"❌ Error: {e}\")",
      "curl": "# Basic request\ncurl -X DELETE \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\" \\\n  \"https://pierdun.com/public/api/v1/campaign/{campaignId}/owner\"",
      "javascript": "class BinomAPI {\n  constructor(apiKey) {\n    this.apiKey = apiKey;\n    this.baseURL = 'https://pierdun.com/public/api/v1';\n    this.headers = {\n      'Authorization': `Bearer ${apiKey}`,\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    };\n  }\n\n  async makeRequest(method, endpoint, data = null, params = null) {\n    const url = new URL(`${this.baseURL}${endpoint}`);\n    \n    if (params) {\n      Object.keys(params).forEach(key => \n        url.searchParams.append(key, params[key])\n      );\n    }\n\n    const config = {\n      method: method,\n      headers: this.headers\n    };\n\n    if (data) {\n      config.body = JSON.stringify(data);\n    }\n\n    try {\n      const response = await fetch(url.toString(), config);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${await response.text()}`);\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('API Error:', error);\n      throw error;\n    }\n  }\n}\n\n// Usage\nconst api = new BinomAPI(process.env.BINOM_API_KEY);\n\ntry {\n  const result = await api.makeRequest(\n    'DELETE',\n    '/public/api/v1/campaign/{campaignId}/owner',\n    null,\n    null\n  );\n  \n  console.log('✅ Success:', result);\n} catch (error) {\n  console.error('❌ Error:', error.message);\n}"
    },
    "errorHandling": {
      "commonErrors": [
        {
          "code": 400,
          "cause": "Invalid input data, missing required fields, or malformed JSON",
          "solution": "Validate all input data before sending. Check required fields and data types.",
          "example": "Missing 'name' field in request body"
        },
        {
          "code": 401,
          "cause": "Invalid, expired, or missing API key",
          "solution": "Verify API key is correct and has not expired. Check Authorization header format.",
          "example": "Authorization header: 'Bearer YOUR_API_KEY'"
        },
        {
          "code": 403,
          "cause": "Insufficient permissions or access denied",
          "solution": "Ensure API key has required permissions for this operation.",
          "example": "User lacks permission to modify campaigns"
        },
        {
          "code": 404,
          "cause": "Resource not found or invalid ID",
          "solution": "Verify resource ID exists and is accessible to your account.",
          "example": "Campaign with ID 123 does not exist"
        },
        {
          "code": 429,
          "cause": "Rate limit exceeded",
          "solution": "Implement exponential backoff and retry logic. Reduce request frequency.",
          "example": "Wait 60 seconds before retrying"
        },
        {
          "code": 500,
          "cause": "Internal server error",
          "solution": "Retry request after a delay. Contact support if error persists.",
          "example": "Temporary server issue"
        }
      ],
      "retryStrategy": {
        "maxRetries": 3,
        "backoffMultiplier": 2,
        "initialDelay": 1,
        "retryableStatusCodes": [
          429,
          500,
          502,
          503,
          504
        ]
      },
      "bestPractices": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting",
        "Log errors with sufficient detail for debugging",
        "Set appropriate timeouts for requests",
        "Handle network errors gracefully"
      ]
    },
    "validation": {
      "authentication": {
        "required": true,
        "type": "Bearer token",
        "header": "Authorization: Bearer YOUR_API_KEY",
        "validation": "Token must be valid and not expired"
      },
      "contentType": {
        "required": false,
        "value": "application/json",
        "header": "Content-Type: application/json"
      },
      "rateLimits": {
        "requestsPerMinute": 100,
        "burstLimit": 10,
        "enforcement": "HTTP 429 status code when exceeded"
      },
      "dataValidation": [
        "All required fields must be present and non-empty",
        "Field types must match schema definitions",
        "String fields must not exceed maximum length",
        "Numeric fields must be within specified ranges",
        "Array fields must contain valid items",
        "Date fields must be in correct format (YYYY-MM-DD HH:MM:SS)"
      ],
      "commonValidationErrors": [
        "Missing required field 'name'",
        "Invalid email format",
        "String too long (max 255 characters)",
        "Invalid date format",
        "Negative value not allowed",
        "Invalid enum value"
      ]
    },
    "aiNotes": {
      "keyPoints": [
        "This is a DELETE endpoint for v1 operations",
        "Requires Bearer token authentication in Authorization header",
        "Returns JSON responses with consistent error format",
        "Supports standard HTTP status codes for success/error indication",
        "Rate limited to 100 requests per minute"
      ],
      "integrationTips": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting (429 errors)",
        "Cache responses when appropriate to reduce API calls",
        "Set reasonable timeouts (30 seconds recommended)",
        "Log requests and responses for debugging"
      ],
      "commonPatterns": [
        "Check authentication before making requests",
        "Validate required parameters are present",
        "Handle pagination for list endpoints",
        "Implement retry logic for transient errors",
        "Parse error responses for detailed error information"
      ],
      "aiSpecificGuidance": [
        "For AI agents: Always check response status before processing data",
        "Implement fallback strategies for API failures",
        "Use structured error handling to provide meaningful feedback",
        "Consider caching strategies for frequently accessed data",
        "Implement request queuing for high-volume operations"
      ]
    },
    "workflow": "Used for: Pausing or removing campaigns (can be restored)",
    "realWorldUsage": [
      "Managing campaign resources in affiliate marketing workflows",
      "Automating campaign operations for campaign optimization",
      "Integrating campaign data with external reporting systems"
    ]
  },
  "GET /public/api/v1/stats/offer": {
    "method": "GET",
    "path": "/public/api/v1/stats/offer",
    "category": "stats",
    "summary": "Get Offer Stats",
    "description": "Get Offer Stats. Retrieves information from the stats resource with optional filtering and pagination.",
    "parameters": [
      {
        "name": "datePreset",
        "in": "query",
        "required": true,
        "type": "string",
        "description": "Date range preset for filtering data",
        "enum": [
          "today",
          "yesterday",
          "last_2_days",
          "last_3_days",
          "last_7_days",
          "last_14_days",
          "last_30_days",
          "this_week",
          "last_week",
          "this_month",
          "last_month",
          "this_year",
          "last_year",
          "all_time",
          "custom_time"
        ],
        "example": "last_7_days",
        "validation": "Must be one of the predefined values"
      },
      {
        "name": "timezone",
        "in": "query",
        "required": true,
        "type": "string",
        "description": "Timezone for date calculations (always use UTC for consistency)",
        "example": "UTC",
        "default": "UTC",
        "validation": "Must be a valid timezone identifier"
      },
      {
        "name": "limit",
        "in": "query",
        "required": false,
        "type": "integer",
        "description": "Maximum number of records to return",
        "example": 100,
        "default": 100,
        "minimum": 1,
        "maximum": 1000,
        "validation": "Must be between 1 and 1000"
      },
      {
        "name": "offset",
        "in": "query",
        "required": false,
        "type": "integer",
        "description": "Number of records to skip for pagination",
        "example": 0,
        "default": 0,
        "minimum": 0,
        "validation": "Must be non-negative"
      },
      {
        "name": "dateFrom",
        "in": "query",
        "required": false,
        "type": "string",
        "description": "Start date for custom time range (required when datePreset=custom_time)",
        "example": "2023-01-01 00:00:00",
        "format": "YYYY-MM-DD HH:MM:SS",
        "validation": "Required when datePreset is 'custom_time'"
      },
      {
        "name": "dateTo",
        "in": "query",
        "required": false,
        "type": "string",
        "description": "End date for custom time range (required when datePreset=custom_time)",
        "example": "2023-01-31 23:59:59",
        "format": "YYYY-MM-DD HH:MM:SS",
        "validation": "Required when datePreset is 'custom_time', must be after dateFrom"
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success - Statistics data returned",
        "example": {
          "data": [
            {
              "id": 51,
              "name": "Campaign Name",
              "clicks": 1000,
              "conversions": 50,
              "cost": 500.0,
              "revenue": 750.0,
              "profit": 250.0,
              "roi": 50.0,
              "ctr": 5.0,
              "cr": 5.0,
              "ecpm": 25.0,
              "customMetrics": {
                "eCPT": 30.35,
                "eCPB": 108.39,
                "trials": 50,
                "buyouts": 14
              }
            }
          ],
          "totals": {
            "clicks": 1000,
            "conversions": 50,
            "cost": 500.0,
            "revenue": 750.0
          }
        }
      },
      "400": {
        "description": "Bad Request - Invalid input data or missing required fields",
        "example": {
          "error": "Validation failed",
          "message": "Field 'name' is required",
          "details": {
            "field": "name",
            "code": "required",
            "value": null
          }
        }
      },
      "401": {
        "description": "Unauthorized - Invalid or missing API key",
        "example": {
          "error": "Unauthorized",
          "message": "Invalid API key or token expired"
        }
      },
      "403": {
        "description": "Forbidden - Access denied or insufficient permissions",
        "example": {
          "error": "Access denied",
          "message": "Insufficient permissions to access this resource"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Not found",
          "message": "Resource with ID 123 not found"
        }
      },
      "429": {
        "description": "Too Many Requests - Rate limit exceeded",
        "example": {
          "error": "Rate limit exceeded",
          "message": "Too many requests, please try again later",
          "retryAfter": 60
        }
      },
      "500": {
        "description": "Internal Server Error - Server-side error",
        "example": {
          "error": "Internal server error",
          "message": "Something went wrong on our end"
        }
      }
    },
    "examples": {
      "python": "import requests\nimport os\nimport time\nfrom typing import Optional, Dict, Any\n\nclass BinomAPIClient:\n    def __init__(self, api_key: str):\n        self.api_key = api_key\n        self.base_url = \"https://pierdun.com/public/api/v1\"\n        self.headers = {\n            \"Authorization\": f\"Bearer {api_key}\",\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json\"\n        }\n    \n    def make_request(self, method: str, endpoint: str, data: Optional[Dict] = None, params: Optional[Dict] = None) -> Dict[Any, Any]:\n        \"\"\"Make API request with error handling and retries\"\"\"\n        url = f\"{self.base_url}{endpoint}\"\n        \n        for attempt in range(3):\n            try:\n                response = requests.request(\n                    method=method,\n                    url=url,\n                    headers=self.headers,\n                    json=data,\n                    params=params,\n                    timeout=30\n                )\n                \n                if response.status_code == 429:\n                    # Rate limit - wait and retry\n                    time.sleep(2 ** attempt)\n                    continue\n                \n                if response.status_code in [200, 201]:\n                    return response.json()\n                else:\n                    raise Exception(f\"API Error {response.status_code}: {response.text}\")\n                    \n            except requests.exceptions.RequestException as e:\n                if attempt == 2:  # Last attempt\n                    raise Exception(f\"Request failed: {str(e)}\")\n                time.sleep(1)\n        \n        raise Exception(\"Max retries exceeded\")\n\n# Usage example\nclient = BinomAPIClient(os.getenv('binomPublic'))\n\ntry:\n    result = client.make_request(\n        method=\"GET\",\n        endpoint=\"/public/api/v1/stats/offer\",\n        params={\n            \"datePreset\": \"last_7_days\",\n            \"timezone\": \"UTC\",\n            \"limit\": 100,\n            \"offset\": 0\n        }\n    )\n    \n    print(\"✅ Success:\", result)\n    \nexcept Exception as e:\n    print(f\"❌ Error: {e}\")",
      "curl": "# Basic request\ncurl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\" \\\n  \"https://pierdun.com/public/api/v1/stats/offer\"\n\n# With query parameters\ncurl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Accept: application/json\" \\\n  \"https://pierdun.com/public/api/v1/stats/offer?datePreset=last_7_days&timezone=UTC&limit=100&offset=0\"",
      "javascript": "class BinomAPI {\n  constructor(apiKey) {\n    this.apiKey = apiKey;\n    this.baseURL = 'https://pierdun.com/public/api/v1';\n    this.headers = {\n      'Authorization': `Bearer ${apiKey}`,\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    };\n  }\n\n  async makeRequest(method, endpoint, data = null, params = null) {\n    const url = new URL(`${this.baseURL}${endpoint}`);\n    \n    if (params) {\n      Object.keys(params).forEach(key => \n        url.searchParams.append(key, params[key])\n      );\n    }\n\n    const config = {\n      method: method,\n      headers: this.headers\n    };\n\n    if (data) {\n      config.body = JSON.stringify(data);\n    }\n\n    try {\n      const response = await fetch(url.toString(), config);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${await response.text()}`);\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('API Error:', error);\n      throw error;\n    }\n  }\n}\n\n// Usage\nconst api = new BinomAPI(process.env.BINOM_API_KEY);\n\ntry {\n  const result = await api.makeRequest(\n    'GET',\n    '/public/api/v1/stats/offer',\n    null,\n    {\n      datePreset: 'last_7_days',\n      timezone: 'UTC',\n      limit: 100,\n      offset: 0\n    }\n  );\n  \n  console.log('✅ Success:', result);\n} catch (error) {\n  console.error('❌ Error:', error.message);\n}"
    },
    "errorHandling": {
      "commonErrors": [
        {
          "code": 400,
          "cause": "Invalid input data, missing required fields, or malformed JSON",
          "solution": "Validate all input data before sending. Check required fields and data types.",
          "example": "Missing 'name' field in request body"
        },
        {
          "code": 401,
          "cause": "Invalid, expired, or missing API key",
          "solution": "Verify API key is correct and has not expired. Check Authorization header format.",
          "example": "Authorization header: 'Bearer YOUR_API_KEY'"
        },
        {
          "code": 403,
          "cause": "Insufficient permissions or access denied",
          "solution": "Ensure API key has required permissions for this operation.",
          "example": "User lacks permission to modify campaigns"
        },
        {
          "code": 404,
          "cause": "Resource not found or invalid ID",
          "solution": "Verify resource ID exists and is accessible to your account.",
          "example": "Campaign with ID 123 does not exist"
        },
        {
          "code": 429,
          "cause": "Rate limit exceeded",
          "solution": "Implement exponential backoff and retry logic. Reduce request frequency.",
          "example": "Wait 60 seconds before retrying"
        },
        {
          "code": 500,
          "cause": "Internal server error",
          "solution": "Retry request after a delay. Contact support if error persists.",
          "example": "Temporary server issue"
        }
      ],
      "retryStrategy": {
        "maxRetries": 3,
        "backoffMultiplier": 2,
        "initialDelay": 1,
        "retryableStatusCodes": [
          429,
          500,
          502,
          503,
          504
        ]
      },
      "bestPractices": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting",
        "Log errors with sufficient detail for debugging",
        "Set appropriate timeouts for requests",
        "Handle network errors gracefully"
      ]
    },
    "validation": {
      "authentication": {
        "required": true,
        "type": "Bearer token",
        "header": "Authorization: Bearer YOUR_API_KEY",
        "validation": "Token must be valid and not expired"
      },
      "contentType": {
        "required": false,
        "value": "application/json",
        "header": "Content-Type: application/json"
      },
      "rateLimits": {
        "requestsPerMinute": 100,
        "burstLimit": 10,
        "enforcement": "HTTP 429 status code when exceeded"
      },
      "dataValidation": [
        "All required fields must be present and non-empty",
        "Field types must match schema definitions",
        "String fields must not exceed maximum length",
        "Numeric fields must be within specified ranges",
        "Array fields must contain valid items",
        "Date fields must be in correct format (YYYY-MM-DD HH:MM:SS)"
      ],
      "commonValidationErrors": [
        "Missing required field 'name'",
        "Invalid email format",
        "String too long (max 255 characters)",
        "Invalid date format",
        "Negative value not allowed",
        "Invalid enum value"
      ]
    },
    "aiNotes": {
      "keyPoints": [
        "This is a GET endpoint for v1 operations",
        "Requires Bearer token authentication in Authorization header",
        "Returns JSON responses with consistent error format",
        "Supports standard HTTP status codes for success/error indication",
        "Rate limited to 100 requests per minute"
      ],
      "integrationTips": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting (429 errors)",
        "Cache responses when appropriate to reduce API calls",
        "Set reasonable timeouts (30 seconds recommended)",
        "Log requests and responses for debugging"
      ],
      "commonPatterns": [
        "Check authentication before making requests",
        "Validate required parameters are present",
        "Handle pagination for list endpoints",
        "Implement retry logic for transient errors",
        "Parse error responses for detailed error information"
      ],
      "aiSpecificGuidance": [
        "For AI agents: Always check response status before processing data",
        "Implement fallback strategies for API failures",
        "Use structured error handling to provide meaningful feedback",
        "Consider caching strategies for frequently accessed data",
        "Implement request queuing for high-volume operations"
      ]
    },
    "workflow": "Analysis step: Retrieve performance data for optimization decisions",
    "realWorldUsage": [
      "Managing stats resources in affiliate marketing workflows",
      "Automating stats operations for campaign optimization",
      "Integrating stats data with external reporting systems"
    ]
  },
  "GET /public/api/v1/stats/traffic_source": {
    "method": "GET",
    "path": "/public/api/v1/stats/traffic_source",
    "category": "stats",
    "summary": "Get Traffic Source Stats",
    "description": "Get Traffic Source Stats. Retrieves information from the stats resource with optional filtering and pagination.",
    "parameters": [
      {
        "name": "datePreset",
        "in": "query",
        "required": true,
        "type": "string",
        "description": "Date range preset for filtering data",
        "enum": [
          "today",
          "yesterday",
          "last_2_days",
          "last_3_days",
          "last_7_days",
          "last_14_days",
          "last_30_days",
          "this_week",
          "last_week",
          "this_month",
          "last_month",
          "this_year",
          "last_year",
          "all_time",
          "custom_time"
        ],
        "example": "last_7_days",
        "validation": "Must be one of the predefined values"
      },
      {
        "name": "timezone",
        "in": "query",
        "required": true,
        "type": "string",
        "description": "Timezone for date calculations (always use UTC for consistency)",
        "example": "UTC",
        "default": "UTC",
        "validation": "Must be a valid timezone identifier"
      },
      {
        "name": "limit",
        "in": "query",
        "required": false,
        "type": "integer",
        "description": "Maximum number of records to return",
        "example": 100,
        "default": 100,
        "minimum": 1,
        "maximum": 1000,
        "validation": "Must be between 1 and 1000"
      },
      {
        "name": "offset",
        "in": "query",
        "required": false,
        "type": "integer",
        "description": "Number of records to skip for pagination",
        "example": 0,
        "default": 0,
        "minimum": 0,
        "validation": "Must be non-negative"
      },
      {
        "name": "dateFrom",
        "in": "query",
        "required": false,
        "type": "string",
        "description": "Start date for custom time range (required when datePreset=custom_time)",
        "example": "2023-01-01 00:00:00",
        "format": "YYYY-MM-DD HH:MM:SS",
        "validation": "Required when datePreset is 'custom_time'"
      },
      {
        "name": "dateTo",
        "in": "query",
        "required": false,
        "type": "string",
        "description": "End date for custom time range (required when datePreset=custom_time)",
        "example": "2023-01-31 23:59:59",
        "format": "YYYY-MM-DD HH:MM:SS",
        "validation": "Required when datePreset is 'custom_time', must be after dateFrom"
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success - Statistics data returned",
        "example": {
          "data": [
            {
              "id": 51,
              "name": "Campaign Name",
              "clicks": 1000,
              "conversions": 50,
              "cost": 500.0,
              "revenue": 750.0,
              "profit": 250.0,
              "roi": 50.0,
              "ctr": 5.0,
              "cr": 5.0,
              "ecpm": 25.0,
              "customMetrics": {
                "eCPT": 30.35,
                "eCPB": 108.39,
                "trials": 50,
                "buyouts": 14
              }
            }
          ],
          "totals": {
            "clicks": 1000,
            "conversions": 50,
            "cost": 500.0,
            "revenue": 750.0
          }
        }
      },
      "400": {
        "description": "Bad Request - Invalid input data or missing required fields",
        "example": {
          "error": "Validation failed",
          "message": "Field 'name' is required",
          "details": {
            "field": "name",
            "code": "required",
            "value": null
          }
        }
      },
      "401": {
        "description": "Unauthorized - Invalid or missing API key",
        "example": {
          "error": "Unauthorized",
          "message": "Invalid API key or token expired"
        }
      },
      "403": {
        "description": "Forbidden - Access denied or insufficient permissions",
        "example": {
          "error": "Access denied",
          "message": "Insufficient permissions to access this resource"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Not found",
          "message": "Resource with ID 123 not found"
        }
      },
      "429": {
        "description": "Too Many Requests - Rate limit exceeded",
        "example": {
          "error": "Rate limit exceeded",
          "message": "Too many requests, please try again later",
          "retryAfter": 60
        }
      },
      "500": {
        "description": "Internal Server Error - Server-side error",
        "example": {
          "error": "Internal server error",
          "message": "Something went wrong on our end"
        }
      }
    },
    "examples": {
      "python": "import requests\nimport os\nimport time\nfrom typing import Optional, Dict, Any\n\nclass BinomAPIClient:\n    def __init__(self, api_key: str):\n        self.api_key = api_key\n        self.base_url = \"https://pierdun.com/public/api/v1\"\n        self.headers = {\n            \"Authorization\": f\"Bearer {api_key}\",\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json\"\n        }\n    \n    def make_request(self, method: str, endpoint: str, data: Optional[Dict] = None, params: Optional[Dict] = None) -> Dict[Any, Any]:\n        \"\"\"Make API request with error handling and retries\"\"\"\n        url = f\"{self.base_url}{endpoint}\"\n        \n        for attempt in range(3):\n            try:\n                response = requests.request(\n                    method=method,\n                    url=url,\n                    headers=self.headers,\n                    json=data,\n                    params=params,\n                    timeout=30\n                )\n                \n                if response.status_code == 429:\n                    # Rate limit - wait and retry\n                    time.sleep(2 ** attempt)\n                    continue\n                \n                if response.status_code in [200, 201]:\n                    return response.json()\n                else:\n                    raise Exception(f\"API Error {response.status_code}: {response.text}\")\n                    \n            except requests.exceptions.RequestException as e:\n                if attempt == 2:  # Last attempt\n                    raise Exception(f\"Request failed: {str(e)}\")\n                time.sleep(1)\n        \n        raise Exception(\"Max retries exceeded\")\n\n# Usage example\nclient = BinomAPIClient(os.getenv('binomPublic'))\n\ntry:\n    result = client.make_request(\n        method=\"GET\",\n        endpoint=\"/public/api/v1/stats/traffic_source\",\n        params={\n            \"datePreset\": \"last_7_days\",\n            \"timezone\": \"UTC\",\n            \"limit\": 100,\n            \"offset\": 0\n        }\n    )\n    \n    print(\"✅ Success:\", result)\n    \nexcept Exception as e:\n    print(f\"❌ Error: {e}\")",
      "curl": "# Basic request\ncurl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\" \\\n  \"https://pierdun.com/public/api/v1/stats/traffic_source\"\n\n# With query parameters\ncurl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Accept: application/json\" \\\n  \"https://pierdun.com/public/api/v1/stats/traffic_source?datePreset=last_7_days&timezone=UTC&limit=100&offset=0\"",
      "javascript": "class BinomAPI {\n  constructor(apiKey) {\n    this.apiKey = apiKey;\n    this.baseURL = 'https://pierdun.com/public/api/v1';\n    this.headers = {\n      'Authorization': `Bearer ${apiKey}`,\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    };\n  }\n\n  async makeRequest(method, endpoint, data = null, params = null) {\n    const url = new URL(`${this.baseURL}${endpoint}`);\n    \n    if (params) {\n      Object.keys(params).forEach(key => \n        url.searchParams.append(key, params[key])\n      );\n    }\n\n    const config = {\n      method: method,\n      headers: this.headers\n    };\n\n    if (data) {\n      config.body = JSON.stringify(data);\n    }\n\n    try {\n      const response = await fetch(url.toString(), config);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${await response.text()}`);\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('API Error:', error);\n      throw error;\n    }\n  }\n}\n\n// Usage\nconst api = new BinomAPI(process.env.BINOM_API_KEY);\n\ntry {\n  const result = await api.makeRequest(\n    'GET',\n    '/public/api/v1/stats/traffic_source',\n    null,\n    {\n      datePreset: 'last_7_days',\n      timezone: 'UTC',\n      limit: 100,\n      offset: 0\n    }\n  );\n  \n  console.log('✅ Success:', result);\n} catch (error) {\n  console.error('❌ Error:', error.message);\n}"
    },
    "errorHandling": {
      "commonErrors": [
        {
          "code": 400,
          "cause": "Invalid input data, missing required fields, or malformed JSON",
          "solution": "Validate all input data before sending. Check required fields and data types.",
          "example": "Missing 'name' field in request body"
        },
        {
          "code": 401,
          "cause": "Invalid, expired, or missing API key",
          "solution": "Verify API key is correct and has not expired. Check Authorization header format.",
          "example": "Authorization header: 'Bearer YOUR_API_KEY'"
        },
        {
          "code": 403,
          "cause": "Insufficient permissions or access denied",
          "solution": "Ensure API key has required permissions for this operation.",
          "example": "User lacks permission to modify campaigns"
        },
        {
          "code": 404,
          "cause": "Resource not found or invalid ID",
          "solution": "Verify resource ID exists and is accessible to your account.",
          "example": "Campaign with ID 123 does not exist"
        },
        {
          "code": 429,
          "cause": "Rate limit exceeded",
          "solution": "Implement exponential backoff and retry logic. Reduce request frequency.",
          "example": "Wait 60 seconds before retrying"
        },
        {
          "code": 500,
          "cause": "Internal server error",
          "solution": "Retry request after a delay. Contact support if error persists.",
          "example": "Temporary server issue"
        }
      ],
      "retryStrategy": {
        "maxRetries": 3,
        "backoffMultiplier": 2,
        "initialDelay": 1,
        "retryableStatusCodes": [
          429,
          500,
          502,
          503,
          504
        ]
      },
      "bestPractices": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting",
        "Log errors with sufficient detail for debugging",
        "Set appropriate timeouts for requests",
        "Handle network errors gracefully"
      ]
    },
    "validation": {
      "authentication": {
        "required": true,
        "type": "Bearer token",
        "header": "Authorization: Bearer YOUR_API_KEY",
        "validation": "Token must be valid and not expired"
      },
      "contentType": {
        "required": false,
        "value": "application/json",
        "header": "Content-Type: application/json"
      },
      "rateLimits": {
        "requestsPerMinute": 100,
        "burstLimit": 10,
        "enforcement": "HTTP 429 status code when exceeded"
      },
      "dataValidation": [
        "All required fields must be present and non-empty",
        "Field types must match schema definitions",
        "String fields must not exceed maximum length",
        "Numeric fields must be within specified ranges",
        "Array fields must contain valid items",
        "Date fields must be in correct format (YYYY-MM-DD HH:MM:SS)"
      ],
      "commonValidationErrors": [
        "Missing required field 'name'",
        "Invalid email format",
        "String too long (max 255 characters)",
        "Invalid date format",
        "Negative value not allowed",
        "Invalid enum value"
      ]
    },
    "aiNotes": {
      "keyPoints": [
        "This is a GET endpoint for v1 operations",
        "Requires Bearer token authentication in Authorization header",
        "Returns JSON responses with consistent error format",
        "Supports standard HTTP status codes for success/error indication",
        "Rate limited to 100 requests per minute"
      ],
      "integrationTips": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting (429 errors)",
        "Cache responses when appropriate to reduce API calls",
        "Set reasonable timeouts (30 seconds recommended)",
        "Log requests and responses for debugging"
      ],
      "commonPatterns": [
        "Check authentication before making requests",
        "Validate required parameters are present",
        "Handle pagination for list endpoints",
        "Implement retry logic for transient errors",
        "Parse error responses for detailed error information"
      ],
      "aiSpecificGuidance": [
        "For AI agents: Always check response status before processing data",
        "Implement fallback strategies for API failures",
        "Use structured error handling to provide meaningful feedback",
        "Consider caching strategies for frequently accessed data",
        "Implement request queuing for high-volume operations"
      ]
    },
    "workflow": "Analysis step: Retrieve performance data for optimization decisions",
    "realWorldUsage": [
      "Managing stats resources in affiliate marketing workflows",
      "Automating stats operations for campaign optimization",
      "Integrating stats data with external reporting systems"
    ]
  },
  "GET /public/api/v1/stats/campaign": {
    "method": "GET",
    "path": "/public/api/v1/stats/campaign",
    "category": "stats",
    "summary": "Get Campaign Stats",
    "description": "Retrieves comprehensive performance statistics for campaigns including clicks, conversions, costs, revenues, and custom metrics like eCPT, eCPB, trials, and buyouts. Essential for performance analysis and optimization.",
    "parameters": [
      {
        "name": "datePreset",
        "in": "query",
        "required": true,
        "type": "string",
        "description": "Date range preset for filtering data",
        "enum": [
          "today",
          "yesterday",
          "last_2_days",
          "last_3_days",
          "last_7_days",
          "last_14_days",
          "last_30_days",
          "this_week",
          "last_week",
          "this_month",
          "last_month",
          "this_year",
          "last_year",
          "all_time",
          "custom_time"
        ],
        "example": "last_7_days",
        "validation": "Must be one of the predefined values"
      },
      {
        "name": "timezone",
        "in": "query",
        "required": true,
        "type": "string",
        "description": "Timezone for date calculations (always use UTC for consistency)",
        "example": "UTC",
        "default": "UTC",
        "validation": "Must be a valid timezone identifier"
      },
      {
        "name": "limit",
        "in": "query",
        "required": false,
        "type": "integer",
        "description": "Maximum number of records to return",
        "example": 100,
        "default": 100,
        "minimum": 1,
        "maximum": 1000,
        "validation": "Must be between 1 and 1000"
      },
      {
        "name": "offset",
        "in": "query",
        "required": false,
        "type": "integer",
        "description": "Number of records to skip for pagination",
        "example": 0,
        "default": 0,
        "minimum": 0,
        "validation": "Must be non-negative"
      },
      {
        "name": "dateFrom",
        "in": "query",
        "required": false,
        "type": "string",
        "description": "Start date for custom time range (required when datePreset=custom_time)",
        "example": "2023-01-01 00:00:00",
        "format": "YYYY-MM-DD HH:MM:SS",
        "validation": "Required when datePreset is 'custom_time'"
      },
      {
        "name": "dateTo",
        "in": "query",
        "required": false,
        "type": "string",
        "description": "End date for custom time range (required when datePreset=custom_time)",
        "example": "2023-01-31 23:59:59",
        "format": "YYYY-MM-DD HH:MM:SS",
        "validation": "Required when datePreset is 'custom_time', must be after dateFrom"
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success - Statistics data returned",
        "example": {
          "data": [
            {
              "id": 51,
              "name": "Campaign Name",
              "clicks": 1000,
              "conversions": 50,
              "cost": 500.0,
              "revenue": 750.0,
              "profit": 250.0,
              "roi": 50.0,
              "ctr": 5.0,
              "cr": 5.0,
              "ecpm": 25.0,
              "customMetrics": {
                "eCPT": 30.35,
                "eCPB": 108.39,
                "trials": 50,
                "buyouts": 14
              }
            }
          ],
          "totals": {
            "clicks": 1000,
            "conversions": 50,
            "cost": 500.0,
            "revenue": 750.0
          }
        }
      },
      "400": {
        "description": "Bad Request - Invalid input data or missing required fields",
        "example": {
          "error": "Validation failed",
          "message": "Field 'name' is required",
          "details": {
            "field": "name",
            "code": "required",
            "value": null
          }
        }
      },
      "401": {
        "description": "Unauthorized - Invalid or missing API key",
        "example": {
          "error": "Unauthorized",
          "message": "Invalid API key or token expired"
        }
      },
      "403": {
        "description": "Forbidden - Access denied or insufficient permissions",
        "example": {
          "error": "Access denied",
          "message": "Insufficient permissions to access this resource"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Not found",
          "message": "Resource with ID 123 not found"
        }
      },
      "429": {
        "description": "Too Many Requests - Rate limit exceeded",
        "example": {
          "error": "Rate limit exceeded",
          "message": "Too many requests, please try again later",
          "retryAfter": 60
        }
      },
      "500": {
        "description": "Internal Server Error - Server-side error",
        "example": {
          "error": "Internal server error",
          "message": "Something went wrong on our end"
        }
      }
    },
    "examples": {
      "python": "import requests\nimport os\nimport time\nfrom typing import Optional, Dict, Any\n\nclass BinomAPIClient:\n    def __init__(self, api_key: str):\n        self.api_key = api_key\n        self.base_url = \"https://pierdun.com/public/api/v1\"\n        self.headers = {\n            \"Authorization\": f\"Bearer {api_key}\",\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json\"\n        }\n    \n    def make_request(self, method: str, endpoint: str, data: Optional[Dict] = None, params: Optional[Dict] = None) -> Dict[Any, Any]:\n        \"\"\"Make API request with error handling and retries\"\"\"\n        url = f\"{self.base_url}{endpoint}\"\n        \n        for attempt in range(3):\n            try:\n                response = requests.request(\n                    method=method,\n                    url=url,\n                    headers=self.headers,\n                    json=data,\n                    params=params,\n                    timeout=30\n                )\n                \n                if response.status_code == 429:\n                    # Rate limit - wait and retry\n                    time.sleep(2 ** attempt)\n                    continue\n                \n                if response.status_code in [200, 201]:\n                    return response.json()\n                else:\n                    raise Exception(f\"API Error {response.status_code}: {response.text}\")\n                    \n            except requests.exceptions.RequestException as e:\n                if attempt == 2:  # Last attempt\n                    raise Exception(f\"Request failed: {str(e)}\")\n                time.sleep(1)\n        \n        raise Exception(\"Max retries exceeded\")\n\n# Usage example\nclient = BinomAPIClient(os.getenv('binomPublic'))\n\ntry:\n    result = client.make_request(\n        method=\"GET\",\n        endpoint=\"/public/api/v1/stats/campaign\",\n        params={\n            \"datePreset\": \"last_7_days\",\n            \"timezone\": \"UTC\",\n            \"limit\": 100,\n            \"offset\": 0\n        }\n    )\n    \n    print(\"✅ Success:\", result)\n    \nexcept Exception as e:\n    print(f\"❌ Error: {e}\")",
      "curl": "# Basic request\ncurl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\" \\\n  \"https://pierdun.com/public/api/v1/stats/campaign\"\n\n# With query parameters\ncurl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Accept: application/json\" \\\n  \"https://pierdun.com/public/api/v1/stats/campaign?datePreset=last_7_days&timezone=UTC&limit=100&offset=0\"",
      "javascript": "class BinomAPI {\n  constructor(apiKey) {\n    this.apiKey = apiKey;\n    this.baseURL = 'https://pierdun.com/public/api/v1';\n    this.headers = {\n      'Authorization': `Bearer ${apiKey}`,\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    };\n  }\n\n  async makeRequest(method, endpoint, data = null, params = null) {\n    const url = new URL(`${this.baseURL}${endpoint}`);\n    \n    if (params) {\n      Object.keys(params).forEach(key => \n        url.searchParams.append(key, params[key])\n      );\n    }\n\n    const config = {\n      method: method,\n      headers: this.headers\n    };\n\n    if (data) {\n      config.body = JSON.stringify(data);\n    }\n\n    try {\n      const response = await fetch(url.toString(), config);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${await response.text()}`);\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('API Error:', error);\n      throw error;\n    }\n  }\n}\n\n// Usage\nconst api = new BinomAPI(process.env.BINOM_API_KEY);\n\ntry {\n  const result = await api.makeRequest(\n    'GET',\n    '/public/api/v1/stats/campaign',\n    null,\n    {\n      datePreset: 'last_7_days',\n      timezone: 'UTC',\n      limit: 100,\n      offset: 0\n    }\n  );\n  \n  console.log('✅ Success:', result);\n} catch (error) {\n  console.error('❌ Error:', error.message);\n}"
    },
    "errorHandling": {
      "commonErrors": [
        {
          "code": 400,
          "cause": "Invalid input data, missing required fields, or malformed JSON",
          "solution": "Validate all input data before sending. Check required fields and data types.",
          "example": "Missing 'name' field in request body"
        },
        {
          "code": 401,
          "cause": "Invalid, expired, or missing API key",
          "solution": "Verify API key is correct and has not expired. Check Authorization header format.",
          "example": "Authorization header: 'Bearer YOUR_API_KEY'"
        },
        {
          "code": 403,
          "cause": "Insufficient permissions or access denied",
          "solution": "Ensure API key has required permissions for this operation.",
          "example": "User lacks permission to modify campaigns"
        },
        {
          "code": 404,
          "cause": "Resource not found or invalid ID",
          "solution": "Verify resource ID exists and is accessible to your account.",
          "example": "Campaign with ID 123 does not exist"
        },
        {
          "code": 429,
          "cause": "Rate limit exceeded",
          "solution": "Implement exponential backoff and retry logic. Reduce request frequency.",
          "example": "Wait 60 seconds before retrying"
        },
        {
          "code": 500,
          "cause": "Internal server error",
          "solution": "Retry request after a delay. Contact support if error persists.",
          "example": "Temporary server issue"
        }
      ],
      "retryStrategy": {
        "maxRetries": 3,
        "backoffMultiplier": 2,
        "initialDelay": 1,
        "retryableStatusCodes": [
          429,
          500,
          502,
          503,
          504
        ]
      },
      "bestPractices": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting",
        "Log errors with sufficient detail for debugging",
        "Set appropriate timeouts for requests",
        "Handle network errors gracefully"
      ]
    },
    "validation": {
      "authentication": {
        "required": true,
        "type": "Bearer token",
        "header": "Authorization: Bearer YOUR_API_KEY",
        "validation": "Token must be valid and not expired"
      },
      "contentType": {
        "required": false,
        "value": "application/json",
        "header": "Content-Type: application/json"
      },
      "rateLimits": {
        "requestsPerMinute": 100,
        "burstLimit": 10,
        "enforcement": "HTTP 429 status code when exceeded"
      },
      "dataValidation": [
        "All required fields must be present and non-empty",
        "Field types must match schema definitions",
        "String fields must not exceed maximum length",
        "Numeric fields must be within specified ranges",
        "Array fields must contain valid items",
        "Date fields must be in correct format (YYYY-MM-DD HH:MM:SS)"
      ],
      "commonValidationErrors": [
        "Missing required field 'name'",
        "Invalid email format",
        "String too long (max 255 characters)",
        "Invalid date format",
        "Negative value not allowed",
        "Invalid enum value"
      ]
    },
    "aiNotes": {
      "keyPoints": [
        "This is a GET endpoint for v1 operations",
        "Requires Bearer token authentication in Authorization header",
        "Returns JSON responses with consistent error format",
        "Supports standard HTTP status codes for success/error indication",
        "Rate limited to 100 requests per minute"
      ],
      "integrationTips": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting (429 errors)",
        "Cache responses when appropriate to reduce API calls",
        "Set reasonable timeouts (30 seconds recommended)",
        "Log requests and responses for debugging"
      ],
      "commonPatterns": [
        "Check authentication before making requests",
        "Validate required parameters are present",
        "Handle pagination for list endpoints",
        "Implement retry logic for transient errors",
        "Parse error responses for detailed error information"
      ],
      "aiSpecificGuidance": [
        "For AI agents: Always check response status before processing data",
        "Implement fallback strategies for API failures",
        "Use structured error handling to provide meaningful feedback",
        "Consider caching strategies for frequently accessed data",
        "Implement request queuing for high-volume operations"
      ]
    },
    "workflow": "Analysis step: Retrieve performance data for optimization decisions",
    "realWorldUsage": [
      "Daily performance monitoring and optimization",
      "Generating weekly performance reports for clients",
      "Identifying top-performing campaigns for scaling"
    ]
  },
  "GET /public/api/v1/stats/landing": {
    "method": "GET",
    "path": "/public/api/v1/stats/landing",
    "category": "stats",
    "summary": "Get Landing Stats",
    "description": "Get Landing Stats. Retrieves information from the stats resource with optional filtering and pagination.",
    "parameters": [
      {
        "name": "datePreset",
        "in": "query",
        "required": true,
        "type": "string",
        "description": "Date range preset for filtering data",
        "enum": [
          "today",
          "yesterday",
          "last_2_days",
          "last_3_days",
          "last_7_days",
          "last_14_days",
          "last_30_days",
          "this_week",
          "last_week",
          "this_month",
          "last_month",
          "this_year",
          "last_year",
          "all_time",
          "custom_time"
        ],
        "example": "last_7_days",
        "validation": "Must be one of the predefined values"
      },
      {
        "name": "timezone",
        "in": "query",
        "required": true,
        "type": "string",
        "description": "Timezone for date calculations (always use UTC for consistency)",
        "example": "UTC",
        "default": "UTC",
        "validation": "Must be a valid timezone identifier"
      },
      {
        "name": "limit",
        "in": "query",
        "required": false,
        "type": "integer",
        "description": "Maximum number of records to return",
        "example": 100,
        "default": 100,
        "minimum": 1,
        "maximum": 1000,
        "validation": "Must be between 1 and 1000"
      },
      {
        "name": "offset",
        "in": "query",
        "required": false,
        "type": "integer",
        "description": "Number of records to skip for pagination",
        "example": 0,
        "default": 0,
        "minimum": 0,
        "validation": "Must be non-negative"
      },
      {
        "name": "dateFrom",
        "in": "query",
        "required": false,
        "type": "string",
        "description": "Start date for custom time range (required when datePreset=custom_time)",
        "example": "2023-01-01 00:00:00",
        "format": "YYYY-MM-DD HH:MM:SS",
        "validation": "Required when datePreset is 'custom_time'"
      },
      {
        "name": "dateTo",
        "in": "query",
        "required": false,
        "type": "string",
        "description": "End date for custom time range (required when datePreset=custom_time)",
        "example": "2023-01-31 23:59:59",
        "format": "YYYY-MM-DD HH:MM:SS",
        "validation": "Required when datePreset is 'custom_time', must be after dateFrom"
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success - Statistics data returned",
        "example": {
          "data": [
            {
              "id": 51,
              "name": "Campaign Name",
              "clicks": 1000,
              "conversions": 50,
              "cost": 500.0,
              "revenue": 750.0,
              "profit": 250.0,
              "roi": 50.0,
              "ctr": 5.0,
              "cr": 5.0,
              "ecpm": 25.0,
              "customMetrics": {
                "eCPT": 30.35,
                "eCPB": 108.39,
                "trials": 50,
                "buyouts": 14
              }
            }
          ],
          "totals": {
            "clicks": 1000,
            "conversions": 50,
            "cost": 500.0,
            "revenue": 750.0
          }
        }
      },
      "400": {
        "description": "Bad Request - Invalid input data or missing required fields",
        "example": {
          "error": "Validation failed",
          "message": "Field 'name' is required",
          "details": {
            "field": "name",
            "code": "required",
            "value": null
          }
        }
      },
      "401": {
        "description": "Unauthorized - Invalid or missing API key",
        "example": {
          "error": "Unauthorized",
          "message": "Invalid API key or token expired"
        }
      },
      "403": {
        "description": "Forbidden - Access denied or insufficient permissions",
        "example": {
          "error": "Access denied",
          "message": "Insufficient permissions to access this resource"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Not found",
          "message": "Resource with ID 123 not found"
        }
      },
      "429": {
        "description": "Too Many Requests - Rate limit exceeded",
        "example": {
          "error": "Rate limit exceeded",
          "message": "Too many requests, please try again later",
          "retryAfter": 60
        }
      },
      "500": {
        "description": "Internal Server Error - Server-side error",
        "example": {
          "error": "Internal server error",
          "message": "Something went wrong on our end"
        }
      }
    },
    "examples": {
      "python": "import requests\nimport os\nimport time\nfrom typing import Optional, Dict, Any\n\nclass BinomAPIClient:\n    def __init__(self, api_key: str):\n        self.api_key = api_key\n        self.base_url = \"https://pierdun.com/public/api/v1\"\n        self.headers = {\n            \"Authorization\": f\"Bearer {api_key}\",\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json\"\n        }\n    \n    def make_request(self, method: str, endpoint: str, data: Optional[Dict] = None, params: Optional[Dict] = None) -> Dict[Any, Any]:\n        \"\"\"Make API request with error handling and retries\"\"\"\n        url = f\"{self.base_url}{endpoint}\"\n        \n        for attempt in range(3):\n            try:\n                response = requests.request(\n                    method=method,\n                    url=url,\n                    headers=self.headers,\n                    json=data,\n                    params=params,\n                    timeout=30\n                )\n                \n                if response.status_code == 429:\n                    # Rate limit - wait and retry\n                    time.sleep(2 ** attempt)\n                    continue\n                \n                if response.status_code in [200, 201]:\n                    return response.json()\n                else:\n                    raise Exception(f\"API Error {response.status_code}: {response.text}\")\n                    \n            except requests.exceptions.RequestException as e:\n                if attempt == 2:  # Last attempt\n                    raise Exception(f\"Request failed: {str(e)}\")\n                time.sleep(1)\n        \n        raise Exception(\"Max retries exceeded\")\n\n# Usage example\nclient = BinomAPIClient(os.getenv('binomPublic'))\n\ntry:\n    result = client.make_request(\n        method=\"GET\",\n        endpoint=\"/public/api/v1/stats/landing\",\n        params={\n            \"datePreset\": \"last_7_days\",\n            \"timezone\": \"UTC\",\n            \"limit\": 100,\n            \"offset\": 0\n        }\n    )\n    \n    print(\"✅ Success:\", result)\n    \nexcept Exception as e:\n    print(f\"❌ Error: {e}\")",
      "curl": "# Basic request\ncurl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\" \\\n  \"https://pierdun.com/public/api/v1/stats/landing\"\n\n# With query parameters\ncurl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Accept: application/json\" \\\n  \"https://pierdun.com/public/api/v1/stats/landing?datePreset=last_7_days&timezone=UTC&limit=100&offset=0\"",
      "javascript": "class BinomAPI {\n  constructor(apiKey) {\n    this.apiKey = apiKey;\n    this.baseURL = 'https://pierdun.com/public/api/v1';\n    this.headers = {\n      'Authorization': `Bearer ${apiKey}`,\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    };\n  }\n\n  async makeRequest(method, endpoint, data = null, params = null) {\n    const url = new URL(`${this.baseURL}${endpoint}`);\n    \n    if (params) {\n      Object.keys(params).forEach(key => \n        url.searchParams.append(key, params[key])\n      );\n    }\n\n    const config = {\n      method: method,\n      headers: this.headers\n    };\n\n    if (data) {\n      config.body = JSON.stringify(data);\n    }\n\n    try {\n      const response = await fetch(url.toString(), config);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${await response.text()}`);\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('API Error:', error);\n      throw error;\n    }\n  }\n}\n\n// Usage\nconst api = new BinomAPI(process.env.BINOM_API_KEY);\n\ntry {\n  const result = await api.makeRequest(\n    'GET',\n    '/public/api/v1/stats/landing',\n    null,\n    {\n      datePreset: 'last_7_days',\n      timezone: 'UTC',\n      limit: 100,\n      offset: 0\n    }\n  );\n  \n  console.log('✅ Success:', result);\n} catch (error) {\n  console.error('❌ Error:', error.message);\n}"
    },
    "errorHandling": {
      "commonErrors": [
        {
          "code": 400,
          "cause": "Invalid input data, missing required fields, or malformed JSON",
          "solution": "Validate all input data before sending. Check required fields and data types.",
          "example": "Missing 'name' field in request body"
        },
        {
          "code": 401,
          "cause": "Invalid, expired, or missing API key",
          "solution": "Verify API key is correct and has not expired. Check Authorization header format.",
          "example": "Authorization header: 'Bearer YOUR_API_KEY'"
        },
        {
          "code": 403,
          "cause": "Insufficient permissions or access denied",
          "solution": "Ensure API key has required permissions for this operation.",
          "example": "User lacks permission to modify campaigns"
        },
        {
          "code": 404,
          "cause": "Resource not found or invalid ID",
          "solution": "Verify resource ID exists and is accessible to your account.",
          "example": "Campaign with ID 123 does not exist"
        },
        {
          "code": 429,
          "cause": "Rate limit exceeded",
          "solution": "Implement exponential backoff and retry logic. Reduce request frequency.",
          "example": "Wait 60 seconds before retrying"
        },
        {
          "code": 500,
          "cause": "Internal server error",
          "solution": "Retry request after a delay. Contact support if error persists.",
          "example": "Temporary server issue"
        }
      ],
      "retryStrategy": {
        "maxRetries": 3,
        "backoffMultiplier": 2,
        "initialDelay": 1,
        "retryableStatusCodes": [
          429,
          500,
          502,
          503,
          504
        ]
      },
      "bestPractices": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting",
        "Log errors with sufficient detail for debugging",
        "Set appropriate timeouts for requests",
        "Handle network errors gracefully"
      ]
    },
    "validation": {
      "authentication": {
        "required": true,
        "type": "Bearer token",
        "header": "Authorization: Bearer YOUR_API_KEY",
        "validation": "Token must be valid and not expired"
      },
      "contentType": {
        "required": false,
        "value": "application/json",
        "header": "Content-Type: application/json"
      },
      "rateLimits": {
        "requestsPerMinute": 100,
        "burstLimit": 10,
        "enforcement": "HTTP 429 status code when exceeded"
      },
      "dataValidation": [
        "All required fields must be present and non-empty",
        "Field types must match schema definitions",
        "String fields must not exceed maximum length",
        "Numeric fields must be within specified ranges",
        "Array fields must contain valid items",
        "Date fields must be in correct format (YYYY-MM-DD HH:MM:SS)"
      ],
      "commonValidationErrors": [
        "Missing required field 'name'",
        "Invalid email format",
        "String too long (max 255 characters)",
        "Invalid date format",
        "Negative value not allowed",
        "Invalid enum value"
      ]
    },
    "aiNotes": {
      "keyPoints": [
        "This is a GET endpoint for v1 operations",
        "Requires Bearer token authentication in Authorization header",
        "Returns JSON responses with consistent error format",
        "Supports standard HTTP status codes for success/error indication",
        "Rate limited to 100 requests per minute"
      ],
      "integrationTips": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting (429 errors)",
        "Cache responses when appropriate to reduce API calls",
        "Set reasonable timeouts (30 seconds recommended)",
        "Log requests and responses for debugging"
      ],
      "commonPatterns": [
        "Check authentication before making requests",
        "Validate required parameters are present",
        "Handle pagination for list endpoints",
        "Implement retry logic for transient errors",
        "Parse error responses for detailed error information"
      ],
      "aiSpecificGuidance": [
        "For AI agents: Always check response status before processing data",
        "Implement fallback strategies for API failures",
        "Use structured error handling to provide meaningful feedback",
        "Consider caching strategies for frequently accessed data",
        "Implement request queuing for high-volume operations"
      ]
    },
    "workflow": "Analysis step: Retrieve performance data for optimization decisions",
    "realWorldUsage": [
      "Managing stats resources in affiliate marketing workflows",
      "Automating stats operations for campaign optimization",
      "Integrating stats data with external reporting systems"
    ]
  },
  "GET /public/api/v1/stats/rotation": {
    "method": "GET",
    "path": "/public/api/v1/stats/rotation",
    "category": "stats",
    "summary": "Get Rotation Stats",
    "description": "Get Rotation Stats. Retrieves information from the stats resource with optional filtering and pagination.",
    "parameters": [
      {
        "name": "datePreset",
        "in": "query",
        "required": true,
        "type": "string",
        "description": "Date range preset for filtering data",
        "enum": [
          "today",
          "yesterday",
          "last_2_days",
          "last_3_days",
          "last_7_days",
          "last_14_days",
          "last_30_days",
          "this_week",
          "last_week",
          "this_month",
          "last_month",
          "this_year",
          "last_year",
          "all_time",
          "custom_time"
        ],
        "example": "last_7_days",
        "validation": "Must be one of the predefined values"
      },
      {
        "name": "timezone",
        "in": "query",
        "required": true,
        "type": "string",
        "description": "Timezone for date calculations (always use UTC for consistency)",
        "example": "UTC",
        "default": "UTC",
        "validation": "Must be a valid timezone identifier"
      },
      {
        "name": "limit",
        "in": "query",
        "required": false,
        "type": "integer",
        "description": "Maximum number of records to return",
        "example": 100,
        "default": 100,
        "minimum": 1,
        "maximum": 1000,
        "validation": "Must be between 1 and 1000"
      },
      {
        "name": "offset",
        "in": "query",
        "required": false,
        "type": "integer",
        "description": "Number of records to skip for pagination",
        "example": 0,
        "default": 0,
        "minimum": 0,
        "validation": "Must be non-negative"
      },
      {
        "name": "dateFrom",
        "in": "query",
        "required": false,
        "type": "string",
        "description": "Start date for custom time range (required when datePreset=custom_time)",
        "example": "2023-01-01 00:00:00",
        "format": "YYYY-MM-DD HH:MM:SS",
        "validation": "Required when datePreset is 'custom_time'"
      },
      {
        "name": "dateTo",
        "in": "query",
        "required": false,
        "type": "string",
        "description": "End date for custom time range (required when datePreset=custom_time)",
        "example": "2023-01-31 23:59:59",
        "format": "YYYY-MM-DD HH:MM:SS",
        "validation": "Required when datePreset is 'custom_time', must be after dateFrom"
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success - Statistics data returned",
        "example": {
          "data": [
            {
              "id": 51,
              "name": "Campaign Name",
              "clicks": 1000,
              "conversions": 50,
              "cost": 500.0,
              "revenue": 750.0,
              "profit": 250.0,
              "roi": 50.0,
              "ctr": 5.0,
              "cr": 5.0,
              "ecpm": 25.0,
              "customMetrics": {
                "eCPT": 30.35,
                "eCPB": 108.39,
                "trials": 50,
                "buyouts": 14
              }
            }
          ],
          "totals": {
            "clicks": 1000,
            "conversions": 50,
            "cost": 500.0,
            "revenue": 750.0
          }
        }
      },
      "400": {
        "description": "Bad Request - Invalid input data or missing required fields",
        "example": {
          "error": "Validation failed",
          "message": "Field 'name' is required",
          "details": {
            "field": "name",
            "code": "required",
            "value": null
          }
        }
      },
      "401": {
        "description": "Unauthorized - Invalid or missing API key",
        "example": {
          "error": "Unauthorized",
          "message": "Invalid API key or token expired"
        }
      },
      "403": {
        "description": "Forbidden - Access denied or insufficient permissions",
        "example": {
          "error": "Access denied",
          "message": "Insufficient permissions to access this resource"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Not found",
          "message": "Resource with ID 123 not found"
        }
      },
      "429": {
        "description": "Too Many Requests - Rate limit exceeded",
        "example": {
          "error": "Rate limit exceeded",
          "message": "Too many requests, please try again later",
          "retryAfter": 60
        }
      },
      "500": {
        "description": "Internal Server Error - Server-side error",
        "example": {
          "error": "Internal server error",
          "message": "Something went wrong on our end"
        }
      }
    },
    "examples": {
      "python": "import requests\nimport os\nimport time\nfrom typing import Optional, Dict, Any\n\nclass BinomAPIClient:\n    def __init__(self, api_key: str):\n        self.api_key = api_key\n        self.base_url = \"https://pierdun.com/public/api/v1\"\n        self.headers = {\n            \"Authorization\": f\"Bearer {api_key}\",\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json\"\n        }\n    \n    def make_request(self, method: str, endpoint: str, data: Optional[Dict] = None, params: Optional[Dict] = None) -> Dict[Any, Any]:\n        \"\"\"Make API request with error handling and retries\"\"\"\n        url = f\"{self.base_url}{endpoint}\"\n        \n        for attempt in range(3):\n            try:\n                response = requests.request(\n                    method=method,\n                    url=url,\n                    headers=self.headers,\n                    json=data,\n                    params=params,\n                    timeout=30\n                )\n                \n                if response.status_code == 429:\n                    # Rate limit - wait and retry\n                    time.sleep(2 ** attempt)\n                    continue\n                \n                if response.status_code in [200, 201]:\n                    return response.json()\n                else:\n                    raise Exception(f\"API Error {response.status_code}: {response.text}\")\n                    \n            except requests.exceptions.RequestException as e:\n                if attempt == 2:  # Last attempt\n                    raise Exception(f\"Request failed: {str(e)}\")\n                time.sleep(1)\n        \n        raise Exception(\"Max retries exceeded\")\n\n# Usage example\nclient = BinomAPIClient(os.getenv('binomPublic'))\n\ntry:\n    result = client.make_request(\n        method=\"GET\",\n        endpoint=\"/public/api/v1/stats/rotation\",\n        params={\n            \"datePreset\": \"last_7_days\",\n            \"timezone\": \"UTC\",\n            \"limit\": 100,\n            \"offset\": 0\n        }\n    )\n    \n    print(\"✅ Success:\", result)\n    \nexcept Exception as e:\n    print(f\"❌ Error: {e}\")",
      "curl": "# Basic request\ncurl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\" \\\n  \"https://pierdun.com/public/api/v1/stats/rotation\"\n\n# With query parameters\ncurl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Accept: application/json\" \\\n  \"https://pierdun.com/public/api/v1/stats/rotation?datePreset=last_7_days&timezone=UTC&limit=100&offset=0\"",
      "javascript": "class BinomAPI {\n  constructor(apiKey) {\n    this.apiKey = apiKey;\n    this.baseURL = 'https://pierdun.com/public/api/v1';\n    this.headers = {\n      'Authorization': `Bearer ${apiKey}`,\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    };\n  }\n\n  async makeRequest(method, endpoint, data = null, params = null) {\n    const url = new URL(`${this.baseURL}${endpoint}`);\n    \n    if (params) {\n      Object.keys(params).forEach(key => \n        url.searchParams.append(key, params[key])\n      );\n    }\n\n    const config = {\n      method: method,\n      headers: this.headers\n    };\n\n    if (data) {\n      config.body = JSON.stringify(data);\n    }\n\n    try {\n      const response = await fetch(url.toString(), config);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${await response.text()}`);\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('API Error:', error);\n      throw error;\n    }\n  }\n}\n\n// Usage\nconst api = new BinomAPI(process.env.BINOM_API_KEY);\n\ntry {\n  const result = await api.makeRequest(\n    'GET',\n    '/public/api/v1/stats/rotation',\n    null,\n    {\n      datePreset: 'last_7_days',\n      timezone: 'UTC',\n      limit: 100,\n      offset: 0\n    }\n  );\n  \n  console.log('✅ Success:', result);\n} catch (error) {\n  console.error('❌ Error:', error.message);\n}"
    },
    "errorHandling": {
      "commonErrors": [
        {
          "code": 400,
          "cause": "Invalid input data, missing required fields, or malformed JSON",
          "solution": "Validate all input data before sending. Check required fields and data types.",
          "example": "Missing 'name' field in request body"
        },
        {
          "code": 401,
          "cause": "Invalid, expired, or missing API key",
          "solution": "Verify API key is correct and has not expired. Check Authorization header format.",
          "example": "Authorization header: 'Bearer YOUR_API_KEY'"
        },
        {
          "code": 403,
          "cause": "Insufficient permissions or access denied",
          "solution": "Ensure API key has required permissions for this operation.",
          "example": "User lacks permission to modify campaigns"
        },
        {
          "code": 404,
          "cause": "Resource not found or invalid ID",
          "solution": "Verify resource ID exists and is accessible to your account.",
          "example": "Campaign with ID 123 does not exist"
        },
        {
          "code": 429,
          "cause": "Rate limit exceeded",
          "solution": "Implement exponential backoff and retry logic. Reduce request frequency.",
          "example": "Wait 60 seconds before retrying"
        },
        {
          "code": 500,
          "cause": "Internal server error",
          "solution": "Retry request after a delay. Contact support if error persists.",
          "example": "Temporary server issue"
        }
      ],
      "retryStrategy": {
        "maxRetries": 3,
        "backoffMultiplier": 2,
        "initialDelay": 1,
        "retryableStatusCodes": [
          429,
          500,
          502,
          503,
          504
        ]
      },
      "bestPractices": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting",
        "Log errors with sufficient detail for debugging",
        "Set appropriate timeouts for requests",
        "Handle network errors gracefully"
      ]
    },
    "validation": {
      "authentication": {
        "required": true,
        "type": "Bearer token",
        "header": "Authorization: Bearer YOUR_API_KEY",
        "validation": "Token must be valid and not expired"
      },
      "contentType": {
        "required": false,
        "value": "application/json",
        "header": "Content-Type: application/json"
      },
      "rateLimits": {
        "requestsPerMinute": 100,
        "burstLimit": 10,
        "enforcement": "HTTP 429 status code when exceeded"
      },
      "dataValidation": [
        "All required fields must be present and non-empty",
        "Field types must match schema definitions",
        "String fields must not exceed maximum length",
        "Numeric fields must be within specified ranges",
        "Array fields must contain valid items",
        "Date fields must be in correct format (YYYY-MM-DD HH:MM:SS)"
      ],
      "commonValidationErrors": [
        "Missing required field 'name'",
        "Invalid email format",
        "String too long (max 255 characters)",
        "Invalid date format",
        "Negative value not allowed",
        "Invalid enum value"
      ]
    },
    "aiNotes": {
      "keyPoints": [
        "This is a GET endpoint for v1 operations",
        "Requires Bearer token authentication in Authorization header",
        "Returns JSON responses with consistent error format",
        "Supports standard HTTP status codes for success/error indication",
        "Rate limited to 100 requests per minute"
      ],
      "integrationTips": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting (429 errors)",
        "Cache responses when appropriate to reduce API calls",
        "Set reasonable timeouts (30 seconds recommended)",
        "Log requests and responses for debugging"
      ],
      "commonPatterns": [
        "Check authentication before making requests",
        "Validate required parameters are present",
        "Handle pagination for list endpoints",
        "Implement retry logic for transient errors",
        "Parse error responses for detailed error information"
      ],
      "aiSpecificGuidance": [
        "For AI agents: Always check response status before processing data",
        "Implement fallback strategies for API failures",
        "Use structured error handling to provide meaningful feedback",
        "Consider caching strategies for frequently accessed data",
        "Implement request queuing for high-volume operations"
      ]
    },
    "workflow": "Analysis step: Retrieve performance data for optimization decisions",
    "realWorldUsage": [
      "Managing stats resources in affiliate marketing workflows",
      "Automating stats operations for campaign optimization",
      "Integrating stats data with external reporting systems"
    ]
  },
  "GET /public/api/v1/stats/affiliate_network": {
    "method": "GET",
    "path": "/public/api/v1/stats/affiliate_network",
    "category": "stats",
    "summary": "Get Affiliate Network Stats",
    "description": "Get Affiliate Network Stats. Retrieves information from the affiliate_network resource with optional filtering and pagination.",
    "parameters": [
      {
        "name": "datePreset",
        "in": "query",
        "required": true,
        "type": "string",
        "description": "Date range preset for filtering data",
        "enum": [
          "today",
          "yesterday",
          "last_2_days",
          "last_3_days",
          "last_7_days",
          "last_14_days",
          "last_30_days",
          "this_week",
          "last_week",
          "this_month",
          "last_month",
          "this_year",
          "last_year",
          "all_time",
          "custom_time"
        ],
        "example": "last_7_days",
        "validation": "Must be one of the predefined values"
      },
      {
        "name": "timezone",
        "in": "query",
        "required": true,
        "type": "string",
        "description": "Timezone for date calculations (always use UTC for consistency)",
        "example": "UTC",
        "default": "UTC",
        "validation": "Must be a valid timezone identifier"
      },
      {
        "name": "limit",
        "in": "query",
        "required": false,
        "type": "integer",
        "description": "Maximum number of records to return",
        "example": 100,
        "default": 100,
        "minimum": 1,
        "maximum": 1000,
        "validation": "Must be between 1 and 1000"
      },
      {
        "name": "offset",
        "in": "query",
        "required": false,
        "type": "integer",
        "description": "Number of records to skip for pagination",
        "example": 0,
        "default": 0,
        "minimum": 0,
        "validation": "Must be non-negative"
      },
      {
        "name": "dateFrom",
        "in": "query",
        "required": false,
        "type": "string",
        "description": "Start date for custom time range (required when datePreset=custom_time)",
        "example": "2023-01-01 00:00:00",
        "format": "YYYY-MM-DD HH:MM:SS",
        "validation": "Required when datePreset is 'custom_time'"
      },
      {
        "name": "dateTo",
        "in": "query",
        "required": false,
        "type": "string",
        "description": "End date for custom time range (required when datePreset=custom_time)",
        "example": "2023-01-31 23:59:59",
        "format": "YYYY-MM-DD HH:MM:SS",
        "validation": "Required when datePreset is 'custom_time', must be after dateFrom"
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success - Statistics data returned",
        "example": {
          "data": [
            {
              "id": 51,
              "name": "Campaign Name",
              "clicks": 1000,
              "conversions": 50,
              "cost": 500.0,
              "revenue": 750.0,
              "profit": 250.0,
              "roi": 50.0,
              "ctr": 5.0,
              "cr": 5.0,
              "ecpm": 25.0,
              "customMetrics": {
                "eCPT": 30.35,
                "eCPB": 108.39,
                "trials": 50,
                "buyouts": 14
              }
            }
          ],
          "totals": {
            "clicks": 1000,
            "conversions": 50,
            "cost": 500.0,
            "revenue": 750.0
          }
        }
      },
      "400": {
        "description": "Bad Request - Invalid input data or missing required fields",
        "example": {
          "error": "Validation failed",
          "message": "Field 'name' is required",
          "details": {
            "field": "name",
            "code": "required",
            "value": null
          }
        }
      },
      "401": {
        "description": "Unauthorized - Invalid or missing API key",
        "example": {
          "error": "Unauthorized",
          "message": "Invalid API key or token expired"
        }
      },
      "403": {
        "description": "Forbidden - Access denied or insufficient permissions",
        "example": {
          "error": "Access denied",
          "message": "Insufficient permissions to access this resource"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Not found",
          "message": "Resource with ID 123 not found"
        }
      },
      "429": {
        "description": "Too Many Requests - Rate limit exceeded",
        "example": {
          "error": "Rate limit exceeded",
          "message": "Too many requests, please try again later",
          "retryAfter": 60
        }
      },
      "500": {
        "description": "Internal Server Error - Server-side error",
        "example": {
          "error": "Internal server error",
          "message": "Something went wrong on our end"
        }
      }
    },
    "examples": {
      "python": "import requests\nimport os\nimport time\nfrom typing import Optional, Dict, Any\n\nclass BinomAPIClient:\n    def __init__(self, api_key: str):\n        self.api_key = api_key\n        self.base_url = \"https://pierdun.com/public/api/v1\"\n        self.headers = {\n            \"Authorization\": f\"Bearer {api_key}\",\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json\"\n        }\n    \n    def make_request(self, method: str, endpoint: str, data: Optional[Dict] = None, params: Optional[Dict] = None) -> Dict[Any, Any]:\n        \"\"\"Make API request with error handling and retries\"\"\"\n        url = f\"{self.base_url}{endpoint}\"\n        \n        for attempt in range(3):\n            try:\n                response = requests.request(\n                    method=method,\n                    url=url,\n                    headers=self.headers,\n                    json=data,\n                    params=params,\n                    timeout=30\n                )\n                \n                if response.status_code == 429:\n                    # Rate limit - wait and retry\n                    time.sleep(2 ** attempt)\n                    continue\n                \n                if response.status_code in [200, 201]:\n                    return response.json()\n                else:\n                    raise Exception(f\"API Error {response.status_code}: {response.text}\")\n                    \n            except requests.exceptions.RequestException as e:\n                if attempt == 2:  # Last attempt\n                    raise Exception(f\"Request failed: {str(e)}\")\n                time.sleep(1)\n        \n        raise Exception(\"Max retries exceeded\")\n\n# Usage example\nclient = BinomAPIClient(os.getenv('binomPublic'))\n\ntry:\n    result = client.make_request(\n        method=\"GET\",\n        endpoint=\"/public/api/v1/stats/affiliate_network\",\n        params={\n            \"datePreset\": \"last_7_days\",\n            \"timezone\": \"UTC\",\n            \"limit\": 100,\n            \"offset\": 0\n        }\n    )\n    \n    print(\"✅ Success:\", result)\n    \nexcept Exception as e:\n    print(f\"❌ Error: {e}\")",
      "curl": "# Basic request\ncurl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\" \\\n  \"https://pierdun.com/public/api/v1/stats/affiliate_network\"\n\n# With query parameters\ncurl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Accept: application/json\" \\\n  \"https://pierdun.com/public/api/v1/stats/affiliate_network?datePreset=last_7_days&timezone=UTC&limit=100&offset=0\"",
      "javascript": "class BinomAPI {\n  constructor(apiKey) {\n    this.apiKey = apiKey;\n    this.baseURL = 'https://pierdun.com/public/api/v1';\n    this.headers = {\n      'Authorization': `Bearer ${apiKey}`,\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    };\n  }\n\n  async makeRequest(method, endpoint, data = null, params = null) {\n    const url = new URL(`${this.baseURL}${endpoint}`);\n    \n    if (params) {\n      Object.keys(params).forEach(key => \n        url.searchParams.append(key, params[key])\n      );\n    }\n\n    const config = {\n      method: method,\n      headers: this.headers\n    };\n\n    if (data) {\n      config.body = JSON.stringify(data);\n    }\n\n    try {\n      const response = await fetch(url.toString(), config);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${await response.text()}`);\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('API Error:', error);\n      throw error;\n    }\n  }\n}\n\n// Usage\nconst api = new BinomAPI(process.env.BINOM_API_KEY);\n\ntry {\n  const result = await api.makeRequest(\n    'GET',\n    '/public/api/v1/stats/affiliate_network',\n    null,\n    {\n      datePreset: 'last_7_days',\n      timezone: 'UTC',\n      limit: 100,\n      offset: 0\n    }\n  );\n  \n  console.log('✅ Success:', result);\n} catch (error) {\n  console.error('❌ Error:', error.message);\n}"
    },
    "errorHandling": {
      "commonErrors": [
        {
          "code": 400,
          "cause": "Invalid input data, missing required fields, or malformed JSON",
          "solution": "Validate all input data before sending. Check required fields and data types.",
          "example": "Missing 'name' field in request body"
        },
        {
          "code": 401,
          "cause": "Invalid, expired, or missing API key",
          "solution": "Verify API key is correct and has not expired. Check Authorization header format.",
          "example": "Authorization header: 'Bearer YOUR_API_KEY'"
        },
        {
          "code": 403,
          "cause": "Insufficient permissions or access denied",
          "solution": "Ensure API key has required permissions for this operation.",
          "example": "User lacks permission to modify campaigns"
        },
        {
          "code": 404,
          "cause": "Resource not found or invalid ID",
          "solution": "Verify resource ID exists and is accessible to your account.",
          "example": "Campaign with ID 123 does not exist"
        },
        {
          "code": 429,
          "cause": "Rate limit exceeded",
          "solution": "Implement exponential backoff and retry logic. Reduce request frequency.",
          "example": "Wait 60 seconds before retrying"
        },
        {
          "code": 500,
          "cause": "Internal server error",
          "solution": "Retry request after a delay. Contact support if error persists.",
          "example": "Temporary server issue"
        }
      ],
      "retryStrategy": {
        "maxRetries": 3,
        "backoffMultiplier": 2,
        "initialDelay": 1,
        "retryableStatusCodes": [
          429,
          500,
          502,
          503,
          504
        ]
      },
      "bestPractices": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting",
        "Log errors with sufficient detail for debugging",
        "Set appropriate timeouts for requests",
        "Handle network errors gracefully"
      ]
    },
    "validation": {
      "authentication": {
        "required": true,
        "type": "Bearer token",
        "header": "Authorization: Bearer YOUR_API_KEY",
        "validation": "Token must be valid and not expired"
      },
      "contentType": {
        "required": false,
        "value": "application/json",
        "header": "Content-Type: application/json"
      },
      "rateLimits": {
        "requestsPerMinute": 100,
        "burstLimit": 10,
        "enforcement": "HTTP 429 status code when exceeded"
      },
      "dataValidation": [
        "All required fields must be present and non-empty",
        "Field types must match schema definitions",
        "String fields must not exceed maximum length",
        "Numeric fields must be within specified ranges",
        "Array fields must contain valid items",
        "Date fields must be in correct format (YYYY-MM-DD HH:MM:SS)"
      ],
      "commonValidationErrors": [
        "Missing required field 'name'",
        "Invalid email format",
        "String too long (max 255 characters)",
        "Invalid date format",
        "Negative value not allowed",
        "Invalid enum value"
      ]
    },
    "aiNotes": {
      "keyPoints": [
        "This is a GET endpoint for v1 operations",
        "Requires Bearer token authentication in Authorization header",
        "Returns JSON responses with consistent error format",
        "Supports standard HTTP status codes for success/error indication",
        "Rate limited to 100 requests per minute"
      ],
      "integrationTips": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting (429 errors)",
        "Cache responses when appropriate to reduce API calls",
        "Set reasonable timeouts (30 seconds recommended)",
        "Log requests and responses for debugging"
      ],
      "commonPatterns": [
        "Check authentication before making requests",
        "Validate required parameters are present",
        "Handle pagination for list endpoints",
        "Implement retry logic for transient errors",
        "Parse error responses for detailed error information"
      ],
      "aiSpecificGuidance": [
        "For AI agents: Always check response status before processing data",
        "Implement fallback strategies for API failures",
        "Use structured error handling to provide meaningful feedback",
        "Consider caching strategies for frequently accessed data",
        "Implement request queuing for high-volume operations"
      ]
    },
    "workflow": "Analysis step: Retrieve performance data for optimization decisions",
    "realWorldUsage": [
      "Managing stats resources in affiliate marketing workflows",
      "Automating stats operations for campaign optimization",
      "Integrating stats data with external reporting systems"
    ]
  },
  "GET /public/api/v1/info/offer": {
    "method": "GET",
    "path": "/public/api/v1/info/offer",
    "category": "info",
    "summary": "Get Offer Info",
    "description": "Get Offer Info. Retrieves information from the info resource with optional filtering and pagination.",
    "parameters": [
      {
        "name": "datePreset",
        "in": "query",
        "required": true,
        "type": "string",
        "description": "Date range preset for filtering data",
        "enum": [
          "today",
          "yesterday",
          "last_2_days",
          "last_3_days",
          "last_7_days",
          "last_14_days",
          "last_30_days",
          "this_week",
          "last_week",
          "this_month",
          "last_month",
          "this_year",
          "last_year",
          "all_time",
          "custom_time"
        ],
        "example": "last_7_days",
        "validation": "Must be one of the predefined values"
      },
      {
        "name": "timezone",
        "in": "query",
        "required": true,
        "type": "string",
        "description": "Timezone for date calculations (always use UTC for consistency)",
        "example": "UTC",
        "default": "UTC",
        "validation": "Must be a valid timezone identifier"
      },
      {
        "name": "limit",
        "in": "query",
        "required": false,
        "type": "integer",
        "description": "Maximum number of records to return",
        "example": 100,
        "default": 100,
        "minimum": 1,
        "maximum": 1000,
        "validation": "Must be between 1 and 1000"
      },
      {
        "name": "offset",
        "in": "query",
        "required": false,
        "type": "integer",
        "description": "Number of records to skip for pagination",
        "example": 0,
        "default": 0,
        "minimum": 0,
        "validation": "Must be non-negative"
      },
      {
        "name": "dateFrom",
        "in": "query",
        "required": false,
        "type": "string",
        "description": "Start date for custom time range (required when datePreset=custom_time)",
        "example": "2023-01-01 00:00:00",
        "format": "YYYY-MM-DD HH:MM:SS",
        "validation": "Required when datePreset is 'custom_time'"
      },
      {
        "name": "dateTo",
        "in": "query",
        "required": false,
        "type": "string",
        "description": "End date for custom time range (required when datePreset=custom_time)",
        "example": "2023-01-31 23:59:59",
        "format": "YYYY-MM-DD HH:MM:SS",
        "validation": "Required when datePreset is 'custom_time', must be after dateFrom"
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success - List of resources returned",
        "example": {
          "data": [
            {
              "id": 1,
              "name": "Resource 1"
            },
            {
              "id": 2,
              "name": "Resource 2"
            }
          ],
          "pagination": {
            "total": 150,
            "limit": 100,
            "offset": 0,
            "hasMore": true
          }
        }
      },
      "400": {
        "description": "Bad Request - Invalid input data or missing required fields",
        "example": {
          "error": "Validation failed",
          "message": "Field 'name' is required",
          "details": {
            "field": "name",
            "code": "required",
            "value": null
          }
        }
      },
      "401": {
        "description": "Unauthorized - Invalid or missing API key",
        "example": {
          "error": "Unauthorized",
          "message": "Invalid API key or token expired"
        }
      },
      "403": {
        "description": "Forbidden - Access denied or insufficient permissions",
        "example": {
          "error": "Access denied",
          "message": "Insufficient permissions to access this resource"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Not found",
          "message": "Resource with ID 123 not found"
        }
      },
      "429": {
        "description": "Too Many Requests - Rate limit exceeded",
        "example": {
          "error": "Rate limit exceeded",
          "message": "Too many requests, please try again later",
          "retryAfter": 60
        }
      },
      "500": {
        "description": "Internal Server Error - Server-side error",
        "example": {
          "error": "Internal server error",
          "message": "Something went wrong on our end"
        }
      }
    },
    "examples": {
      "python": "import requests\nimport os\nimport time\nfrom typing import Optional, Dict, Any\n\nclass BinomAPIClient:\n    def __init__(self, api_key: str):\n        self.api_key = api_key\n        self.base_url = \"https://pierdun.com/public/api/v1\"\n        self.headers = {\n            \"Authorization\": f\"Bearer {api_key}\",\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json\"\n        }\n    \n    def make_request(self, method: str, endpoint: str, data: Optional[Dict] = None, params: Optional[Dict] = None) -> Dict[Any, Any]:\n        \"\"\"Make API request with error handling and retries\"\"\"\n        url = f\"{self.base_url}{endpoint}\"\n        \n        for attempt in range(3):\n            try:\n                response = requests.request(\n                    method=method,\n                    url=url,\n                    headers=self.headers,\n                    json=data,\n                    params=params,\n                    timeout=30\n                )\n                \n                if response.status_code == 429:\n                    # Rate limit - wait and retry\n                    time.sleep(2 ** attempt)\n                    continue\n                \n                if response.status_code in [200, 201]:\n                    return response.json()\n                else:\n                    raise Exception(f\"API Error {response.status_code}: {response.text}\")\n                    \n            except requests.exceptions.RequestException as e:\n                if attempt == 2:  # Last attempt\n                    raise Exception(f\"Request failed: {str(e)}\")\n                time.sleep(1)\n        \n        raise Exception(\"Max retries exceeded\")\n\n# Usage example\nclient = BinomAPIClient(os.getenv('binomPublic'))\n\ntry:\n    result = client.make_request(\n        method=\"GET\",\n        endpoint=\"/public/api/v1/info/offer\",\n        params={\n            \"datePreset\": \"last_7_days\",\n            \"timezone\": \"UTC\",\n            \"limit\": 100,\n            \"offset\": 0\n        }\n    )\n    \n    print(\"✅ Success:\", result)\n    \nexcept Exception as e:\n    print(f\"❌ Error: {e}\")",
      "curl": "# Basic request\ncurl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\" \\\n  \"https://pierdun.com/public/api/v1/info/offer\"\n\n# With query parameters\ncurl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Accept: application/json\" \\\n  \"https://pierdun.com/public/api/v1/info/offer?datePreset=last_7_days&timezone=UTC&limit=100&offset=0\"",
      "javascript": "class BinomAPI {\n  constructor(apiKey) {\n    this.apiKey = apiKey;\n    this.baseURL = 'https://pierdun.com/public/api/v1';\n    this.headers = {\n      'Authorization': `Bearer ${apiKey}`,\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    };\n  }\n\n  async makeRequest(method, endpoint, data = null, params = null) {\n    const url = new URL(`${this.baseURL}${endpoint}`);\n    \n    if (params) {\n      Object.keys(params).forEach(key => \n        url.searchParams.append(key, params[key])\n      );\n    }\n\n    const config = {\n      method: method,\n      headers: this.headers\n    };\n\n    if (data) {\n      config.body = JSON.stringify(data);\n    }\n\n    try {\n      const response = await fetch(url.toString(), config);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${await response.text()}`);\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('API Error:', error);\n      throw error;\n    }\n  }\n}\n\n// Usage\nconst api = new BinomAPI(process.env.BINOM_API_KEY);\n\ntry {\n  const result = await api.makeRequest(\n    'GET',\n    '/public/api/v1/info/offer',\n    null,\n    {\n      datePreset: 'last_7_days',\n      timezone: 'UTC',\n      limit: 100,\n      offset: 0\n    }\n  );\n  \n  console.log('✅ Success:', result);\n} catch (error) {\n  console.error('❌ Error:', error.message);\n}"
    },
    "errorHandling": {
      "commonErrors": [
        {
          "code": 400,
          "cause": "Invalid input data, missing required fields, or malformed JSON",
          "solution": "Validate all input data before sending. Check required fields and data types.",
          "example": "Missing 'name' field in request body"
        },
        {
          "code": 401,
          "cause": "Invalid, expired, or missing API key",
          "solution": "Verify API key is correct and has not expired. Check Authorization header format.",
          "example": "Authorization header: 'Bearer YOUR_API_KEY'"
        },
        {
          "code": 403,
          "cause": "Insufficient permissions or access denied",
          "solution": "Ensure API key has required permissions for this operation.",
          "example": "User lacks permission to modify campaigns"
        },
        {
          "code": 404,
          "cause": "Resource not found or invalid ID",
          "solution": "Verify resource ID exists and is accessible to your account.",
          "example": "Campaign with ID 123 does not exist"
        },
        {
          "code": 429,
          "cause": "Rate limit exceeded",
          "solution": "Implement exponential backoff and retry logic. Reduce request frequency.",
          "example": "Wait 60 seconds before retrying"
        },
        {
          "code": 500,
          "cause": "Internal server error",
          "solution": "Retry request after a delay. Contact support if error persists.",
          "example": "Temporary server issue"
        }
      ],
      "retryStrategy": {
        "maxRetries": 3,
        "backoffMultiplier": 2,
        "initialDelay": 1,
        "retryableStatusCodes": [
          429,
          500,
          502,
          503,
          504
        ]
      },
      "bestPractices": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting",
        "Log errors with sufficient detail for debugging",
        "Set appropriate timeouts for requests",
        "Handle network errors gracefully"
      ]
    },
    "validation": {
      "authentication": {
        "required": true,
        "type": "Bearer token",
        "header": "Authorization: Bearer YOUR_API_KEY",
        "validation": "Token must be valid and not expired"
      },
      "contentType": {
        "required": false,
        "value": "application/json",
        "header": "Content-Type: application/json"
      },
      "rateLimits": {
        "requestsPerMinute": 100,
        "burstLimit": 10,
        "enforcement": "HTTP 429 status code when exceeded"
      },
      "dataValidation": [
        "All required fields must be present and non-empty",
        "Field types must match schema definitions",
        "String fields must not exceed maximum length",
        "Numeric fields must be within specified ranges",
        "Array fields must contain valid items",
        "Date fields must be in correct format (YYYY-MM-DD HH:MM:SS)"
      ],
      "commonValidationErrors": [
        "Missing required field 'name'",
        "Invalid email format",
        "String too long (max 255 characters)",
        "Invalid date format",
        "Negative value not allowed",
        "Invalid enum value"
      ]
    },
    "aiNotes": {
      "keyPoints": [
        "This is a GET endpoint for v1 operations",
        "Requires Bearer token authentication in Authorization header",
        "Returns JSON responses with consistent error format",
        "Supports standard HTTP status codes for success/error indication",
        "Rate limited to 100 requests per minute"
      ],
      "integrationTips": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting (429 errors)",
        "Cache responses when appropriate to reduce API calls",
        "Set reasonable timeouts (30 seconds recommended)",
        "Log requests and responses for debugging"
      ],
      "commonPatterns": [
        "Check authentication before making requests",
        "Validate required parameters are present",
        "Handle pagination for list endpoints",
        "Implement retry logic for transient errors",
        "Parse error responses for detailed error information"
      ],
      "aiSpecificGuidance": [
        "For AI agents: Always check response status before processing data",
        "Implement fallback strategies for API failures",
        "Use structured error handling to provide meaningful feedback",
        "Consider caching strategies for frequently accessed data",
        "Implement request queuing for high-volume operations"
      ]
    },
    "workflow": "Discovery step: Get available resources for campaign setup",
    "realWorldUsage": [
      "Managing info resources in affiliate marketing workflows",
      "Automating info operations for campaign optimization",
      "Integrating info data with external reporting systems"
    ]
  },
  "GET /public/api/v1/info/traffic_source": {
    "method": "GET",
    "path": "/public/api/v1/info/traffic_source",
    "category": "info",
    "summary": "Get Traffic Source Info",
    "description": "Get Traffic Source Info. Retrieves information from the info resource with optional filtering and pagination.",
    "parameters": [
      {
        "name": "datePreset",
        "in": "query",
        "required": true,
        "type": "string",
        "description": "Date range preset for filtering data",
        "enum": [
          "today",
          "yesterday",
          "last_2_days",
          "last_3_days",
          "last_7_days",
          "last_14_days",
          "last_30_days",
          "this_week",
          "last_week",
          "this_month",
          "last_month",
          "this_year",
          "last_year",
          "all_time",
          "custom_time"
        ],
        "example": "last_7_days",
        "validation": "Must be one of the predefined values"
      },
      {
        "name": "timezone",
        "in": "query",
        "required": true,
        "type": "string",
        "description": "Timezone for date calculations (always use UTC for consistency)",
        "example": "UTC",
        "default": "UTC",
        "validation": "Must be a valid timezone identifier"
      },
      {
        "name": "limit",
        "in": "query",
        "required": false,
        "type": "integer",
        "description": "Maximum number of records to return",
        "example": 100,
        "default": 100,
        "minimum": 1,
        "maximum": 1000,
        "validation": "Must be between 1 and 1000"
      },
      {
        "name": "offset",
        "in": "query",
        "required": false,
        "type": "integer",
        "description": "Number of records to skip for pagination",
        "example": 0,
        "default": 0,
        "minimum": 0,
        "validation": "Must be non-negative"
      },
      {
        "name": "dateFrom",
        "in": "query",
        "required": false,
        "type": "string",
        "description": "Start date for custom time range (required when datePreset=custom_time)",
        "example": "2023-01-01 00:00:00",
        "format": "YYYY-MM-DD HH:MM:SS",
        "validation": "Required when datePreset is 'custom_time'"
      },
      {
        "name": "dateTo",
        "in": "query",
        "required": false,
        "type": "string",
        "description": "End date for custom time range (required when datePreset=custom_time)",
        "example": "2023-01-31 23:59:59",
        "format": "YYYY-MM-DD HH:MM:SS",
        "validation": "Required when datePreset is 'custom_time', must be after dateFrom"
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success - List of resources returned",
        "example": {
          "data": [
            {
              "id": 1,
              "name": "Resource 1"
            },
            {
              "id": 2,
              "name": "Resource 2"
            }
          ],
          "pagination": {
            "total": 150,
            "limit": 100,
            "offset": 0,
            "hasMore": true
          }
        }
      },
      "400": {
        "description": "Bad Request - Invalid input data or missing required fields",
        "example": {
          "error": "Validation failed",
          "message": "Field 'name' is required",
          "details": {
            "field": "name",
            "code": "required",
            "value": null
          }
        }
      },
      "401": {
        "description": "Unauthorized - Invalid or missing API key",
        "example": {
          "error": "Unauthorized",
          "message": "Invalid API key or token expired"
        }
      },
      "403": {
        "description": "Forbidden - Access denied or insufficient permissions",
        "example": {
          "error": "Access denied",
          "message": "Insufficient permissions to access this resource"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Not found",
          "message": "Resource with ID 123 not found"
        }
      },
      "429": {
        "description": "Too Many Requests - Rate limit exceeded",
        "example": {
          "error": "Rate limit exceeded",
          "message": "Too many requests, please try again later",
          "retryAfter": 60
        }
      },
      "500": {
        "description": "Internal Server Error - Server-side error",
        "example": {
          "error": "Internal server error",
          "message": "Something went wrong on our end"
        }
      }
    },
    "examples": {
      "python": "import requests\nimport os\nimport time\nfrom typing import Optional, Dict, Any\n\nclass BinomAPIClient:\n    def __init__(self, api_key: str):\n        self.api_key = api_key\n        self.base_url = \"https://pierdun.com/public/api/v1\"\n        self.headers = {\n            \"Authorization\": f\"Bearer {api_key}\",\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json\"\n        }\n    \n    def make_request(self, method: str, endpoint: str, data: Optional[Dict] = None, params: Optional[Dict] = None) -> Dict[Any, Any]:\n        \"\"\"Make API request with error handling and retries\"\"\"\n        url = f\"{self.base_url}{endpoint}\"\n        \n        for attempt in range(3):\n            try:\n                response = requests.request(\n                    method=method,\n                    url=url,\n                    headers=self.headers,\n                    json=data,\n                    params=params,\n                    timeout=30\n                )\n                \n                if response.status_code == 429:\n                    # Rate limit - wait and retry\n                    time.sleep(2 ** attempt)\n                    continue\n                \n                if response.status_code in [200, 201]:\n                    return response.json()\n                else:\n                    raise Exception(f\"API Error {response.status_code}: {response.text}\")\n                    \n            except requests.exceptions.RequestException as e:\n                if attempt == 2:  # Last attempt\n                    raise Exception(f\"Request failed: {str(e)}\")\n                time.sleep(1)\n        \n        raise Exception(\"Max retries exceeded\")\n\n# Usage example\nclient = BinomAPIClient(os.getenv('binomPublic'))\n\ntry:\n    result = client.make_request(\n        method=\"GET\",\n        endpoint=\"/public/api/v1/info/traffic_source\",\n        params={\n            \"datePreset\": \"last_7_days\",\n            \"timezone\": \"UTC\",\n            \"limit\": 100,\n            \"offset\": 0\n        }\n    )\n    \n    print(\"✅ Success:\", result)\n    \nexcept Exception as e:\n    print(f\"❌ Error: {e}\")",
      "curl": "# Basic request\ncurl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\" \\\n  \"https://pierdun.com/public/api/v1/info/traffic_source\"\n\n# With query parameters\ncurl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Accept: application/json\" \\\n  \"https://pierdun.com/public/api/v1/info/traffic_source?datePreset=last_7_days&timezone=UTC&limit=100&offset=0\"",
      "javascript": "class BinomAPI {\n  constructor(apiKey) {\n    this.apiKey = apiKey;\n    this.baseURL = 'https://pierdun.com/public/api/v1';\n    this.headers = {\n      'Authorization': `Bearer ${apiKey}`,\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    };\n  }\n\n  async makeRequest(method, endpoint, data = null, params = null) {\n    const url = new URL(`${this.baseURL}${endpoint}`);\n    \n    if (params) {\n      Object.keys(params).forEach(key => \n        url.searchParams.append(key, params[key])\n      );\n    }\n\n    const config = {\n      method: method,\n      headers: this.headers\n    };\n\n    if (data) {\n      config.body = JSON.stringify(data);\n    }\n\n    try {\n      const response = await fetch(url.toString(), config);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${await response.text()}`);\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('API Error:', error);\n      throw error;\n    }\n  }\n}\n\n// Usage\nconst api = new BinomAPI(process.env.BINOM_API_KEY);\n\ntry {\n  const result = await api.makeRequest(\n    'GET',\n    '/public/api/v1/info/traffic_source',\n    null,\n    {\n      datePreset: 'last_7_days',\n      timezone: 'UTC',\n      limit: 100,\n      offset: 0\n    }\n  );\n  \n  console.log('✅ Success:', result);\n} catch (error) {\n  console.error('❌ Error:', error.message);\n}"
    },
    "errorHandling": {
      "commonErrors": [
        {
          "code": 400,
          "cause": "Invalid input data, missing required fields, or malformed JSON",
          "solution": "Validate all input data before sending. Check required fields and data types.",
          "example": "Missing 'name' field in request body"
        },
        {
          "code": 401,
          "cause": "Invalid, expired, or missing API key",
          "solution": "Verify API key is correct and has not expired. Check Authorization header format.",
          "example": "Authorization header: 'Bearer YOUR_API_KEY'"
        },
        {
          "code": 403,
          "cause": "Insufficient permissions or access denied",
          "solution": "Ensure API key has required permissions for this operation.",
          "example": "User lacks permission to modify campaigns"
        },
        {
          "code": 404,
          "cause": "Resource not found or invalid ID",
          "solution": "Verify resource ID exists and is accessible to your account.",
          "example": "Campaign with ID 123 does not exist"
        },
        {
          "code": 429,
          "cause": "Rate limit exceeded",
          "solution": "Implement exponential backoff and retry logic. Reduce request frequency.",
          "example": "Wait 60 seconds before retrying"
        },
        {
          "code": 500,
          "cause": "Internal server error",
          "solution": "Retry request after a delay. Contact support if error persists.",
          "example": "Temporary server issue"
        }
      ],
      "retryStrategy": {
        "maxRetries": 3,
        "backoffMultiplier": 2,
        "initialDelay": 1,
        "retryableStatusCodes": [
          429,
          500,
          502,
          503,
          504
        ]
      },
      "bestPractices": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting",
        "Log errors with sufficient detail for debugging",
        "Set appropriate timeouts for requests",
        "Handle network errors gracefully"
      ]
    },
    "validation": {
      "authentication": {
        "required": true,
        "type": "Bearer token",
        "header": "Authorization: Bearer YOUR_API_KEY",
        "validation": "Token must be valid and not expired"
      },
      "contentType": {
        "required": false,
        "value": "application/json",
        "header": "Content-Type: application/json"
      },
      "rateLimits": {
        "requestsPerMinute": 100,
        "burstLimit": 10,
        "enforcement": "HTTP 429 status code when exceeded"
      },
      "dataValidation": [
        "All required fields must be present and non-empty",
        "Field types must match schema definitions",
        "String fields must not exceed maximum length",
        "Numeric fields must be within specified ranges",
        "Array fields must contain valid items",
        "Date fields must be in correct format (YYYY-MM-DD HH:MM:SS)"
      ],
      "commonValidationErrors": [
        "Missing required field 'name'",
        "Invalid email format",
        "String too long (max 255 characters)",
        "Invalid date format",
        "Negative value not allowed",
        "Invalid enum value"
      ]
    },
    "aiNotes": {
      "keyPoints": [
        "This is a GET endpoint for v1 operations",
        "Requires Bearer token authentication in Authorization header",
        "Returns JSON responses with consistent error format",
        "Supports standard HTTP status codes for success/error indication",
        "Rate limited to 100 requests per minute"
      ],
      "integrationTips": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting (429 errors)",
        "Cache responses when appropriate to reduce API calls",
        "Set reasonable timeouts (30 seconds recommended)",
        "Log requests and responses for debugging"
      ],
      "commonPatterns": [
        "Check authentication before making requests",
        "Validate required parameters are present",
        "Handle pagination for list endpoints",
        "Implement retry logic for transient errors",
        "Parse error responses for detailed error information"
      ],
      "aiSpecificGuidance": [
        "For AI agents: Always check response status before processing data",
        "Implement fallback strategies for API failures",
        "Use structured error handling to provide meaningful feedback",
        "Consider caching strategies for frequently accessed data",
        "Implement request queuing for high-volume operations"
      ]
    },
    "workflow": "Discovery step: Get available resources for campaign setup",
    "realWorldUsage": [
      "Managing info resources in affiliate marketing workflows",
      "Automating info operations for campaign optimization",
      "Integrating info data with external reporting systems"
    ]
  },
  "GET /public/api/v1/info/campaign": {
    "method": "GET",
    "path": "/public/api/v1/info/campaign",
    "category": "info",
    "summary": "Get Campaign Info",
    "description": "Get Campaign Info. Retrieves information from the campaign resource with optional filtering and pagination.",
    "parameters": [
      {
        "name": "datePreset",
        "in": "query",
        "required": true,
        "type": "string",
        "description": "Date range preset for filtering data",
        "enum": [
          "today",
          "yesterday",
          "last_2_days",
          "last_3_days",
          "last_7_days",
          "last_14_days",
          "last_30_days",
          "this_week",
          "last_week",
          "this_month",
          "last_month",
          "this_year",
          "last_year",
          "all_time",
          "custom_time"
        ],
        "example": "last_7_days",
        "validation": "Must be one of the predefined values"
      },
      {
        "name": "timezone",
        "in": "query",
        "required": true,
        "type": "string",
        "description": "Timezone for date calculations (always use UTC for consistency)",
        "example": "UTC",
        "default": "UTC",
        "validation": "Must be a valid timezone identifier"
      },
      {
        "name": "limit",
        "in": "query",
        "required": false,
        "type": "integer",
        "description": "Maximum number of records to return",
        "example": 100,
        "default": 100,
        "minimum": 1,
        "maximum": 1000,
        "validation": "Must be between 1 and 1000"
      },
      {
        "name": "offset",
        "in": "query",
        "required": false,
        "type": "integer",
        "description": "Number of records to skip for pagination",
        "example": 0,
        "default": 0,
        "minimum": 0,
        "validation": "Must be non-negative"
      },
      {
        "name": "dateFrom",
        "in": "query",
        "required": false,
        "type": "string",
        "description": "Start date for custom time range (required when datePreset=custom_time)",
        "example": "2023-01-01 00:00:00",
        "format": "YYYY-MM-DD HH:MM:SS",
        "validation": "Required when datePreset is 'custom_time'"
      },
      {
        "name": "dateTo",
        "in": "query",
        "required": false,
        "type": "string",
        "description": "End date for custom time range (required when datePreset=custom_time)",
        "example": "2023-01-31 23:59:59",
        "format": "YYYY-MM-DD HH:MM:SS",
        "validation": "Required when datePreset is 'custom_time', must be after dateFrom"
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success - List of resources returned",
        "example": {
          "data": [
            {
              "id": 1,
              "name": "Resource 1"
            },
            {
              "id": 2,
              "name": "Resource 2"
            }
          ],
          "pagination": {
            "total": 150,
            "limit": 100,
            "offset": 0,
            "hasMore": true
          }
        }
      },
      "400": {
        "description": "Bad Request - Invalid input data or missing required fields",
        "example": {
          "error": "Validation failed",
          "message": "Field 'name' is required",
          "details": {
            "field": "name",
            "code": "required",
            "value": null
          }
        }
      },
      "401": {
        "description": "Unauthorized - Invalid or missing API key",
        "example": {
          "error": "Unauthorized",
          "message": "Invalid API key or token expired"
        }
      },
      "403": {
        "description": "Forbidden - Access denied or insufficient permissions",
        "example": {
          "error": "Access denied",
          "message": "Insufficient permissions to access this resource"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Not found",
          "message": "Resource with ID 123 not found"
        }
      },
      "429": {
        "description": "Too Many Requests - Rate limit exceeded",
        "example": {
          "error": "Rate limit exceeded",
          "message": "Too many requests, please try again later",
          "retryAfter": 60
        }
      },
      "500": {
        "description": "Internal Server Error - Server-side error",
        "example": {
          "error": "Internal server error",
          "message": "Something went wrong on our end"
        }
      }
    },
    "examples": {
      "python": "import requests\nimport os\nimport time\nfrom typing import Optional, Dict, Any\n\nclass BinomAPIClient:\n    def __init__(self, api_key: str):\n        self.api_key = api_key\n        self.base_url = \"https://pierdun.com/public/api/v1\"\n        self.headers = {\n            \"Authorization\": f\"Bearer {api_key}\",\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json\"\n        }\n    \n    def make_request(self, method: str, endpoint: str, data: Optional[Dict] = None, params: Optional[Dict] = None) -> Dict[Any, Any]:\n        \"\"\"Make API request with error handling and retries\"\"\"\n        url = f\"{self.base_url}{endpoint}\"\n        \n        for attempt in range(3):\n            try:\n                response = requests.request(\n                    method=method,\n                    url=url,\n                    headers=self.headers,\n                    json=data,\n                    params=params,\n                    timeout=30\n                )\n                \n                if response.status_code == 429:\n                    # Rate limit - wait and retry\n                    time.sleep(2 ** attempt)\n                    continue\n                \n                if response.status_code in [200, 201]:\n                    return response.json()\n                else:\n                    raise Exception(f\"API Error {response.status_code}: {response.text}\")\n                    \n            except requests.exceptions.RequestException as e:\n                if attempt == 2:  # Last attempt\n                    raise Exception(f\"Request failed: {str(e)}\")\n                time.sleep(1)\n        \n        raise Exception(\"Max retries exceeded\")\n\n# Usage example\nclient = BinomAPIClient(os.getenv('binomPublic'))\n\ntry:\n    result = client.make_request(\n        method=\"GET\",\n        endpoint=\"/public/api/v1/info/campaign\",\n        params={\n            \"datePreset\": \"last_7_days\",\n            \"timezone\": \"UTC\",\n            \"limit\": 100,\n            \"offset\": 0\n        }\n    )\n    \n    print(\"✅ Success:\", result)\n    \nexcept Exception as e:\n    print(f\"❌ Error: {e}\")",
      "curl": "# Basic request\ncurl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\" \\\n  \"https://pierdun.com/public/api/v1/info/campaign\"\n\n# With query parameters\ncurl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Accept: application/json\" \\\n  \"https://pierdun.com/public/api/v1/info/campaign?datePreset=last_7_days&timezone=UTC&limit=100&offset=0\"",
      "javascript": "class BinomAPI {\n  constructor(apiKey) {\n    this.apiKey = apiKey;\n    this.baseURL = 'https://pierdun.com/public/api/v1';\n    this.headers = {\n      'Authorization': `Bearer ${apiKey}`,\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    };\n  }\n\n  async makeRequest(method, endpoint, data = null, params = null) {\n    const url = new URL(`${this.baseURL}${endpoint}`);\n    \n    if (params) {\n      Object.keys(params).forEach(key => \n        url.searchParams.append(key, params[key])\n      );\n    }\n\n    const config = {\n      method: method,\n      headers: this.headers\n    };\n\n    if (data) {\n      config.body = JSON.stringify(data);\n    }\n\n    try {\n      const response = await fetch(url.toString(), config);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${await response.text()}`);\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('API Error:', error);\n      throw error;\n    }\n  }\n}\n\n// Usage\nconst api = new BinomAPI(process.env.BINOM_API_KEY);\n\ntry {\n  const result = await api.makeRequest(\n    'GET',\n    '/public/api/v1/info/campaign',\n    null,\n    {\n      datePreset: 'last_7_days',\n      timezone: 'UTC',\n      limit: 100,\n      offset: 0\n    }\n  );\n  \n  console.log('✅ Success:', result);\n} catch (error) {\n  console.error('❌ Error:', error.message);\n}"
    },
    "errorHandling": {
      "commonErrors": [
        {
          "code": 400,
          "cause": "Invalid input data, missing required fields, or malformed JSON",
          "solution": "Validate all input data before sending. Check required fields and data types.",
          "example": "Missing 'name' field in request body"
        },
        {
          "code": 401,
          "cause": "Invalid, expired, or missing API key",
          "solution": "Verify API key is correct and has not expired. Check Authorization header format.",
          "example": "Authorization header: 'Bearer YOUR_API_KEY'"
        },
        {
          "code": 403,
          "cause": "Insufficient permissions or access denied",
          "solution": "Ensure API key has required permissions for this operation.",
          "example": "User lacks permission to modify campaigns"
        },
        {
          "code": 404,
          "cause": "Resource not found or invalid ID",
          "solution": "Verify resource ID exists and is accessible to your account.",
          "example": "Campaign with ID 123 does not exist"
        },
        {
          "code": 429,
          "cause": "Rate limit exceeded",
          "solution": "Implement exponential backoff and retry logic. Reduce request frequency.",
          "example": "Wait 60 seconds before retrying"
        },
        {
          "code": 500,
          "cause": "Internal server error",
          "solution": "Retry request after a delay. Contact support if error persists.",
          "example": "Temporary server issue"
        }
      ],
      "retryStrategy": {
        "maxRetries": 3,
        "backoffMultiplier": 2,
        "initialDelay": 1,
        "retryableStatusCodes": [
          429,
          500,
          502,
          503,
          504
        ]
      },
      "bestPractices": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting",
        "Log errors with sufficient detail for debugging",
        "Set appropriate timeouts for requests",
        "Handle network errors gracefully"
      ]
    },
    "validation": {
      "authentication": {
        "required": true,
        "type": "Bearer token",
        "header": "Authorization: Bearer YOUR_API_KEY",
        "validation": "Token must be valid and not expired"
      },
      "contentType": {
        "required": false,
        "value": "application/json",
        "header": "Content-Type: application/json"
      },
      "rateLimits": {
        "requestsPerMinute": 100,
        "burstLimit": 10,
        "enforcement": "HTTP 429 status code when exceeded"
      },
      "dataValidation": [
        "All required fields must be present and non-empty",
        "Field types must match schema definitions",
        "String fields must not exceed maximum length",
        "Numeric fields must be within specified ranges",
        "Array fields must contain valid items",
        "Date fields must be in correct format (YYYY-MM-DD HH:MM:SS)"
      ],
      "commonValidationErrors": [
        "Missing required field 'name'",
        "Invalid email format",
        "String too long (max 255 characters)",
        "Invalid date format",
        "Negative value not allowed",
        "Invalid enum value"
      ]
    },
    "aiNotes": {
      "keyPoints": [
        "This is a GET endpoint for v1 operations",
        "Requires Bearer token authentication in Authorization header",
        "Returns JSON responses with consistent error format",
        "Supports standard HTTP status codes for success/error indication",
        "Rate limited to 100 requests per minute"
      ],
      "integrationTips": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting (429 errors)",
        "Cache responses when appropriate to reduce API calls",
        "Set reasonable timeouts (30 seconds recommended)",
        "Log requests and responses for debugging"
      ],
      "commonPatterns": [
        "Check authentication before making requests",
        "Validate required parameters are present",
        "Handle pagination for list endpoints",
        "Implement retry logic for transient errors",
        "Parse error responses for detailed error information"
      ],
      "aiSpecificGuidance": [
        "For AI agents: Always check response status before processing data",
        "Implement fallback strategies for API failures",
        "Use structured error handling to provide meaningful feedback",
        "Consider caching strategies for frequently accessed data",
        "Implement request queuing for high-volume operations"
      ]
    },
    "workflow": "Discovery step: Get available resources for campaign setup",
    "realWorldUsage": [
      "Managing info resources in affiliate marketing workflows",
      "Automating info operations for campaign optimization",
      "Integrating info data with external reporting systems"
    ]
  },
  "GET /public/api/v1/info/landing": {
    "method": "GET",
    "path": "/public/api/v1/info/landing",
    "category": "info",
    "summary": "Get Landing Info",
    "description": "Get Landing Info. Retrieves information from the info resource with optional filtering and pagination.",
    "parameters": [
      {
        "name": "datePreset",
        "in": "query",
        "required": true,
        "type": "string",
        "description": "Date range preset for filtering data",
        "enum": [
          "today",
          "yesterday",
          "last_2_days",
          "last_3_days",
          "last_7_days",
          "last_14_days",
          "last_30_days",
          "this_week",
          "last_week",
          "this_month",
          "last_month",
          "this_year",
          "last_year",
          "all_time",
          "custom_time"
        ],
        "example": "last_7_days",
        "validation": "Must be one of the predefined values"
      },
      {
        "name": "timezone",
        "in": "query",
        "required": true,
        "type": "string",
        "description": "Timezone for date calculations (always use UTC for consistency)",
        "example": "UTC",
        "default": "UTC",
        "validation": "Must be a valid timezone identifier"
      },
      {
        "name": "limit",
        "in": "query",
        "required": false,
        "type": "integer",
        "description": "Maximum number of records to return",
        "example": 100,
        "default": 100,
        "minimum": 1,
        "maximum": 1000,
        "validation": "Must be between 1 and 1000"
      },
      {
        "name": "offset",
        "in": "query",
        "required": false,
        "type": "integer",
        "description": "Number of records to skip for pagination",
        "example": 0,
        "default": 0,
        "minimum": 0,
        "validation": "Must be non-negative"
      },
      {
        "name": "dateFrom",
        "in": "query",
        "required": false,
        "type": "string",
        "description": "Start date for custom time range (required when datePreset=custom_time)",
        "example": "2023-01-01 00:00:00",
        "format": "YYYY-MM-DD HH:MM:SS",
        "validation": "Required when datePreset is 'custom_time'"
      },
      {
        "name": "dateTo",
        "in": "query",
        "required": false,
        "type": "string",
        "description": "End date for custom time range (required when datePreset=custom_time)",
        "example": "2023-01-31 23:59:59",
        "format": "YYYY-MM-DD HH:MM:SS",
        "validation": "Required when datePreset is 'custom_time', must be after dateFrom"
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success - List of resources returned",
        "example": {
          "data": [
            {
              "id": 1,
              "name": "Resource 1"
            },
            {
              "id": 2,
              "name": "Resource 2"
            }
          ],
          "pagination": {
            "total": 150,
            "limit": 100,
            "offset": 0,
            "hasMore": true
          }
        }
      },
      "400": {
        "description": "Bad Request - Invalid input data or missing required fields",
        "example": {
          "error": "Validation failed",
          "message": "Field 'name' is required",
          "details": {
            "field": "name",
            "code": "required",
            "value": null
          }
        }
      },
      "401": {
        "description": "Unauthorized - Invalid or missing API key",
        "example": {
          "error": "Unauthorized",
          "message": "Invalid API key or token expired"
        }
      },
      "403": {
        "description": "Forbidden - Access denied or insufficient permissions",
        "example": {
          "error": "Access denied",
          "message": "Insufficient permissions to access this resource"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Not found",
          "message": "Resource with ID 123 not found"
        }
      },
      "429": {
        "description": "Too Many Requests - Rate limit exceeded",
        "example": {
          "error": "Rate limit exceeded",
          "message": "Too many requests, please try again later",
          "retryAfter": 60
        }
      },
      "500": {
        "description": "Internal Server Error - Server-side error",
        "example": {
          "error": "Internal server error",
          "message": "Something went wrong on our end"
        }
      }
    },
    "examples": {
      "python": "import requests\nimport os\nimport time\nfrom typing import Optional, Dict, Any\n\nclass BinomAPIClient:\n    def __init__(self, api_key: str):\n        self.api_key = api_key\n        self.base_url = \"https://pierdun.com/public/api/v1\"\n        self.headers = {\n            \"Authorization\": f\"Bearer {api_key}\",\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json\"\n        }\n    \n    def make_request(self, method: str, endpoint: str, data: Optional[Dict] = None, params: Optional[Dict] = None) -> Dict[Any, Any]:\n        \"\"\"Make API request with error handling and retries\"\"\"\n        url = f\"{self.base_url}{endpoint}\"\n        \n        for attempt in range(3):\n            try:\n                response = requests.request(\n                    method=method,\n                    url=url,\n                    headers=self.headers,\n                    json=data,\n                    params=params,\n                    timeout=30\n                )\n                \n                if response.status_code == 429:\n                    # Rate limit - wait and retry\n                    time.sleep(2 ** attempt)\n                    continue\n                \n                if response.status_code in [200, 201]:\n                    return response.json()\n                else:\n                    raise Exception(f\"API Error {response.status_code}: {response.text}\")\n                    \n            except requests.exceptions.RequestException as e:\n                if attempt == 2:  # Last attempt\n                    raise Exception(f\"Request failed: {str(e)}\")\n                time.sleep(1)\n        \n        raise Exception(\"Max retries exceeded\")\n\n# Usage example\nclient = BinomAPIClient(os.getenv('binomPublic'))\n\ntry:\n    result = client.make_request(\n        method=\"GET\",\n        endpoint=\"/public/api/v1/info/landing\",\n        params={\n            \"datePreset\": \"last_7_days\",\n            \"timezone\": \"UTC\",\n            \"limit\": 100,\n            \"offset\": 0\n        }\n    )\n    \n    print(\"✅ Success:\", result)\n    \nexcept Exception as e:\n    print(f\"❌ Error: {e}\")",
      "curl": "# Basic request\ncurl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\" \\\n  \"https://pierdun.com/public/api/v1/info/landing\"\n\n# With query parameters\ncurl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Accept: application/json\" \\\n  \"https://pierdun.com/public/api/v1/info/landing?datePreset=last_7_days&timezone=UTC&limit=100&offset=0\"",
      "javascript": "class BinomAPI {\n  constructor(apiKey) {\n    this.apiKey = apiKey;\n    this.baseURL = 'https://pierdun.com/public/api/v1';\n    this.headers = {\n      'Authorization': `Bearer ${apiKey}`,\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    };\n  }\n\n  async makeRequest(method, endpoint, data = null, params = null) {\n    const url = new URL(`${this.baseURL}${endpoint}`);\n    \n    if (params) {\n      Object.keys(params).forEach(key => \n        url.searchParams.append(key, params[key])\n      );\n    }\n\n    const config = {\n      method: method,\n      headers: this.headers\n    };\n\n    if (data) {\n      config.body = JSON.stringify(data);\n    }\n\n    try {\n      const response = await fetch(url.toString(), config);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${await response.text()}`);\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('API Error:', error);\n      throw error;\n    }\n  }\n}\n\n// Usage\nconst api = new BinomAPI(process.env.BINOM_API_KEY);\n\ntry {\n  const result = await api.makeRequest(\n    'GET',\n    '/public/api/v1/info/landing',\n    null,\n    {\n      datePreset: 'last_7_days',\n      timezone: 'UTC',\n      limit: 100,\n      offset: 0\n    }\n  );\n  \n  console.log('✅ Success:', result);\n} catch (error) {\n  console.error('❌ Error:', error.message);\n}"
    },
    "errorHandling": {
      "commonErrors": [
        {
          "code": 400,
          "cause": "Invalid input data, missing required fields, or malformed JSON",
          "solution": "Validate all input data before sending. Check required fields and data types.",
          "example": "Missing 'name' field in request body"
        },
        {
          "code": 401,
          "cause": "Invalid, expired, or missing API key",
          "solution": "Verify API key is correct and has not expired. Check Authorization header format.",
          "example": "Authorization header: 'Bearer YOUR_API_KEY'"
        },
        {
          "code": 403,
          "cause": "Insufficient permissions or access denied",
          "solution": "Ensure API key has required permissions for this operation.",
          "example": "User lacks permission to modify campaigns"
        },
        {
          "code": 404,
          "cause": "Resource not found or invalid ID",
          "solution": "Verify resource ID exists and is accessible to your account.",
          "example": "Campaign with ID 123 does not exist"
        },
        {
          "code": 429,
          "cause": "Rate limit exceeded",
          "solution": "Implement exponential backoff and retry logic. Reduce request frequency.",
          "example": "Wait 60 seconds before retrying"
        },
        {
          "code": 500,
          "cause": "Internal server error",
          "solution": "Retry request after a delay. Contact support if error persists.",
          "example": "Temporary server issue"
        }
      ],
      "retryStrategy": {
        "maxRetries": 3,
        "backoffMultiplier": 2,
        "initialDelay": 1,
        "retryableStatusCodes": [
          429,
          500,
          502,
          503,
          504
        ]
      },
      "bestPractices": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting",
        "Log errors with sufficient detail for debugging",
        "Set appropriate timeouts for requests",
        "Handle network errors gracefully"
      ]
    },
    "validation": {
      "authentication": {
        "required": true,
        "type": "Bearer token",
        "header": "Authorization: Bearer YOUR_API_KEY",
        "validation": "Token must be valid and not expired"
      },
      "contentType": {
        "required": false,
        "value": "application/json",
        "header": "Content-Type: application/json"
      },
      "rateLimits": {
        "requestsPerMinute": 100,
        "burstLimit": 10,
        "enforcement": "HTTP 429 status code when exceeded"
      },
      "dataValidation": [
        "All required fields must be present and non-empty",
        "Field types must match schema definitions",
        "String fields must not exceed maximum length",
        "Numeric fields must be within specified ranges",
        "Array fields must contain valid items",
        "Date fields must be in correct format (YYYY-MM-DD HH:MM:SS)"
      ],
      "commonValidationErrors": [
        "Missing required field 'name'",
        "Invalid email format",
        "String too long (max 255 characters)",
        "Invalid date format",
        "Negative value not allowed",
        "Invalid enum value"
      ]
    },
    "aiNotes": {
      "keyPoints": [
        "This is a GET endpoint for v1 operations",
        "Requires Bearer token authentication in Authorization header",
        "Returns JSON responses with consistent error format",
        "Supports standard HTTP status codes for success/error indication",
        "Rate limited to 100 requests per minute"
      ],
      "integrationTips": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting (429 errors)",
        "Cache responses when appropriate to reduce API calls",
        "Set reasonable timeouts (30 seconds recommended)",
        "Log requests and responses for debugging"
      ],
      "commonPatterns": [
        "Check authentication before making requests",
        "Validate required parameters are present",
        "Handle pagination for list endpoints",
        "Implement retry logic for transient errors",
        "Parse error responses for detailed error information"
      ],
      "aiSpecificGuidance": [
        "For AI agents: Always check response status before processing data",
        "Implement fallback strategies for API failures",
        "Use structured error handling to provide meaningful feedback",
        "Consider caching strategies for frequently accessed data",
        "Implement request queuing for high-volume operations"
      ]
    },
    "workflow": "Discovery step: Get available resources for campaign setup",
    "realWorldUsage": [
      "Managing info resources in affiliate marketing workflows",
      "Automating info operations for campaign optimization",
      "Integrating info data with external reporting systems"
    ]
  },
  "GET /public/api/v1/info/rotation": {
    "method": "GET",
    "path": "/public/api/v1/info/rotation",
    "category": "info",
    "summary": "Get Rotation Info",
    "description": "Get Rotation Info. Retrieves information from the info resource with optional filtering and pagination.",
    "parameters": [
      {
        "name": "datePreset",
        "in": "query",
        "required": true,
        "type": "string",
        "description": "Date range preset for filtering data",
        "enum": [
          "today",
          "yesterday",
          "last_2_days",
          "last_3_days",
          "last_7_days",
          "last_14_days",
          "last_30_days",
          "this_week",
          "last_week",
          "this_month",
          "last_month",
          "this_year",
          "last_year",
          "all_time",
          "custom_time"
        ],
        "example": "last_7_days",
        "validation": "Must be one of the predefined values"
      },
      {
        "name": "timezone",
        "in": "query",
        "required": true,
        "type": "string",
        "description": "Timezone for date calculations (always use UTC for consistency)",
        "example": "UTC",
        "default": "UTC",
        "validation": "Must be a valid timezone identifier"
      },
      {
        "name": "limit",
        "in": "query",
        "required": false,
        "type": "integer",
        "description": "Maximum number of records to return",
        "example": 100,
        "default": 100,
        "minimum": 1,
        "maximum": 1000,
        "validation": "Must be between 1 and 1000"
      },
      {
        "name": "offset",
        "in": "query",
        "required": false,
        "type": "integer",
        "description": "Number of records to skip for pagination",
        "example": 0,
        "default": 0,
        "minimum": 0,
        "validation": "Must be non-negative"
      },
      {
        "name": "dateFrom",
        "in": "query",
        "required": false,
        "type": "string",
        "description": "Start date for custom time range (required when datePreset=custom_time)",
        "example": "2023-01-01 00:00:00",
        "format": "YYYY-MM-DD HH:MM:SS",
        "validation": "Required when datePreset is 'custom_time'"
      },
      {
        "name": "dateTo",
        "in": "query",
        "required": false,
        "type": "string",
        "description": "End date for custom time range (required when datePreset=custom_time)",
        "example": "2023-01-31 23:59:59",
        "format": "YYYY-MM-DD HH:MM:SS",
        "validation": "Required when datePreset is 'custom_time', must be after dateFrom"
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success - List of resources returned",
        "example": {
          "data": [
            {
              "id": 1,
              "name": "Resource 1"
            },
            {
              "id": 2,
              "name": "Resource 2"
            }
          ],
          "pagination": {
            "total": 150,
            "limit": 100,
            "offset": 0,
            "hasMore": true
          }
        }
      },
      "400": {
        "description": "Bad Request - Invalid input data or missing required fields",
        "example": {
          "error": "Validation failed",
          "message": "Field 'name' is required",
          "details": {
            "field": "name",
            "code": "required",
            "value": null
          }
        }
      },
      "401": {
        "description": "Unauthorized - Invalid or missing API key",
        "example": {
          "error": "Unauthorized",
          "message": "Invalid API key or token expired"
        }
      },
      "403": {
        "description": "Forbidden - Access denied or insufficient permissions",
        "example": {
          "error": "Access denied",
          "message": "Insufficient permissions to access this resource"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Not found",
          "message": "Resource with ID 123 not found"
        }
      },
      "429": {
        "description": "Too Many Requests - Rate limit exceeded",
        "example": {
          "error": "Rate limit exceeded",
          "message": "Too many requests, please try again later",
          "retryAfter": 60
        }
      },
      "500": {
        "description": "Internal Server Error - Server-side error",
        "example": {
          "error": "Internal server error",
          "message": "Something went wrong on our end"
        }
      }
    },
    "examples": {
      "python": "import requests\nimport os\nimport time\nfrom typing import Optional, Dict, Any\n\nclass BinomAPIClient:\n    def __init__(self, api_key: str):\n        self.api_key = api_key\n        self.base_url = \"https://pierdun.com/public/api/v1\"\n        self.headers = {\n            \"Authorization\": f\"Bearer {api_key}\",\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json\"\n        }\n    \n    def make_request(self, method: str, endpoint: str, data: Optional[Dict] = None, params: Optional[Dict] = None) -> Dict[Any, Any]:\n        \"\"\"Make API request with error handling and retries\"\"\"\n        url = f\"{self.base_url}{endpoint}\"\n        \n        for attempt in range(3):\n            try:\n                response = requests.request(\n                    method=method,\n                    url=url,\n                    headers=self.headers,\n                    json=data,\n                    params=params,\n                    timeout=30\n                )\n                \n                if response.status_code == 429:\n                    # Rate limit - wait and retry\n                    time.sleep(2 ** attempt)\n                    continue\n                \n                if response.status_code in [200, 201]:\n                    return response.json()\n                else:\n                    raise Exception(f\"API Error {response.status_code}: {response.text}\")\n                    \n            except requests.exceptions.RequestException as e:\n                if attempt == 2:  # Last attempt\n                    raise Exception(f\"Request failed: {str(e)}\")\n                time.sleep(1)\n        \n        raise Exception(\"Max retries exceeded\")\n\n# Usage example\nclient = BinomAPIClient(os.getenv('binomPublic'))\n\ntry:\n    result = client.make_request(\n        method=\"GET\",\n        endpoint=\"/public/api/v1/info/rotation\",\n        params={\n            \"datePreset\": \"last_7_days\",\n            \"timezone\": \"UTC\",\n            \"limit\": 100,\n            \"offset\": 0\n        }\n    )\n    \n    print(\"✅ Success:\", result)\n    \nexcept Exception as e:\n    print(f\"❌ Error: {e}\")",
      "curl": "# Basic request\ncurl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\" \\\n  \"https://pierdun.com/public/api/v1/info/rotation\"\n\n# With query parameters\ncurl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Accept: application/json\" \\\n  \"https://pierdun.com/public/api/v1/info/rotation?datePreset=last_7_days&timezone=UTC&limit=100&offset=0\"",
      "javascript": "class BinomAPI {\n  constructor(apiKey) {\n    this.apiKey = apiKey;\n    this.baseURL = 'https://pierdun.com/public/api/v1';\n    this.headers = {\n      'Authorization': `Bearer ${apiKey}`,\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    };\n  }\n\n  async makeRequest(method, endpoint, data = null, params = null) {\n    const url = new URL(`${this.baseURL}${endpoint}`);\n    \n    if (params) {\n      Object.keys(params).forEach(key => \n        url.searchParams.append(key, params[key])\n      );\n    }\n\n    const config = {\n      method: method,\n      headers: this.headers\n    };\n\n    if (data) {\n      config.body = JSON.stringify(data);\n    }\n\n    try {\n      const response = await fetch(url.toString(), config);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${await response.text()}`);\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('API Error:', error);\n      throw error;\n    }\n  }\n}\n\n// Usage\nconst api = new BinomAPI(process.env.BINOM_API_KEY);\n\ntry {\n  const result = await api.makeRequest(\n    'GET',\n    '/public/api/v1/info/rotation',\n    null,\n    {\n      datePreset: 'last_7_days',\n      timezone: 'UTC',\n      limit: 100,\n      offset: 0\n    }\n  );\n  \n  console.log('✅ Success:', result);\n} catch (error) {\n  console.error('❌ Error:', error.message);\n}"
    },
    "errorHandling": {
      "commonErrors": [
        {
          "code": 400,
          "cause": "Invalid input data, missing required fields, or malformed JSON",
          "solution": "Validate all input data before sending. Check required fields and data types.",
          "example": "Missing 'name' field in request body"
        },
        {
          "code": 401,
          "cause": "Invalid, expired, or missing API key",
          "solution": "Verify API key is correct and has not expired. Check Authorization header format.",
          "example": "Authorization header: 'Bearer YOUR_API_KEY'"
        },
        {
          "code": 403,
          "cause": "Insufficient permissions or access denied",
          "solution": "Ensure API key has required permissions for this operation.",
          "example": "User lacks permission to modify campaigns"
        },
        {
          "code": 404,
          "cause": "Resource not found or invalid ID",
          "solution": "Verify resource ID exists and is accessible to your account.",
          "example": "Campaign with ID 123 does not exist"
        },
        {
          "code": 429,
          "cause": "Rate limit exceeded",
          "solution": "Implement exponential backoff and retry logic. Reduce request frequency.",
          "example": "Wait 60 seconds before retrying"
        },
        {
          "code": 500,
          "cause": "Internal server error",
          "solution": "Retry request after a delay. Contact support if error persists.",
          "example": "Temporary server issue"
        }
      ],
      "retryStrategy": {
        "maxRetries": 3,
        "backoffMultiplier": 2,
        "initialDelay": 1,
        "retryableStatusCodes": [
          429,
          500,
          502,
          503,
          504
        ]
      },
      "bestPractices": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting",
        "Log errors with sufficient detail for debugging",
        "Set appropriate timeouts for requests",
        "Handle network errors gracefully"
      ]
    },
    "validation": {
      "authentication": {
        "required": true,
        "type": "Bearer token",
        "header": "Authorization: Bearer YOUR_API_KEY",
        "validation": "Token must be valid and not expired"
      },
      "contentType": {
        "required": false,
        "value": "application/json",
        "header": "Content-Type: application/json"
      },
      "rateLimits": {
        "requestsPerMinute": 100,
        "burstLimit": 10,
        "enforcement": "HTTP 429 status code when exceeded"
      },
      "dataValidation": [
        "All required fields must be present and non-empty",
        "Field types must match schema definitions",
        "String fields must not exceed maximum length",
        "Numeric fields must be within specified ranges",
        "Array fields must contain valid items",
        "Date fields must be in correct format (YYYY-MM-DD HH:MM:SS)"
      ],
      "commonValidationErrors": [
        "Missing required field 'name'",
        "Invalid email format",
        "String too long (max 255 characters)",
        "Invalid date format",
        "Negative value not allowed",
        "Invalid enum value"
      ]
    },
    "aiNotes": {
      "keyPoints": [
        "This is a GET endpoint for v1 operations",
        "Requires Bearer token authentication in Authorization header",
        "Returns JSON responses with consistent error format",
        "Supports standard HTTP status codes for success/error indication",
        "Rate limited to 100 requests per minute"
      ],
      "integrationTips": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting (429 errors)",
        "Cache responses when appropriate to reduce API calls",
        "Set reasonable timeouts (30 seconds recommended)",
        "Log requests and responses for debugging"
      ],
      "commonPatterns": [
        "Check authentication before making requests",
        "Validate required parameters are present",
        "Handle pagination for list endpoints",
        "Implement retry logic for transient errors",
        "Parse error responses for detailed error information"
      ],
      "aiSpecificGuidance": [
        "For AI agents: Always check response status before processing data",
        "Implement fallback strategies for API failures",
        "Use structured error handling to provide meaningful feedback",
        "Consider caching strategies for frequently accessed data",
        "Implement request queuing for high-volume operations"
      ]
    },
    "workflow": "Discovery step: Get available resources for campaign setup",
    "realWorldUsage": [
      "Managing info resources in affiliate marketing workflows",
      "Automating info operations for campaign optimization",
      "Integrating info data with external reporting systems"
    ]
  },
  "GET /public/api/v1/info/affiliate_network": {
    "method": "GET",
    "path": "/public/api/v1/info/affiliate_network",
    "category": "info",
    "summary": "Get Affiliate Network Info",
    "description": "Get Affiliate Network Info. Retrieves information from the affiliate_network resource with optional filtering and pagination.",
    "parameters": [
      {
        "name": "datePreset",
        "in": "query",
        "required": true,
        "type": "string",
        "description": "Date range preset for filtering data",
        "enum": [
          "today",
          "yesterday",
          "last_2_days",
          "last_3_days",
          "last_7_days",
          "last_14_days",
          "last_30_days",
          "this_week",
          "last_week",
          "this_month",
          "last_month",
          "this_year",
          "last_year",
          "all_time",
          "custom_time"
        ],
        "example": "last_7_days",
        "validation": "Must be one of the predefined values"
      },
      {
        "name": "timezone",
        "in": "query",
        "required": true,
        "type": "string",
        "description": "Timezone for date calculations (always use UTC for consistency)",
        "example": "UTC",
        "default": "UTC",
        "validation": "Must be a valid timezone identifier"
      },
      {
        "name": "limit",
        "in": "query",
        "required": false,
        "type": "integer",
        "description": "Maximum number of records to return",
        "example": 100,
        "default": 100,
        "minimum": 1,
        "maximum": 1000,
        "validation": "Must be between 1 and 1000"
      },
      {
        "name": "offset",
        "in": "query",
        "required": false,
        "type": "integer",
        "description": "Number of records to skip for pagination",
        "example": 0,
        "default": 0,
        "minimum": 0,
        "validation": "Must be non-negative"
      },
      {
        "name": "dateFrom",
        "in": "query",
        "required": false,
        "type": "string",
        "description": "Start date for custom time range (required when datePreset=custom_time)",
        "example": "2023-01-01 00:00:00",
        "format": "YYYY-MM-DD HH:MM:SS",
        "validation": "Required when datePreset is 'custom_time'"
      },
      {
        "name": "dateTo",
        "in": "query",
        "required": false,
        "type": "string",
        "description": "End date for custom time range (required when datePreset=custom_time)",
        "example": "2023-01-31 23:59:59",
        "format": "YYYY-MM-DD HH:MM:SS",
        "validation": "Required when datePreset is 'custom_time', must be after dateFrom"
      }
    ],
    "requestBody": null,
    "responses": {
      "200": {
        "description": "Success - List of resources returned",
        "example": {
          "data": [
            {
              "id": 1,
              "name": "Resource 1"
            },
            {
              "id": 2,
              "name": "Resource 2"
            }
          ],
          "pagination": {
            "total": 150,
            "limit": 100,
            "offset": 0,
            "hasMore": true
          }
        }
      },
      "400": {
        "description": "Bad Request - Invalid input data or missing required fields",
        "example": {
          "error": "Validation failed",
          "message": "Field 'name' is required",
          "details": {
            "field": "name",
            "code": "required",
            "value": null
          }
        }
      },
      "401": {
        "description": "Unauthorized - Invalid or missing API key",
        "example": {
          "error": "Unauthorized",
          "message": "Invalid API key or token expired"
        }
      },
      "403": {
        "description": "Forbidden - Access denied or insufficient permissions",
        "example": {
          "error": "Access denied",
          "message": "Insufficient permissions to access this resource"
        }
      },
      "404": {
        "description": "Not Found - Resource not found",
        "example": {
          "error": "Not found",
          "message": "Resource with ID 123 not found"
        }
      },
      "429": {
        "description": "Too Many Requests - Rate limit exceeded",
        "example": {
          "error": "Rate limit exceeded",
          "message": "Too many requests, please try again later",
          "retryAfter": 60
        }
      },
      "500": {
        "description": "Internal Server Error - Server-side error",
        "example": {
          "error": "Internal server error",
          "message": "Something went wrong on our end"
        }
      }
    },
    "examples": {
      "python": "import requests\nimport os\nimport time\nfrom typing import Optional, Dict, Any\n\nclass BinomAPIClient:\n    def __init__(self, api_key: str):\n        self.api_key = api_key\n        self.base_url = \"https://pierdun.com/public/api/v1\"\n        self.headers = {\n            \"Authorization\": f\"Bearer {api_key}\",\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json\"\n        }\n    \n    def make_request(self, method: str, endpoint: str, data: Optional[Dict] = None, params: Optional[Dict] = None) -> Dict[Any, Any]:\n        \"\"\"Make API request with error handling and retries\"\"\"\n        url = f\"{self.base_url}{endpoint}\"\n        \n        for attempt in range(3):\n            try:\n                response = requests.request(\n                    method=method,\n                    url=url,\n                    headers=self.headers,\n                    json=data,\n                    params=params,\n                    timeout=30\n                )\n                \n                if response.status_code == 429:\n                    # Rate limit - wait and retry\n                    time.sleep(2 ** attempt)\n                    continue\n                \n                if response.status_code in [200, 201]:\n                    return response.json()\n                else:\n                    raise Exception(f\"API Error {response.status_code}: {response.text}\")\n                    \n            except requests.exceptions.RequestException as e:\n                if attempt == 2:  # Last attempt\n                    raise Exception(f\"Request failed: {str(e)}\")\n                time.sleep(1)\n        \n        raise Exception(\"Max retries exceeded\")\n\n# Usage example\nclient = BinomAPIClient(os.getenv('binomPublic'))\n\ntry:\n    result = client.make_request(\n        method=\"GET\",\n        endpoint=\"/public/api/v1/info/affiliate_network\",\n        params={\n            \"datePreset\": \"last_7_days\",\n            \"timezone\": \"UTC\",\n            \"limit\": 100,\n            \"offset\": 0\n        }\n    )\n    \n    print(\"✅ Success:\", result)\n    \nexcept Exception as e:\n    print(f\"❌ Error: {e}\")",
      "curl": "# Basic request\ncurl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\" \\\n  \"https://pierdun.com/public/api/v1/info/affiliate_network\"\n\n# With query parameters\ncurl -X GET \\\n  -H \"Authorization: Bearer $BINOM_API_KEY\" \\\n  -H \"Accept: application/json\" \\\n  \"https://pierdun.com/public/api/v1/info/affiliate_network?datePreset=last_7_days&timezone=UTC&limit=100&offset=0\"",
      "javascript": "class BinomAPI {\n  constructor(apiKey) {\n    this.apiKey = apiKey;\n    this.baseURL = 'https://pierdun.com/public/api/v1';\n    this.headers = {\n      'Authorization': `Bearer ${apiKey}`,\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    };\n  }\n\n  async makeRequest(method, endpoint, data = null, params = null) {\n    const url = new URL(`${this.baseURL}${endpoint}`);\n    \n    if (params) {\n      Object.keys(params).forEach(key => \n        url.searchParams.append(key, params[key])\n      );\n    }\n\n    const config = {\n      method: method,\n      headers: this.headers\n    };\n\n    if (data) {\n      config.body = JSON.stringify(data);\n    }\n\n    try {\n      const response = await fetch(url.toString(), config);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${await response.text()}`);\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('API Error:', error);\n      throw error;\n    }\n  }\n}\n\n// Usage\nconst api = new BinomAPI(process.env.BINOM_API_KEY);\n\ntry {\n  const result = await api.makeRequest(\n    'GET',\n    '/public/api/v1/info/affiliate_network',\n    null,\n    {\n      datePreset: 'last_7_days',\n      timezone: 'UTC',\n      limit: 100,\n      offset: 0\n    }\n  );\n  \n  console.log('✅ Success:', result);\n} catch (error) {\n  console.error('❌ Error:', error.message);\n}"
    },
    "errorHandling": {
      "commonErrors": [
        {
          "code": 400,
          "cause": "Invalid input data, missing required fields, or malformed JSON",
          "solution": "Validate all input data before sending. Check required fields and data types.",
          "example": "Missing 'name' field in request body"
        },
        {
          "code": 401,
          "cause": "Invalid, expired, or missing API key",
          "solution": "Verify API key is correct and has not expired. Check Authorization header format.",
          "example": "Authorization header: 'Bearer YOUR_API_KEY'"
        },
        {
          "code": 403,
          "cause": "Insufficient permissions or access denied",
          "solution": "Ensure API key has required permissions for this operation.",
          "example": "User lacks permission to modify campaigns"
        },
        {
          "code": 404,
          "cause": "Resource not found or invalid ID",
          "solution": "Verify resource ID exists and is accessible to your account.",
          "example": "Campaign with ID 123 does not exist"
        },
        {
          "code": 429,
          "cause": "Rate limit exceeded",
          "solution": "Implement exponential backoff and retry logic. Reduce request frequency.",
          "example": "Wait 60 seconds before retrying"
        },
        {
          "code": 500,
          "cause": "Internal server error",
          "solution": "Retry request after a delay. Contact support if error persists.",
          "example": "Temporary server issue"
        }
      ],
      "retryStrategy": {
        "maxRetries": 3,
        "backoffMultiplier": 2,
        "initialDelay": 1,
        "retryableStatusCodes": [
          429,
          500,
          502,
          503,
          504
        ]
      },
      "bestPractices": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting",
        "Log errors with sufficient detail for debugging",
        "Set appropriate timeouts for requests",
        "Handle network errors gracefully"
      ]
    },
    "validation": {
      "authentication": {
        "required": true,
        "type": "Bearer token",
        "header": "Authorization: Bearer YOUR_API_KEY",
        "validation": "Token must be valid and not expired"
      },
      "contentType": {
        "required": false,
        "value": "application/json",
        "header": "Content-Type: application/json"
      },
      "rateLimits": {
        "requestsPerMinute": 100,
        "burstLimit": 10,
        "enforcement": "HTTP 429 status code when exceeded"
      },
      "dataValidation": [
        "All required fields must be present and non-empty",
        "Field types must match schema definitions",
        "String fields must not exceed maximum length",
        "Numeric fields must be within specified ranges",
        "Array fields must contain valid items",
        "Date fields must be in correct format (YYYY-MM-DD HH:MM:SS)"
      ],
      "commonValidationErrors": [
        "Missing required field 'name'",
        "Invalid email format",
        "String too long (max 255 characters)",
        "Invalid date format",
        "Negative value not allowed",
        "Invalid enum value"
      ]
    },
    "aiNotes": {
      "keyPoints": [
        "This is a GET endpoint for v1 operations",
        "Requires Bearer token authentication in Authorization header",
        "Returns JSON responses with consistent error format",
        "Supports standard HTTP status codes for success/error indication",
        "Rate limited to 100 requests per minute"
      ],
      "integrationTips": [
        "Always validate input data before making requests",
        "Implement proper error handling for all status codes",
        "Use exponential backoff for rate limiting (429 errors)",
        "Cache responses when appropriate to reduce API calls",
        "Set reasonable timeouts (30 seconds recommended)",
        "Log requests and responses for debugging"
      ],
      "commonPatterns": [
        "Check authentication before making requests",
        "Validate required parameters are present",
        "Handle pagination for list endpoints",
        "Implement retry logic for transient errors",
        "Parse error responses for detailed error information"
      ],
      "aiSpecificGuidance": [
        "For AI agents: Always check response status before processing data",
        "Implement fallback strategies for API failures",
        "Use structured error handling to provide meaningful feedback",
        "Consider caching strategies for frequently accessed data",
        "Implement request queuing for high-volume operations"
      ]
    },
    "workflow": "Discovery step: Get available resources for campaign setup",
    "realWorldUsage": [
      "Managing info resources in affiliate marketing workflows",
      "Automating info operations for campaign optimization",
      "Integrating info data with external reporting systems"
    ]
  }
}